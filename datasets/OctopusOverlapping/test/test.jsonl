{"query": "Can you show me how to take a selfie using the front camera?", "query_for_retrieval": "Can you show me how to take a selfie using the front camera?", "answer": "take_a_photo('front')", "answer_params": "'front'", "api_description": "def take_a_photo(camera):\n    \"\"\"\n    Captures a photo using the specified camera and resolution settings.\n\n    Parameters:\n    - camera (str): Specifies the camera to use. Can be 'front' or 'back'. The default is 'back'.\n\n    Returns:\n    - str: The string contains the file path of the captured photo if successful, or an error message if not. Example: '/storage/emulated/0/Pictures/MyApp/IMG_20240310_123456.jpg'\n    \"\"\"", "api_params": ""}
{"query": "Can you show me how to take a selfie using the front camera?", "query_for_retrieval": "Can you show me how to take a selfie using the front camera?", "answer": "take_a_photo('front')", "answer_params": "'front'", "api_description": "def take_a_photo(camera):\n    \"\"\"\n    Captures a photo using the specified camera and resolution settings.\n\n    Parameters:\n    - camera (str): Specifies the camera to use. Can be 'front' or 'back'. The default is 'back'.\n\n    Returns:\n    - str: The string contains the file path of the captured photo if successful, or an error message if not. Example: '/storage/emulated/0/Pictures/MyApp/IMG_20240310_123456.jpg'\n    \"\"\"", "api_params": ""}
{"query": "Please set a timer alarm for 08:00 with the label 'Daily Meditation' to start my day with mindfulness.", "query_for_retrieval": "Please set a timer alarm for 08:00 with the label 'Daily Meditation' to start my day with mindfulness.", "answer": "set_timer_alarm('08:00', 'Daily Meditation')", "answer_params": "'08:00', 'Daily Meditation'", "api_description": "def set_timer_alarm(time, label):\n    \"\"\"\n    Sets a timer or alarm for a specified time.\n\n    Parameters:\n    - time (str): Alarm time in \"HH:MM\" 24-hour format. For example, \"07:12\" for 7:12 AM.\n    - label (str): Custom label for the alarm, default is \"alarm\".\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Can you set an alarm for 17:00 with the label 'Workout Time'?", "query_for_retrieval": "Can you set an alarm for 17:00 with the label 'Workout Time'?", "answer": "set_timer_alarm('17:00', 'Workout Time')", "answer_params": "'17:00', 'Workout Time'", "api_description": "def set_timer_alarm(time, label):\n    \"\"\"\n    Sets a timer or alarm for a specified time.\n\n    Parameters:\n    - time (str): Alarm time in \"HH:MM\" 24-hour format. For example, \"07:12\" for 7:12 AM.\n    - label (str): Custom label for the alarm, default is \"alarm\".\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "I enjoy a slightly brighter screen in the morning, can you set it to level 6?", "query_for_retrieval": "I enjoy a slightly brighter screen in the morning, can you set it to level 6?", "answer": "change_screen_brightness(6)", "answer_params": "6", "api_description": "def change_screen_brightness(level):\n    \"\"\"\n    Adjust the device's screen brightness level.\n\n    Parameters:\n    - level (int): Desired brightness level, on a scale from 0 (minimum) to 10 (maximum).\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "What's the command to change the screen brightness to 5, a medium level, for balanced battery usage?", "query_for_retrieval": "What's the command to change the screen brightness to 5, a medium level, for balanced battery usage?", "answer": "change_screen_brightness(5)", "answer_params": "5", "api_description": "def change_screen_brightness(level):\n    \"\"\"\n    Adjust the device's screen brightness level.\n\n    Parameters:\n    - level (int): Desired brightness level, on a scale from 0 (minimum) to 10 (maximum).\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Can you schedule a calendar event with the title 'Team Meeting' starting on '2023-05-15-14-00' and ending at '2023-05-15-15-00'?", "query_for_retrieval": "Can you schedule a calendar event with the title 'Team Meeting' starting on '2023-05-15-14-00' and ending at '2023-05-15-15-00'?", "answer": "create_calendar_event('Team Meeting', '2023-05-15-14-00', '2023-05-15-15-00')", "answer_params": "'Team Meeting', '2023-05-15-14-00', '2023-05-15-15-00'", "api_description": "def create_calendar_event(title, start_time, end_time):\n    \"\"\"\n    Schedules a new event in the calendar.\n\n    Parameters:\n    - title (str): Event title.\n    - start_time (str): Event start time as a string in ISO 8601 format \"YYYY-MM-DD-HH-MM\". For example, \"2022-12-31-23-59\" for 11:59 PM on December 31, 2022.\n    - end_time (str): Event end time as a string in ISO 8601 format \"YYYY-MM-DD-HH-MM\". Must be after start_time. For example, \"2023-01-01-00-00\" for 12:00 AM on January 1, 2023.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "I need to add 'Lunch with Sarah' to my calendar, starting on 2023-07-22-13-00 and ending on 2023-07-22-14-00. How do I do it?", "query_for_retrieval": "I need to add 'Lunch with Sarah' to my calendar, starting on 2023-07-22-13-00 and ending on 2023-07-22-14-00. How do I do it?", "answer": "create_calendar_event('Lunch with Sarah', '2023-07-22-13-00', '2023-07-22-14-00')", "answer_params": "'Lunch with Sarah', '2023-07-22-13-00', '2023-07-22-14-00'", "api_description": "def create_calendar_event(title, start_time, end_time):\n    \"\"\"\n    Schedules a new event in the calendar.\n\n    Parameters:\n    - title (str): Event title.\n    - start_time (str): Event start time as a string in ISO 8601 format \"YYYY-MM-DD-HH-MM\". For example, \"2022-12-31-23-59\" for 11:59 PM on December 31, 2022.\n    - end_time (str): Event end time as a string in ISO 8601 format \"YYYY-MM-DD-HH-MM\". Must be after start_time. For example, \"2023-01-01-00-00\" for 12:00 AM on January 1, 2023.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Could you set the media volume to 5 for a balanced audio experience during my movie tonight?", "query_for_retrieval": "Could you set the media volume to 5 for a balanced audio experience during my movie tonight?", "answer": "set_volume(5, 'media')", "answer_params": "5, 'media'", "api_description": "def set_volume(level, volume_type):\n    \"\"\"\n    Sets the volume level for a specified type : \"ring\" , \"media\" , \"alarm\".\n\n    Parameters:\n    - level (int): Target volume level, from 0 (mute) to 10 (maximum).\n    - volume_type (enum): The category of volume to adjust, select from \"ring\" , \"media\" , \"alarm\".\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "I'd like to mute the media volume while at work.", "query_for_retrieval": "I'd like to mute the media volume while at work.", "answer": "set_volume(0, 'media')", "answer_params": "0, 'media'", "api_description": "def set_volume(level, volume_type):\n    \"\"\"\n    Sets the volume level for a specified type : \"ring\" , \"media\" , \"alarm\".\n\n    Parameters:\n    - level (int): Target volume level, from 0 (mute) to 10 (maximum).\n    - volume_type (enum): The category of volume to adjust, select from \"ring\" , \"media\" , \"alarm\".\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Can you try connecting to my Bose SoundLink speaker? I believe it's named 'Bose-SL'. Please give it up to 20 seconds.", "query_for_retrieval": "Can you try connecting to my Bose SoundLink speaker? I believe it's named 'Bose-SL'. Please give it up to 20 seconds.", "answer": "connect_to_bluetooth_device('Bose-SL', 20)", "answer_params": "'Bose-SL', 20", "api_description": "def connect_to_bluetooth_device(device_name, timeout):\n    \"\"\"\n    Attempts to connect to a specified Bluetooth device within a given timeout.\n\n    Parameters:\n    - device_name (str): The name of the Bluetooth device to connect to.\n    - timeout (int): The maximum time, in seconds, to attempt a connection. The default is 10 seconds.\n\n    Returns:\n    - bool: Returns True if the device was successfully connected within the timeout period, False otherwise.\n    \"\"\"", "api_params": ""}
{"query": "Try connecting to 'UE Boom 3' with the shortest possible timeout. How about 3 seconds?", "query_for_retrieval": "Try connecting to 'UE Boom 3' with the shortest possible timeout. How about 3 seconds?", "answer": "connect_to_bluetooth_device('UE Boom 3', 3)", "answer_params": "'UE Boom 3', 3", "api_description": "def connect_to_bluetooth_device(device_name, timeout):\n    \"\"\"\n    Attempts to connect to a specified Bluetooth device within a given timeout.\n\n    Parameters:\n    - device_name (str): The name of the Bluetooth device to connect to.\n    - timeout (int): The maximum time, in seconds, to attempt a connection. The default is 10 seconds.\n\n    Returns:\n    - bool: Returns True if the device was successfully connected within the timeout period, False otherwise.\n    \"\"\"", "api_params": ""}
{"query": "I'm entering a meeting; could you enable Do Not Disturb?", "query_for_retrieval": "I'm entering a meeting; could you enable Do Not Disturb?", "answer": "enable_do_not_disturb(True)", "answer_params": "True", "api_description": "def enable_do_not_disturb(enabled):\n    \"\"\"\n    Toggles the Do Not Disturb mode on or off.\n\n    Parameters:\n    - enabled (bool): True to enable, False to disable Do Not Disturb mode.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Before my nap, can you ensure Do Not Disturb is on?", "query_for_retrieval": "Before my nap, can you ensure Do Not Disturb is on?", "answer": "enable_do_not_disturb(True)", "answer_params": "True", "api_description": "def enable_do_not_disturb(enabled):\n    \"\"\"\n    Toggles the Do Not Disturb mode on or off.\n\n    Parameters:\n    - enabled (bool): True to enable, False to disable Do Not Disturb mode.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "My plants are sensitive to cold; can the living area be maintained at 77 degrees?", "query_for_retrieval": "My plants are sensitive to cold; can the living area be maintained at 77 degrees?", "answer": "set_nest_temperature(77)", "answer_params": "77", "api_description": "def set_nest_temperature(target_temperature):\n    \"\"\"\n    Sets a Nest Thermostat to a desired temperature.\n\n    Parameters:\n    - target_temperature (float): Target temperature in degrees Fahrenheit, ranging from 50 to 90.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Adjust the Nest to 70 degrees, please. I want to keep the house comfortable for the guests arriving.", "query_for_retrieval": "Adjust the Nest to 70 degrees, please. I want to keep the house comfortable for the guests arriving.", "answer": "set_nest_temperature(70)", "answer_params": "70", "api_description": "def set_nest_temperature(target_temperature):\n    \"\"\"\n    Sets a Nest Thermostat to a desired temperature.\n\n    Parameters:\n    - target_temperature (float): Target temperature in degrees Fahrenheit, ranging from 50 to 90.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Can you play the 'Top Hits 2023' playlist from Spotify on my Nest Hub?", "query_for_retrieval": "Can you play the 'Top Hits 2023' playlist from Spotify on my Nest Hub?", "answer": "play_music_on_nest_hub('Spotify', 'Top Hits 2023')", "answer_params": "'Spotify', 'Top Hits 2023'", "api_description": "def play_music_on_nest_hub(music_service, music_name):\n    \"\"\"\n    Streams music on a Google Nest Audio device from a specified service.\n\n    Parameters:\n    - music_service (str): Music streaming service name.\n    - music_name (str): Playlist name to play.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "I would love to hear '90s Hip Hop' music from Tidal on my Nest Hub.", "query_for_retrieval": "I would love to hear '90s Hip Hop' music from Tidal on my Nest Hub.", "answer": "play_music_on_nest_hub('Tidal', '90s Hip Hop')", "answer_params": "'Tidal', '90s Hip Hop'", "api_description": "def play_music_on_nest_hub(music_service, music_name):\n    \"\"\"\n    Streams music on a Google Nest Audio device from a specified service.\n\n    Parameters:\n    - music_service (str): Music streaming service name.\n    - music_name (str): Playlist name to play.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Please, play workout videos from 'FitnessBlender' on YouTube on my Nest Hub.", "query_for_retrieval": "Please, play workout videos from 'FitnessBlender' on YouTube on my Nest Hub.", "answer": "play_video_on_nest_hub('YouTube', 'FitnessBlender workout videos')", "answer_params": "'YouTube', 'FitnessBlender workout videos'", "api_description": "def play_video_on_nest_hub(video_service, video_name):\n    \"\"\"\n    Streams video on a Google Nest Hub device from a specified service.\n\n    Parameters:\n    - video_service (str): Video streaming service name.\n    - video_name (str): Video playlist name to play.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Play the 'Workout Mix' video playlist from Apple Music on my Google Nest Hub.", "query_for_retrieval": "Play the 'Workout Mix' video playlist from Apple Music on my Google Nest Hub.", "answer": "play_video_on_nest_hub('Apple Music', 'Workout Mix')", "answer_params": "'Apple Music', 'Workout Mix'", "api_description": "def play_video_on_nest_hub(video_service, video_name):\n    \"\"\"\n    Streams video on a Google Nest Hub device from a specified service.\n\n    Parameters:\n    - video_service (str): Video streaming service name.\n    - video_name (str): Video playlist name to play.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Please lock all doors at 10 pm every night for security.", "query_for_retrieval": "Please lock all doors at 10 pm every night for security.", "answer": "open_or_lock_door('lock')", "answer_params": "'lock'", "api_description": "def open_or_lock_door(status):\n    \"\"\"\n    Opens or locks a door using a Google-compatible smart lock.\n\n    Parameters:\n    - status (enum): Desired action, chosen from 'open' or 'lock'.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "We are going on vacation and want to make sure the house is secure. Could you double-check if all doors are locked?", "query_for_retrieval": "We are going on vacation and want to make sure the house is secure. Could you double-check if all doors are locked?", "answer": "open_or_lock_door('lock')", "answer_params": "'lock'", "api_description": "def open_or_lock_door(status):\n    \"\"\"\n    Opens or locks a door using a Google-compatible smart lock.\n\n    Parameters:\n    - status (enum): Desired action, chosen from 'open' or 'lock'.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Look for trending news on cryptocurrency market movements, with information provided in Japanese", "query_for_retrieval": "Look for trending news on cryptocurrency market movements, with information provided in Japanese", "answer": "get_trending_news('cryptocurrency', 'ja')", "answer_params": "'cryptocurrency', 'ja'", "api_description": "def get_trending_news(query, language):\n    \"\"\"\n    Retrieves a collection of trending news articles relevant to a specified query and language.\n\n    Parameters:\n    - query (str): Topic for news articles.\n    - language (str): ISO 639-1 language code. The default language is English ('en'), but it can be set to any valid ISO 639-1 code to accommodate different language preferences (e.g., 'es' for Spanish, 'fr' for French).\n\n    Returns:\n    - list[str]: A list of strings, where each string represents a single news article. Each article representation includes the article's title and its URL, allowing users to easily access the full article for detailed information.\n    \"\"\"", "api_params": ""}
{"query": "Request trending news articles about climate change in English", "query_for_retrieval": "Request trending news articles about climate change in English", "answer": "get_trending_news('climate change', 'en')", "answer_params": "'climate change', 'en'", "api_description": "def get_trending_news(query, language):\n    \"\"\"\n    Retrieves a collection of trending news articles relevant to a specified query and language.\n\n    Parameters:\n    - query (str): Topic for news articles.\n    - language (str): ISO 639-1 language code. The default language is English ('en'), but it can be set to any valid ISO 639-1 code to accommodate different language preferences (e.g., 'es' for Spanish, 'fr' for French).\n\n    Returns:\n    - list[str]: A list of strings, where each string represents a single news article. Each article representation includes the article's title and its URL, allowing users to easily access the full article for detailed information.\n    \"\"\"", "api_params": ""}
{"query": "Can I get a 7-day weather forecast for Toronto? Need it for a planned vacation.", "query_for_retrieval": "Can I get a 7-day weather forecast for Toronto? Need it for a planned vacation.", "answer": "get_weather_forecast('Toronto')", "answer_params": "'Toronto'", "api_description": "def get_weather_forecast(location):\n    \"\"\"\n    Provides a weather forecast for a specified location over a given number of days. Each day's forecast includes a brief description of the expected weather conditions.\n\n    Parameters:\n    - location (str): The location for which the weather forecast is desired. Can be a city name, ZIP code, or other location identifiers.\n\n    Returns:\n    - list[str]: A list of strings, each representing the weather forecast for one day. Each string includes the date and a brief description of the weather conditions. Formatted in 'YYYY-MM-DD: Description' format.\n    \"\"\"", "api_params": ""}
{"query": "Is it going to be sunny in Rio de Janeiro during the Carnival next year?", "query_for_retrieval": "Is it going to be sunny in Rio de Janeiro during the Carnival next year?", "answer": "get_weather_forecast('Rio de Janeiro')", "answer_params": "'Rio de Janeiro'", "api_description": "def get_weather_forecast(location):\n    \"\"\"\n    Provides a weather forecast for a specified location over a given number of days. Each day's forecast includes a brief description of the expected weather conditions.\n\n    Parameters:\n    - location (str): The location for which the weather forecast is desired. Can be a city name, ZIP code, or other location identifiers.\n\n    Returns:\n    - list[str]: A list of strings, each representing the weather forecast for one day. Each string includes the date and a brief description of the weather conditions. Formatted in 'YYYY-MM-DD: Description' format.\n    \"\"\"", "api_params": ""}
{"query": "Notify a customer about their order shipment with recipient 'customer123@example.com' and title 'Your Order Has Been Shipped!' and content 'Hello! Your order #456789 has been dispatched and will reach you within 3-5 working days.'", "query_for_retrieval": "Notify a customer about their order shipment with recipient 'customer123@example.com' and title 'Your Order Has Been Shipped!' and content 'Hello! Your order #456789 has been dispatched and will reach you within 3-5 working days.'", "answer": "send_email('customer123@example.com', 'Your Order Has Been Shipped!', 'Hello! Your order #456789 has been dispatched and will reach you within 3-5 working days.')", "answer_params": "'customer123@example.com', 'Your Order Has Been Shipped!', 'Hello! Your order #456789 has been dispatched and will reach you within 3-5 working days.'", "api_description": "def send_email(recipient, title, content):\n    \"\"\"\n    Sends an email to a specified recipient with a given title and content.\n\n    Parameters:\n    - recipient (str): The email address of the recipient.\n    - title (str): The subject line of the email. This is a brief summary or title of the email's purpose or content.\n    - content (str): The main body text of the email. It contains the primary message, information, or content that is intended to be communicated to the recipient.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Send seasonal greetings to clients and partners with recipient 'valuedclient@example.com' and title 'Happy Holidays from All of Us!' and content 'Wishing you a joyous holiday season and a prosperous New Year. Thanks for your continued support.'", "query_for_retrieval": "Send seasonal greetings to clients and partners with recipient 'valuedclient@example.com' and title 'Happy Holidays from All of Us!' and content 'Wishing you a joyous holiday season and a prosperous New Year. Thanks for your continued support.'", "answer": "send_email('valuedclient@example.com', 'Happy Holidays from All of Us!', 'Wishing you a joyous holiday season and a prosperous New Year. Thanks for your continued support.')", "answer_params": "'valuedclient@example.com', 'Happy Holidays from All of Us!', 'Wishing you a joyous holiday season and a prosperous New Year. Thanks for your continued support.'", "api_description": "def send_email(recipient, title, content):\n    \"\"\"\n    Sends an email to a specified recipient with a given title and content.\n\n    Parameters:\n    - recipient (str): The email address of the recipient.\n    - title (str): The subject line of the email. This is a brief summary or title of the email's purpose or content.\n    - content (str): The main body text of the email. It contains the primary message, information, or content that is intended to be communicated to the recipient.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Looking for live performances by BTS from their latest tour.", "query_for_retrieval": "Looking for live performances by BTS from their latest tour.", "answer": "search_youtube_videos('live performances by BTS from their latest tour')", "answer_params": "'live performances by BTS from their latest tour'", "api_description": "def search_youtube_videos(query):\n    \"\"\"\n    Searches YouTube for videos matching a query.\n\n    Parameters:\n    - query (str): Search query.\n\n    Returns:\n    - list[str]: A list of strings, each string includes video names and URLs.\n    \"\"\"", "api_params": ""}
{"query": "Find 'live coding streams' happening now on YouTube.", "query_for_retrieval": "Find 'live coding streams' happening now on YouTube.", "answer": "search_youtube_videos('live coding streams happening now')", "answer_params": "'live coding streams happening now'", "api_description": "def search_youtube_videos(query):\n    \"\"\"\n    Searches YouTube for videos matching a query.\n\n    Parameters:\n    - query (str): Search query.\n\n    Returns:\n    - list[str]: A list of strings, each string includes video names and URLs.\n    \"\"\"", "api_params": ""}
{"query": "Find a walking route from Sydney Opera House to the Sydney Harbour Bridge with the least amount of stairs.", "query_for_retrieval": "Find a walking route from Sydney Opera House to the Sydney Harbour Bridge with the least amount of stairs.", "answer": "find_route_google_maps('Sydney Opera House', 'Sydney Harbour Bridge', 'walking')", "answer_params": "'Sydney Opera House', 'Sydney Harbour Bridge', 'walking'", "api_description": "def find_route_google_maps(origin, destination, mode):\n    \"\"\"\n    Computes a route using Google Maps from an origin to a destination.\n\n    Parameters:\n    - origin (str): Starting location.\n    - destination (str): Target location.\n    - mode (enum): Mode of transportation, options include 'driving', 'walking', 'bicycling', and 'transit'. The default mode is 'driving'.\n\n    Returns:\n    - List[str]:  The string provides the route details.\n    \"\"\"", "api_params": ""}
{"query": "Could you find a walking route that takes me from Buckingham Palace to the British Museum?", "query_for_retrieval": "Could you find a walking route that takes me from Buckingham Palace to the British Museum?", "answer": "find_route_google_maps('Buckingham Palace', 'British Museum', 'walking')", "answer_params": "'Buckingham Palace', 'British Museum', 'walking'", "api_description": "def find_route_google_maps(origin, destination, mode):\n    \"\"\"\n    Computes a route using Google Maps from an origin to a destination.\n\n    Parameters:\n    - origin (str): Starting location.\n    - destination (str): Target location.\n    - mode (enum): Mode of transportation, options include 'driving', 'walking', 'bicycling', and 'transit'. The default mode is 'driving'.\n\n    Returns:\n    - List[str]:  The string provides the route details.\n    \"\"\"", "api_params": ""}
{"query": "I need guidance on assessing the connectivity status of my Nest Smoke Detector. How do I go about it?", "query_for_retrieval": "I need guidance on assessing the connectivity status of my Nest Smoke Detector. How do I go about it?", "answer": "check_nest_smoke_detector_status()", "answer_params": "", "api_description": "def check_nest_smoke_detector_status():\n    \"\"\"\n    Check the current status of a Nest Smoke Detector.\n\n    Parameters:\n\n    Returns:\n    - str: A message with the detailed smoke detector status. This message includes information about battery level, sensor functionality, and connectivity status.\n    \"\"\"", "api_params": ""}
{"query": "Is my Nest Smoke Detector connected properly to my network? I'm looking for a connectivity status report.", "query_for_retrieval": "Is my Nest Smoke Detector connected properly to my network? I'm looking for a connectivity status report.", "answer": "check_nest_smoke_detector_status()", "answer_params": "", "api_description": "def check_nest_smoke_detector_status():\n    \"\"\"\n    Check the current status of a Nest Smoke Detector.\n\n    Parameters:\n\n    Returns:\n    - str: A message with the detailed smoke detector status. This message includes information about battery level, sensor functionality, and connectivity status.\n    \"\"\"", "api_params": ""}
{"query": "Can you send a text to the contact named Sam? It should read 'The game starts at 8 PM. Are we still meeting at yours?'", "query_for_retrieval": "Can you send a text to the contact named Sam? It should read 'The game starts at 8 PM. Are we still meeting at yours?'", "answer": "send_text_message('Sam', 'The game starts at 8 PM. Are we still meeting at yours?')", "answer_params": "'Sam', 'The game starts at 8 PM. Are we still meeting at yours?'", "api_description": "def send_text_message(contact_name, message):\n    \"\"\"\n    Sends a text message to the specified contact.\n\n    Parameters:\n    - contact_name (str): The name of the recipient contact.\n    - message (str): The content of the message to be sent. This is what the recipient will receive.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Send a message to Dr. Smith, 'I wanted to confirm my appointment for this Friday at 10 AM. Is that still okay?'", "query_for_retrieval": "Send a message to Dr. Smith, 'I wanted to confirm my appointment for this Friday at 10 AM. Is that still okay?'", "answer": "send_text_message('Dr. Smith', 'I wanted to confirm my appointment for this Friday at 10 AM. Is that still okay?')", "answer_params": "'Dr. Smith', 'I wanted to confirm my appointment for this Friday at 10 AM. Is that still okay?'", "api_description": "def send_text_message(contact_name, message):\n    \"\"\"\n    Sends a text message to the specified contact.\n\n    Parameters:\n    - contact_name (str): The name of the recipient contact.\n    - message (str): The content of the message to be sent. This is what the recipient will receive.\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "{'description': 'Make a phone call to a friend in the US.', 'arguments': {'phone_number': '+11234567890'}}", "query_for_retrieval": "{'description': 'Make a phone call to a friend in the US.', 'arguments': {'phone_number': '+11234567890'}}", "answer": "make_phone_call('+11234567890')", "answer_params": "'+11234567890'", "api_description": "def make_phone_call(phone_number):\n    \"\"\"\n    Initiates a phone call to the given phone number. It can handle both international and domestic numbers.\n\n    Parameters:\n    - phone_number (str): phone number of the contact. The phone number should be provided in a standard format, preferably in E.164 format (e.g., +12345678900 for an international format).\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Could you demonstrate making a call to a standard US number like +13015550101 for customer service support?", "query_for_retrieval": "Could you demonstrate making a call to a standard US number like +13015550101 for customer service support?", "answer": "make_phone_call('+13015550101')", "answer_params": "'+13015550101'", "api_description": "def make_phone_call(phone_number):\n    \"\"\"\n    Initiates a phone call to the given phone number. It can handle both international and domestic numbers.\n\n    Parameters:\n    - phone_number (str): phone number of the contact. The phone number should be provided in a standard format, preferably in E.164 format (e.g., +12345678900 for an international format).\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Can you add John Doe with the phone number +11234567890 to my address book?", "query_for_retrieval": "Can you add John Doe with the phone number +11234567890 to my address book?", "answer": "create_contact('John Doe', '+11234567890')", "answer_params": "'John Doe', '+11234567890'", "api_description": "def create_contact(name, phone_number):\n    \"\"\"\n    Creates a new contact entry in the device's address book.\n\n    Parameters:\n    - name (str): Full name of the contact. This should include first and last name.\n    - phone_number (str): phone number of the contact. The phone number should be provided in a standard format, preferably in E.164 format (e.g., +12345678900 for an international format).\n\n    Returns:\n    \"\"\"", "api_params": ""}
{"query": "Store the contact info of my personal trainer, Alex Strong, with their number being +10987654321.", "query_for_retrieval": "Store the contact info of my personal trainer, Alex Strong, with their number being +10987654321.", "answer": "create_contact('Alex Strong', '+10987654321')", "answer_params": "'Alex Strong', '+10987654321'", "api_description": "def create_contact(name, phone_number):\n    \"\"\"\n    Creates a new contact entry in the device's address book.\n\n    Parameters:\n    - name (str): Full name of the contact. This should include first and last name.\n    - phone_number (str): phone number of the contact. The phone number should be provided in a standard format, preferably in E.164 format (e.g., +12345678900 for an international format).\n\n    Returns:\n    \"\"\"", "api_params": ""}
