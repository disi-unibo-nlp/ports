{"scope": "parallel_function", "query": "You are working in a lab and you have a sealed container with a gauge pressure of 2.5 atm. You are located at sea level where the atmospheric pressure is 1 atm. However, you need to transport the container to a high-altitude location where the atmospheric pressure is 0.85 atm. What will be the absolute pressure of the container at sea level and at the high-altitude location?", "query_for_retrieval": "You are working in a lab and you have a sealed container with a gauge pressure of 2.5 atm. You are located at sea level where the atmospheric pressure is 1 atm. However, you need to transport the container to a high-altitude location where the atmospheric pressure is 0.85 atm. What will be the absolute pressure of the container at sea level and at the high-altitude location?", "answer": "calc_absolute_pressure", "answer_params": "", "api_description": "def calc_absolute_pressure:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the absolute pressure from gauge and atmospheric pressures.\n\t\n\tArguments:\n\t---------\n\t- atm_pressure : integer = None (optional) The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\n\t- gauge_pressure : float = None (required) The gauge pressure in atmospheres (atm). Must be provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_absolute_pressure\", \"description\": \"Calculates the absolute pressure from gauge and atmospheric pressures.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"atm_pressure\": {\"type\": \"integer\", \"description\": \"The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\"}, \"gauge_pressure\": {\"type\": \"float\", \"description\": \"The gauge pressure in atmospheres (atm). Must be provided.\"}}, \"required\": [\"gauge_pressure\"]}}"}
{"scope": "parallel_function", "query": "Can you generate a travel itinerary for a 7-day trip to Tokyo with a daily budget of $200 focusing on urban exploration, then do the same for a 10-day trip to Paris with a daily budget of $150 focusing on history, followed by a 5-day trip to Sydney with a daily budget of $100 focusing on nature, and finally a 12-day trip to Rome with a daily budget of $180 focusing on culture?", "query_for_retrieval": "Can you generate a travel itinerary for a 7-day trip to Tokyo with a daily budget of $200 focusing on urban exploration, then do the same for a 10-day trip to Paris with a daily budget of $150 focusing on history, followed by a 5-day trip to Sydney with a daily budget of $100 focusing on nature, and finally a 12-day trip to Rome with a daily budget of $180 focusing on culture?", "answer": "travel_itinerary_generator", "answer_params": "", "api_description": "def travel_itinerary_generator:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\n\t\n\tArguments:\n\t---------\n\t- destination : string = None (required) Destination city of the trip.\n\t- days : integer = None (required) Number of days for the trip.\n\t- daily_budget : integer = None (required) The maximum daily budget for the trip.\n\t- exploration_type : string = urban (optional) The preferred exploration type.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"travel_itinerary_generator\", \"description\": \"Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"destination\": {\"type\": \"string\", \"description\": \"Destination city of the trip.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the trip.\"}, \"daily_budget\": {\"type\": \"integer\", \"description\": \"The maximum daily budget for the trip.\"}, \"exploration_type\": {\"type\": \"string\", \"enum\": [\"nature\", \"urban\", \"history\", \"culture\"], \"description\": \"The preferred exploration type.\", \"default\": \"urban\"}}, \"required\": [\"destination\", \"days\", \"daily_budget\"]}}"}
{"scope": "rest", "query": "What is the correct way to use requests.get to find the timezone of a specific GPS location with latitude 40.712776 and longitude -74.005974, using RapidAPI with my API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "What is the correct way to use requests.get to find the timezone of a specific GPS location with latitude 40.712776 and longitude -74.005974, using RapidAPI with my API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? First, I'm interested in a company's financials. I'd like to know the quarterly dividend per share for a company that has a total dividend payout of $1,000,000 and 500,000 outstanding shares. Second, I'm a big fan of the Beatles and I'd like to know the lyrics of their song 'Hey Jude'. Third, I'm planning to watch a movie tonight and I'm considering 'The Godfather'. Could you provide a brief about this movie and also include additional information like Director, Cast, Awards etc.? Lastly, I'm doing a painting and I'd like to mix the colors red and blue, and I want the resulting color to have a lightness level of 70%.\"", "query_for_retrieval": "\"Could you help me with a few tasks? First, I'm interested in a company's financials. I'd like to know the quarterly dividend per share for a company that has a total dividend payout of $1,000,000 and 500,000 outstanding shares. Second, I'm a big fan of the Beatles and I'd like to know the lyrics of their song 'Hey Jude'. Third, I'm planning to watch a movie tonight and I'm considering 'The Godfather'. Could you provide a brief about this movie and also include additional information like Director, Cast, Awards etc.? Lastly, I'm doing a painting and I'd like to mix the colors red and blue, and I want the resulting color to have a lightness level of 70%.\"", "answer": "get_song_lyrics", "answer_params": "", "api_description": "def get_song_lyrics:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the lyrics of a song based on the artist's name and song title.\n\t\n\tArguments:\n\t---------\n\t- song_title : string = None (required) The title of the song.\n\t- artist_name : string = None (required) The name of the artist who performed the song.\n\t- lang : string = None (optional) The language of the lyrics. Default is English.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_song_lyrics\", \"description\": \"Retrieve the lyrics of a song based on the artist's name and song title.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"song_title\": {\"type\": \"string\", \"description\": \"The title of the song.\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist who performed the song.\"}, \"lang\": {\"type\": \"string\", \"description\": \"The language of the lyrics. Default is English.\", \"enum\": [\"English\", \"French\", \"Spanish\", \"German\", \"Italian\"]}}, \"required\": [\"song_title\", \"artist_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? First, I'd like to book a hotel room at the 'Hilton' in 'Los Angeles, CA' from '2022-05-01' to '2022-05-10' and I need '2' rooms. Second, I'm curious about the time difference between 'New York, NY' and 'Los Angeles, CA'. Third, I've been trying to keep track of my health and I'd like to calculate my Body Mass Index (BMI). I weigh '75' kilograms and I'm '180' centimeters tall, and I'd like to use the 'metric' system. Lastly, I've written a piece of text in 'English' and I'd like to perform a sentiment analysis on it. The text is 'I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.' Can you assist me with these?\"", "query_for_retrieval": "\"Could you help me with a few tasks? First, I'd like to book a hotel room at the 'Hilton' in 'Los Angeles, CA' from '2022-05-01' to '2022-05-10' and I need '2' rooms. Second, I'm curious about the time difference between 'New York, NY' and 'Los Angeles, CA'. Third, I've been trying to keep track of my health and I'd like to calculate my Body Mass Index (BMI). I weigh '75' kilograms and I'm '180' centimeters tall, and I'd like to use the 'metric' system. Lastly, I've written a piece of text in 'English' and I'd like to perform a sentiment analysis on it. The text is 'I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.' Can you assist me with these?\"", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) for a person based on their weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) The weight of the person in kilograms.\n\t- height : integer = None (required) The height of the person in centimeters.\n\t- system : string = None (optional) The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) for a person based on their weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the person in centimeters.\"}, \"system\": {\"type\": \"string\", \"description\": \"The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "relevance", "query": "What is the gene sequence for evolutionary changes in whales?", "query_for_retrieval": "What is the gene sequence for evolutionary changes in whales?", "answer": "gene_sequencer", "answer_params": "", "api_description": "def gene_sequencer:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate possible gene sequences to see evolutionary changes\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species whose gene sequence you want to create.\n\t- mutation_rate : float = None (required) The rate at which mutation occurs, ranging from 0-1.\n\t- evolution_duration : integer = None (required) The duration for which evolution occurs, in years.\n\t- mutation_factors : array = None (optional) Factors contributing to mutation. Optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"gene_sequencer\", \"description\": \"Generate possible gene sequences to see evolutionary changes\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species whose gene sequence you want to create.\"}, \"mutation_rate\": {\"type\": \"float\", \"description\": \"The rate at which mutation occurs, ranging from 0-1.\"}, \"evolution_duration\": {\"type\": \"integer\", \"description\": \"The duration for which evolution occurs, in years.\"}, \"mutation_factors\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"genetic_drift\", \"natural_selection\", \"non-random_mating\", \"gene_flow\", \"mutation\"], \"default\": [\"genetic_drift\", \"gene_flow\"]}, \"description\": \"Factors contributing to mutation. Optional.\"}}, \"required\": [\"species\", \"mutation_rate\", \"evolution_duration\"]}}"}
{"scope": "sql", "query": "What are the names of the species in the \"species\" table in the database that have a lifespan greater than 50 years? Please include only those species whose names are listed in the columns \"species_name\", \"lifespan\" and satisfy the condition where lifespan is greater than 50 years.", "query_for_retrieval": "What are the names of the species in the \"species\" table in the database that have a lifespan greater than 50 years? Please include only those species whose names are listed in the columns \"species_name\", \"lifespan\" and satisfy the condition where lifespan is greater than 50 years.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "How can I create a new field type for a date script in Elasticsearch, with the field name 'timestamp', using a specific date field script factory `dateFactory`, a script `dateScript`, metadata containing the key 'format' with value 'epoch_millis', and handling script errors with the policy 'FAIL'?", "query_for_retrieval": "How can I create a new field type for a date script in Elasticsearch, with the field name 'timestamp', using a specific date field script factory `dateFactory`, a script `dateScript`, metadata containing the key 'format' with value 'epoch_millis', and handling script errors with the policy 'FAIL'?", "answer": "DateScriptFieldType.createFieldType", "answer_params": "", "api_description": "def DateScriptFieldType.createFieldType:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a new field type for a date script with the provided parameters.\n\t\n\tArguments:\n\t---------\n\t- name : String = None (required) The name of the field.\n\t- factory : any = None (required) The factory to create the date field script.\n\t- script : any = None (required) The script to define the date field behavior.\n\t- meta : HashMap = None (required) The metadata for the field type.\n\t- onScriptError : any = None (required) The policy on how to handle script errors.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DateScriptFieldType.createFieldType\", \"description\": \"Creates a new field type for a date script with the provided parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"String\", \"description\": \"The name of the field.\"}, \"factory\": {\"type\": \"any\", \"description\": \"The factory to create the date field script.\"}, \"script\": {\"type\": \"any\", \"description\": \"The script to define the date field behavior.\"}, \"meta\": {\"type\": \"HashMap\", \"description\": \"The metadata for the field type.\"}, \"onScriptError\": {\"type\": \"any\", \"description\": \"The policy on how to handle script errors.\"}}, \"required\": [\"name\", \"factory\", \"script\", \"meta\", \"onScriptError\"]}}"}
{"scope": "parallel_function", "query": "What would be the projected population growth of Japan and India in the next 10 and 20 years respectively, considering the current growth rate, and how would these projections change if we consider a growth rate of 1.5% for Japan and 2.1% for India instead of the current growth rate?", "query_for_retrieval": "What would be the projected population growth of Japan and India in the next 10 and 20 years respectively, considering the current growth rate, and how would these projections change if we consider a growth rate of 1.5% for Japan and 2.1% for India instead of the current growth rate?", "answer": "population_projections", "answer_params": "", "api_description": "def population_projections:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the projected population growth based on the current growth rate.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which to calculate the population projection.\n\t- years : integer = None (required) Number of years for the projection.\n\t- growth_rate : float = None (optional) Optional parameter to specify the growth rate. Default is current growth rate. of 0.01\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"population_projections\", \"description\": \"Calculates the projected population growth based on the current growth rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which to calculate the population projection.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years for the projection.\"}, \"growth_rate\": {\"type\": \"float\", \"description\": \"Optional parameter to specify the growth rate. Default is current growth rate. of 0.01\"}}, \"required\": [\"country\", \"years\"]}}"}
{"scope": "simple", "query": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "query_for_retrieval": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "answer": "instrument_price.get", "answer_params": "", "api_description": "def instrument_price.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current retail price of a specific musical instrument.\n\t\n\tArguments:\n\t---------\n\t- brand : string = None (required) The brand of the instrument.\n\t- model : string = None (required) The specific model of the instrument.\n\t- finish : string = None (required) The color or type of finish on the instrument.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"instrument_price.get\", \"description\": \"Retrieve the current retail price of a specific musical instrument.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"brand\": {\"type\": \"string\", \"description\": \"The brand of the instrument.\"}, \"model\": {\"type\": \"string\", \"description\": \"The specific model of the instrument.\"}, \"finish\": {\"type\": \"string\", \"description\": \"The color or type of finish on the instrument.\"}}, \"required\": [\"brand\", \"model\", \"finish\"]}}"}
{"scope": "executable_simple", "query": "I need to check the latest price for Apple Inc.'s stock. Can you get that information for me?", "query_for_retrieval": "I need to check the latest price for Apple Inc.'s stock. Can you get that information for me?", "answer": "get_stock_price_by_stock_name", "answer_params": "", "api_description": "def get_stock_price_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price_by_stock_name\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "rest", "query": "I'm planning a week-long hiking trip in the Swiss Alps and I need to check the weather forecast for two specific locations. The coordinates are latitude 46.0207, 46.4836 and longitude 7.7491, 9.8355. I would like to have the daily temperature in Fahrenheit, wind speed in mph, and precipitation in inches. My trip starts on April 15th and ends on April 21st, and I need the forecast to be aligned with the local time zone. Can you fetch this information for me?", "query_for_retrieval": "I'm planning a week-long hiking trip in the Swiss Alps and I need to check the weather forecast for two specific locations. The coordinates are latitude 46.0207, 46.4836 and longitude 7.7491, 9.8355. I would like to have the daily temperature in Fahrenheit, wind speed in mph, and precipitation in inches. My trip starts on April 15th and ends on April 21st, and I need the forecast to be aligned with the local time zone. Can you fetch this information for me?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "List all cases against a company named 'Dara Inc' filed in 2019, Also list cases filed in the year 2018 against the same company.", "query_for_retrieval": "List all cases against a company named 'Dara Inc' filed in 2019, Also list cases filed in the year 2018 against the same company.", "answer": "lawsuit.lookup", "answer_params": "", "api_description": "def lawsuit.lookup:\n\t\"\"\"\n\tDescription:\n\t\n\tLook up lawsuit cases against a company by year.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- year : integer = None (required) The year in which the lawsuit was filed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit.lookup\", \"description\": \"Look up lawsuit cases against a company by year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the lawsuit was filed.\"}}, \"required\": [\"company_name\", \"year\"]}}"}
{"scope": "multiple_function", "query": "What is the musical scale associated with C sharp major?", "query_for_retrieval": "What is the musical scale associated with C sharp major?", "answer": "walmart.purchase", "answer_params": "", "api_description": "def walmart.purchase:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information of items from Walmart including stock availability.\n\t\n\tArguments:\n\t---------\n\t- loc : string = None (required) Location of the nearest Walmart.\n\t- product_list : array = None (required) Items to be purchased listed in an array.\n\t- pack_size : array = None (optional) Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"walmart.purchase\", \"description\": \"Retrieve information of items from Walmart including stock availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loc\": {\"type\": \"string\", \"description\": \"Location of the nearest Walmart.\"}, \"product_list\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Items to be purchased listed in an array.\"}, \"pack_size\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array\"}}, \"required\": [\"loc\", \"product_list\"]}}"}
{"scope": "relevance", "query": "What is the current Gini Coefficient of USA?", "query_for_retrieval": "What is the current Gini Coefficient of USA?", "answer": "finance.fetchGDP", "answer_params": "", "api_description": "def finance.fetchGDP:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the GDP of the given country in the given year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The name of the country to get the GDP of.\n\t- year : integer = None (required) The year to get the GDP of.\n\t- format : string = None (optional) The format to return the data in. Default is 'USD'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.fetchGDP\", \"description\": \"Fetch the GDP of the given country in the given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The name of the country to get the GDP of.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year to get the GDP of.\"}, \"format\": {\"type\": \"string\", \"description\": \"The format to return the data in. Default is 'USD'.\", \"enum\": [\"USD\", \"EUR\", \"GBP\"]}}, \"required\": [\"country\", \"year\"]}}"}
{"scope": "relevance", "query": "What is the best chess move for white player in this position?", "query_for_retrieval": "What is the best chess move for white player in this position?", "answer": "fetch_game_stats", "answer_params": "", "api_description": "def fetch_game_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch board game statistics like top players, winning scores and game histories\n\t\n\tArguments:\n\t---------\n\t- game_type : string = None (required) The type of the board game.\n\t- year : integer = None (required) The year when the game was played.\n\t- location : string = NY (optional) The location where the game was played. This is an optional parameter.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_game_stats\", \"description\": \"Fetch board game statistics like top players, winning scores and game histories\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_type\": {\"type\": \"string\", \"description\": \"The type of the board game.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the game was played.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the game was played. This is an optional parameter.\", \"default\": \"NY\"}}, \"required\": [\"game_type\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me find the price of the artwork named 'Starry Night' by the artist 'Vincent Van Gogh' on the 'Sotheby' auction platform, and then fetch the price of another artwork called 'The Scream' by 'Edvard Munch' on the 'Christie' platform? After that, I would like to search for a book titled 'To Kill a Mockingbird' by the author 'Harper Lee' in the 'New York Public Library', and then look for another book named '1984' by 'George Orwell' in the 'British Library'.\"", "query_for_retrieval": "\"Could you please help me find the price of the artwork named 'Starry Night' by the artist 'Vincent Van Gogh' on the 'Sotheby' auction platform, and then fetch the price of another artwork called 'The Scream' by 'Edvard Munch' on the 'Christie' platform? After that, I would like to search for a book titled 'To Kill a Mockingbird' by the author 'Harper Lee' in the 'New York Public Library', and then look for another book named '1984' by 'George Orwell' in the 'British Library'.\"", "answer": "library.search_book", "answer_params": "", "api_description": "def library.search_book:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a specific book in the library.\n\t\n\tArguments:\n\t---------\n\t- title : string = None (required) The title of the book to be searched.\n\t- author : string = None (required) The author of the book to ensure the precise book is fetched.\n\t- platform : string = all (optional) The library where the book should be fetched from.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"library.search_book\", \"description\": \"Search for a specific book in the library.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"The title of the book to be searched.\"}, \"author\": {\"type\": \"string\", \"description\": \"The author of the book to ensure the precise book is fetched.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The library where the book should be fetched from.\", \"default\": \"all\"}}, \"required\": [\"title\", \"author\"]}}"}
{"scope": "simple", "query": "How many ounces in 2 pounds of butter?", "query_for_retrieval": "How many ounces in 2 pounds of butter?", "answer": "cooking_conversion.convert", "answer_params": "", "api_description": "def cooking_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert cooking measurements from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- quantity : integer = None (required) The quantity to be converted.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t- item : string = None (required) The item to be converted.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cooking_conversion.convert\", \"description\": \"Convert cooking measurements from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"quantity\": {\"type\": \"integer\", \"description\": \"The quantity to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}, \"item\": {\"type\": \"string\", \"description\": \"The item to be converted.\"}}, \"required\": [\"quantity\", \"from_unit\", \"to_unit\", \"item\"]}}"}
{"scope": "relevance", "query": "Who is the best singer in Jazz", "query_for_retrieval": "Who is the best singer in Jazz", "answer": "search_music_instrument_players", "answer_params": "", "api_description": "def search_music_instrument_players:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches for top music instrument players in a specified music genre.\n\t\n\tArguments:\n\t---------\n\t- instrument : string = None (required) The type of musical instrument, e.g. trumpet\n\t- genre : string = None (required) The musical genre, e.g. Jazz\n\t- top : integer = 5 (optional) Number of top players to return. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"search_music_instrument_players\", \"description\": \"Searches for top music instrument players in a specified music genre.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument\": {\"type\": \"string\", \"description\": \"The type of musical instrument, e.g. trumpet\"}, \"genre\": {\"type\": \"string\", \"description\": \"The musical genre, e.g. Jazz\"}, \"top\": {\"type\": \"integer\", \"default\": 5, \"description\": \"Number of top players to return. Default is 5.\"}}, \"required\": [\"instrument\", \"genre\"]}}"}
{"scope": "rest", "query": "I need to fetch the latest currency exchange rates using my API key 'YOUR-EXCHANGERATE-API-KEY' with the Euro (EUR) as my base currency. How can I do this using a GET request?", "query_for_retrieval": "I need to fetch the latest currency exchange rates using my API key 'YOUR-EXCHANGERATE-API-KEY' with the Euro (EUR) as my base currency. How can I do this using a GET request?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I'm currently conducting a study on the impact of COVID-19 and I'm focusing on Brazil's situation. I need the latest figures on the total number of deaths attributed to the virus in Brazil. Could you provide me with that information?", "query_for_retrieval": "I'm currently conducting a study on the impact of COVID-19 and I'm focusing on Brazil's situation. I need the latest figures on the total number of deaths attributed to the virus in Brazil. Could you provide me with that information?", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "executable_parallel_function", "query": "Sure, let's start by finding out what 5 factorial is. Once we have that, we'll move on to calculating the factorial for 7. After we've figured those out, we can proceed to determine the factorials for 10 and then 12. Could you please provide me with the factorial results for these four numbers in sequence?", "query_for_retrieval": "Sure, let's start by finding out what 5 factorial is. Once we have that, we'll move on to calculating the factorial for 7. After we've figured those out, we can proceed to determine the factorials for 10 and then 12. Could you please provide me with the factorial results for these four numbers in sequence?", "answer": "math_factorial", "answer_params": "", "api_description": "def math_factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the factorial of a number.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number to calculate the factorial of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_factorial\", \"description\": \"Calculates the factorial of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number to calculate the factorial of.\"}}, \"required\": [\"n\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm a mathematics teacher, and I'm currently putting together my lesson plan on prime factorization. For tomorrow's class, I've chosen the number 4567 as a practical example to illustrate the concept to my students. I need to break it down into its prime factors.", "query_for_retrieval": "I'm a mathematics teacher, and I'm currently putting together my lesson plan on prime factorization. For tomorrow's class, I've chosen the number 4567 as a practical example to illustrate the concept to my students. I need to break it down into its prime factors.", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please tell me the latest game score, individual player stats, and team stats for the basketball team 'Los Angeles Lakers' in the 'NBA' league? Also, I would like to know the same information but this time for the football team 'Manchester United' in the 'Premier League'. Additionally, could you provide me with a 5-day humidity forecast for New York, ensuring that the minimum humidity level is 60%? Lastly, I would also like to know the humidity forecast for the next 7 days in London, but without any minimum humidity level filter.\"", "query_for_retrieval": "\"Could you please tell me the latest game score, individual player stats, and team stats for the basketball team 'Los Angeles Lakers' in the 'NBA' league? Also, I would like to know the same information but this time for the football team 'Manchester United' in the 'Premier League'. Additionally, could you provide me with a 5-day humidity forecast for New York, ensuring that the minimum humidity level is 60%? Lastly, I would also like to know the humidity forecast for the next 7 days in London, but without any minimum humidity level filter.\"", "answer": "weather.humidity_forecast", "answer_params": "", "api_description": "def weather.humidity_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a humidity forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the humidity for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t- min_humidity : integer = None (optional) Minimum level of humidity (in percentage) to filter the result. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather.humidity_forecast\", \"description\": \"Retrieve a humidity forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the humidity for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}, \"min_humidity\": {\"type\": \"integer\", \"description\": \"Minimum level of humidity (in percentage) to filter the result. Default is 0.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "chatable", "query": "Find air quality index in San Jose for next three days.", "query_for_retrieval": "Find air quality index in San Jose for next three days.", "answer": "['']", "answer_params": "", "api_description": "def ['']:\n\t\"\"\"\n\t\"\"\"", "api_params": ""}
{"scope": "parallel_multiple_function", "query": "Play the Game of life for 3 rounds starting from an empty board, then play chess where the 1st move is e4 and the 2nd move is e5.", "query_for_retrieval": "Play the Game of life for 3 rounds starting from an empty board, then play chess where the 1st move is e4 and the 2nd move is e5.", "answer": "chess.play", "answer_params": "", "api_description": "def chess.play:\n\t\"\"\"\n\tDescription:\n\t\n\tMakes moves in a chess game.\n\t\n\tArguments:\n\t---------\n\t- moves : array = None (required) List of moves to play in the game.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.play\", \"description\": \"Makes moves in a chess game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"moves\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of moves to play in the game.\"}}, \"required\": [\"moves\"]}}"}
{"scope": "relevance", "query": "Find the definite integral of f(x)=x^2 from x=1 to x=3.", "query_for_retrieval": "Find the definite integral of f(x)=x^2 from x=1 to x=3.", "answer": "CalculateTax", "answer_params": "", "api_description": "def CalculateTax:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the income tax based on the annual income, tax rate, and other deductions.\n\t\n\tArguments:\n\t---------\n\t- annual_income : float = None (required) The annual income of the person.\n\t- tax_rate : float = None (required) The tax rate.\n\t- other_deductions : float = None (required) Any other deductions.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CalculateTax\", \"description\": \"Calculate the income tax based on the annual income, tax rate, and other deductions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"annual_income\": {\"type\": \"float\", \"description\": \"The annual income of the person.\"}, \"tax_rate\": {\"type\": \"float\", \"description\": \"The tax rate.\"}, \"other_deductions\": {\"type\": \"float\", \"description\": \"Any other deductions.\"}}, \"required\": [\"annual_income\", \"tax_rate\", \"other_deductions\"]}}"}
{"scope": "java", "query": "How can I create a delegate library instance for a custom library type `MyCustomLibrary` using a factory object `myFactory` and an existing delegate instance `existingDelegate` that is not adoptable?", "query_for_retrieval": "How can I create a delegate library instance for a custom library type `MyCustomLibrary` using a factory object `myFactory` and an existing delegate instance `existingDelegate` that is not adoptable?", "answer": "LibraryExport.createDelegate", "answer_params": "", "api_description": "def LibraryExport.createDelegate:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a delegate library instance using the provided factory and delegate. If the delegate is not adoptable, it forces adoption to ensure proper parent pointer implementation.\n\t\n\tArguments:\n\t---------\n\t- factory : any = None (required) The factory used to create a new delegate instance of the library.\n\t- delegate : any = None (required) The existing delegate instance of the library.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"LibraryExport.createDelegate\", \"description\": \"Creates a delegate library instance using the provided factory and delegate. If the delegate is not adoptable, it forces adoption to ensure proper parent pointer implementation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"factory\": {\"type\": \"any\", \"description\": \"The factory used to create a new delegate instance of the library.\"}, \"delegate\": {\"type\": \"any\", \"description\": \"The existing delegate instance of the library.\"}}, \"required\": [\"factory\", \"delegate\"]}}"}
{"scope": "executable_simple", "query": "I'm in the middle of composing an article on the COVID-19 situation, focusing on Brazil's ongoing response and how it's affecting the local population. Accurate data is crucial for my analysis. Could you give me the latest figures on the active COVID-19 cases in Brazil?", "query_for_retrieval": "I'm in the middle of composing an article on the COVID-19 situation, focusing on Brazil's ongoing response and how it's affecting the local population. Accurate data is crucial for my analysis. Could you give me the latest figures on the active COVID-19 cases in Brazil?", "answer": "get_active_covid_case_by_country", "answer_params": "", "api_description": "def get_active_covid_case_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date active cases of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the active cases of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_active_covid_case_by_country\", \"description\": \"Finds the most up to date active cases of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the active cases of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "executable_parallel_function", "query": "We're planning a dinner and decided to order a bunch of items. We want 101 dumplings at $0.1 each, 20 rice bowls at $10 each, 50 spring rolls at $0.5 each, and 10 noodle soups at $3 each. I need to know the total cost for our meal. Can you work that out for me?", "query_for_retrieval": "We're planning a dinner and decided to order a bunch of items. We want 101 dumplings at $0.1 each, 20 rice bowls at $10 each, 50 spring rolls at $0.5 each, and 10 noodle soups at $3 each. I need to know the total cost for our meal. Can you work that out for me?", "answer": "order_food", "answer_params": "", "api_description": "def order_food:\n\t\"\"\"\n\tDescription:\n\t\n\tOrders food for a customer.Return the total price.\n\t\n\tArguments:\n\t---------\n\t- item : array = None (required) No description available.\n\t- quantity : array = None (required) No description available.\n\t- price : array = None (required) No description available.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"order_food\", \"description\": \"Orders food for a customer.Return the total price.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak'].\"}}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\", \"description\": \"the number of the product purchased.\"}}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"float\", \"description\": \"the number of the product purchased.\"}}}, \"required\": [\"item\", \"quantity\", \"price\"]}}"}
{"scope": "java", "query": "How can I locate the absolute path to the class file for 'com.example.MyClass' if the class path includes the directories '/usr/local/classes' and '/home/user/java/libs'?", "query_for_retrieval": "How can I locate the absolute path to the class file for 'com.example.MyClass' if the class path includes the directories '/usr/local/classes' and '/home/user/java/libs'?", "answer": "ClassFileFinder.findClassFile", "answer_params": "", "api_description": "def ClassFileFinder.findClassFile:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the class file for a given class name within the specified class path and returns the path to the class file.\n\t\n\tArguments:\n\t---------\n\t- name : String = None (required) The fully qualified name of the class to find.\n\t- classPath : String = None (required) The class path where to search for the class file, with paths separated by the system path separator.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ClassFileFinder.findClassFile\", \"description\": \"Finds the class file for a given class name within the specified class path and returns the path to the class file.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"String\", \"description\": \"The fully qualified name of the class to find.\"}, \"classPath\": {\"type\": \"String\", \"description\": \"The class path where to search for the class file, with paths separated by the system path separator.\"}}, \"required\": [\"name\", \"classPath\"]}}"}
{"scope": "simple", "query": "Tell me more about Christianity and its history till the 14th century", "query_for_retrieval": "Tell me more about Christianity and its history till the 14th century", "answer": "religion.history_info", "answer_params": "", "api_description": "def religion.history_info:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides comprehensive historical details about a specified religion till a specified century.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) The name of the religion for which historical details are needed.\n\t- till_century : integer = None (required) The century till which historical details are needed.\n\t- include_people : boolean = None (optional) To include influential people related to the religion during that time period, default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion.history_info\", \"description\": \"Provides comprehensive historical details about a specified religion till a specified century.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"The name of the religion for which historical details are needed.\"}, \"till_century\": {\"type\": \"integer\", \"description\": \"The century till which historical details are needed.\"}, \"include_people\": {\"type\": \"boolean\", \"description\": \"To include influential people related to the religion during that time period, default is False\"}}, \"required\": [\"religion\", \"till_century\"]}}"}
{"scope": "sql", "query": "Can you provide the names and ages of the customers from the 'customers' table who have made purchases exceeding $1000?", "query_for_retrieval": "Can you provide the names and ages of the customers from the 'customers' table who have made purchases exceeding $1000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Find average batting score of a cricketer, Virat Kohli for past 10 matches", "query_for_retrieval": "Find average batting score of a cricketer, Virat Kohli for past 10 matches", "answer": "average_batting_score", "answer_params": "", "api_description": "def average_batting_score:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the average batting score of a cricketer for specified past matches.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) Name of the cricket player.\n\t- matches : integer = None (required) Number of past matches to consider for average calculation.\n\t- match_format : string = None (optional) Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"average_batting_score\", \"description\": \"Get the average batting score of a cricketer for specified past matches.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"Name of the cricket player.\"}, \"matches\": {\"type\": \"integer\", \"description\": \"Number of past matches to consider for average calculation.\"}, \"match_format\": {\"type\": \"string\", \"description\": \"Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'.\"}}, \"required\": [\"player_name\", \"matches\"]}}"}
{"scope": "parallel_function", "query": "What are the prime factors of the numbers 45, 100, and 150?", "query_for_retrieval": "What are the prime factors of the numbers 45, 100, and 150?", "answer": "number_analysis.prime_factors", "answer_params": "", "api_description": "def number_analysis.prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to be factored.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"number_analysis.prime_factors\", \"description\": \"Compute the prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to be factored.\"}}, \"required\": [\"number\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are playing a role-playing game and you want to create a new player profile. You decided to name your character 'DragonSlayer' and choose 'Warrior' as your class. You also want to start at level 5. After setting up your profile, you want to take a break and find a nearby concert to attend. You are currently in 'New York, NY' and you want to find a concert that plays 'Rock' music. Later in the evening, you decide to play a game of poker with a standard deck of 52 cards and a hand size of 5. What is the probability of getting a full house? The next day, you decide to go on a hike and you want to calculate the slope gradient between two geographical coordinates. The first point is [40.7128, -74.0060] (New York, NY) and the second point is [34.0522, -118.2437] (Los Angeles, CA). You want the slope gradient in 'degree'. Can you provide the information for all these scenarios?\"", "query_for_retrieval": "\"Imagine you are playing a role-playing game and you want to create a new player profile. You decided to name your character 'DragonSlayer' and choose 'Warrior' as your class. You also want to start at level 5. After setting up your profile, you want to take a break and find a nearby concert to attend. You are currently in 'New York, NY' and you want to find a concert that plays 'Rock' music. Later in the evening, you decide to play a game of poker with a standard deck of 52 cards and a hand size of 5. What is the probability of getting a full house? The next day, you decide to go on a hike and you want to calculate the slope gradient between two geographical coordinates. The first point is [40.7128, -74.0060] (New York, NY) and the second point is [34.0522, -118.2437] (Los Angeles, CA). You want the slope gradient in 'degree'. Can you provide the information for all these scenarios?\"", "answer": "poker_probability.full_house", "answer_params": "", "api_description": "def poker_probability.full_house:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of getting a full house in a poker game.\n\t\n\tArguments:\n\t---------\n\t- deck_size : integer = None (required) The size of the deck. Default is 52.\n\t- hand_size : integer = None (required) The size of the hand. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_probability.full_house\", \"description\": \"Calculate the probability of getting a full house in a poker game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deck_size\": {\"type\": \"integer\", \"description\": \"The size of the deck. Default is 52.\"}, \"hand_size\": {\"type\": \"integer\", \"description\": \"The size of the hand. Default is 5.\"}}, \"required\": [\"deck_size\", \"hand_size\"]}}"}
{"scope": "multiple_function", "query": "Find a book 'The Alchemist' in the library branches within New York city.", "query_for_retrieval": "Find a book 'The Alchemist' in the library branches within New York city.", "answer": "library.reserve_book", "answer_params": "", "api_description": "def library.reserve_book:\n\t\"\"\"\n\tDescription:\n\t\n\tReserves a book in the library if available.\n\t\n\tArguments:\n\t---------\n\t- book_id : string = None (required) The id of the book to reserve.\n\t- branch_id : string = None (required) The id of the library branch to reserve from.\n\t- return_date : string = None (optional) The date the book is to be returned (optional). Default is ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"library.reserve_book\", \"description\": \"Reserves a book in the library if available.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"book_id\": {\"type\": \"string\", \"description\": \"The id of the book to reserve.\"}, \"branch_id\": {\"type\": \"string\", \"description\": \"The id of the library branch to reserve from.\"}, \"return_date\": {\"type\": \"string\", \"description\": \"The date the book is to be returned (optional). Default is ''\"}}, \"required\": [\"book_id\", \"branch_id\"]}}"}
{"scope": "parallel_function", "query": "Book a flight from San Francisco to Tokyo on May 3rd 2022 and another flight from Tokyo to Sydney on May 18th 2022.", "query_for_retrieval": "Book a flight from San Francisco to Tokyo on May 3rd 2022 and another flight from Tokyo to Sydney on May 18th 2022.", "answer": "book_flight", "answer_params": "", "api_description": "def book_flight:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a flight from a departure city to a destination city on a specific date.\n\t\n\tArguments:\n\t---------\n\t- departure_city : string = None (required) The city from which the flight will depart.\n\t- destination_city : string = None (required) The city to which the flight is going.\n\t- date : string = None (required) The date of the flight.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_flight\", \"description\": \"Book a flight from a departure city to a destination city on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"departure_city\": {\"type\": \"string\", \"description\": \"The city from which the flight will depart.\"}, \"destination_city\": {\"type\": \"string\", \"description\": \"The city to which the flight is going.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the flight.\"}}, \"required\": [\"departure_city\", \"destination_city\", \"date\"]}}"}
{"scope": "relevance", "query": "Calculate the profit margin of a company with revenue of $200,000 and expenses of $150,000.", "query_for_retrieval": "Calculate the profit margin of a company with revenue of $200,000 and expenses of $150,000.", "answer": "calculate_ROI", "answer_params": "", "api_description": "def calculate_ROI:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Return on Investment (ROI) for a given investment amount and net profit.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : float = None (required) The initial amount of money invested.\n\t- net_profit : float = None (required) The profit made from the investment.\n\t- duration_years : integer = 1 (optional) The duration of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_ROI\", \"description\": \"Calculate the Return on Investment (ROI) for a given investment amount and net profit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"float\", \"description\": \"The initial amount of money invested.\"}, \"net_profit\": {\"type\": \"float\", \"description\": \"The profit made from the investment.\"}, \"duration_years\": {\"type\": \"integer\", \"description\": \"The duration of the investment in years.\", \"default\": 1}}, \"required\": [\"investment_amount\", \"net_profit\"]}}"}
{"scope": "relevance", "query": "Solve for the roots of the equation 3x^2 - 2x - 5.", "query_for_retrieval": "Solve for the roots of the equation 3x^2 - 2x - 5.", "answer": "distance_calculator.calculate", "answer_params": "", "api_description": "def distance_calculator.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two geographical coordinates.\n\t\n\tArguments:\n\t---------\n\t- coordinate_1 : array = None (required) The first coordinate, a pair of latitude and longitude.\n\t- coordinate_2 : array = None (required) The second coordinate, a pair of latitude and longitude.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"distance_calculator.calculate\", \"description\": \"Calculate the distance between two geographical coordinates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinate_1\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first coordinate, a pair of latitude and longitude.\"}, \"coordinate_2\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second coordinate, a pair of latitude and longitude.\"}}, \"required\": [\"coordinate_1\", \"coordinate_2\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a climate study focusing on temperature fluctuations in the Arctic and need the latest temperature readings for the North Pole. Can you get the current weather data for me, specifically at 90.00 latitude and 0.00 longitude, using the Open-Meteo API?", "query_for_retrieval": "I'm working on a climate study focusing on temperature fluctuations in the Arctic and need the latest temperature readings for the North Pole. Can you get the current weather data for me, specifically at 90.00 latitude and 0.00 longitude, using the Open-Meteo API?", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "javascript", "query": "How can I calculate the difference in days between the dates '2023-04-01' and '2023-04-15' using a specific time unit of 'days'?", "query_for_retrieval": "How can I calculate the difference in days between the dates '2023-04-01' and '2023-04-15' using a specific time unit of 'days'?", "answer": "sTe", "answer_params": "", "api_description": "def sTe:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function calculates the difference between two dates in a specified time unit.\n\t\n\tArguments:\n\t---------\n\t- r : String = None (required) The start date for the calculation.\n\t- e : String = None (required) The end date for the calculation.\n\t- t : String = None (required) The unit of time to calculate the difference in. For example, 'days', 'hours', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sTe\", \"description\": \"This function calculates the difference between two dates in a specified time unit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"r\": {\"type\": \"String\", \"description\": \"The start date for the calculation.\"}, \"e\": {\"type\": \"String\", \"description\": \"The end date for the calculation.\"}, \"t\": {\"type\": \"String\", \"description\": \"The unit of time to calculate the difference in. For example, 'days', 'hours', etc.\"}}, \"required\": [\"r\", \"e\", \"t\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm doing a comparative analysis of several tech giants for my investment portfolio. Could you provide me with the daily price history of Apple's stock, which is represented by 'AAPL'? Next, I'd like to look at a weekly price history for Microsoft, ticker symbol 'MSFT', and make sure to include any stock splits or dividends in that data. Afterwards, I need a monthly price history for Amazon, ticker 'AMZN'. And lastly, I need a three-month price history for Tesla, ticker 'TSLA', but for this one, exclude any stock splits or dividends from the information.", "query_for_retrieval": "I'm doing a comparative analysis of several tech giants for my investment portfolio. Could you provide me with the daily price history of Apple's stock, which is represented by 'AAPL'? Next, I'd like to look at a weekly price history for Microsoft, ticker symbol 'MSFT', and make sure to include any stock splits or dividends in that data. Afterwards, I need a monthly price history for Amazon, ticker 'AMZN'. And lastly, I need a three-month price history for Tesla, ticker 'TSLA', but for this one, exclude any stock splits or dividends from the information.", "answer": "get_stock_history", "answer_params": "", "api_description": "def get_stock_history:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name like AAPL, MSFT.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t- interval : string = None (required) The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\n\t- diffandsplits : string = None (optional) The diff and splits of the stock history. Allows one of following : true|false. Default as false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_history\", \"description\": \"Finds the price of a stock by its stock name like AAPL, MSFT.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}, \"interval\": {\"type\": \"string\", \"description\": \"The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\"}, \"diffandsplits\": {\"type\": \"string\", \"description\": \"The diff and splits of the stock history. Allows one of following : true|false. Default as false\"}}, \"required\": [\"stock_name\", \"interval\"]}}"}
{"scope": "parallel_function", "query": "Tell me a cooking recipe for 'Lasagne Bolognese' for serving 4 people and another one for 'Caesar Salad' for serving 2 people", "query_for_retrieval": "Tell me a cooking recipe for 'Lasagne Bolognese' for serving 4 people and another one for 'Caesar Salad' for serving 2 people", "answer": "get_cooking_recipe", "answer_params": "", "api_description": "def get_cooking_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the cooking recipe for a specified food item.\n\t\n\tArguments:\n\t---------\n\t- dish_name : string = None (required) Name of the food dish for which recipe is required.\n\t- serving_size : integer = None (required) Number of people for which the dish will be prepared.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_cooking_recipe\", \"description\": \"Retrieve the cooking recipe for a specified food item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dish_name\": {\"type\": \"string\", \"description\": \"Name of the food dish for which recipe is required.\"}, \"serving_size\": {\"type\": \"integer\", \"description\": \"Number of people for which the dish will be prepared.\"}}, \"required\": [\"dish_name\", \"serving_size\"]}}"}
{"scope": "relevance", "query": "What are some popular sushi restaurants in Tokyo?", "query_for_retrieval": "What are some popular sushi restaurants in Tokyo?", "answer": "book_hotel", "answer_params": "", "api_description": "def book_hotel:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a hotel room in a specified location for certain dates.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the hotel is located.\n\t- check_in_date : string = None (required) The date when the guest will check into the hotel.\n\t- check_out_date : string = None (required) The date when the guest will check out from the hotel.\n\t- room_type : string = None (optional) The type of room the guest would prefer. Default: 'double'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_hotel\", \"description\": \"Book a hotel room in a specified location for certain dates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the hotel is located.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The date when the guest will check into the hotel.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The date when the guest will check out from the hotel.\"}, \"room_type\": {\"type\": \"string\", \"optional\": true, \"description\": \"The type of room the guest would prefer. Default: 'double'\"}}, \"required\": [\"location\", \"check_in_date\", \"check_out_date\"]}}"}
{"scope": "simple", "query": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "query_for_retrieval": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "answer": "calculate_compounded_interest", "answer_params": "", "api_description": "def calculate_compounded_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the compounded interest for a given principal, interest rate, and period.\n\t\n\tArguments:\n\t---------\n\t- principal : integer = None (required) The initial principal.\n\t- interest_rate : float = None (required) The annual interest rate.\n\t- period : integer = None (required) The period in years.\n\t- compounding_frequency : string = None (optional) The frequency of compounding per year. Defaults to 'Annually'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compounded_interest\", \"description\": \"Calculate the compounded interest for a given principal, interest rate, and period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"integer\", \"description\": \"The initial principal.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate.\"}, \"period\": {\"type\": \"integer\", \"description\": \"The period in years.\"}, \"compounding_frequency\": {\"type\": \"string\", \"description\": \"The frequency of compounding per year. Defaults to 'Annually'.\", \"enum\": [\"Annually\", \"Semiannually\", \"Quarterly\", \"Monthly\", \"Daily\"]}}, \"required\": [\"principal\", \"interest_rate\", \"period\"]}}"}
{"scope": "relevance", "query": "What's the judgement in case XYZ?", "query_for_retrieval": "What's the judgement in case XYZ?", "answer": "law_firm.get_impactful_cases", "answer_params": "", "api_description": "def law_firm.get_impactful_cases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve impactful cases handled by a specific law firm within a given year.\n\t\n\tArguments:\n\t---------\n\t- firm_name : string = None (required) Name of the law firm.\n\t- year : integer = None (required) The year for which the cases are needed.\n\t- top_n : integer = None (optional) Number of top impactful cases. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_firm.get_impactful_cases\", \"description\": \"Retrieve impactful cases handled by a specific law firm within a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"firm_name\": {\"type\": \"string\", \"description\": \"Name of the law firm.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which the cases are needed.\"}, \"top_n\": {\"type\": \"integer\", \"description\": \"Number of top impactful cases. Default is 5.\"}}, \"required\": [\"firm_name\", \"year\"]}}"}
{"scope": "parallel_function", "query": "Can you estimate the population of Bengal Tigers in India for the year 2020, compare it with the estimated population of African Elephants in Kenya for the same year, and then estimate the population of both these species in their respective countries for the current year?", "query_for_retrieval": "Can you estimate the population of Bengal Tigers in India for the year 2020, compare it with the estimated population of African Elephants in Kenya for the same year, and then estimate the population of both these species in their respective countries for the current year?", "answer": "estimate_population", "answer_params": "", "api_description": "def estimate_population:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the population of a particular species in a given country.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species for which population needs to be estimated.\n\t- country : string = None (required) The country where the species lives.\n\t- year : integer = None (optional) The year for which population estimate is sought. Default is the current year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_population\", \"description\": \"Estimate the population of a particular species in a given country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species for which population needs to be estimated.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the species lives.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which population estimate is sought. Default is the current year.\"}}, \"required\": [\"species\", \"country\"]}}"}
{"scope": "simple", "query": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.", "query_for_retrieval": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.", "answer": "hypothesis_testing.ttest_ind", "answer_params": "", "api_description": "def hypothesis_testing.ttest_ind:\n\t\"\"\"\n\tDescription:\n\t\n\tConducts a hypothesis test for two independent samples.\n\t\n\tArguments:\n\t---------\n\t- sample1 : array = None (required) First set of observations (array of numbers).\n\t- sample2 : array = None (required) Second set of observations (array of numbers).\n\t- significance_level : float = None (optional) Significance level of the test (default: 0.05)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hypothesis_testing.ttest_ind\", \"description\": \"Conducts a hypothesis test for two independent samples.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sample1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"First set of observations (array of numbers).\"}, \"sample2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Second set of observations (array of numbers).\"}, \"significance_level\": {\"type\": \"float\", \"description\": \"Significance level of the test (default: 0.05)\"}}, \"required\": [\"sample1\", \"sample2\"]}}"}
{"scope": "simple", "query": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "query_for_retrieval": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "answer": "chi_squared_test", "answer_params": "", "api_description": "def chi_squared_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerforms a Chi-Squared test for independence on a 2x2 contingency table.\n\t\n\tArguments:\n\t---------\n\t- table : array = None (required) A 2x2 contingency table presented in array form.\n\t- alpha : float = None (optional) Significance level for the Chi-Squared test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chi_squared_test\", \"description\": \"Performs a Chi-Squared test for independence on a 2x2 contingency table.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"table\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A 2x2 contingency table presented in array form.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the Chi-Squared test. Default is 0.05.\"}}, \"required\": [\"table\"]}}"}
{"scope": "multiple_function", "query": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "query_for_retrieval": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "answer": "identify_color_rgb", "answer_params": "", "api_description": "def identify_color_rgb:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function identifies the RGB values of a named color.\n\t\n\tArguments:\n\t---------\n\t- color_name : string = None (required) Name of the color.\n\t- standard : string = None (optional) The color standard (e.g. basic, pantone). Default is 'basic'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"identify_color_rgb\", \"description\": \"This function identifies the RGB values of a named color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color_name\": {\"type\": \"string\", \"description\": \"Name of the color.\"}, \"standard\": {\"type\": \"string\", \"description\": \"The color standard (e.g. basic, pantone). Default is 'basic'\"}}, \"required\": [\"color_name\"]}}"}
{"scope": "relevance", "query": "What is the best month to visit Hawaii?", "query_for_retrieval": "What is the best month to visit Hawaii?", "answer": "get_average_monthly_temperature", "answer_params": "", "api_description": "def get_average_monthly_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the average monthly temperature of a location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location that you want to get the average monthly temperature for.\n\t- month : string = None (required) Month for which the average temperature needs to be fetched.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_average_monthly_temperature\", \"description\": \"Retrieve the average monthly temperature of a location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location that you want to get the average monthly temperature for.\"}, \"month\": {\"type\": \"string\", \"description\": \"Month for which the average temperature needs to be fetched.\"}}, \"required\": [\"location\", \"month\"]}}"}
{"scope": "simple", "query": "Get the average temperature in Austin for the next 3 days in Celsius.", "query_for_retrieval": "Get the average temperature in Austin for the next 3 days in Celsius.", "answer": "average_temperature", "answer_params": "", "api_description": "def average_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the average temperature for a specific location over the defined timeframe.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city to get the average temperature for. It should format as city name such as Boston.\n\t- days : integer = None (required) The number of days to get the average temperature for.\n\t- temp_unit : string = None (optional) The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"average_temperature\", \"description\": \"Retrieves the average temperature for a specific location over the defined timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city to get the average temperature for. It should format as city name such as Boston.\"}, \"days\": {\"type\": \"integer\", \"description\": \"The number of days to get the average temperature for.\"}, \"temp_unit\": {\"type\": \"string\", \"description\": \"The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "executable_simple", "query": "Could you track down the latitude and longitude for this IP address I'm concerned about? It's 172.16.254.1. I've been monitoring the network and this one's been popping up with some strange activity.", "query_for_retrieval": "Could you track down the latitude and longitude for this IP address I'm concerned about? It's 172.16.254.1. I've been monitoring the network and this one's been popping up with some strange activity.", "answer": "get_coordinate_by_ip_address", "answer_params": "", "api_description": "def get_coordinate_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the latitude and longitude of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinate_by_ip_address\", \"description\": \"Finds the latitude and longitude of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Get me the top 10 landmark cases in constitutional law in China.", "query_for_retrieval": "Get me the top 10 landmark cases in constitutional law in China.", "answer": "get_top_cases", "answer_params": "", "api_description": "def get_top_cases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a list of the most influential or landmark cases in a specific field of law.\n\t\n\tArguments:\n\t---------\n\t- field_of_law : string = None (required) The specific field of law e.g., constitutional law, criminal law, etc.\n\t- top_number : integer = None (required) The number of top cases to retrieve.\n\t- country : string = None (optional) The country where the law cases should be retrieved from. Default is United States of America.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_top_cases\", \"description\": \"Retrieve a list of the most influential or landmark cases in a specific field of law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"field_of_law\": {\"type\": \"string\", \"description\": \"The specific field of law e.g., constitutional law, criminal law, etc.\"}, \"top_number\": {\"type\": \"integer\", \"description\": \"The number of top cases to retrieve.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the law cases should be retrieved from. Default is United States of America.\"}}, \"required\": [\"field_of_law\", \"top_number\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you first check the availability of a sculpture named 'The Thinker' made of bronze in the inventory using the 'sculpture_availability.check' function? Then, could you provide information about a sculptor named 'Auguste Rodin' using the 'sculptor_info.get' function? Lastly, could you calculate the estimated price to commission a sculpture made of marble, 10 feet in size, and with high complexity using the 'sculpture_price.calculate' function?\"", "query_for_retrieval": "\"Could you first check the availability of a sculpture named 'The Thinker' made of bronze in the inventory using the 'sculpture_availability.check' function? Then, could you provide information about a sculptor named 'Auguste Rodin' using the 'sculptor_info.get' function? Lastly, could you calculate the estimated price to commission a sculpture made of marble, 10 feet in size, and with high complexity using the 'sculpture_price.calculate' function?\"", "answer": "sculpture_availability.check", "answer_params": "", "api_description": "def sculpture_availability.check:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck the availability of a specific sculpture in the inventory.\n\t\n\tArguments:\n\t---------\n\t- sculpture_name : string = None (required) The name of the sculpture.\n\t- material : string = None (required) The material of the sculpture.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture_availability.check\", \"description\": \"Check the availability of a specific sculpture in the inventory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sculpture_name\": {\"type\": \"string\", \"description\": \"The name of the sculpture.\"}, \"material\": {\"type\": \"string\", \"description\": \"The material of the sculpture.\"}}, \"required\": [\"sculpture_name\", \"material\"]}}"}
{"scope": "simple", "query": "Find the best local nurseries in Toronto with a good variety of annual plants.", "query_for_retrieval": "Find the best local nurseries in Toronto with a good variety of annual plants.", "answer": "local_nursery.find", "answer_params": "", "api_description": "def local_nursery.find:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate local nurseries based on location and plant types availability.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city or locality where the nursery needs to be located.\n\t- plant_types : array = None (required) Type of plants the nursery should provide.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"local_nursery.find\", \"description\": \"Locate local nurseries based on location and plant types availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city or locality where the nursery needs to be located.\"}, \"plant_types\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Annual\", \"Perennial\", \"Shrub\", \"Tree\", \"Herbs\", \"Fruits\"]}, \"description\": \"Type of plants the nursery should provide.\"}}, \"required\": [\"location\", \"plant_types\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to break down a few numbers into their prime factors for an encryption algorithm I'm working on. Could you start by finding the prime factors of 456? Once that's done, I'd also need the prime factors for 789, followed by 321, and lastly 654.", "query_for_retrieval": "I need to break down a few numbers into their prime factors for an encryption algorithm I'm working on. Could you start by finding the prime factors of 456? Once that's done, I'd also need the prime factors for 789, followed by 321, and lastly 654.", "answer": "get_prime_factors", "answer_params": "", "api_description": "def get_prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to calculate the prime factors of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prime_factors\", \"description\": \"Calculates the prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to calculate the prime factors of.\"}}, \"required\": [\"number\"]}}"}
{"scope": "relevance", "query": "What's the recipe to cook five chicken", "query_for_retrieval": "What's the recipe to cook five chicken", "answer": "recipe_calculator.calculate_time", "answer_params": "", "api_description": "def recipe_calculator.calculate_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the time to cook a recipe based on weight and per unit time.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the item to be cooked.\n\t- per_unit_time : integer = None (required) The time required to cook per unit weight.\n\t- unit_of_time : string = None (optional) Unit of time, such as minutes or hours. Default is minutes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_calculator.calculate_time\", \"description\": \"Calculates the time to cook a recipe based on weight and per unit time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the item to be cooked.\"}, \"per_unit_time\": {\"type\": \"integer\", \"description\": \"The time required to cook per unit weight.\"}, \"unit_of_time\": {\"type\": \"string\", \"description\": \"Unit of time, such as minutes or hours. Default is minutes.\"}}, \"required\": [\"weight\", \"per_unit_time\"]}}"}
{"scope": "multiple_function", "query": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "query_for_retrieval": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "answer": "get_protein_sequence", "answer_params": "", "api_description": "def get_protein_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the protein sequence encoded by a human gene.\n\t\n\tArguments:\n\t---------\n\t- gene : string = None (required) The human gene of interest.\n\t- species : string = Homo sapiens (optional) The species for which the gene is to be analyzed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_protein_sequence\", \"description\": \"Retrieve the protein sequence encoded by a human gene.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"gene\": {\"type\": \"string\", \"description\": \"The human gene of interest.\"}, \"species\": {\"type\": \"string\", \"description\": \"The species for which the gene is to be analyzed.\", \"default\": \"Homo sapiens\"}}, \"required\": [\"gene\"]}}"}
{"scope": "multiple_function", "query": "Can I find the dimensions and properties of a triangle, if I know its three sides are 5 units, 4 units and 3 units long?", "query_for_retrieval": "Can I find the dimensions and properties of a triangle, if I know its three sides are 5 units, 4 units and 3 units long?", "answer": "triangle_properties.get", "answer_params": "", "api_description": "def triangle_properties.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.\n\t\n\tArguments:\n\t---------\n\t- side1 : integer = None (required) The length of first side of the triangle.\n\t- side2 : integer = None (required) The length of second side of the triangle.\n\t- side3 : integer = None (required) The length of third side of the triangle.\n\t- get_area : boolean = True (optional) A flag to determine whether to calculate the area of triangle. Default is true.\n\t- get_perimeter : boolean = True (optional) A flag to determine whether to calculate the perimeter of triangle. Default is true.\n\t- get_angles : boolean = True (optional) A flag to determine whether to calculate the internal angles of triangle. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"triangle_properties.get\", \"description\": \"Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"side1\": {\"type\": \"integer\", \"description\": \"The length of first side of the triangle.\"}, \"side2\": {\"type\": \"integer\", \"description\": \"The length of second side of the triangle.\"}, \"side3\": {\"type\": \"integer\", \"description\": \"The length of third side of the triangle.\"}, \"get_area\": {\"type\": \"boolean\", \"description\": \"A flag to determine whether to calculate the area of triangle. Default is true.\", \"default\": true, \"optional\": true}, \"get_perimeter\": {\"type\": \"boolean\", \"description\": \"A flag to determine whether to calculate the perimeter of triangle. Default is true.\", \"default\": true, \"optional\": true}, \"get_angles\": {\"type\": \"boolean\", \"description\": \"A flag to determine whether to calculate the internal angles of triangle. Default is true.\", \"default\": true, \"optional\": true}}, \"required\": [\"side1\", \"side2\", \"side3\"]}}"}
{"scope": "multiple_function", "query": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver.", "query_for_retrieval": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver.", "answer": "safeway.vegan_products", "answer_params": "", "api_description": "def safeway.vegan_products:\n\t\"\"\"\n\tDescription:\n\t\n\tGet available vegan products at specified Safeway store\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City and state where the Safeway store is located, e.g. Denver, CO\n\t- categories : array = None (optional) Product categories to search within. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"safeway.vegan_products\", \"description\": \"Get available vegan products at specified Safeway store\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City and state where the Safeway store is located, e.g. Denver, CO\"}, \"categories\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"vegan\", \"gluten-free\"]}, \"description\": \"Product categories to search within. Default empty array\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "query_for_retrieval": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "answer": "calculate_cagr", "answer_params": "", "api_description": "def calculate_cagr:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n\t\n\tArguments:\n\t---------\n\t- initial_value : integer = None (required) The initial investment value.\n\t- final_value : integer = None (required) The final investment value.\n\t- period_in_years : integer = None (required) The period of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cagr\", \"description\": \"Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_value\": {\"type\": \"integer\", \"description\": \"The initial investment value.\"}, \"final_value\": {\"type\": \"integer\", \"description\": \"The final investment value.\"}, \"period_in_years\": {\"type\": \"integer\", \"description\": \"The period of the investment in years.\"}}, \"required\": [\"initial_value\", \"final_value\", \"period_in_years\"]}}"}
{"scope": "simple", "query": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "query_for_retrieval": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "answer": "calculate_area_under_curve", "answer_params": "", "api_description": "def calculate_area_under_curve:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area under a mathematical function within a given interval.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The mathematical function as a string.\n\t- interval : array = None (required) An array that defines the interval to calculate the area under the curve from the start to the end point.\n\t- method : string = None (optional) The numerical method to approximate the area under the curve. The default value is 'trapezoidal'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_area_under_curve\", \"description\": \"Calculate the area under a mathematical function within a given interval.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The mathematical function as a string.\"}, \"interval\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"An array that defines the interval to calculate the area under the curve from the start to the end point.\"}, \"method\": {\"type\": \"string\", \"description\": \"The numerical method to approximate the area under the curve. The default value is 'trapezoidal'.\"}}, \"required\": [\"function\", \"interval\"]}}"}
{"scope": "parallel_multiple_function", "query": "\" I'm trying to figure out the RGB values of the color 'Cerulean' based on the 'pantone' standard. Secondly, I'm interested in buying a used 'Fender Stratocaster' guitar in 'Good' condition, being sold in 'Los Angeles'. Could you find out the price for me? Lastly, I'm organizing a chess tournament in 'New York' and I'm looking for top players to invite. Could you find the top 15 players with a minimum rating of 2200 for me?\"", "query_for_retrieval": "\" I'm trying to figure out the RGB values of the color 'Cerulean' based on the 'pantone' standard. Secondly, I'm interested in buying a used 'Fender Stratocaster' guitar in 'Good' condition, being sold in 'Los Angeles'. Could you find out the price for me? Lastly, I'm organizing a chess tournament in 'New York' and I'm looking for top players to invite. Could you find the top 15 players with a minimum rating of 2200 for me?\"", "answer": "guitar_price.find", "answer_params": "", "api_description": "def guitar_price.find:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the price of a specific used guitar model based on its condition and location.\n\t\n\tArguments:\n\t---------\n\t- model : string = None (required) The model of the guitar.\n\t- condition : string = None (required) The condition of the guitar.\n\t- location : string = None (required) The location where the guitar is being sold.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"guitar_price.find\", \"description\": \"Retrieve the price of a specific used guitar model based on its condition and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"model\": {\"type\": \"string\", \"description\": \"The model of the guitar.\"}, \"condition\": {\"type\": \"string\", \"enum\": [\"Poor\", \"Good\", \"Excellent\"], \"description\": \"The condition of the guitar.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the guitar is being sold.\"}}, \"required\": [\"model\", \"condition\", \"location\"]}}"}
{"scope": "sql", "query": "In a physics lab, the results of an experiment are stored in a database table named 'PhysicsResults'. The table has columns 'ExperimentID', 'ExperimentName', 'Result', 'MeasurementUnit', and 'ExperimentDate'. The experiment with ID 'PHY789' has a result of '5.6' with measurement unit 'Joules' recorded on '2022-02-02 14:00:00'. However, upon reevaluation, it was found that the actual result should be '6.0' Joules. Could you please make this correction in the database?", "query_for_retrieval": "In a physics lab, the results of an experiment are stored in a database table named 'PhysicsResults'. The table has columns 'ExperimentID', 'ExperimentName', 'Result', 'MeasurementUnit', and 'ExperimentDate'. The experiment with ID 'PHY789' has a result of '5.6' with measurement unit 'Joules' recorded on '2022-02-02 14:00:00'. However, upon reevaluation, it was found that the actual result should be '6.0' Joules. Could you please make this correction in the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What is the current time in New York City?", "query_for_retrieval": "What is the current time in New York City?", "answer": "weather_forecast.get", "answer_params": "", "api_description": "def weather_forecast.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current weather forecast for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location you want to retrieve the weather for.\n\t- hour : integer = None (optional) The hour of the day in 24-hour format (optional). If not provided, the current hour will be used. Default: 24\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_forecast.get\", \"description\": \"Retrieve the current weather forecast for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location you want to retrieve the weather for.\"}, \"hour\": {\"type\": \"integer\", \"description\": \"The hour of the day in 24-hour format (optional). If not provided, the current hour will be used. Default: 24\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Solve a quadratic equation where a=2, b=6, and c=5", "query_for_retrieval": "Solve a quadratic equation where a=2, b=6, and c=5", "answer": "solve_quadratic_equation", "answer_params": "", "api_description": "def solve_quadratic_equation:\n\t\"\"\"\n\tDescription:\n\t\n\tFunction solves the quadratic equation and returns its roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x squared\n\t- b : integer = None (required) Coefficient of x\n\t- c : integer = None (required) Constant term in the quadratic equation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic_equation\", \"description\": \"Function solves the quadratic equation and returns its roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x squared\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term in the quadratic equation.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "simple", "query": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023.", "query_for_retrieval": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023.", "answer": "hotel_bookings.book_room", "answer_params": "", "api_description": "def hotel_bookings.book_room:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a hotel room based on specific criteria like location, room type, and check-in and check-out dates.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state where you want to book the hotel, e.g. Los Angeles, CA\n\t- room_type : string = None (required) Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc.\n\t- check_in_date : string = None (required) Check-in date for the hotel. Format - DD-MM-YYYY.\n\t- no_of_nights : integer = None (required) Number of nights for the stay.\n\t- no_of_rooms : integer = 1 (optional) Number of rooms to book. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_bookings.book_room\", \"description\": \"Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state where you want to book the hotel, e.g. Los Angeles, CA\"}, \"room_type\": {\"type\": \"string\", \"description\": \"Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"Check-in date for the hotel. Format - DD-MM-YYYY.\"}, \"no_of_nights\": {\"type\": \"integer\", \"description\": \"Number of nights for the stay.\"}, \"no_of_rooms\": {\"type\": \"integer\", \"description\": \"Number of rooms to book. Default is 1.\", \"default\": 1}}, \"required\": [\"location\", \"room_type\", \"check_in_date\", \"no_of_nights\"]}}"}
{"scope": "rest", "query": "I'm looking to understand the slang 'bet' better. Could you fetch the definitions from an online slang dictionary using my API key 'YOUR-RAPID-API-KEY' and the host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "query_for_retrieval": "I'm looking to understand the slang 'bet' better. Could you fetch the definitions from an online slang dictionary using my API key 'YOUR-RAPID-API-KEY' and the host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://mashape-community-urban-dictionary.p.rapidapi.com/define (required) Urban Dictionary is the dictionary you write.\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - term : string = None (required) The search term or query parameter required by the API.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Urban Dictionary is the dictionary you write.\", \"default\": \"https://mashape-community-urban-dictionary.p.rapidapi.com/define\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The search term or query parameter required by the API.\"}}, \"type\": \"dict\", \"required\": [\"term\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "query_for_retrieval": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "answer": "calculate_emissions", "answer_params": "", "api_description": "def calculate_emissions:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.\n\t\n\tArguments:\n\t---------\n\t- distance : integer = None (required) The distance travelled in miles.\n\t- fuel_type : string = None (required) Type of fuel used by the vehicle.\n\t- fuel_efficiency : float = None (required) The vehicle's fuel efficiency in miles per gallon.\n\t- efficiency_reduction : integer = None (optional) The percentage decrease in fuel efficiency per year (optional). Default is 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_emissions\", \"description\": \"Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"integer\", \"description\": \"The distance travelled in miles.\"}, \"fuel_type\": {\"type\": \"string\", \"description\": \"Type of fuel used by the vehicle.\"}, \"fuel_efficiency\": {\"type\": \"float\", \"description\": \"The vehicle's fuel efficiency in miles per gallon.\"}, \"efficiency_reduction\": {\"type\": \"integer\", \"description\": \"The percentage decrease in fuel efficiency per year (optional). Default is 0\"}}, \"required\": [\"distance\", \"fuel_type\", \"fuel_efficiency\"]}}"}
{"scope": "multiple_function", "query": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility.", "query_for_retrieval": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility.", "answer": "tourist_spot_info", "answer_params": "", "api_description": "def tourist_spot_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a specific tourist spot.\n\t\n\tArguments:\n\t---------\n\t- spot : string = None (required) The name of the tourist spot you want to get information for.\n\t- city : string = None (required) The city where the tourist spot is located.\n\t- details : array = timing, attractions (optional) Details of the tourist spot to get information on. For multiple details, separate them by comma.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"tourist_spot_info\", \"description\": \"Retrieve information about a specific tourist spot.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"spot\": {\"type\": \"string\", \"description\": \"The name of the tourist spot you want to get information for.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city where the tourist spot is located.\"}, \"details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"timing\", \"attractions\", \"tickets\", \"accessibility\", \"history\"]}, \"description\": \"Details of the tourist spot to get information on. For multiple details, separate them by comma.\", \"default\": \"timing, attractions\"}}, \"required\": [\"spot\", \"city\"]}}"}
{"scope": "relevance", "query": "Who is Lebron James?", "query_for_retrieval": "Who is Lebron James?", "answer": "sports_ranking.get_top_ranked", "answer_params": "", "api_description": "def sports_ranking.get_top_ranked:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the current top ranked athlete for a specific sport.\n\t\n\tArguments:\n\t---------\n\t- sport : string = None (required) The sport to get the ranking for.\n\t- gender : string = None (required) The gender category.\n\t- year : integer = The current year (optional) The year for which the ranking is required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_top_ranked\", \"description\": \"Get the current top ranked athlete for a specific sport.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sport\": {\"type\": \"string\", \"description\": \"The sport to get the ranking for.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender category.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which the ranking is required.\", \"default\": \"The current year\"}}, \"required\": [\"sport\", \"gender\"]}}"}
{"scope": "javascript", "query": "How can I retrieve a list of books bookA,bookB, bookC with a specific author J.K. Rowling from a collection called 'library'?", "query_for_retrieval": "How can I retrieve a list of books bookA,bookB, bookC with a specific author J.K. Rowling from a collection called 'library'?", "answer": "filterBooksByAuthor", "answer_params": "", "api_description": "def filterBooksByAuthor:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function filters through a collection of books within a library to find all books that are written by a specific author, returning a list of books that match the criteria.\n\t\n\tArguments:\n\t---------\n\t- library : array = None (required) The collection of book objects to filter through.\n\t- author : String = None (required) The name of the author whose books you want to find.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"filterBooksByAuthor\", \"description\": \"This function filters through a collection of books within a library to find all books that are written by a specific author, returning a list of books that match the criteria.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"library\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The collection of book objects to filter through.\"}, \"author\": {\"type\": \"String\", \"description\": \"The name of the author whose books you want to find.\"}}, \"required\": [\"library\", \"author\"]}}"}
{"scope": "simple", "query": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "query_for_retrieval": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "answer": "guitar_price.find", "answer_params": "", "api_description": "def guitar_price.find:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the price of a specific used guitar model based on its condition and location.\n\t\n\tArguments:\n\t---------\n\t- model : string = None (required) The model of the guitar.\n\t- condition : string = None (required) The condition of the guitar.\n\t- location : string = None (required) The location where the guitar is being sold.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"guitar_price.find\", \"description\": \"Retrieve the price of a specific used guitar model based on its condition and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"model\": {\"type\": \"string\", \"description\": \"The model of the guitar.\"}, \"condition\": {\"type\": \"string\", \"enum\": [\"Poor\", \"Good\", \"Excellent\"], \"description\": \"The condition of the guitar.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the guitar is being sold.\"}}, \"required\": [\"model\", \"condition\", \"location\"]}}"}
{"scope": "relevance", "query": "What type of personality am I?", "query_for_retrieval": "What type of personality am I?", "answer": "calculate_big_five_traits", "answer_params": "", "api_description": "def calculate_big_five_traits:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the big five personality traits based on a set of questions answered by the user.\n\t\n\tArguments:\n\t---------\n\t- answers : array = None (required) Answers to a set of questions rated on a scale from 1 to 5.\n\t- calculate_percentile : boolean = None (required) If true, the percentile rank for each trait will also be calculated.\n\t- average_answers : boolean = True (optional) If true, answers will be averaged across each trait's questions.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_big_five_traits\", \"description\": \"Calculate the big five personality traits based on a set of questions answered by the user.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"answers\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Answers to a set of questions rated on a scale from 1 to 5.\"}, \"calculate_percentile\": {\"type\": \"boolean\", \"description\": \"If true, the percentile rank for each trait will also be calculated.\"}, \"average_answers\": {\"type\": \"boolean\", \"description\": \"If true, answers will be averaged across each trait's questions.\", \"default\": true}}, \"required\": [\"answers\", \"calculate_percentile\"]}}"}
{"scope": "sql", "query": "What are the names of the employees from the 'employees' table who have a salary greater than 50000?", "query_for_retrieval": "What are the names of the employees from the 'employees' table who have a salary greater than 50000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "What is the current time in Sydney, Australia?", "query_for_retrieval": "What is the current time in Sydney, Australia?", "answer": "get_current_time", "answer_params": "", "api_description": "def get_current_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current time for a specified city and country.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city for which the current time is to be retrieved.\n\t- country : string = None (required) The country where the city is located.\n\t- format : string = None (optional) The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_time\", \"description\": \"Retrieve the current time for a specified city and country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city for which the current time is to be retrieved.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the city is located.\"}, \"format\": {\"type\": \"string\", \"description\": \"The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS').\"}}, \"required\": [\"city\", \"country\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with two tasks? First, I want to calculate the compound interest on an investment I made. I invested $5000 with an annual interest rate of 5%. The interest is compounded quarterly and I plan to keep the money invested for 7 years. Secondly, I heard some rumors about a company named 'Tech Corp' and I want to check if there were any lawsuits filed against them in 'San Francisco' in the year 2018. Can you find this information for me?\"", "query_for_retrieval": "\"Can you help me with two tasks? First, I want to calculate the compound interest on an investment I made. I invested $5000 with an annual interest rate of 5%. The interest is compounded quarterly and I plan to keep the money invested for 7 years. Secondly, I heard some rumors about a company named 'Tech Corp' and I want to check if there were any lawsuits filed against them in 'San Francisco' in the year 2018. Can you find this information for me?\"", "answer": "lawsuits_search", "answer_params": "", "api_description": "def lawsuits_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits against a specific company within a specific time and location.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- location : string = None (required) The location where the lawsuit was filed.\n\t- year : integer = None (required) The year when the lawsuit was filed.\n\t- case_type : string = None (optional) The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuits_search\", \"description\": \"Search for lawsuits against a specific company within a specific time and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the lawsuit was filed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the lawsuit was filed.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\"}}, \"required\": [\"company_name\", \"location\", \"year\"]}}"}
{"scope": "executable_simple", "query": "I've got a physics experiment where I'm dropping a ball from a certain height, and I know that the initial velocity is zero because I'm letting it fall freely. Gravity is doing all the work here at 9.8 m/s\u00b2. After 7 seconds, I want to calculate what the final velocity will be. Can we get that sorted out?", "query_for_retrieval": "I've got a physics experiment where I'm dropping a ball from a certain height, and I know that the initial velocity is zero because I'm letting it fall freely. Gravity is doing all the work here at 9.8 m/s\u00b2. After 7 seconds, I want to calculate what the final velocity will be. Can we get that sorted out?", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the final velocity of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object, in meters per second.\n\t- acceleration : float = None (required) The acceleration of the object, in meters per second squared.\n\t- time : float = None (required) The time the object has been moving, in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculates the final velocity of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object, in meters per second.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object, in meters per second squared.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving, in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my meals for the day? I want to start with a breakfast recipe using eggs, milk, and bread, and it should not exceed 300 calories. Then, for lunch, I want to try a new restaurant that serves dishes with chicken, tomatoes, and lettuce, and the dishes should not be more than 500 calories. In the evening, I have a recipe for dinner that uses beef, but I want to replace the beef with tofu and keep the total calories under 600. Can you assist me with these?\"", "query_for_retrieval": "\"Can you help me plan my meals for the day? I want to start with a breakfast recipe using eggs, milk, and bread, and it should not exceed 300 calories. Then, for lunch, I want to try a new restaurant that serves dishes with chicken, tomatoes, and lettuce, and the dishes should not be more than 500 calories. In the evening, I have a recipe for dinner that uses beef, but I want to replace the beef with tofu and keep the total calories under 600. Can you assist me with these?\"", "answer": "recipe_search", "answer_params": "", "api_description": "def recipe_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches for recipes based on a list of ingredients and a maximum caloric value.\n\t\n\tArguments:\n\t---------\n\t- ingredients : array = None (required) A list of ingredients you want to use in the recipe.\n\t- calories : integer = None (required) The maximum number of calories for the recipe.\n\t- meal : string = None (optional) Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_search\", \"description\": \"Searches for recipes based on a list of ingredients and a maximum caloric value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of ingredients you want to use in the recipe.\"}, \"calories\": {\"type\": \"integer\", \"description\": \"The maximum number of calories for the recipe.\"}, \"meal\": {\"type\": \"string\", \"description\": \"Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default is all if not specified.\"}}, \"required\": [\"ingredients\", \"calories\"]}}"}
{"scope": "simple", "query": "Identify a small green bird in forest.", "query_for_retrieval": "Identify a small green bird in forest.", "answer": "identify_bird", "answer_params": "", "api_description": "def identify_bird:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify a bird species based on certain characteristics.\n\t\n\tArguments:\n\t---------\n\t- color : string = None (required) Color of the bird.\n\t- habitat : string = None (required) Habitat of the bird.\n\t- size : string = None (optional) Size of the bird. Default is 'small'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"identify_bird\", \"description\": \"Identify a bird species based on certain characteristics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color\": {\"type\": \"string\", \"description\": \"Color of the bird.\"}, \"habitat\": {\"type\": \"string\", \"description\": \"Habitat of the bird.\"}, \"size\": {\"type\": \"string\", \"enum\": [\"small\", \"medium\", \"large\"], \"description\": \"Size of the bird. Default is 'small'\"}}, \"required\": [\"color\", \"habitat\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "Alright, I've got a few tasks to take care of. I need to look up the slang definition of \"Hello World\" to settle a debate with my friend about programming jargon. While doing that, I also have to check the latest one-month stock history for Apple Inc. (AAPL), and I need the data to include dividends and stock splits. I'm working on a physics project too, so I need to figure out the density of an object that weighs 10 kilograms and occupies a space of 2 cubic meters. Oh, and for my math homework, can you help me organize these numbers in descending order: [5, 2, 9, 1, 7, 4, 6, 3, 8]?", "query_for_retrieval": "Alright, I've got a few tasks to take care of. I need to look up the slang definition of \"Hello World\" to settle a debate with my friend about programming jargon. While doing that, I also have to check the latest one-month stock history for Apple Inc. (AAPL), and I need the data to include dividends and stock splits. I'm working on a physics project too, so I need to figure out the density of an object that weighs 10 kilograms and occupies a space of 2 cubic meters. Oh, and for my math homework, can you help me organize these numbers in descending order: [5, 2, 9, 1, 7, 4, 6, 3, 8]?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "sql", "query": "In a database that stores information about the inflation rates of different countries, could you change the inflation rate of Japan in the 'country_inflation' table under the 'inflation_rate' column? Please change the inflation rate to '1.2%' and make sure this operation only applies to the row where the 'country_name' is 'Japan'.", "query_for_retrieval": "In a database that stores information about the inflation rates of different countries, could you change the inflation rate of Japan in the 'country_inflation' table under the 'inflation_rate' column? Please change the inflation rate to '1.2%' and make sure this operation only applies to the row where the 'country_name' is 'Japan'.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_function", "query": "I've got three different datasets I'm analyzing. First, I have a list of ages from a recent survey that includes 23, 34, 45, 56, 67, 78, and 89 years old. Next, there's this week's pricing data from our store inventory: $10, $20, $30, $40, $50, and $60. Lastly, I'm looking at our basketball team's scores from the past season: 90, 80, 70, 60, 50, and 40 points. For each of these sets, I need to calculate the standard deviation to understand the variability within each group. Can you help me with that?", "query_for_retrieval": "I've got three different datasets I'm analyzing. First, I have a list of ages from a recent survey that includes 23, 34, 45, 56, 67, 78, and 89 years old. Next, there's this week's pricing data from our store inventory: $10, $20, $30, $40, $50, and $60. Lastly, I'm looking at our basketball team's scores from the past season: 90, 80, 70, 60, 50, and 40 points. For each of these sets, I need to calculate the standard deviation to understand the variability within each group. Can you help me with that?", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "executable_multiple_function", "query": "I just rewatched \"Pulp Fiction,\" and I'm curious about the mastermind behind its direction. Could you find out who directed this iconic movie for me?", "query_for_retrieval": "I just rewatched \"Pulp Fiction,\" and I'm curious about the mastermind behind its direction. Could you find out who directed this iconic movie for me?", "answer": "get_movie_director", "answer_params": "", "api_description": "def get_movie_director:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the director of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_director\", \"description\": \"Fetches the director of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "multiple_function", "query": "What are some recommended board games for 2 players and strategy based from store BoardGameGeek?", "query_for_retrieval": "What are some recommended board games for 2 players and strategy based from store BoardGameGeek?", "answer": "BoardGameGeek.recommend", "answer_params": "", "api_description": "def BoardGameGeek.recommend:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate game recommendation from BoardGameGeek store based on number of players and category.\n\t\n\tArguments:\n\t---------\n\t- numPlayers : integer = None (required) The number of players who will play the game.\n\t- category : string = None (required) The preferred category of board game. E.g. strategy, family, party etc.\n\t- difficulty : string = None (optional) Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default 'beginner'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"BoardGameGeek.recommend\", \"description\": \"Generate game recommendation from BoardGameGeek store based on number of players and category.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numPlayers\": {\"type\": \"integer\", \"description\": \"The number of players who will play the game.\"}, \"category\": {\"type\": \"string\", \"description\": \"The preferred category of board game. E.g. strategy, family, party etc.\"}, \"difficulty\": {\"type\": \"string\", \"description\": \"Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default 'beginner'\"}}, \"required\": [\"numPlayers\", \"category\"]}}"}
{"scope": "relevance", "query": "What's the general mood of twitter regarding the new iPhone release?", "query_for_retrieval": "What's the general mood of twitter regarding the new iPhone release?", "answer": "sentiment_analysis.twitter", "answer_params": "", "api_description": "def sentiment_analysis.twitter:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyzes the overall sentiment of twitter towards a certain topic.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The topic you want to analyze the sentiment for.\n\t- language : string = None (required) The language of the tweets.\n\t- num_tweets : integer = None (optional) Number of tweets to analyze. Default: 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sentiment_analysis.twitter\", \"description\": \"Analyzes the overall sentiment of twitter towards a certain topic.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The topic you want to analyze the sentiment for.\"}, \"language\": {\"type\": \"string\", \"description\": \"The language of the tweets.\"}, \"num_tweets\": {\"type\": \"integer\", \"description\": \"Number of tweets to analyze. Default: 0\"}}, \"required\": [\"topic\", \"language\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been shopping around on Amazon and stumbled upon a product with the ASIN 'B075H2B962'. I'm curious about what it actually is, so could you help me find out the product name?\n\nOn a different note, I'm brushing up on my math skills, and currently, I'm trying to figure out the number of different ways I can arrange 4 out of 10 unique items. Can you calculate that for me?\n\nAlso, I'm helping my nephew with his math homework, and we're stuck on finding the greatest common divisor of 36 and 48. Could you work that out?\n\nLastly, I'm in the process of buying a new home and considering a mortgage. I need to budget my finances, so for a loan amount of $200,000 with a 5% interest rate over 30 years, what would my monthly payment be?", "query_for_retrieval": "I've been shopping around on Amazon and stumbled upon a product with the ASIN 'B075H2B962'. I'm curious about what it actually is, so could you help me find out the product name?\n\nOn a different note, I'm brushing up on my math skills, and currently, I'm trying to figure out the number of different ways I can arrange 4 out of 10 unique items. Can you calculate that for me?\n\nAlso, I'm helping my nephew with his math homework, and we're stuck on finding the greatest common divisor of 36 and 48. Could you work that out?\n\nLastly, I'm in the process of buying a new home and considering a mortgage. I need to budget my finances, so for a loan amount of $200,000 with a 5% interest rate over 30 years, what would my monthly payment be?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "executable_simple", "query": "I'm tracking some unusual activity on our company's network, and I need to pinpoint the source. The IP in question is 172.16.254.1. Could you find out the associated zipcode for this IP address?", "query_for_retrieval": "I'm tracking some unusual activity on our company's network, and I need to pinpoint the source. The IP in question is 172.16.254.1. Could you find out the associated zipcode for this IP address?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "executable_parallel_function", "query": "I've been on a classic film binge lately, and I've got a few iconic movies lined up for my next movie night. However, my cousin is staying over and I want to make sure the films are appropriate for us to watch together. Could you check the age ratings for 'Pulp Fiction', 'The Godfather', 'Schindler's List', and 'The Dark Knight' for me?", "query_for_retrieval": "I've been on a classic film binge lately, and I've got a few iconic movies lined up for my next movie night. However, my cousin is staying over and I want to make sure the films are appropriate for us to watch together. Could you check the age ratings for 'Pulp Fiction', 'The Godfather', 'Schindler's List', and 'The Dark Knight' for me?", "answer": "get_movie_rating", "answer_params": "", "api_description": "def get_movie_rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the age rating of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_rating\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "simple", "query": "When was the signing of the Treaty of Lisbon?", "query_for_retrieval": "When was the signing of the Treaty of Lisbon?", "answer": "get_event_date", "answer_params": "", "api_description": "def get_event_date:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the date of a historical event.\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The name of the historical event.\n\t- location : string = None (optional) Location where the event took place. Default to global if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_event_date\", \"description\": \"Retrieve the date of a historical event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The name of the historical event.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location where the event took place. Default to global if not specified.\"}}, \"required\": [\"event\"]}}"}
{"scope": "relevance", "query": "What are the most common chords in a pop song?", "query_for_retrieval": "What are the most common chords in a pop song?", "answer": "music_theory.primary_triads", "answer_params": "", "api_description": "def music_theory.primary_triads:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the primary triads for a given key signature.\n\t\n\tArguments:\n\t---------\n\t- key_signature : string = None (required) The key signature to calculate the primary triads for.\n\t- include_inversions : boolean = None (required) Whether or not to include inversions in the returned triads.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_theory.primary_triads\", \"description\": \"Get the primary triads for a given key signature.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key_signature\": {\"type\": \"string\", \"description\": \"The key signature to calculate the primary triads for.\"}, \"include_inversions\": {\"type\": \"boolean\", \"description\": \"Whether or not to include inversions in the returned triads.\"}}, \"required\": [\"key_signature\", \"include_inversions\"]}}"}
{"scope": "relevance", "query": "Who is the most important prophet in Christianity?", "query_for_retrieval": "Who is the most important prophet in Christianity?", "answer": "color_mix.mix_two_colors", "answer_params": "", "api_description": "def color_mix.mix_two_colors:\n\t\"\"\"\n\tDescription:\n\t\n\tMix two colors together based on specific proportions.\n\t\n\tArguments:\n\t---------\n\t- color1 : string = None (required) The hex code of the first color, e.g. #FAEBD7\n\t- color2 : string = None (required) The hex code of the second color, e.g. #00FFFF\n\t- ratio : array = None (optional) The proportion of the two colors in the mix, default is [1, 1].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"color_mix.mix_two_colors\", \"description\": \"Mix two colors together based on specific proportions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color1\": {\"type\": \"string\", \"description\": \"The hex code of the first color, e.g. #FAEBD7\"}, \"color2\": {\"type\": \"string\", \"description\": \"The hex code of the second color, e.g. #00FFFF\"}, \"ratio\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The proportion of the two colors in the mix, default is [1, 1].\"}}, \"required\": [\"color1\", \"color2\"]}}"}
{"scope": "multiple_function", "query": "Search for famous contemporary sculptures in New York.", "query_for_retrieval": "Search for famous contemporary sculptures in New York.", "answer": "tourist_attraction.find", "answer_params": "", "api_description": "def tourist_attraction.find:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for tourist attractions based on type and location.\n\t\n\tArguments:\n\t---------\n\t- attractionType : string = None (required) Type of the attraction. E.g., monument, museum, park.\n\t- location : string = None (required) Location or city where the attraction is.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"tourist_attraction.find\", \"description\": \"Search for tourist attractions based on type and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"attractionType\": {\"type\": \"string\", \"description\": \"Type of the attraction. E.g., monument, museum, park.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location or city where the attraction is.\"}}, \"required\": [\"attractionType\", \"location\"]}}"}
{"scope": "parallel_multiple_function", "query": "Transfer $5000 from my checking to saving account. And calculate my potential interests after 5 years if the annual interest rate is 3%.", "query_for_retrieval": "Transfer $5000 from my checking to saving account. And calculate my potential interests after 5 years if the annual interest rate is 3%.", "answer": "bank_account.transfer", "answer_params": "", "api_description": "def bank_account.transfer:\n\t\"\"\"\n\tDescription:\n\t\n\tTransfer a given amount from one account to another.\n\t\n\tArguments:\n\t---------\n\t- from_account : string = None (required) The account to transfer from.\n\t- to_account : string = None (required) The account to transfer to.\n\t- amount : float = None (required) The amount to be transferred.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"bank_account.transfer\", \"description\": \"Transfer a given amount from one account to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"from_account\": {\"type\": \"string\", \"description\": \"The account to transfer from.\"}, \"to_account\": {\"type\": \"string\", \"description\": \"The account to transfer to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount to be transferred.\"}}, \"required\": [\"from_account\", \"to_account\", \"amount\"]}}"}
{"scope": "parallel_multiple_function", "query": "Determine the median and variance for the following data points 3,4,5,2,8,5. Also determine the mode for these points.", "query_for_retrieval": "Determine the median and variance for the following data points 3,4,5,2,8,5. Also determine the mode for these points.", "answer": "statistics.variance", "answer_params": "", "api_description": "def statistics.variance:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function calculates the variance of a given set of numbers.\n\t\n\tArguments:\n\t---------\n\t- data : array = None (required) The list of data points.\n\t- population : boolean = True (optional) Determines whether to use population variance formula. Default to True\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"statistics.variance\", \"description\": \"This function calculates the variance of a given set of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The list of data points.\"}, \"population\": {\"type\": \"boolean\", \"description\": \"Determines whether to use population variance formula. Default to True\", \"default\": true}}, \"required\": [\"data\"]}}"}
{"scope": "simple", "query": "Get concert details for the artist Beyonce performing in San Diego April 2022.", "query_for_retrieval": "Get concert details for the artist Beyonce performing in San Diego April 2022.", "answer": "concert.get_details", "answer_params": "", "api_description": "def concert.get_details:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the details for a particular concert based on the artist and location.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) Name of the artist/band who's performing.\n\t- location : string = None (required) City where the concert is taking place.\n\t- date : string = None (optional) Date of the concert in 'mm-yyyy' format. Default is the current month if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.get_details\", \"description\": \"Fetch the details for a particular concert based on the artist and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"Name of the artist/band who's performing.\"}, \"location\": {\"type\": \"string\", \"description\": \"City where the concert is taking place.\"}, \"date\": {\"type\": \"string\", \"description\": \"Date of the concert in 'mm-yyyy' format. Default is the current month if not specified.\"}}, \"required\": [\"artist\", \"location\"]}}"}
{"scope": "simple", "query": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "query_for_retrieval": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "answer": "get_museum_hours", "answer_params": "", "api_description": "def get_museum_hours:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve opening hours of a specified museum for the specified day.\n\t\n\tArguments:\n\t---------\n\t- museum_name : string = None (required) The name of the museum.\n\t- day : string = None (required) Day of the week. If not specified, returns the current day's hours.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_museum_hours\", \"description\": \"Retrieve opening hours of a specified museum for the specified day.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"day\": {\"type\": \"string\", \"description\": \"Day of the week. If not specified, returns the current day's hours.\"}}, \"required\": [\"museum_name\", \"day\"]}}"}
{"scope": "multiple_function", "query": "What are the names of proteins found in the plasma membrane?", "query_for_retrieval": "What are the names of proteins found in the plasma membrane?", "answer": "find_exhibition", "answer_params": "", "api_description": "def find_exhibition:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the exhibition is held, e.g., New York, NY.\n\t- art_form : string = None (required) The form of art the exhibition is displaying e.g., sculpture.\n\t- month : string = None (optional) The month of exhibition. Default value will return upcoming events.\n\t- user_ratings : string = None (optional) Select exhibitions with user rating threshold. Default is 'high'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_exhibition\", \"description\": \"Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the exhibition is held, e.g., New York, NY.\"}, \"art_form\": {\"type\": \"string\", \"description\": \"The form of art the exhibition is displaying e.g., sculpture.\"}, \"month\": {\"type\": \"string\", \"description\": \"The month of exhibition. Default value will return upcoming events.\"}, \"user_ratings\": {\"type\": \"string\", \"enum\": [\"low\", \"average\", \"high\"], \"description\": \"Select exhibitions with user rating threshold. Default is 'high'\"}}, \"required\": [\"location\", \"art_form\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me find four restaurants in New York that serve Italian food and cater to my dietary requirements of being vegan and gluten-free, and then find four more restaurants in Los Angeles that serve the same type of food and also cater to my dietary requirements?\"", "query_for_retrieval": "\"Can you help me find four restaurants in New York that serve Italian food and cater to my dietary requirements of being vegan and gluten-free, and then find four more restaurants in Los Angeles that serve the same type of food and also cater to my dietary requirements?\"", "answer": "find_restaurants", "answer_params": "", "api_description": "def find_restaurants:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on location and food preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The specific location or area.\n\t- food_type : string = None (required) The type of food preferred.\n\t- number : integer = None (required) Number of results to return.\n\t- dietary_requirements : array = None (optional) Special dietary requirements, e.g. vegan, gluten-free.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_restaurants\", \"description\": \"Locate nearby restaurants based on location and food preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The specific location or area.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"The type of food preferred.\"}, \"number\": {\"type\": \"integer\", \"description\": \"Number of results to return.\"}, \"dietary_requirements\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Special dietary requirements, e.g. vegan, gluten-free.\", \"default\": \"None\"}}, \"required\": [\"location\", \"food_type\", \"number\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on a statistical model related to health outcomes and need to calculate a few things. First, I need the probability of achieving exactly 5 successes in 10 trials, given each trial has a 50% chance of success. Additionally, for my analysis on the impact of the pandemic, I require the latest total death count for Italy due to COVID. Lastly, to correlate weather patterns with health data, could you fetch me the current temperature for New York City, located at 40.7128\u00b0 N latitude and 74.0060\u00b0 W longitude?", "query_for_retrieval": "I'm working on a statistical model related to health outcomes and need to calculate a few things. First, I need the probability of achieving exactly 5 successes in 10 trials, given each trial has a 50% chance of success. Additionally, for my analysis on the impact of the pandemic, I require the latest total death count for Italy due to COVID. Lastly, to correlate weather patterns with health data, could you fetch me the current temperature for New York City, located at 40.7128\u00b0 N latitude and 74.0060\u00b0 W longitude?", "answer": "calc_binomial_probability", "answer_params": "", "api_description": "def calc_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of getting k successes in n trials.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of trials.\n\t- k : integer = None (required) The number of successes.\n\t- p : float = None (required) The probability of success.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_probability\", \"description\": \"Calculates the probability of getting k successes in n trials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of trials.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of successes.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success.\"}}, \"required\": [\"n\", \"k\", \"p\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"John has $5000 that he wants to invest. He is considering two options. The first option is a savings account that compounds interest quarterly at an annual rate of 4% for 5 years. The second option is a bond that offers simple interest at an annual rate of 3.5% for 5 years. How much would John have at the end of 5 years for both options?\"", "query_for_retrieval": "\"John has $5000 that he wants to invest. He is considering two options. The first option is a savings account that compounds interest quarterly at an annual rate of 4% for 5 years. The second option is a bond that offers simple interest at an annual rate of 3.5% for 5 years. How much would John have at the end of 5 years for both options?\"", "answer": "financial.compound_interest", "answer_params": "", "api_description": "def financial.compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates compound interest.\n\t\n\tArguments:\n\t---------\n\t- principle : integer = None (required) The initial amount of money that is being compounded.\n\t- rate : float = None (required) The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\n\t- time : integer = None (required) The amount of time, in years, that the money is to be compounded for.\n\t- n : integer = None (required) The number of times interest applied per time period.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financial.compound_interest\", \"description\": \"Calculates compound interest.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principle\": {\"type\": \"integer\", \"description\": \"The initial amount of money that is being compounded.\"}, \"rate\": {\"type\": \"float\", \"description\": \"The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The amount of time, in years, that the money is to be compounded for.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The number of times interest applied per time period.\"}}, \"required\": [\"principle\", \"rate\", \"time\", \"n\"]}}"}
{"scope": "executable_multiple_function", "query": "In the midst of solving a combinatorics problem, I've hit a step that requires me to calculate the factorial of 7. Could you help me with that?", "query_for_retrieval": "In the midst of solving a combinatorics problem, I've hit a step that requires me to calculate the factorial of 7. Could you help me with that?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "javascript", "query": "How can I update the DOM event listeners from an old virtual node oldVirtualNode to a new one newVirtualNode, considering the new virtual node has a click event that needs to be normalized and updated?", "query_for_retrieval": "How can I update the DOM event listeners from an old virtual node oldVirtualNode to a new one newVirtualNode, considering the new virtual node has a click event that needs to be normalized and updated?", "answer": "updateDOMListeners", "answer_params": "", "api_description": "def updateDOMListeners:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function updates the DOM event listeners from an old virtual node to a new one, ensuring that any changes in event listeners are properly handled and applied to the target element.\n\t\n\tArguments:\n\t---------\n\t- oldVnode : any = None (required) The old virtual node, containing data about previous event listeners.\n\t- vnode : any = None (required) The new virtual node, containing data about current event listeners.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"updateDOMListeners\", \"description\": \"This function updates the DOM event listeners from an old virtual node to a new one, ensuring that any changes in event listeners are properly handled and applied to the target element.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"oldVnode\": {\"type\": \"any\", \"description\": \"The old virtual node, containing data about previous event listeners.\"}, \"vnode\": {\"type\": \"any\", \"description\": \"The new virtual node, containing data about current event listeners.\"}}, \"required\": [\"oldVnode\", \"vnode\"]}}"}
{"scope": "simple", "query": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'", "query_for_retrieval": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'", "answer": "game_list.get_games", "answer_params": "", "api_description": "def game_list.get_games:\n\t\"\"\"\n\tDescription:\n\t\n\tGet a list of video games based on release year, multiplayer functionality and ESRB rating\n\t\n\tArguments:\n\t---------\n\t- release_year : integer = None (required) The year the game was released.\n\t- multiplayer : boolean = None (required) Whether the game has multiplayer functionality.\n\t- ESRB_rating : string = None (required) The ESRB rating of the game.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_list.get_games\", \"description\": \"Get a list of video games based on release year, multiplayer functionality and ESRB rating\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"release_year\": {\"type\": \"integer\", \"description\": \"The year the game was released.\"}, \"multiplayer\": {\"type\": \"boolean\", \"description\": \"Whether the game has multiplayer functionality.\"}, \"ESRB_rating\": {\"type\": \"string\", \"description\": \"The ESRB rating of the game.\"}}, \"required\": [\"release_year\", \"multiplayer\", \"ESRB_rating\"]}}"}
{"scope": "rest", "query": "I'm integrating a feature into our health app that allows users to see current COVID-19 statistics for Japan, focusing on total cases, recoveries, and deaths. My access credentials are 'YOUR-RAPID-API-KEY' for the API key and 'covid-193.p.rapidapi.com' for the host. How can I fetch this data using the requests.get function, and should I consider any specific headers or parameters to ensure accuracy and timeliness of the data?", "query_for_retrieval": "I'm integrating a feature into our health app that allows users to see current COVID-19 statistics for Japan, focusing on total cases, recoveries, and deaths. My access credentials are 'YOUR-RAPID-API-KEY' for the API key and 'covid-193.p.rapidapi.com' for the host. How can I fetch this data using the requests.get function, and should I consider any specific headers or parameters to ensure accuracy and timeliness of the data?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Find the value of a vintage Super Mario Bros. game from 1985 like new.", "query_for_retrieval": "Find the value of a vintage Super Mario Bros. game from 1985 like new.", "answer": "game_valuation", "answer_params": "", "api_description": "def game_valuation:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the current market value of a vintage video game.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) The name of the game.\n\t- release_year : integer = None (required) The year the game was released.\n\t- condition : string = None (optional) The condition of the game. Default is 'Used'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_valuation\", \"description\": \"Get the current market value of a vintage video game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"release_year\": {\"type\": \"integer\", \"description\": \"The year the game was released.\"}, \"condition\": {\"type\": \"string\", \"enum\": [\"New\", \"Like New\", \"Used\", \"Fair\", \"Poor\"], \"description\": \"The condition of the game. Default is 'Used'.\"}}, \"required\": [\"game_name\", \"release_year\"]}}"}
{"scope": "rest", "query": "If I need to check the geolocation data for my IP address in German, but I only want to get the query, status, and country fields, how should I make a GET request to the IP-API service?", "query_for_retrieval": "If I need to check the geolocation data for my IP address in German, but I only want to get the query, status, and country fields, how should I make a GET request to the IP-API service?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "What's the ranking of Barcelona in the 2021 La Liga season?", "query_for_retrieval": "What's the ranking of Barcelona in the 2021 La Liga season?", "answer": "sports_ranking", "answer_params": "", "api_description": "def sports_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the ranking of a team in a given sports league and season.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- league : string = None (required) The name of the sports league.\n\t- season : string = None (required) The season for which ranking needs to be obtained.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking\", \"description\": \"Get the ranking of a team in a given sports league and season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the sports league.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which ranking needs to be obtained.\"}}, \"required\": [\"team\", \"league\", \"season\"]}}"}
{"scope": "simple", "query": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "query_for_retrieval": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "answer": "employee.fetch_data", "answer_params": "", "api_description": "def employee.fetch_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the detailed data for a specific employee in a given company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- employee_id : integer = None (required) The unique ID of the employee.\n\t- data_field : array = None (optional) Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"employee.fetch_data\", \"description\": \"Fetches the detailed data for a specific employee in a given company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"employee_id\": {\"type\": \"integer\", \"description\": \"The unique ID of the employee.\"}, \"data_field\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Personal Info\", \"Job History\", \"Payroll\", \"Attendance\"]}, \"description\": \"Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']\"}}, \"required\": [\"company_name\", \"employee_id\"]}}"}
{"scope": "simple", "query": "Get 5 latest news on Bitcoin in US", "query_for_retrieval": "Get 5 latest news on Bitcoin in US", "answer": "get_news", "answer_params": "", "api_description": "def get_news:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the latest news on a specific topic.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The subject for the news topic.\n\t- quantity : integer = None (required) Number of articles to fetch.\n\t- region : string = None (optional) The geographical region for the news. Default is 'US'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_news\", \"description\": \"Fetches the latest news on a specific topic.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The subject for the news topic.\"}, \"quantity\": {\"type\": \"integer\", \"description\": \"Number of articles to fetch.\"}, \"region\": {\"type\": \"string\", \"description\": \"The geographical region for the news. Default is 'US'.\"}}, \"required\": [\"topic\", \"quantity\"]}}"}
{"scope": "simple", "query": "Calculate the power of 3 raised to the power 4.", "query_for_retrieval": "Calculate the power of 3 raised to the power 4.", "answer": "math.power", "answer_params": "", "api_description": "def math.power:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the power of one number raised to another.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base number.\n\t- exponent : integer = None (required) The exponent.\n\t- mod : integer = None (optional) The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.power\", \"description\": \"Calculate the power of one number raised to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base number.\"}, \"exponent\": {\"type\": \"integer\", \"description\": \"The exponent.\"}, \"mod\": {\"type\": \"integer\", \"description\": \"The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided.\"}}, \"required\": [\"base\", \"exponent\"]}}"}
{"scope": "parallel_multiple_function", "query": "How many steps do I need to walk in order to lose 500 calories and how much water do I need to intake today if I exercise for 2 hours?", "query_for_retrieval": "How many steps do I need to walk in order to lose 500 calories and how much water do I need to intake today if I exercise for 2 hours?", "answer": "payment_calculation", "answer_params": "", "api_description": "def payment_calculation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate how much a person should pay given the items purchased and their quantities\n\t\n\tArguments:\n\t---------\n\t- items : array = None (required) List of items purchased.\n\t- quantities : array = None (required) Quantity of each item purchased in correspondence with the previous items list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"payment_calculation\", \"description\": \"Calculate how much a person should pay given the items purchased and their quantities\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items purchased.\"}, \"quantities\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Quantity of each item purchased in correspondence with the previous items list.\"}}, \"required\": [\"items\", \"quantities\"]}}"}
{"scope": "executable_multiple_function", "query": "As a historian delving into ancient Roman political alliances, I've stumbled upon an interesting numerical challenge. I need to determine the greatest common divisor for the number of senators during two distinct time periods, one with 450 senators and the other with 300. This will help me understand the commonalities in their political structures. Could you help me calculate that?", "query_for_retrieval": "As a historian delving into ancient Roman political alliances, I've stumbled upon an interesting numerical challenge. I need to determine the greatest common divisor for the number of senators during two distinct time periods, one with 450 senators and the other with 300. This will help me understand the commonalities in their political structures. Could you help me calculate that?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "simple", "query": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "query_for_retrieval": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "answer": "calculate_emission_savings", "answer_params": "", "api_description": "def calculate_emission_savings:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n\t\n\tArguments:\n\t---------\n\t- energy_type : string = None (required) Type of the renewable energy source.\n\t- usage_duration : integer = None (required) Usage duration in months.\n\t- region : string = None (optional) The region where you use energy. Default is 'Texas'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_emission_savings\", \"description\": \"Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"energy_type\": {\"type\": \"string\", \"description\": \"Type of the renewable energy source.\"}, \"usage_duration\": {\"type\": \"integer\", \"description\": \"Usage duration in months.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region where you use energy. Default is 'Texas'.\"}}, \"required\": [\"energy_type\", \"usage_duration\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me order a custom sculpture of a horse made from Marble that is 20 inches in size, then another sculpture of a dog made from Wood that is 15 inches in size, followed by a custom painting of a sunset with the main color being Red that is 30 inches in size, and finally a painting of a cityscape with the main color being Blue that is 25 inches in size?\"", "query_for_retrieval": "\"Could you please help me order a custom sculpture of a horse made from Marble that is 20 inches in size, then another sculpture of a dog made from Wood that is 15 inches in size, followed by a custom painting of a sunset with the main color being Red that is 30 inches in size, and finally a painting of a cityscape with the main color being Blue that is 25 inches in size?\"", "answer": "sculpture.create_custom", "answer_params": "", "api_description": "def sculpture.create_custom:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder a custom sculpture with your preferred material.\n\t\n\tArguments:\n\t---------\n\t- item : string = None (required) The subject of the sculpture, e.g. horse\n\t- material : string = None (required) Preferred material for the sculpture.\n\t- size : integer = None (optional) The desired size for the sculpture in inches. This parameter is optional. Default is 10 inches if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture.create_custom\", \"description\": \"Order a custom sculpture with your preferred material.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"string\", \"description\": \"The subject of the sculpture, e.g. horse\"}, \"material\": {\"type\": \"string\", \"enum\": [\"Bronze\", \"Marble\", \"Terracotta\", \"Wood\", \"Stone\"], \"description\": \"Preferred material for the sculpture.\"}, \"size\": {\"type\": \"integer\", \"description\": \"The desired size for the sculpture in inches. This parameter is optional. Default is 10 inches if not specified.\"}}, \"required\": [\"item\", \"material\"]}}"}
{"scope": "java", "query": "How can I serialize a `MultiPoint` object with 5 points (1,2) (3,4) (5,6), (7,8) (9,10) into a ByteBuffer using 'XyzmMode.XYZ' for spatial data storage in a HANA database?", "query_for_retrieval": "How can I serialize a `MultiPoint` object with 5 points (1,2) (3,4) (5,6), (7,8) (9,10) into a ByteBuffer using 'XyzmMode.XYZ' for spatial data storage in a HANA database?", "answer": "writeMultiPoint", "answer_params": "", "api_description": "def writeMultiPoint:\n\t\"\"\"\n\tDescription:\n\t\n\tSerializes a MultiPoint geometry into a ByteBuffer with a specified XYZM mode, which includes writing the header and the number of points.\n\t\n\tArguments:\n\t---------\n\t- multiPoint : any = None (required) The MultiPoint object to serialize MultiPoint object constructor takes a list of Point object, which each is constructed by Point(x, y) x and y are integer coordinates .\n\t- xyzmMode : any = None (required) The XYZM mode to use for serialization, which determines the dimensionality of the points.\n\t- buffer : any = None (required) The ByteBuffer where the serialized MultiPoint will be written. Default to get ByteBuffer.allocate method for 1024 bytes if not specified\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"writeMultiPoint\", \"description\": \"Serializes a MultiPoint geometry into a ByteBuffer with a specified XYZM mode, which includes writing the header and the number of points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"multiPoint\": {\"type\": \"any\", \"description\": \"The MultiPoint object to serialize MultiPoint object constructor takes a list of Point object, which each is constructed by Point(x, y) x and y are integer coordinates .\"}, \"xyzmMode\": {\"type\": \"any\", \"description\": \"The XYZM mode to use for serialization, which determines the dimensionality of the points.\"}, \"buffer\": {\"type\": \"any\", \"description\": \"The ByteBuffer where the serialized MultiPoint will be written. Default to get ByteBuffer.allocate method for 1024 bytes if not specified\"}}, \"required\": [\"multiPoint\", \"xyzmMode\", \"buffer\"]}}"}
{"scope": "relevance", "query": "Retrieve me some stock news", "query_for_retrieval": "Retrieve me some stock news", "answer": "calculate_capital_gains", "answer_params": "", "api_description": "def calculate_capital_gains:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the capital gains or losses based on purchase price, sale price, and number of shares.\n\t\n\tArguments:\n\t---------\n\t- purchase_price : float = None (required) The price at which the shares were bought.\n\t- sale_price : float = None (required) The price at which the shares were sold.\n\t- shares : integer = None (required) The number of shares sold.\n\t- tax_rate : float = None (optional) The capital gains tax rate. Default is 0.15.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_capital_gains\", \"description\": \"Calculate the capital gains or losses based on purchase price, sale price, and number of shares.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"purchase_price\": {\"type\": \"float\", \"description\": \"The price at which the shares were bought.\"}, \"sale_price\": {\"type\": \"float\", \"description\": \"The price at which the shares were sold.\"}, \"shares\": {\"type\": \"integer\", \"description\": \"The number of shares sold.\"}, \"tax_rate\": {\"type\": \"float\", \"description\": \"The capital gains tax rate. Default is 0.15.\"}}, \"required\": [\"purchase_price\", \"sale_price\", \"shares\"]}}"}
{"scope": "simple", "query": "Calculate the factorial of the number 5", "query_for_retrieval": "Calculate the factorial of the number 5", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to compute factorial.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to compute factorial.\"}}, \"required\": [\"number\"]}}"}
{"scope": "java", "query": "How can I serialize a map of data `userProfile` with keys 'name', 'age', and 'email' into an XContentBuilder object, ensuring there are no self-references and including start and end object headers in the output?", "query_for_retrieval": "How can I serialize a map of data `userProfile` with keys 'name', 'age', and 'email' into an XContentBuilder object, ensuring there are no self-references and including start and end object headers in the output?", "answer": "XContentBuilder.map", "answer_params": "", "api_description": "def XContentBuilder.map:\n\t\"\"\"\n\tDescription:\n\t\n\tSerializes a map into the XContentBuilder, with options to ensure there are no self-references within the map and to include start and end object headers in the output.\n\t\n\tArguments:\n\t---------\n\t- values : HashMap = None (required) The map of values to serialize into the XContentBuilder.\n\t- ensureNoSelfReferences : boolean = None (required) A flag to ensure the map does not contain references to itself, which could cause a stackoverflow error.\n\t- writeStartAndEndHeaders : boolean = None (required) A flag to indicate whether to write the start and end object headers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"XContentBuilder.map\", \"description\": \"Serializes a map into the XContentBuilder, with options to ensure there are no self-references within the map and to include start and end object headers in the output.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"values\": {\"type\": \"HashMap\", \"description\": \"The map of values to serialize into the XContentBuilder.\"}, \"ensureNoSelfReferences\": {\"type\": \"boolean\", \"description\": \"A flag to ensure the map does not contain references to itself, which could cause a stackoverflow error.\"}, \"writeStartAndEndHeaders\": {\"type\": \"boolean\", \"description\": \"A flag to indicate whether to write the start and end object headers.\"}}, \"required\": [\"values\", \"ensureNoSelfReferences\", \"writeStartAndEndHeaders\"]}}"}
{"scope": "parallel_multiple_function", "query": "What was the average life expectancy in the USA in the year 1900 and 1950? Additionally, what was the Gross Domestic Product (GDP) of the USA in these years?", "query_for_retrieval": "What was the average life expectancy in the USA in the year 1900 and 1950? Additionally, what was the Gross Domestic Product (GDP) of the USA in these years?", "answer": "us_history.gdp", "answer_params": "", "api_description": "def us_history.gdp:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the Gross Domestic Product of the USA for a specific year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year for which to retrieve GDP data.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.gdp\", \"description\": \"Retrieves the Gross Domestic Product of the USA for a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year for which to retrieve GDP data.\"}}, \"required\": [\"year\"]}}"}
{"scope": "multiple_function", "query": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "query_for_retrieval": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current stock price of the specified companies\n\t\n\tArguments:\n\t---------\n\t- company_names : array = None (required) The list of companies for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieves the current stock price of the specified companies\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_names\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of companies for which to retrieve the stock price.\"}}, \"required\": [\"company_names\"]}}"}
{"scope": "executable_simple", "query": "During our physics lab session, we're experimenting with electric fields and their effects on charged particles. We've placed a particle that carries a charge of 5 coulombs within a field where there's a voltage of 10 volts. I need to calculate the electrostatic potential energy for this scenario. Could you work that out for me?", "query_for_retrieval": "During our physics lab session, we're experimenting with electric fields and their effects on charged particles. We've placed a particle that carries a charge of 5 coulombs within a field where there's a voltage of 10 volts. I need to calculate the electrostatic potential energy for this scenario. Could you work that out for me?", "answer": "calculate_electrostatic_potential_energy", "answer_params": "", "api_description": "def calculate_electrostatic_potential_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the electrostatic potential energy.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge of the object, in coulombs.\n\t- voltage : float = None (required) The voltage of the object, in volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential_energy\", \"description\": \"Calculates the electrostatic potential energy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge of the object, in coulombs.\"}, \"voltage\": {\"type\": \"float\", \"description\": \"The voltage of the object, in volts.\"}}, \"required\": [\"charge\", \"voltage\"]}}"}
{"scope": "simple", "query": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "query_for_retrieval": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the stock price for a specific company and time frame.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The ticker symbol of the company.\n\t- days : integer = None (required) Number of past days for which the stock price is required.\n\t- exchange : string = None (optional) The stock exchange where the company is listed, default is NYSE\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieve the stock price for a specific company and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The ticker symbol of the company.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days for which the stock price is required.\"}, \"exchange\": {\"type\": \"string\", \"description\": \"The stock exchange where the company is listed, default is NYSE\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "relevance", "query": "Where is the nearest pharmacy in Los Angeles?", "query_for_retrieval": "Where is the nearest pharmacy in Los Angeles?", "answer": "get_route_to_location", "answer_params": "", "api_description": "def get_route_to_location:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates a route to a specified location based on the starting point and desired method of transportation.\n\t\n\tArguments:\n\t---------\n\t- start_point : string = None (required) The starting location for the route.\n\t- end_point : string = None (required) The desired destination of the route.\n\t- transport_method : string = Driving (optional) The method of transportation. Options include 'Driving', 'Walking', 'Cycling', and 'Public Transport'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_route_to_location\", \"description\": \"Calculates a route to a specified location based on the starting point and desired method of transportation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_point\": {\"type\": \"string\", \"description\": \"The starting location for the route.\"}, \"end_point\": {\"type\": \"string\", \"description\": \"The desired destination of the route.\"}, \"transport_method\": {\"type\": \"string\", \"description\": \"The method of transportation. Options include 'Driving', 'Walking', 'Cycling', and 'Public Transport'\", \"default\": \"Driving\"}}, \"required\": [\"start_point\", \"end_point\"]}}"}
{"scope": "relevance", "query": "What's the mass of an electron?", "query_for_retrieval": "What's the mass of an electron?", "answer": "calculate_magnetic_field", "answer_params": "", "api_description": "def calculate_magnetic_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the magnetic field at a certain distance from a straight wire carrying current using Ampere\u2019s Law.\n\t\n\tArguments:\n\t---------\n\t- current : float = None (required) The current flowing through the wire in amperes.\n\t- distance : float = None (required) The distance from the wire at which to calculate the magnetic field in meters.\n\t- permeability : float = None (optional) The permeability of free space. The default value is 4\u03c0 \u00d7 10^\u22127 N/A^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_magnetic_field\", \"description\": \"Calculate the magnetic field at a certain distance from a straight wire carrying current using Ampere\\u2019s Law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"float\", \"description\": \"The current flowing through the wire in amperes.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance from the wire at which to calculate the magnetic field in meters.\"}, \"permeability\": {\"type\": \"float\", \"description\": \"The permeability of free space. The default value is 4\\u03c0 \\u00d7 10^\\u22127 N/A^2.\"}}, \"required\": [\"current\", \"distance\"]}}"}
{"scope": "simple", "query": "Find the greatest common divisor (GCD) of 12 and 18", "query_for_retrieval": "Find the greatest common divisor (GCD) of 12 and 18", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the greatest common divisor of two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) First number.\n\t- num2 : integer = None (required) Second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Calculate the greatest common divisor of two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"First number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"Second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a small project in which I need to perform binary calculations. Could you help me with adding the binary numbers '10011' and '1100' together?", "query_for_retrieval": "I'm working on a small project in which I need to perform binary calculations. Could you help me with adding the binary numbers '10011' and '1100' together?", "answer": "add_binary_numbers", "answer_params": "", "api_description": "def add_binary_numbers:\n\t\"\"\"\n\tDescription:\n\t\n\tAdds two binary numbers.\n\t\n\tArguments:\n\t---------\n\t- a : string = None (required) The first binary number.\n\t- b : string = None (required) The second binary number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_binary_numbers\", \"description\": \"Adds two binary numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"string\", \"description\": \"The first binary number.\"}, \"b\": {\"type\": \"string\", \"description\": \"The second binary number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a day out? I want to start by having lunch at a restaurant in San Francisco that serves Italian food. I would like to see 5 options and I am a vegan. After lunch, I want to catch a match of the Golden State Warriors. Can you tell me their next 3 match schedules in the NBA? Later in the evening, I am thinking of buying some stocks. Can you provide me a detailed information about the Apple Inc. stocks in the NASDAQ market? And finally, I am thinking of buying a guitar. I have a budget of $500. Can you find me a Fender guitar within my budget?\"", "query_for_retrieval": "\"Can you help me plan a day out? I want to start by having lunch at a restaurant in San Francisco that serves Italian food. I would like to see 5 options and I am a vegan. After lunch, I want to catch a match of the Golden State Warriors. Can you tell me their next 3 match schedules in the NBA? Later in the evening, I am thinking of buying some stocks. Can you provide me a detailed information about the Apple Inc. stocks in the NASDAQ market? And finally, I am thinking of buying a guitar. I have a budget of $500. Can you find me a Fender guitar within my budget?\"", "answer": "find_restaurants", "answer_params": "", "api_description": "def find_restaurants:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on location and food preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The specific location or area.\n\t- food_type : string = None (required) The type of food preferred.\n\t- number : integer = None (required) Number of results to return.\n\t- dietary_requirements : array = None (optional) Special dietary requirements, e.g. vegan, gluten-free. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_restaurants\", \"description\": \"Locate nearby restaurants based on location and food preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The specific location or area.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"The type of food preferred.\"}, \"number\": {\"type\": \"integer\", \"description\": \"Number of results to return.\"}, \"dietary_requirements\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Special dietary requirements, e.g. vegan, gluten-free. Default is all if not specified.\"}}, \"required\": [\"location\", \"food_type\", \"number\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to perform a series of binary number additions. Could you start by adding 0011 with 1100? Once that's done, I also need the sum of 1010 and 0101, followed by adding together 1111 and 0000. Lastly, let's add 0001 and 1110. Let me know the results for each pair, please.", "query_for_retrieval": "I need to perform a series of binary number additions. Could you start by adding 0011 with 1100? Once that's done, I also need the sum of 1010 and 0101, followed by adding together 1111 and 0000. Lastly, let's add 0001 and 1110. Let me know the results for each pair, please.", "answer": "add_binary_numbers", "answer_params": "", "api_description": "def add_binary_numbers:\n\t\"\"\"\n\tDescription:\n\t\n\tAdds two binary numbers.\n\t\n\tArguments:\n\t---------\n\t- a : string = None (required) The first binary number.\n\t- b : string = None (required) The second binary number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_binary_numbers\", \"description\": \"Adds two binary numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"string\", \"description\": \"The first binary number.\"}, \"b\": {\"type\": \"string\", \"description\": \"The second binary number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are planning a vacation to Paris, France. You want to stay at the 'Hotel Le Bristol Paris' in a suite room for 10 days starting from 12-01-2022. You also have a preference for a city view from your room. How would you book this hotel? After booking, you want to know how much 1000 US dollars would be in Euros. Can you find out the latest exchange rate? On your way to the hotel, you want to stop by a Safeway store in Palo Alto, CA to pick up some items. You need to order 2 bottles of water, 3 apples, and 1 loaf of bread. How would you place this order? Lastly, you are curious about the universe and want to know how long it would take for light to travel from Earth to Proxima Centauri, which is approximately 4.24 light years away, considering the speed of light in vacuum is 299792458 m/s. Can you calculate this?\"", "query_for_retrieval": "\"Imagine you are planning a vacation to Paris, France. You want to stay at the 'Hotel Le Bristol Paris' in a suite room for 10 days starting from 12-01-2022. You also have a preference for a city view from your room. How would you book this hotel? After booking, you want to know how much 1000 US dollars would be in Euros. Can you find out the latest exchange rate? On your way to the hotel, you want to stop by a Safeway store in Palo Alto, CA to pick up some items. You need to order 2 bottles of water, 3 apples, and 1 loaf of bread. How would you place this order? Lastly, you are curious about the universe and want to know how long it would take for light to travel from Earth to Proxima Centauri, which is approximately 4.24 light years away, considering the speed of light in vacuum is 299792458 m/s. Can you calculate this?\"", "answer": "book_hotel", "answer_params": "", "api_description": "def book_hotel:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a room in a specific hotel with particular preferences\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The location of the hotel.\n\t- room_type : string = None (required) The type of room preferred.\n\t- start_date : string = None (required) The starting date of the stay in format MM-DD-YYYY.\n\t- stay_duration : integer = None (required) The duration of the stay in days.\n\t- view : string = No preference (optional) The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_hotel\", \"description\": \"Book a room in a specific hotel with particular preferences\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of room preferred.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The starting date of the stay in format MM-DD-YYYY.\"}, \"stay_duration\": {\"type\": \"integer\", \"description\": \"The duration of the stay in days.\"}, \"view\": {\"type\": \"string\", \"description\": \"The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.\", \"default\": \"No preference\"}}, \"required\": [\"hotel_name\", \"location\", \"room_type\", \"start_date\", \"stay_duration\"]}}"}
{"scope": "multiple_function", "query": "Book a ticket for the upcoming Eminem concert in New York City, I would like to get the one with backstage access.", "query_for_retrieval": "Book a ticket for the upcoming Eminem concert in New York City, I would like to get the one with backstage access.", "answer": "concert.book_ticket", "answer_params": "", "api_description": "def concert.book_ticket:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a ticket for a concert at a specific location with various add-ons like backstage pass.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) Name of the artist for the concert.\n\t- location : string = None (required) City where the concert will take place.\n\t- add_ons : array = None (optional) Add-ons for the concert. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.book_ticket\", \"description\": \"Book a ticket for a concert at a specific location with various add-ons like backstage pass.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"Name of the artist for the concert.\"}, \"location\": {\"type\": \"string\", \"description\": \"City where the concert will take place.\"}, \"add_ons\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Backstage Pass\", \"VIP Seating\", \"Parking Pass\"]}, \"description\": \"Add-ons for the concert. Default empty array\"}}, \"required\": [\"artist\", \"location\"]}}"}
{"scope": "simple", "query": "Find the current world rank of a Tennis player, Serena Williams.", "query_for_retrieval": "Find the current world rank of a Tennis player, Serena Williams.", "answer": "get_sport_ranking", "answer_params": "", "api_description": "def get_sport_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current world ranking of a sportsperson based on the sport and player's name.\n\t\n\tArguments:\n\t---------\n\t- sport : string = None (required) Name of the sport.\n\t- player_name : string = None (required) Name of the player.\n\t- gender : string = all (optional) Gender of the player. This is optional. The possible values are male or female.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sport_ranking\", \"description\": \"Retrieve the current world ranking of a sportsperson based on the sport and player's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sport\": {\"type\": \"string\", \"description\": \"Name of the sport.\"}, \"player_name\": {\"type\": \"string\", \"description\": \"Name of the player.\"}, \"gender\": {\"type\": \"string\", \"description\": \"Gender of the player. This is optional. The possible values are male or female.\", \"default\": \"all\"}}, \"required\": [\"sport\", \"player_name\"]}}"}
{"scope": "relevance", "query": "How many red marbles are there in a bag of 20, given the probability of drawing a red marble is 0.3?", "query_for_retrieval": "How many red marbles are there in a bag of 20, given the probability of drawing a red marble is 0.3?", "answer": "probability.determine_population", "answer_params": "", "api_description": "def probability.determine_population:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population based on the probability and sample size\n\t\n\tArguments:\n\t---------\n\t- probability : float = None (required) Probability of a certain outcome.\n\t- sample_size : integer = None (required) Total number of events in sample.\n\t- round : boolean = None (optional) Should the answer be rounded up to nearest integer? Default is true\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability.determine_population\", \"description\": \"Calculate the population based on the probability and sample size\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"probability\": {\"type\": \"float\", \"description\": \"Probability of a certain outcome.\"}, \"sample_size\": {\"type\": \"integer\", \"description\": \"Total number of events in sample.\"}, \"round\": {\"type\": \"boolean\", \"description\": \"Should the answer be rounded up to nearest integer? Default is true\"}}, \"required\": [\"probability\", \"sample_size\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a machine learning model, comparing the characteristics of two objects. The feature vectors for these objects are [0.5, 0.7, 0.2, 0.9, 0.1] for the first object and [0.4, 0.6, 0.3, 0.8, 0.2] for the second. To understand how similar these objects are, I need to calculate the cosine similarity between these two vectors. Can you help me with that?", "query_for_retrieval": "I'm working on a machine learning model, comparing the characteristics of two objects. The feature vectors for these objects are [0.5, 0.7, 0.2, 0.9, 0.1] for the first object and [0.4, 0.6, 0.3, 0.8, 0.2] for the second. To understand how similar these objects are, I need to calculate the cosine similarity between these two vectors. Can you help me with that?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "simple", "query": "Find out the population and species of turtles in Mississippi river in 2020.", "query_for_retrieval": "Find out the population and species of turtles in Mississippi river in 2020.", "answer": "ecology.get_turtle_population", "answer_params": "", "api_description": "def ecology.get_turtle_population:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the population and species of turtles in a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the location.\n\t- year : integer = None (optional) The year of the data requested. Default is 2001.\n\t- species : boolean = None (optional) Whether to include species information. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ecology.get_turtle_population\", \"description\": \"Get the population and species of turtles in a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the location.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year of the data requested. Default is 2001.\"}, \"species\": {\"type\": \"boolean\", \"description\": \"Whether to include species information. Default is false.\"}}, \"required\": [\"location\"]}}"}
{"scope": "sql", "query": "Can you retrieve the names and research topics of the physicists from the \"Physicists\" table who are working on Quantum Mechanics?.", "query_for_retrieval": "Can you retrieve the names and research topics of the physicists from the \"Physicists\" table who are working on Quantum Mechanics?.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Calculate the volume of the sphere with radius 3 units.", "query_for_retrieval": "Calculate the volume of the sphere with radius 3 units.", "answer": "calculate_park_area", "answer_params": "", "api_description": "def calculate_park_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total area of a park based on the radius of its circular part.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) The radius of the circular part of the park.\n\t- units : string = None (required) The units of the radius.\n\t- shape : string = None (optional) The shape of the park. Default is 'circle'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_park_area\", \"description\": \"Calculate the total area of a park based on the radius of its circular part.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"The radius of the circular part of the park.\"}, \"units\": {\"type\": \"string\", \"description\": \"The units of the radius.\"}, \"shape\": {\"type\": \"string\", \"description\": \"The shape of the park. Default is 'circle'.\"}}, \"required\": [\"radius\", \"units\"]}}"}
{"scope": "multiple_function", "query": "How much time will it take for the light to reach earth from a star 4 light years away?", "query_for_retrieval": "How much time will it take for the light to reach earth from a star 4 light years away?", "answer": "light_travel_time", "answer_params": "", "api_description": "def light_travel_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the time taken for light to travel from a celestial body to another.\n\t\n\tArguments:\n\t---------\n\t- distance_in_light_years : integer = None (required) The distance between the two celestial bodies in light years.\n\t- speed_of_light : integer = None (optional) The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"light_travel_time\", \"description\": \"Calculate the time taken for light to travel from a celestial body to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance_in_light_years\": {\"type\": \"integer\", \"description\": \"The distance between the two celestial bodies in light years.\"}, \"speed_of_light\": {\"type\": \"integer\", \"description\": \"The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\"}}, \"required\": [\"distance_in_light_years\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a few probability problems for my statistics class, and I need to figure out some permutations. Could you help me calculate the following:\n\n1. The number of different ways to arrange 5 books on a shelf if I have 20 books to choose from.\n2. For my basketball team project, I need to know how many different lineups I can create with 5 players on the court when there are 12 players on the team.\n3. And lastly, for a dinner event I'm planning, I'm curious about the number of different combinations for choosing 3 main courses from a selection of 10 on the menu.\n\nPlease provide me with these permutation calculations.", "query_for_retrieval": "I'm working on a few probability problems for my statistics class, and I need to figure out some permutations. Could you help me calculate the following:\n\n1. The number of different ways to arrange 5 books on a shelf if I have 20 books to choose from.\n2. For my basketball team project, I need to know how many different lineups I can create with 5 players on the court when there are 12 players on the team.\n3. And lastly, for a dinner event I'm planning, I'm curious about the number of different combinations for choosing 3 main courses from a selection of 10 on the menu.\n\nPlease provide me with these permutation calculations.", "answer": "calculate_permutations", "answer_params": "", "api_description": "def calculate_permutations:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the number of permutations of k elements from a set of n elements.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of elements in the set.\n\t- k : integer = None (required) The number of elements to choose.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_permutations\", \"description\": \"Calculates the number of permutations of k elements from a set of n elements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of elements in the set.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of elements to choose.\"}}, \"required\": [\"n\", \"k\"]}}"}
{"scope": "simple", "query": "Get the NBA team's ranking with the best defence in the 2021 season.", "query_for_retrieval": "Get the NBA team's ranking with the best defence in the 2021 season.", "answer": "get_defense_ranking", "answer_params": "", "api_description": "def get_defense_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the defence ranking of NBA teams in a specified season.\n\t\n\tArguments:\n\t---------\n\t- season : integer = None (required) The NBA season to get defence ranking from.\n\t- top : integer = 1 (optional) Number of top teams in defence ranking to fetch.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_defense_ranking\", \"description\": \"Retrieve the defence ranking of NBA teams in a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"season\": {\"type\": \"integer\", \"description\": \"The NBA season to get defence ranking from.\"}, \"top\": {\"type\": \"integer\", \"default\": 1, \"description\": \"Number of top teams in defence ranking to fetch.\"}}, \"required\": [\"season\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few calculations? First, I need to calculate the power of 7 raised to 3. Then, I want to know the probability of drawing a red card from a standard deck of 52 playing cards, round the answer to 3 decimal places. After that, I have a DNA molecule with the ID 'XYZ123' in a public database, can you retrieve its sequence in 'genbank' format? Also, include 5 base pairs upstream the DNA sequence. Lastly, calculate the power of 2 raised to 5, but this time with a modulus of 3.\"", "query_for_retrieval": "\"Can you help me with a few calculations? First, I need to calculate the power of 7 raised to 3. Then, I want to know the probability of drawing a red card from a standard deck of 52 playing cards, round the answer to 3 decimal places. After that, I have a DNA molecule with the ID 'XYZ123' in a public database, can you retrieve its sequence in 'genbank' format? Also, include 5 base pairs upstream the DNA sequence. Lastly, calculate the power of 2 raised to 5, but this time with a modulus of 3.\"", "answer": "fetch_DNA_sequence", "answer_params": "", "api_description": "def fetch_DNA_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the sequence of a DNA molecule with the given id from a public database.\n\t\n\tArguments:\n\t---------\n\t- DNA_id : string = None (required) Unique ID of the DNA molecule in the database.\n\t- format : string = None (optional) Optional parameter to get sequence in specific format (default to 'fasta').\n\t- upstream : integer = None (optional) Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_DNA_sequence\", \"description\": \"Retrieve the sequence of a DNA molecule with the given id from a public database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"DNA_id\": {\"type\": \"string\", \"description\": \"Unique ID of the DNA molecule in the database.\"}, \"format\": {\"type\": \"string\", \"description\": \"Optional parameter to get sequence in specific format (default to 'fasta').\"}, \"upstream\": {\"type\": \"integer\", \"description\": \"Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\"}}, \"required\": [\"DNA_id\"]}}"}
{"scope": "parallel_function", "query": "You are a data analyst and you have been given two 2x2 contingency tables representing the results of a survey conducted in two different cities. The first table is [45, 55, 35, 65] and the second table is [30, 70, 50, 50]. You are asked to perform a Chi-Squared test for independence on both tables to determine if there is a significant relationship between the variables in each city. Use a significance level of 0.05 for both tests. Can you tell if there is a significant relationship in each city based on the Chi-Squared test results?", "query_for_retrieval": "You are a data analyst and you have been given two 2x2 contingency tables representing the results of a survey conducted in two different cities. The first table is [45, 55, 35, 65] and the second table is [30, 70, 50, 50]. You are asked to perform a Chi-Squared test for independence on both tables to determine if there is a significant relationship between the variables in each city. Use a significance level of 0.05 for both tests. Can you tell if there is a significant relationship in each city based on the Chi-Squared test results?", "answer": "chi_squared_test", "answer_params": "", "api_description": "def chi_squared_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerforms a Chi-Squared test for independence on a 2x2 contingency table.\n\t\n\tArguments:\n\t---------\n\t- table : array = None (required) A 2x2 contingency table presented in array form.\n\t- alpha : float = None (optional) Significance level for the Chi-Squared test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chi_squared_test\", \"description\": \"Performs a Chi-Squared test for independence on a 2x2 contingency table.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"table\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A 2x2 contingency table presented in array form.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the Chi-Squared test. Default is 0.05.\"}}, \"required\": [\"table\"]}}"}
{"scope": "java", "query": "How can I change the visibility of product categories with IDs 101, 102, and 103 to hidden in the e-commerce platform's admin panel?", "query_for_retrieval": "How can I change the visibility of product categories with IDs 101, 102, and 103 to hidden in the e-commerce platform's admin panel?", "answer": "PmsProductCategoryController.updateShowStatus", "answer_params": "", "api_description": "def PmsProductCategoryController.updateShowStatus:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdates the show status of a list of product categories to either visible or hidden.\n\t\n\tArguments:\n\t---------\n\t- ids : ArrayList = None (required) A list of product category IDs to update. Product category IDs are integer\n\t- showStatus : integer = None (required) The new show status for the product categories (e.g., 0 for hidden, 1 for visible).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"PmsProductCategoryController.updateShowStatus\", \"description\": \"Updates the show status of a list of product categories to either visible or hidden.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"ArrayList\", \"description\": \"A list of product category IDs to update. Product category IDs are integer\", \"items\": {\"type\": \"integer\"}}, \"showStatus\": {\"type\": \"integer\", \"description\": \"The new show status for the product categories (e.g., 0 for hidden, 1 for visible).\"}}, \"required\": [\"ids\", \"showStatus\"]}}"}
{"scope": "parallel_function", "query": "Provide me the major events during the presidency of Abraham Lincoln and George Washington.", "query_for_retrieval": "Provide me the major events during the presidency of Abraham Lincoln and George Washington.", "answer": "us_history.events_by_presidency", "answer_params": "", "api_description": "def us_history.events_by_presidency:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the major events during the presidency of a specified US president.\n\t\n\tArguments:\n\t---------\n\t- president_name : string = None (required) The name of the US president.\n\t- start_year : integer = 0 (optional) The start year of their presidency (optional).\n\t- end_year : integer = 2000 (optional) The end year of their presidency (optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.events_by_presidency\", \"description\": \"Retrieve the major events during the presidency of a specified US president.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"president_name\": {\"type\": \"string\", \"description\": \"The name of the US president.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"The start year of their presidency (optional).\", \"default\": 0}, \"end_year\": {\"type\": \"integer\", \"description\": \"The end year of their presidency (optional).\", \"default\": 2000}}, \"required\": [\"president_name\"]}}"}
{"scope": "java", "query": "How can I perform a bitwise AND operation on Redis keys 'user:online:today' and 'user:online:yesterday' and store the result in the key 'user:online:both' using Redisson?", "query_for_retrieval": "How can I perform a bitwise AND operation on Redis keys 'user:online:today' and 'user:online:yesterday' and store the result in the key 'user:online:both' using Redisson?", "answer": "RedissonConnection.bitOp", "answer_params": "", "api_description": "def RedissonConnection.bitOp:\n\t\"\"\"\n\tDescription:\n\t\n\tPerforms a bitwise operation between the given keys and stores the result in the destination key. The NOT operation is not supported for multiple source keys.\n\t\n\tArguments:\n\t---------\n\t- op : any = None (required) The BitOperation enum value representing the bitwise operation to perform. It's object represented by BitOperation.OR for or operation for example\n\t- destination : Array = None (required) The destination key where the result will be stored.\n\t- keys : Array = None (required) The source keys on which the bitwise operation will be performed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RedissonConnection.bitOp\", \"description\": \"Performs a bitwise operation between the given keys and stores the result in the destination key. The NOT operation is not supported for multiple source keys.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"op\": {\"type\": \"any\", \"description\": \"The BitOperation enum value representing the bitwise operation to perform. It's object represented by BitOperation.OR for or operation for example\"}, \"destination\": {\"type\": \"Array\", \"description\": \"The destination key where the result will be stored.\", \"items\": {\"type\": \"String\"}}, \"keys\": {\"type\": \"Array\", \"description\": \"The source keys on which the bitwise operation will be performed.\", \"items\": {\"type\": \"String\"}}}, \"required\": [\"op\", \"destination\", \"keys\"]}}"}
{"scope": "java", "query": "How can I initialize the DES cipher in Java for encryption with 'DESede' algorithm, 'CBC' mode, and 'PKCS5Padding' padding scheme?", "query_for_retrieval": "How can I initialize the DES cipher in Java for encryption with 'DESede' algorithm, 'CBC' mode, and 'PKCS5Padding' padding scheme?", "answer": "DesAPITest.init", "answer_params": "", "api_description": "def DesAPITest.init:\n\t\"\"\"\n\tDescription:\n\t\n\tInitializes the DES cipher with the specified algorithm, mode, and padding scheme.\n\t\n\tArguments:\n\t---------\n\t- crypt : String = None (required) The encryption algorithm to use, such as 'DES' or 'DESede'.\n\t- mode : String = None (required) The cipher mode to use, such as 'CBC' or 'ECB'.\n\t- padding : String = None (required) The padding scheme to use, such as 'PKCS5Padding' or 'NoPadding'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DesAPITest.init\", \"description\": \"Initializes the DES cipher with the specified algorithm, mode, and padding scheme.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"crypt\": {\"type\": \"String\", \"description\": \"The encryption algorithm to use, such as 'DES' or 'DESede'.\"}, \"mode\": {\"type\": \"String\", \"description\": \"The cipher mode to use, such as 'CBC' or 'ECB'.\"}, \"padding\": {\"type\": \"String\", \"description\": \"The padding scheme to use, such as 'PKCS5Padding' or 'NoPadding'.\"}}, \"required\": [\"crypt\", \"mode\", \"padding\"]}}"}
{"scope": "simple", "query": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "query_for_retrieval": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "answer": "get_crime_rate", "answer_params": "", "api_description": "def get_crime_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the official crime rate of a city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The name of the city.\n\t- state : string = None (required) The state where the city is located.\n\t- type : string = None (optional) Optional. The type of crime. Default is 'violent'\n\t- year : integer = None (optional) Optional. The year for the crime rate data. Default is year 2001.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_crime_rate\", \"description\": \"Retrieve the official crime rate of a city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The name of the city.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state where the city is located.\"}, \"type\": {\"type\": \"string\", \"description\": \"Optional. The type of crime. Default is 'violent'\"}, \"year\": {\"type\": \"integer\", \"description\": \"Optional. The year for the crime rate data. Default is year 2001.\"}}, \"required\": [\"city\", \"state\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been closely tracking the COVID-19 situation, and I'm particularly concerned about the impact it's having on European countries. With family and friends living abroad, I need to stay informed about the situation in specific countries. Could you provide me with the latest figures on the total deaths and active COVID-19 cases for both Italy and Spain? This information is crucial for me to understand the current state of the pandemic in these regions.", "query_for_retrieval": "I've been closely tracking the COVID-19 situation, and I'm particularly concerned about the impact it's having on European countries. With family and friends living abroad, I need to stay informed about the situation in specific countries. Could you provide me with the latest figures on the total deaths and active COVID-19 cases for both Italy and Spain? This information is crucial for me to understand the current state of the pandemic in these regions.", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "relevance", "query": "Who played in La Liga?", "query_for_retrieval": "Who played in La Liga?", "answer": "soccer_stats.get_last_match_result", "answer_params": "", "api_description": "def soccer_stats.get_last_match_result:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the results of the most recent match between two football teams.\n\t\n\tArguments:\n\t---------\n\t- team1 : string = None (required) The name of the first team.\n\t- team2 : string = None (required) The name of the second team.\n\t- season : string = None (optional) The football season in question (Optional). Default: 'spring'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"soccer_stats.get_last_match_result\", \"description\": \"Retrieve the results of the most recent match between two football teams.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team1\": {\"type\": \"string\", \"description\": \"The name of the first team.\"}, \"team2\": {\"type\": \"string\", \"description\": \"The name of the second team.\"}, \"season\": {\"type\": \"string\", \"description\": \"The football season in question (Optional). Default: 'spring'\"}}, \"required\": [\"team1\", \"team2\"]}}"}
{"scope": "parallel_function", "query": "\"Could you please calculate the Body Mass Index (BMI) of four individuals for me? The first person weighs 85 kilograms and is 175 centimeters tall, the second person weighs 60 kilograms and is 160 centimeters tall, the third person weighs 75 kilograms and is 180 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. All measurements are in the metric system.\"", "query_for_retrieval": "\"Could you please calculate the Body Mass Index (BMI) of four individuals for me? The first person weighs 85 kilograms and is 175 centimeters tall, the second person weighs 60 kilograms and is 160 centimeters tall, the third person weighs 75 kilograms and is 180 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. All measurements are in the metric system.\"", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) of a person.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in kilograms.\n\t- height : integer = None (required) Height of the person in centimeters.\n\t- unit : string = None (optional) Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in centimeters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "parallel_function", "query": "\"A car starts from rest and accelerates uniformly over a time of 5.2 seconds for a distance of 110 m. Determine the acceleration of the car. Then, another car with an initial velocity of 15 m/s accelerates at a rate of 3.5 m/s^2 for a time of 7 seconds. What is the displacement of the second car? Now, consider a third car that starts with an initial velocity of 20 m/s and accelerates at a rate of 2 m/s^2 for a time of 10 seconds. What is the displacement of the third car? Finally, a fourth car with an initial velocity of 25 m/s travels for a time of 8 seconds without any acceleration. What is the displacement of the fourth car?\"", "query_for_retrieval": "\"A car starts from rest and accelerates uniformly over a time of 5.2 seconds for a distance of 110 m. Determine the acceleration of the car. Then, another car with an initial velocity of 15 m/s accelerates at a rate of 3.5 m/s^2 for a time of 7 seconds. What is the displacement of the second car? Now, consider a third car that starts with an initial velocity of 20 m/s and accelerates at a rate of 2 m/s^2 for a time of 10 seconds. What is the displacement of the third car? Finally, a fourth car with an initial velocity of 25 m/s travels for a time of 8 seconds without any acceleration. What is the displacement of the fourth car?\"", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object in motion given initial velocity, time, and acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object in m/s.\n\t- time : integer = None (required) The time in seconds that the object has been in motion.\n\t- acceleration : float = 0 (optional) The acceleration of the object in m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object in motion given initial velocity, time, and acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in m/s.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time in seconds that the object has been in motion.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2.\", \"default\": 0}}, \"required\": [\"initial_velocity\", \"time\"]}}"}
{"scope": "simple", "query": "What's the projected population growth in United States in the next 20 years?", "query_for_retrieval": "What's the projected population growth in United States in the next 20 years?", "answer": "population_projections", "answer_params": "", "api_description": "def population_projections:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the projected population growth based on the current growth rate.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which to calculate the population projection.\n\t- years : integer = None (required) Number of years for the projection.\n\t- growth_rate : float = None (optional) Optional parameter to specify the growth rate, in percentage. Default is 1.2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"population_projections\", \"description\": \"Calculates the projected population growth based on the current growth rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which to calculate the population projection.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years for the projection.\"}, \"growth_rate\": {\"type\": \"float\", \"description\": \"Optional parameter to specify the growth rate, in percentage. Default is 1.2.\"}}, \"required\": [\"country\", \"years\"]}}"}
{"scope": "parallel_function", "query": "In the African savannah, a group of researchers have been observing a herd of elephants for a few years. They have noticed that the current population of elephants is 500 and the annual population growth rate is 2%. They are interested in knowing the estimated population of elephants in 10 years. However, due to the unpredictable nature of the wild, they also want to consider a scenario where the growth rate drops to 1.5% and another scenario where it increases to 2.5%. Can you provide the estimated elephant population for these three scenarios in 10 years?", "query_for_retrieval": "In the African savannah, a group of researchers have been observing a herd of elephants for a few years. They have noticed that the current population of elephants is 500 and the annual population growth rate is 2%. They are interested in knowing the estimated population of elephants in 10 years. However, due to the unpredictable nature of the wild, they also want to consider a scenario where the growth rate drops to 1.5% and another scenario where it increases to 2.5%. Can you provide the estimated elephant population for these three scenarios in 10 years?", "answer": "elephant_population_estimate", "answer_params": "", "api_description": "def elephant_population_estimate:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate future population of elephants given current population and growth rate.\n\t\n\tArguments:\n\t---------\n\t- current_population : integer = None (required) The current number of elephants.\n\t- growth_rate : float = None (required) The annual population growth rate of elephants.\n\t- years : integer = None (required) The number of years to project the population.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"elephant_population_estimate\", \"description\": \"Estimate future population of elephants given current population and growth rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current_population\": {\"type\": \"integer\", \"description\": \"The current number of elephants.\"}, \"growth_rate\": {\"type\": \"float\", \"description\": \"The annual population growth rate of elephants.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to project the population.\"}}, \"required\": [\"current_population\", \"growth_rate\", \"years\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a physics experiment and need to calculate the density of an object I have. It weighs 50 kilograms and takes up a space of 10 cubic meters. Could you help me figure out its density?", "query_for_retrieval": "I'm working on a physics experiment and need to calculate the density of an object I have. It weighs 50 kilograms and takes up a space of 10 cubic meters. Could you help me figure out its density?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "executable_multiple_function", "query": "In my physics class, we're delving into kinematics, and I've been tasked with analyzing the motion of a particle. The equation f(x) = 3t^2 + 2t + 1 describes its position over time. I need to determine the velocity of this particle when t is 5 seconds. Velocity is the first derivative of the position function with respect to time, so I need to calculate that. Can you help me find the velocity using the appropriate function?", "query_for_retrieval": "In my physics class, we're delving into kinematics, and I've been tasked with analyzing the motion of a particle. The equation f(x) = 3t^2 + 2t + 1 describes its position over time. I need to determine the velocity of this particle when t is 5 seconds. Velocity is the first derivative of the position function with respect to time, so I need to calculate that. Can you help me find the velocity using the appropriate function?", "answer": "math_gcd", "answer_params": "", "api_description": "def math_gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "java", "query": "How can I obtain a list of new home products that contain 'LED TV' in their product name, have a recommendation status of 1, and want to retrieve the third page of results with 20 items per page?", "query_for_retrieval": "How can I obtain a list of new home products that contain 'LED TV' in their product name, have a recommendation status of 1, and want to retrieve the third page of results with 20 items per page?", "answer": "SmsHomeNewProductServiceImpl.list", "answer_params": "", "api_description": "def SmsHomeNewProductServiceImpl.list:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves a list of SmsHomeNewProduct entities based on the provided product name, recommendation status, and pagination settings.\n\t\n\tArguments:\n\t---------\n\t- productName : String = None (required) The name of the product to filter by, using a 'like' search pattern.\n\t- recommendStatus : integer = None (required) The recommendation status to filter by.\n\t- pageSize : integer = None (required) The number of items to return per page.\n\t- pageNum : integer = None (required) The page number to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SmsHomeNewProductServiceImpl.list\", \"description\": \"Retrieves a list of SmsHomeNewProduct entities based on the provided product name, recommendation status, and pagination settings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"productName\": {\"type\": \"String\", \"description\": \"The name of the product to filter by, using a 'like' search pattern.\"}, \"recommendStatus\": {\"type\": \"integer\", \"description\": \"The recommendation status to filter by.\"}, \"pageSize\": {\"type\": \"integer\", \"description\": \"The number of items to return per page.\"}, \"pageNum\": {\"type\": \"integer\", \"description\": \"The page number to retrieve.\"}}, \"required\": [\"productName\", \"recommendStatus\", \"pageSize\", \"pageNum\"]}}"}
{"scope": "multiple_function", "query": "Find a ride from New York to Philadelphia with maximum cost of $50", "query_for_retrieval": "Find a ride from New York to Philadelphia with maximum cost of $50", "answer": "grocery_delivery.order", "answer_params": "", "api_description": "def grocery_delivery.order:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder grocery items from a specific location with optional delivery price limit\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location of the grocery store\n\t- items : array = None (required) List of items to order\n\t- max_delivery_cost : float = None (optional) The maximum delivery cost. It is optional. Default 1000000\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_delivery.order\", \"description\": \"Order grocery items from a specific location with optional delivery price limit\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location of the grocery store\"}, \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items to order\"}, \"max_delivery_cost\": {\"type\": \"float\", \"description\": \"The maximum delivery cost. It is optional. Default 1000000\"}}, \"required\": [\"location\", \"items\"]}}"}
{"scope": "relevance", "query": "Is there any available class at University in Sydney in May?", "query_for_retrieval": "Is there any available class at University in Sydney in May?", "answer": "concert_availability", "answer_params": "", "api_description": "def concert_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck the availability of concerts based on artist and location.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) The name of the artist for the concert.\n\t- location : string = None (required) The location of the concert.\n\t- date : string = None (required) The date of the concert. Format: 'YYYY-MM'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_availability\", \"description\": \"Check the availability of concerts based on artist and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"The name of the artist for the concert.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the concert.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the concert. Format: 'YYYY-MM'\"}}, \"required\": [\"artist\", \"location\", \"date\"]}}"}
{"scope": "relevance", "query": "What's the latest trend in technology?", "query_for_retrieval": "What's the latest trend in technology?", "answer": "get_social_trends", "answer_params": "", "api_description": "def get_social_trends:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve trending topics in a given category.\n\t\n\tArguments:\n\t---------\n\t- category : string = None (required) The category to get the trends from.\n\t- region : string = None (required) The region where the trend should be located. Default is worldwide.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_social_trends\", \"description\": \"Retrieve trending topics in a given category.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"category\": {\"type\": \"string\", \"description\": \"The category to get the trends from.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region where the trend should be located. Default is worldwide.\"}}, \"required\": [\"category\", \"region\"]}}"}
{"scope": "relevance", "query": "Calculate the standard deviation of the null hypothesis test with a sample mean of 98.2, standard deviation of 1.4, and sample size of 40 for a population mean of 98.6.", "query_for_retrieval": "Calculate the standard deviation of the null hypothesis test with a sample mean of 98.2, standard deviation of 1.4, and sample size of 40 for a population mean of 98.6.", "answer": "statistics.calculate_p_value", "answer_params": "", "api_description": "def statistics.calculate_p_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the p-value for a t-test on a single sample from a population.\n\t\n\tArguments:\n\t---------\n\t- sample_mean : float = None (required) The mean of the sample data.\n\t- population_mean : float = None (required) The mean of the population data.\n\t- sample_std_dev : float = None (required) The standard deviation of the sample data.\n\t- sample_size : integer = None (required) The size of the sample data.\n\t- two_tailed : boolean = None (optional) Whether the test is two-tailed. If not provided, default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"statistics.calculate_p_value\", \"description\": \"Calculate the p-value for a t-test on a single sample from a population.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sample_mean\": {\"type\": \"float\", \"description\": \"The mean of the sample data.\"}, \"population_mean\": {\"type\": \"float\", \"description\": \"The mean of the population data.\"}, \"sample_std_dev\": {\"type\": \"float\", \"description\": \"The standard deviation of the sample data.\"}, \"sample_size\": {\"type\": \"integer\", \"description\": \"The size of the sample data.\"}, \"two_tailed\": {\"type\": \"boolean\", \"description\": \"Whether the test is two-tailed. If not provided, default is true.\"}}, \"required\": [\"sample_mean\", \"population_mean\", \"sample_std_dev\", \"sample_size\"]}}"}
{"scope": "relevance", "query": "What are my rights as a tenant in the state of Texas?", "query_for_retrieval": "What are my rights as a tenant in the state of Texas?", "answer": "generate_contract", "answer_params": "", "api_description": "def generate_contract:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a specific type of legal contract based on provided details.\n\t\n\tArguments:\n\t---------\n\t- contract_type : string = None (required) The type of contract to generate.\n\t- parties : array = None (required) The parties involved in the contract.\n\t- additional_details : dict = None (optional) Any additional details or provisions that should be included in the contract.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_contract\", \"description\": \"Generate a specific type of legal contract based on provided details.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"contract_type\": {\"type\": \"string\", \"description\": \"The type of contract to generate.\"}, \"parties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The parties involved in the contract.\"}, \"additional_details\": {\"type\": \"dict\", \"description\": \"Any additional details or provisions that should be included in the contract.\", \"default\": \"None\"}}, \"required\": [\"contract_type\", \"parties\"]}}"}
{"scope": "parallel_function", "query": "Compute the Pythagorean Theorem of two side lengths: 3 and 4, 5 and 12.", "query_for_retrieval": "Compute the Pythagorean Theorem of two side lengths: 3 and 4, 5 and 12.", "answer": "math.pythagoras", "answer_params": "", "api_description": "def math.pythagoras:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the hypotenuse of a right triangle based on the lengths of the other two sides.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Length of one of the sides of a right triangle.\n\t- b : integer = None (required) Length of the other side of a right triangle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.pythagoras\", \"description\": \"Calculates the hypotenuse of a right triangle based on the lengths of the other two sides.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Length of one of the sides of a right triangle.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Length of the other side of a right triangle.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "executable_simple", "query": "I'm currently delving into the cultural traditions across Europe for a historical comparison, focusing on the year 2005. Germany, with its rich history and diverse celebrations, has drawn my attention. I'd like to know which holidays were observed in Germany that year. Could you provide me with a list of the 2005 holidays in Germany?", "query_for_retrieval": "I'm currently delving into the cultural traditions across Europe for a historical comparison, focusing on the year 2005. Germany, with its rich history and diverse celebrations, has drawn my attention. I'd like to know which holidays were observed in Germany that year. Could you provide me with a list of the 2005 holidays in Germany?", "answer": "retrieve_holiday_by_year", "answer_params": "", "api_description": "def retrieve_holiday_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the holidays of a year.\n\t\n\tArguments:\n\t---------\n\t- year : string = None (required) The year of the holidays.\n\t- country : string = None (required) The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_holiday_by_year\", \"description\": \"Finds the holidays of a year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"string\", \"description\": \"The year of the holidays.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\"}}, \"required\": [\"year\", \"country\"]}}"}
{"scope": "sql", "query": "In a database, there is a table named \"Employees\" with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Position\", and \"Salary\". You have a new employee's details to be added to this table. The details are as follows: EmployeeID is \"E123\", FirstName is \"Jane\", LastName is \"Doe\", Position is \"Manager\", and Salary is \"80000\". How would you incorporate this data into the \"Employees\" table?", "query_for_retrieval": "In a database, there is a table named \"Employees\" with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Position\", and \"Salary\". You have a new employee's details to be added to this table. The details are as follows: EmployeeID is \"E123\", FirstName is \"Jane\", LastName is \"Doe\", Position is \"Manager\", and Salary is \"80000\". How would you incorporate this data into the \"Employees\" table?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "How can I apply Evolutionary Algorithm in game Artificial Intelligence?", "query_for_retrieval": "How can I apply Evolutionary Algorithm in game Artificial Intelligence?", "answer": "evolve_creatures", "answer_params": "", "api_description": "def evolve_creatures:\n\t\"\"\"\n\tDescription:\n\t\n\tApply the Evolutionary Algorithm to improve the creatures in a simulation over generations.\n\t\n\tArguments:\n\t---------\n\t- population_size : integer = None (required) The initial size of the creature population.\n\t- mutation_rate : float = None (required) The probability of mutation in each generation.\n\t- generations : integer = None (required) The number of generations to run the simulation.\n\t- fitness_goal : integer = None (optional) The fitness goal that the creatures should strive for. This is an optional parameter. Default: 1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"evolve_creatures\", \"description\": \"Apply the Evolutionary Algorithm to improve the creatures in a simulation over generations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"population_size\": {\"type\": \"integer\", \"description\": \"The initial size of the creature population.\"}, \"mutation_rate\": {\"type\": \"float\", \"description\": \"The probability of mutation in each generation.\"}, \"generations\": {\"type\": \"integer\", \"description\": \"The number of generations to run the simulation.\"}, \"fitness_goal\": {\"type\": \"integer\", \"description\": \"The fitness goal that the creatures should strive for. This is an optional parameter. Default: 1\"}}, \"required\": [\"population_size\", \"mutation_rate\", \"generations\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find me the sales growth rate for company XYZ for the last 3 years and also the interest coverage ratio for the same duration.", "query_for_retrieval": "Find me the sales growth rate for company XYZ for the last 3 years and also the interest coverage ratio for the same duration.", "answer": "financial_ratios.interest_coverage", "answer_params": "", "api_description": "def financial_ratios.interest_coverage:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate a company's interest coverage ratio given the company name and duration\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- years : integer = None (required) Number of past years to calculate the ratio.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financial_ratios.interest_coverage\", \"description\": \"Calculate a company's interest coverage ratio given the company name and duration\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of past years to calculate the ratio.\"}}, \"required\": [\"company_name\", \"years\"]}}"}
{"scope": "rest", "query": "I need to convert an address into coordinates for my GPS system. The location is '886 Cannery Row, Monterey, CA'. I have an API key 'YOUR-GEOCODE-API-KEY' for the Geocoding service. Could you provide me with the Python request to get the latitude and longitude in JSON format?", "query_for_retrieval": "I need to convert an address into coordinates for my GPS system. The location is '886 Cannery Row, Monterey, CA'. I have an API key 'YOUR-GEOCODE-API-KEY' for the Geocoding service. Could you provide me with the Python request to get the latitude and longitude in JSON format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/search (required) Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - q : string = None (required) user query string to a particular address\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\", \"default\": \"https://geocode.maps.co/search\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"q\": {\"type\": \"string\", \"description\": \"user query string to a particular address\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"q\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "\"John is a geometry teacher who is preparing a quiz for his students. He has drawn two triangles on the board. The first triangle has a base of 10 units and a height of 5 units. The second triangle has a base of 8 units and a height of 6 units. John wants to know the total area of the two triangles combined. Can you help him calculate this?\"", "query_for_retrieval": "\"John is a geometry teacher who is preparing a quiz for his students. He has drawn two triangles on the board. The first triangle has a base of 10 units and a height of 5 units. The second triangle has a base of 8 units and a height of 6 units. John wants to know the total area of the two triangles combined. Can you help him calculate this?\"", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle using its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle.\n\t- height : integer = None (required) The height of the triangle from the base.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculate the area of a triangle using its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle from the base.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "sql", "query": "In a database, there is a table named 'Students' with columns 'ID', 'Name', 'Age', 'Grade'. You are required to add a new student's information into the table. The student's ID is 'S101', Name is 'John Doe', Age is '15', and Grade is '10'. How would you add this information into the table?", "query_for_retrieval": "In a database, there is a table named 'Students' with columns 'ID', 'Name', 'Age', 'Grade'. You are required to add a new student's information into the table. The student's ID is 'S101', Name is 'John Doe', Age is '15', and Grade is '10'. How would you add this information into the table?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "As a math enthusiast, John has set himself a new challenge. He's interested in the Fibonacci sequence and, more specifically, wants to work with the 5th and 8th numbers in the sequence. Additionally, he's curious about something a bit more spatial \u2013 he wants to know the distance between the points (3, 4) and (8, 10) on a 2D plane. Could you assist in determining those Fibonacci numbers and the distance between the points?", "query_for_retrieval": "As a math enthusiast, John has set himself a new challenge. He's interested in the Fibonacci sequence and, more specifically, wants to work with the 5th and 8th numbers in the sequence. Additionally, he's curious about something a bit more spatial \u2013 he wants to know the distance between the points (3, 4) and (8, 10) on a 2D plane. Could you assist in determining those Fibonacci numbers and the distance between the points?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm planning a small outdoor event in Ottawa, and I need to make sure the weather is going to cooperate. Could you fetch the current weather for me at latitude 45.4215 and longitude -75.6972 using the Open-Meteo API? Also, I'm running a small game at the event, and I'm curious about the chances of winning. If I have 10 attempts at this game and the chance of winning each time is 50%, how likely is it that I'll win 5 times?", "query_for_retrieval": "I'm planning a small outdoor event in Ottawa, and I need to make sure the weather is going to cooperate. Could you fetch the current weather for me at latitude 45.4215 and longitude -75.6972 using the Open-Meteo API? Also, I'm running a small game at the event, and I'm curious about the chances of winning. If I have 10 attempts at this game and the chance of winning each time is 50%, how likely is it that I'll win 5 times?", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "simple", "query": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "query_for_retrieval": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "answer": "compound_interest", "answer_params": "", "api_description": "def compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate compound interest for a certain time period.\n\t\n\tArguments:\n\t---------\n\t- principal : integer = None (required) The initial amount of money that was invested or loaned out.\n\t- annual_rate : float = None (required) The interest rate for a year as a percentage.\n\t- compounding_freq : string = None (required) The number of times that interest is compounded per unit period.\n\t- time_in_years : integer = None (required) The time the money is invested for in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"compound_interest\", \"description\": \"Calculate compound interest for a certain time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"integer\", \"description\": \"The initial amount of money that was invested or loaned out.\"}, \"annual_rate\": {\"type\": \"float\", \"description\": \"The interest rate for a year as a percentage.\"}, \"compounding_freq\": {\"type\": \"string\", \"enum\": [\"monthly\", \"quarterly\", \"annually\"], \"description\": \"The number of times that interest is compounded per unit period.\"}, \"time_in_years\": {\"type\": \"integer\", \"description\": \"The time the money is invested for in years.\"}}, \"required\": [\"principal\", \"annual_rate\", \"compounding_freq\", \"time_in_years\"]}}"}
{"scope": "executable_simple", "query": "I'm currently handling a dataset for my analysis project and need to organize the numbers in ascending order. The dataset I'm working with right now is [1, 2, 2, 7, 7, 10]. Can you sort this array for me?", "query_for_retrieval": "I'm currently handling a dataset for my analysis project and need to organize the numbers in ascending order. The dataset I'm working with right now is [1, 2, 2, 7, 7, 10]. Can you sort this array for me?", "answer": "sort_array", "answer_params": "", "api_description": "def sort_array:\n\t\"\"\"\n\tDescription:\n\t\n\tSorts an array of numbers.\n\t\n\tArguments:\n\t---------\n\t- array : array = None (required) The array of numbers.\n\t- reverse : boolean = False (optional) Whether to sort the array in reverse order, i.e., descending order.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sort_array\", \"description\": \"Sorts an array of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"array\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The array of numbers.\"}, \"reverse\": {\"type\": \"boolean\", \"description\": \"Whether to sort the array in reverse order, i.e., descending order.\", \"default\": false}}, \"required\": [\"array\"]}}"}
{"scope": "parallel_function", "query": "You are a data scientist working on a project that requires you to generate random numbers from a normal distribution. You need to generate four random numbers: two from a normal distribution with a mean of 5 and a standard deviation of 2, and two from a normal distribution with a mean of 10 and a standard deviation of 3. How can you use the 'random.normalvariate' function to achieve this?", "query_for_retrieval": "You are a data scientist working on a project that requires you to generate random numbers from a normal distribution. You need to generate four random numbers: two from a normal distribution with a mean of 5 and a standard deviation of 2, and two from a normal distribution with a mean of 10 and a standard deviation of 3. How can you use the 'random.normalvariate' function to achieve this?", "answer": "random.normalvariate", "answer_params": "", "api_description": "def random.normalvariate:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a random number from a normal distribution given the mean and standard deviation.\n\t\n\tArguments:\n\t---------\n\t- mu : integer = None (required) Mean of the normal distribution.\n\t- sigma : integer = None (required) Standard deviation of the normal distribution.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"random.normalvariate\", \"description\": \"Generates a random number from a normal distribution given the mean and standard deviation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mu\": {\"type\": \"integer\", \"description\": \"Mean of the normal distribution.\"}, \"sigma\": {\"type\": \"integer\", \"description\": \"Standard deviation of the normal distribution.\"}}, \"required\": [\"mu\", \"sigma\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a data analysis project where I need to multiply two matrices as part of my computations. The first matrix I need to work with is [[1, 2], [3, 4]], and the second one is [[5, 6], [7, 8]]. I need to calculate the product of these two matrices to proceed with my analysis. Can you help me with this calculation?", "query_for_retrieval": "I'm working on a data analysis project where I need to multiply two matrices as part of my computations. The first matrix I need to work with is [[1, 2], [3, 4]], and the second one is [[5, 6], [7, 8]]. I need to calculate the product of these two matrices to proceed with my analysis. Can you help me with this calculation?", "answer": "mat_mul", "answer_params": "", "api_description": "def mat_mul:\n\t\"\"\"\n\tDescription:\n\t\n\tMultiplies two matrices.\n\t\n\tArguments:\n\t---------\n\t- matA : array = None (required) The first matrix.\n\t- matB : array = None (required) The second matrix.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mat_mul\", \"description\": \"Multiplies two matrices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"matA\": {\"type\": \"array\", \"description\": \"The first matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}, \"matB\": {\"type\": \"array\", \"description\": \"The second matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}}, \"required\": [\"matA\", \"matB\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a two-step conversion? First, I have 5000 Japanese Yen that I would like to convert into US Dollars. After that, I have a measurement of 15 kilometers that I would like to convert into miles. Can you tell me how much I would have in US Dollars and how many miles I would have?\"", "query_for_retrieval": "\"Could you help me with a two-step conversion? First, I have 5000 Japanese Yen that I would like to convert into US Dollars. After that, I have a measurement of 15 kilometers that I would like to convert into miles. Can you tell me how much I would have in US Dollars and how many miles I would have?\"", "answer": "currency_conversion", "answer_params": "", "api_description": "def currency_conversion:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one currency to another.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount to be converted.\n\t- from_currency : string = None (required) The currency to convert from.\n\t- to_currency : string = None (required) The currency to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_conversion\", \"description\": \"Convert a value from one currency to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount to be converted.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "relevance", "query": "What are the ingredients for lasagna?", "query_for_retrieval": "What are the ingredients for lasagna?", "answer": "flight_schedule.get_timings", "answer_params": "", "api_description": "def flight_schedule.get_timings:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the departure and arrival times for flights between two airports.\n\t\n\tArguments:\n\t---------\n\t- from_airport : string = None (required) The code for the departure airport.\n\t- to_airport : string = None (required) The code for the destination airport.\n\t- date : string = 2000-12-3 (optional) The departure date.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight_schedule.get_timings\", \"description\": \"Get the departure and arrival times for flights between two airports.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"from_airport\": {\"type\": \"string\", \"description\": \"The code for the departure airport.\"}, \"to_airport\": {\"type\": \"string\", \"description\": \"The code for the destination airport.\"}, \"date\": {\"type\": \"string\", \"description\": \"The departure date.\", \"default\": \"2000-12-3\"}}, \"required\": [\"from_airport\", \"to_airport\"]}}"}
{"scope": "simple", "query": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "query_for_retrieval": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "answer": "calculate_electric_field_strength", "answer_params": "", "api_description": "def calculate_electric_field_strength:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field strength at a certain distance from a point charge.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge in Coulombs.\n\t- distance : integer = None (required) The distance from the charge in meters.\n\t- medium : string = None (optional) The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_field_strength\", \"description\": \"Calculate the electric field strength at a certain distance from a point charge.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge in Coulombs.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"The distance from the charge in meters.\"}, \"medium\": {\"type\": \"string\", \"description\": \"The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\"}}, \"required\": [\"charge\", \"distance\"]}}"}
{"scope": "multiple_function", "query": "Calculate the cosine similarity between vector A [3, 2, 1] and vector B [1, 2, 3].", "query_for_retrieval": "Calculate the cosine similarity between vector A [3, 2, 1] and vector B [1, 2, 3].", "answer": "cosine_similarity.calculate", "answer_params": "", "api_description": "def cosine_similarity.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the cosine similarity between two vectors.\n\t\n\tArguments:\n\t---------\n\t- vector1 : array = None (required) The first vector for calculating cosine similarity.\n\t- vector2 : array = None (required) The second vector for calculating cosine similarity.\n\t- rounding : integer = None (optional) Optional: The number of decimals to round off the result. Default 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cosine_similarity.calculate\", \"description\": \"Calculate the cosine similarity between two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vector1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The first vector for calculating cosine similarity.\"}, \"vector2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The second vector for calculating cosine similarity.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"Optional: The number of decimals to round off the result. Default 0\"}}, \"required\": [\"vector1\", \"vector2\"]}}"}
{"scope": "multiple_function", "query": "Find me the detailed profile of basketball player Lebron James", "query_for_retrieval": "Find me the detailed profile of basketball player Lebron James", "answer": "get_traffic_info", "answer_params": "", "api_description": "def get_traffic_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve current traffic conditions for a specified route.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point of the route.\n\t- end_location : string = None (required) The destination of the route.\n\t- mode : string = None (optional) Preferred method of transportation, default to 'driving'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_traffic_info\", \"description\": \"Retrieve current traffic conditions for a specified route.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point of the route.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination of the route.\"}, \"mode\": {\"type\": \"string\", \"enum\": [\"driving\", \"walking\", \"bicycling\", \"transit\"], \"description\": \"Preferred method of transportation, default to 'driving'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "parallel_function", "query": "\"John is planning to invest in a mutual fund. He is considering two scenarios. In the first scenario, he will make an initial investment of $5000 with an annual rate of return of 7% and he will not make any additional contributions. In the second scenario, he will make an initial investment of $3000 with an annual rate of return of 6% and he will make additional regular contributions of $200 every year. He wants to compare the future value of his investment after 10 years in both scenarios. Can you help him calculate the future value of his investment in both scenarios?\"", "query_for_retrieval": "\"John is planning to invest in a mutual fund. He is considering two scenarios. In the first scenario, he will make an initial investment of $5000 with an annual rate of return of 7% and he will not make any additional contributions. In the second scenario, he will make an initial investment of $3000 with an annual rate of return of 6% and he will make additional regular contributions of $200 every year. He wants to compare the future value of his investment after 10 years in both scenarios. Can you help him calculate the future value of his investment in both scenarios?\"", "answer": "finance.calculate_future_value", "answer_params": "", "api_description": "def finance.calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- rate_of_return : float = None (required) The annual rate of return.\n\t- years : integer = None (required) The time frame of the investment in years.\n\t- contribution : integer = None (optional) Optional: Additional regular contributions. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.calculate_future_value\", \"description\": \"Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"rate_of_return\": {\"type\": \"float\", \"description\": \"The annual rate of return.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time frame of the investment in years.\"}, \"contribution\": {\"type\": \"integer\", \"description\": \"Optional: Additional regular contributions. Default is 0.\"}}, \"required\": [\"initial_investment\", \"rate_of_return\", \"years\"]}}"}
{"scope": "relevance", "query": "What is the rule for 'Ace' in Blackjack?", "query_for_retrieval": "What is the rule for 'Ace' in Blackjack?", "answer": "get_highest_card_holder", "answer_params": "", "api_description": "def get_highest_card_holder:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the player with the highest number of a specified suit in a game of poker.\n\t\n\tArguments:\n\t---------\n\t- game_id : string = None (required) The ID of the game.\n\t- suit : string = None (required) The type of card suit to search for (hearts, diamonds, clubs, spades).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_highest_card_holder\", \"description\": \"Fetches the player with the highest number of a specified suit in a game of poker.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_id\": {\"type\": \"string\", \"description\": \"The ID of the game.\"}, \"suit\": {\"type\": \"string\", \"description\": \"The type of card suit to search for (hearts, diamonds, clubs, spades).\"}}, \"required\": [\"game_id\", \"suit\"]}}"}
{"scope": "parallel_function", "query": "Book a room for 2 adults and a child at the Sheraton Hotel in New York with check-in on May 1, 2022 and check-out on May 5, 2022. Also, Book a room for 1 adult and 2 children at the Marriott in Los Angeles with check-in on June 1, 2022 and check-out on June 10, 2022.", "query_for_retrieval": "Book a room for 2 adults and a child at the Sheraton Hotel in New York with check-in on May 1, 2022 and check-out on May 5, 2022. Also, Book a room for 1 adult and 2 children at the Marriott in Los Angeles with check-in on June 1, 2022 and check-out on June 10, 2022.", "answer": "hotel_booking.book", "answer_params": "", "api_description": "def hotel_booking.book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a hotel room at the specified location for the specified number of adults and children.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The city where the hotel is located.\n\t- check_in : string = None (required) The check-in date in the format yyyy-mm-dd.\n\t- check_out : string = None (required) The check-out date in the format yyyy-mm-dd.\n\t- adults : integer = None (required) The number of adults for the booking.\n\t- children : integer = None (required) The number of children for the booking.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking.book\", \"description\": \"Book a hotel room at the specified location for the specified number of adults and children.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city where the hotel is located.\"}, \"check_in\": {\"type\": \"string\", \"description\": \"The check-in date in the format yyyy-mm-dd.\"}, \"check_out\": {\"type\": \"string\", \"description\": \"The check-out date in the format yyyy-mm-dd.\"}, \"adults\": {\"type\": \"integer\", \"description\": \"The number of adults for the booking.\"}, \"children\": {\"type\": \"integer\", \"description\": \"The number of children for the booking.\"}}, \"required\": [\"hotel_name\", \"location\", \"check_in\", \"check_out\", \"adults\", \"children\"]}}"}
{"scope": "relevance", "query": "How is the air quality in Los Angeles right now?", "query_for_retrieval": "How is the air quality in Los Angeles right now?", "answer": "plant_biomass", "answer_params": "", "api_description": "def plant_biomass:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the biomass of a plant species in a given area.\n\t\n\tArguments:\n\t---------\n\t- species_name : string = None (required) The name of the plant species.\n\t- area : float = None (required) The area of the forest in square kilometers.\n\t- density : float = None (optional) The density of the plant species in the area. Default is average global density.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plant_biomass\", \"description\": \"Calculate the biomass of a plant species in a given area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species_name\": {\"type\": \"string\", \"description\": \"The name of the plant species.\"}, \"area\": {\"type\": \"float\", \"description\": \"The area of the forest in square kilometers.\"}, \"density\": {\"type\": \"float\", \"description\": \"The density of the plant species in the area. Default is average global density.\"}}, \"required\": [\"species_name\", \"area\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've got this investment sitting at $5000 with an annual interest rate of 5%. I'm planning to let it grow over the next 10 years without making any additional contributions. I need to calculate what this will amount to at the end of the 10-year period. Once I have that future value, I'm curious about how it would perform in a hypothetical scenario where the returns follow the Fibonacci sequence, so I'd like to know what the 15th number in that sequence is. And lastly, I have this list of numbers: 45, 23, 67, 89, 12, 34, 56, 78. I need them sorted, but in descending order. Can we get started on these calculations?", "query_for_retrieval": "I've got this investment sitting at $5000 with an annual interest rate of 5%. I'm planning to let it grow over the next 10 years without making any additional contributions. I need to calculate what this will amount to at the end of the 10-year period. Once I have that future value, I'm curious about how it would perform in a hypothetical scenario where the returns follow the Fibonacci sequence, so I'd like to know what the 15th number in that sequence is. And lastly, I have this list of numbers: 45, 23, 67, 89, 12, 34, 56, 78. I need them sorted, but in descending order. Can we get started on these calculations?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_function", "query": "\"John has decided to invest in two different funds. He invested $5000 in Fund A which has an annual return rate of 7% and he plans to keep his money there for 5 years. On the other hand, he invested $8000 in Fund B with an annual return rate of 5% for a period of 7 years. Can you predict the profit John will make from both Fund A and Fund B?\"", "query_for_retrieval": "\"John has decided to invest in two different funds. He invested $5000 in Fund A which has an annual return rate of 7% and he plans to keep his money there for 5 years. On the other hand, he invested $8000 in Fund B with an annual return rate of 5% for a period of 7 years. Can you predict the profit John will make from both Fund A and Fund B?\"", "answer": "investment.predictProfit", "answer_params": "", "api_description": "def investment.predictProfit:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the profit for given investment after specified number of years.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The amount invested in dollars.\n\t- annual_return : float = None (required) The annual return rate of the investment.\n\t- years : integer = None (required) The time period in years for which the investment is made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment.predictProfit\", \"description\": \"Predict the profit for given investment after specified number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The amount invested in dollars.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate of the investment.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time period in years for which the investment is made.\"}}, \"required\": [\"investment_amount\", \"annual_return\", \"years\"]}}"}
{"scope": "parallel_function", "query": "\"In a physics experiment, you are given two charges. The first charge has a magnitude of 5 coulombs and the second charge has a magnitude of 10 coulombs. These charges are placed at a distance of 2 meters from each other. You are asked to calculate the electromagnetic force between these charges. You perform the experiment twice. The first time, the charges are placed in a vacuum, which has a permittivity of 8.854 x 10^-12 F/m. The second time, the charges are placed in a medium with a relative permittivity of 5 x 10^-12 F/m. Can you calculate the electromagnetic force between the charges in both scenarios?\"", "query_for_retrieval": "\"In a physics experiment, you are given two charges. The first charge has a magnitude of 5 coulombs and the second charge has a magnitude of 10 coulombs. These charges are placed at a distance of 2 meters from each other. You are asked to calculate the electromagnetic force between these charges. You perform the experiment twice. The first time, the charges are placed in a vacuum, which has a permittivity of 8.854 x 10^-12 F/m. The second time, the charges are placed in a medium with a relative permittivity of 5 x 10^-12 F/m. Can you calculate the electromagnetic force between the charges in both scenarios?\"", "answer": "electromagnetic_force", "answer_params": "", "api_description": "def electromagnetic_force:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electromagnetic force between two charges placed at a certain distance.\n\t\n\tArguments:\n\t---------\n\t- charge1 : integer = None (required) The magnitude of the first charge in coulombs.\n\t- charge2 : integer = None (required) The magnitude of the second charge in coulombs.\n\t- distance : integer = None (required) The distance between the two charges in meters.\n\t- medium_permittivity : float = None (optional) The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"electromagnetic_force\", \"description\": \"Calculate the electromagnetic force between two charges placed at a certain distance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge1\": {\"type\": \"integer\", \"description\": \"The magnitude of the first charge in coulombs.\"}, \"charge2\": {\"type\": \"integer\", \"description\": \"The magnitude of the second charge in coulombs.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"The distance between the two charges in meters.\"}, \"medium_permittivity\": {\"type\": \"float\", \"description\": \"The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity).\"}}, \"required\": [\"charge1\", \"charge2\", \"distance\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me calculate the compound interest for my savings? I initially invested $5000 as the principal amount. The bank offers an annual interest rate of 2.5% (or 0.025 in decimal form). I plan to keep my money in the bank for 10 years. Also, the interest is compounded quarterly, so it's compounded 4 times in a year. Can you calculate the compound interest for the first 2 years, then for the next 3 years and finally for the remaining 5 years?\"", "query_for_retrieval": "\"Can you help me calculate the compound interest for my savings? I initially invested $5000 as the principal amount. The bank offers an annual interest rate of 2.5% (or 0.025 in decimal form). I plan to keep my money in the bank for 10 years. Also, the interest is compounded quarterly, so it's compounded 4 times in a year. Can you calculate the compound interest for the first 2 years, then for the next 3 years and finally for the remaining 5 years?\"", "answer": "calculate_compound_interest", "answer_params": "", "api_description": "def calculate_compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate compound interest for an initial principal amount.\n\t\n\tArguments:\n\t---------\n\t- principal : integer = None (required) The principal amount that the interest is applied to.\n\t- rate : float = None (required) The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\n\t- time : integer = None (required) The time the money is invested for in years.\n\t- n : integer = None (optional) The number of times that interest is compounded per time period. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compound_interest\", \"description\": \"Calculate compound interest for an initial principal amount.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"integer\", \"description\": \"The principal amount that the interest is applied to.\"}, \"rate\": {\"type\": \"float\", \"description\": \"The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time the money is invested for in years.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per time period. Default is 1.\"}}, \"required\": [\"principal\", \"rate\", \"time\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently engaged in a study that requires me to investigate the holidays celebrated across different cultures and how they've evolved over the years. As part of this research, I'm compiling data on the national holidays in various countries for specific years. At the moment, I'm focusing on France. I need to know the list of holidays that were observed in France in the year 2010. Can you provide that information for me?", "query_for_retrieval": "I'm currently engaged in a study that requires me to investigate the holidays celebrated across different cultures and how they've evolved over the years. As part of this research, I'm compiling data on the national holidays in various countries for specific years. At the moment, I'm focusing on France. I need to know the list of holidays that were observed in France in the year 2010. Can you provide that information for me?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "relevance", "query": "Who is the author of the book 'Pride and Prejudice'?", "query_for_retrieval": "Who is the author of the book 'Pride and Prejudice'?", "answer": "calculate_score", "answer_params": "", "api_description": "def calculate_score:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the score in a video game based on the number of enemies defeated, coins collected, and power-ups acquired.\n\t\n\tArguments:\n\t---------\n\t- enemies_defeated : integer = None (required) The number of enemies the player has defeated.\n\t- coins_collected : integer = None (required) The number of coins the player has collected.\n\t- power_ups : integer = 3 (optional) The number of power-ups the player has acquired.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_score\", \"description\": \"Calculate the score in a video game based on the number of enemies defeated, coins collected, and power-ups acquired.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"enemies_defeated\": {\"type\": \"integer\", \"description\": \"The number of enemies the player has defeated.\"}, \"coins_collected\": {\"type\": \"integer\", \"description\": \"The number of coins the player has collected.\"}, \"power_ups\": {\"type\": \"integer\", \"description\": \"The number of power-ups the player has acquired.\", \"default\": 3}}, \"required\": [\"enemies_defeated\", \"coins_collected\"]}}"}
{"scope": "simple", "query": "Get point and rebound stats for player 'LeBron James' from last basketball game", "query_for_retrieval": "Get point and rebound stats for player 'LeBron James' from last basketball game", "answer": "player_stats.getLastGame", "answer_params": "", "api_description": "def player_stats.getLastGame:\n\t\"\"\"\n\tDescription:\n\t\n\tGet last game statistics for a specific player in basketball\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the basketball player.\n\t- team : string = None (required) The team that player currently plays for.\n\t- metrics : array = None (optional) Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"player_stats.getLastGame\", \"description\": \"Get last game statistics for a specific player in basketball\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the basketball player.\"}, \"team\": {\"type\": \"string\", \"description\": \"The team that player currently plays for.\"}, \"metrics\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Points\", \"Rebounds\", \"Assists\", \"Blocks\"]}, \"description\": \"Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default.\"}}, \"required\": [\"player_name\", \"team\"]}}"}
{"scope": "relevance", "query": "Identify the number of the mitochondria in a cell.", "query_for_retrieval": "Identify the number of the mitochondria in a cell.", "answer": "get_cell_function", "answer_params": "", "api_description": "def get_cell_function:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the information about cell functions based on its part.\n\t\n\tArguments:\n\t---------\n\t- cell_part : string = None (required) The part of the cell, e.g. mitochondria\n\t- detail_level : string = None (required) The level of detail for the cell function information.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_cell_function\", \"description\": \"Get the information about cell functions based on its part.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_part\": {\"type\": \"string\", \"description\": \"The part of the cell, e.g. mitochondria\"}, \"detail_level\": {\"type\": \"string\", \"enum\": [\"basic\", \"detailed\"], \"description\": \"The level of detail for the cell function information.\"}}, \"required\": [\"cell_part\", \"detail_level\"]}}"}
{"scope": "javascript", "query": "How can I track the 'submitForm' action on a 'formHandler' object but only when the form has is required and is valid email validation flags set?", "query_for_retrieval": "How can I track the 'submitForm' action on a 'formHandler' object but only when the form has is required and is valid email validation flags set?", "answer": "trackSubmitWithValidation", "answer_params": "", "api_description": "def trackSubmitWithValidation:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function tracks the 'submitForm' action on a given object. It only logs the submission when specific validation flags are set; if the flags are not set, the original action is performed without tracking.\n\t\n\tArguments:\n\t---------\n\t- obj : any = None (required) The object with the 'submitForm' action to track.\n\t- validationFlags : array = None (required) An array of validation flags required to trigger tracking. Possible options are isRequired, isValidEmail.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"trackSubmitWithValidation\", \"description\": \"This function tracks the 'submitForm' action on a given object. It only logs the submission when specific validation flags are set; if the flags are not set, the original action is performed without tracking.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"obj\": {\"type\": \"any\", \"description\": \"The object with the 'submitForm' action to track.\"}, \"validationFlags\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"An array of validation flags required to trigger tracking. Possible options are isRequired, isValidEmail.\"}}, \"required\": [\"obj\", \"validationFlags\"]}}"}
{"scope": "parallel_function", "query": "What would be the estimated travel time if I start my journey from New York, make stops at Philadelphia, Washington D.C., and Atlanta, and finally reach Miami? Also, what if I skip the stop at Atlanta and directly go to Miami from Washington D.C.? And lastly, what if I start from Philadelphia instead of New York, stop at Washington D.C., and then reach Miami?", "query_for_retrieval": "What would be the estimated travel time if I start my journey from New York, make stops at Philadelphia, Washington D.C., and Atlanta, and finally reach Miami? Also, what if I skip the stop at Atlanta and directly go to Miami from Washington D.C.? And lastly, what if I start from Philadelphia instead of New York, stop at Washington D.C., and then reach Miami?", "answer": "route.estimate_time", "answer_params": "", "api_description": "def route.estimate_time:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the travel time for a specific route with optional stops.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point for the journey.\n\t- end_location : string = None (required) The destination for the journey.\n\t- stops : array = ['NYC'] (optional) Additional cities or points of interest to stop at during the journey ordered.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"route.estimate_time\", \"description\": \"Estimate the travel time for a specific route with optional stops.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point for the journey.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination for the journey.\"}, \"stops\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Additional cities or points of interest to stop at during the journey ordered.\", \"default\": [\"NYC\"]}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "relevance", "query": "What's the time right now?", "query_for_retrieval": "What's the time right now?", "answer": "calculate_time", "answer_params": "", "api_description": "def calculate_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the time taken to cover a distance at a certain speed.\n\t\n\tArguments:\n\t---------\n\t- distance : float = None (required) The distance to be covered in meters.\n\t- speed : float = None (required) The speed at which the object is moving in m/s.\n\t- round_to_nearest_second : boolean = False (optional) Optional parameter to round the time to the nearest second.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_time\", \"description\": \"Calculates the time taken to cover a distance at a certain speed.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"float\", \"description\": \"The distance to be covered in meters.\"}, \"speed\": {\"type\": \"float\", \"description\": \"The speed at which the object is moving in m/s.\"}, \"round_to_nearest_second\": {\"type\": \"boolean\", \"description\": \"Optional parameter to round the time to the nearest second.\", \"default\": false}}, \"required\": [\"distance\", \"speed\"]}}"}
{"scope": "parallel_function", "query": "Calculate the induced electromagnetic force for a magnetic field of 5 Tesla, area of 2 square meters and change in time of 4 seconds, then repeat with a change in time of 10 seconds.", "query_for_retrieval": "Calculate the induced electromagnetic force for a magnetic field of 5 Tesla, area of 2 square meters and change in time of 4 seconds, then repeat with a change in time of 10 seconds.", "answer": "calculate_em_force", "answer_params": "", "api_description": "def calculate_em_force:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).\n\t\n\tArguments:\n\t---------\n\t- b_field : integer = None (required) The magnetic field in Tesla.\n\t- area : integer = None (required) The change in area of magnetic field in square meters.\n\t- d_time : integer = None (required) The change in time in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_em_force\", \"description\": \"Calculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"b_field\": {\"type\": \"integer\", \"description\": \"The magnetic field in Tesla.\"}, \"area\": {\"type\": \"integer\", \"description\": \"The change in area of magnetic field in square meters.\"}, \"d_time\": {\"type\": \"integer\", \"description\": \"The change in time in seconds.\"}}, \"required\": [\"b_field\", \"area\", \"d_time\"]}}"}
{"scope": "simple", "query": "Get me strength and weakness traits for ENFJ personality type.", "query_for_retrieval": "Get me strength and weakness traits for ENFJ personality type.", "answer": "get_personality_traits", "answer_params": "", "api_description": "def get_personality_traits:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the personality traits for a specific personality type, including their strengths and weaknesses.\n\t\n\tArguments:\n\t---------\n\t- type : string = None (required) The personality type.\n\t- traits : array = None (optional) List of traits to be retrieved, default is ['strengths'].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_personality_traits\", \"description\": \"Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The personality type.\"}, \"traits\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"strengths\", \"weaknesses\"]}, \"description\": \"List of traits to be retrieved, default is ['strengths'].\"}}, \"required\": [\"type\"]}}"}
{"scope": "simple", "query": "Change my painting's medium to oil and change size to 12x18 with red dominant color.", "query_for_retrieval": "Change my painting's medium to oil and change size to 12x18 with red dominant color.", "answer": "modify_painting", "answer_params": "", "api_description": "def modify_painting:\n\t\"\"\"\n\tDescription:\n\t\n\tModify an existing painting's attributes such as size, medium, and color.\n\t\n\tArguments:\n\t---------\n\t- size : string = None (required) The size of the painting in inches, width by height.\n\t- medium : string = None (required) The medium of the painting, such as oil, acrylic, etc.\n\t- dominant_color : string = None (optional) The dominant color of the painting. Default to 'black'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"modify_painting\", \"description\": \"Modify an existing painting's attributes such as size, medium, and color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"size\": {\"type\": \"string\", \"description\": \"The size of the painting in inches, width by height.\"}, \"medium\": {\"type\": \"string\", \"description\": \"The medium of the painting, such as oil, acrylic, etc.\"}, \"dominant_color\": {\"type\": \"string\", \"description\": \"The dominant color of the painting. Default to 'black'.\"}}, \"required\": [\"size\", \"medium\"]}}"}
{"scope": "multiple_function", "query": "I want to generate a sound of 440Hz frequency for 5 seconds. What is the function and how can I use it?", "query_for_retrieval": "I want to generate a sound of 440Hz frequency for 5 seconds. What is the function and how can I use it?", "answer": "play_sound_wave", "answer_params": "", "api_description": "def play_sound_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function is for playing a sound wave file.\n\t\n\tArguments:\n\t---------\n\t- wave_file : string = None (required) The filename of the sound wave file to be played.\n\t- volume : float = 1 (optional) The volume level at which the sound is to be played (1 is 100%).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"play_sound_wave\", \"description\": \"This function is for playing a sound wave file.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"wave_file\": {\"type\": \"string\", \"description\": \"The filename of the sound wave file to be played.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume level at which the sound is to be played (1 is 100%).\", \"default\": 1}}, \"required\": [\"wave_file\"]}}"}
{"scope": "multiple_function", "query": "What is the year over year growth rate for company 'Tech Inc' with revenues of $1M in 2019 and $1.2M in 2020?", "query_for_retrieval": "What is the year over year growth rate for company 'Tech Inc' with revenues of $1M in 2019 and $1.2M in 2020?", "answer": "corporate_finance.calculate_YOY_growth_rate", "answer_params": "", "api_description": "def corporate_finance.calculate_YOY_growth_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the year over year (YOY) growth rate for a company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company for which to calculate the YOY growth rate.\n\t- year1 : integer = None (required) The initial year.\n\t- year1_revenue : integer = None (required) The revenue for the initial year.\n\t- year2 : integer = None (required) The subsequent year.\n\t- year2_revenue : integer = None (required) The revenue for the subsequent year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"corporate_finance.calculate_YOY_growth_rate\", \"description\": \"Calculate the year over year (YOY) growth rate for a company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company for which to calculate the YOY growth rate.\"}, \"year1\": {\"type\": \"integer\", \"description\": \"The initial year.\"}, \"year1_revenue\": {\"type\": \"integer\", \"description\": \"The revenue for the initial year.\"}, \"year2\": {\"type\": \"integer\", \"description\": \"The subsequent year.\"}, \"year2_revenue\": {\"type\": \"integer\", \"description\": \"The revenue for the subsequent year.\"}}, \"required\": [\"company_name\", \"year1\", \"year1_revenue\", \"year2\", \"year2_revenue\"]}}"}
{"scope": "rest", "query": "I'm planning a hiking trip next weekend to the Rockies and I need an extended 10-day weather forecast. How can I get the weather data including temperature highs and lows, wind speed, and sum of precipitation for the coordinates 39.113014, -105.358887 with temperatures in Fahrenheit, wind speed in mph, and the local timezone?", "query_for_retrieval": "I'm planning a hiking trip next weekend to the Rockies and I need an extended 10-day weather forecast. How can I get the weather data including temperature highs and lows, wind speed, and sum of precipitation for the coordinates 39.113014, -105.358887 with temperatures in Fahrenheit, wind speed in mph, and the local timezone?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "java", "query": "How can I update the new status to 2 for a list of product IDs [101, 202, 303] in the product management system?", "query_for_retrieval": "How can I update the new status to 2 for a list of product IDs [101, 202, 303] in the product management system?", "answer": "PmsProductServiceImpl.updateNewStatus", "answer_params": "", "api_description": "def PmsProductServiceImpl.updateNewStatus:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdates the new status for a list of product IDs in the product management system.\n\t\n\tArguments:\n\t---------\n\t- ids : ArrayList = None (required) A list of product IDs to update the new status for. Product ID is Long type\n\t- newStatus : integer = None (required) The new status to be set for the given product IDs.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"PmsProductServiceImpl.updateNewStatus\", \"description\": \"Updates the new status for a list of product IDs in the product management system.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"ArrayList\", \"description\": \"A list of product IDs to update the new status for. Product ID is Long type\", \"items\": {\"type\": \"long\"}}, \"newStatus\": {\"type\": \"integer\", \"description\": \"The new status to be set for the given product IDs.\"}}, \"required\": [\"ids\", \"newStatus\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project where I need to calculate the areas of various plots of land based on their corner points. For my first plot, the corners are located at the points [1,2], [3,4], [1,4], and [3,7]. For the second one, the corners are [5,5], [6,7], and [7,5]. The third plot has its corners at [2,1], [4,2], [3,4], and [1,3], and the last one has a bit of an irregular shape with corners at [-1,0], [2,3], [0,4], and [-2,2]. Could you provide the area calculations for these four plots?", "query_for_retrieval": "I'm working on a project where I need to calculate the areas of various plots of land based on their corner points. For my first plot, the corners are located at the points [1,2], [3,4], [1,4], and [3,7]. For the second one, the corners are [5,5], [6,7], and [7,5]. The third plot has its corners at [2,1], [4,2], [3,4], and [1,3], and the last one has a bit of an irregular shape with corners at [-1,0], [2,3], [0,4], and [-2,2]. Could you provide the area calculations for these four plots?", "answer": "polygon_area", "answer_params": "", "api_description": "def polygon_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a polygon given its vertices using the shoelace formula.\n\t\n\tArguments:\n\t---------\n\t- vertices : array = None (required) The vertices of the polygon, where each vertex is a 2 element list [x, y].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"polygon_area\", \"description\": \"Calculate the area of a polygon given its vertices using the shoelace formula.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vertices\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"A single vertex represented by a 2 element list [x, y].\"}, \"description\": \"The vertices of the polygon, where each vertex is a 2 element list [x, y].\"}}, \"required\": [\"vertices\"]}}"}
{"scope": "parallel_function", "query": "Find out who was the president of United States in 1980 and 2016, and the vice president in 1975 and 2011.", "query_for_retrieval": "Find out who was the president of United States in 1980 and 2016, and the vice president in 1975 and 2011.", "answer": "get_president_and_vp", "answer_params": "", "api_description": "def get_president_and_vp:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the President and Vice President of United States for a specified year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year for which president or vice president information is needed.\n\t- position : string = None (required) The position: either 'president' or 'vice president'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_president_and_vp\", \"description\": \"Get the President and Vice President of United States for a specified year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year for which president or vice president information is needed.\"}, \"position\": {\"type\": \"string\", \"description\": \"The position: either 'president' or 'vice president'.\"}}, \"required\": [\"year\", \"position\"]}}"}
{"scope": "multiple_function", "query": "How many veterans were there in the United States in the year 1954?", "query_for_retrieval": "How many veterans were there in the United States in the year 1954?", "answer": "get_bureau_statistics", "answer_params": "", "api_description": "def get_bureau_statistics:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve statistical data for a specific year and statistical category\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year for which to retrieve the statistical data\n\t- category : string = None (required) The statistical category (e.g., employment, crime, health)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_bureau_statistics\", \"description\": \"Retrieve statistical data for a specific year and statistical category\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year for which to retrieve the statistical data\"}, \"category\": {\"type\": \"string\", \"description\": \"The statistical category (e.g., employment, crime, health)\"}}, \"required\": [\"year\", \"category\"]}}"}
{"scope": "executable_simple", "query": "As a data analyst, I'm dealing with a dataset that needs to be sorted for my analysis. I have these numbers [34, 2, 56, 7, 9, 12], but they need to be in descending order for the report I'm preparing. Could you sort this array for me?", "query_for_retrieval": "As a data analyst, I'm dealing with a dataset that needs to be sorted for my analysis. I have these numbers [34, 2, 56, 7, 9, 12], but they need to be in descending order for the report I'm preparing. Could you sort this array for me?", "answer": "sort_array", "answer_params": "", "api_description": "def sort_array:\n\t\"\"\"\n\tDescription:\n\t\n\tSorts an array of numbers.\n\t\n\tArguments:\n\t---------\n\t- array : array = None (required) The array of numbers.\n\t- reverse : boolean = False (optional) Whether to sort the array in reverse order, i.e., descending order.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sort_array\", \"description\": \"Sorts an array of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"array\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The array of numbers.\"}, \"reverse\": {\"type\": \"boolean\", \"description\": \"Whether to sort the array in reverse order, i.e., descending order.\", \"default\": false}}, \"required\": [\"array\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been doing some comprehensive research for various projects and I need to gather a bunch of different pieces of information. First, I'm looking to purchase a specific item from Amazon but want to make sure I'm getting the right thing. Could you find the product name and price for the item with the ASIN 'B08PPDJWC8'? \n\nAdditionally, I'm working on a physics assignment where I need to calculate the electrostatic potential energy. The scenario involves an object with a charge of 5 coulombs subjected to a voltage of 10 volts. I need that calculation as soon as possible. Switching gears, I'm planning a cultural event and need to be mindful of holidays. Can you list all the holidays in the United States for the year 2022? Lastly, for a health and safety report, I need the latest total number of COVID-related deaths in Italy. Can you provide that data?", "query_for_retrieval": "I've been doing some comprehensive research for various projects and I need to gather a bunch of different pieces of information. First, I'm looking to purchase a specific item from Amazon but want to make sure I'm getting the right thing. Could you find the product name and price for the item with the ASIN 'B08PPDJWC8'? \n\nAdditionally, I'm working on a physics assignment where I need to calculate the electrostatic potential energy. The scenario involves an object with a charge of 5 coulombs subjected to a voltage of 10 volts. I need that calculation as soon as possible. Switching gears, I'm planning a cultural event and need to be mindful of holidays. Can you list all the holidays in the United States for the year 2022? Lastly, for a health and safety report, I need the latest total number of COVID-related deaths in Italy. Can you provide that data?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "simple", "query": "Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.", "query_for_retrieval": "Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.", "answer": "travel_itinerary_generator", "answer_params": "", "api_description": "def travel_itinerary_generator:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\n\t\n\tArguments:\n\t---------\n\t- destination : string = None (required) Destination city of the trip.\n\t- days : integer = None (required) Number of days for the trip.\n\t- daily_budget : integer = None (required) The maximum daily budget for the trip.\n\t- exploration_type : string = urban (optional) The preferred exploration type.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"travel_itinerary_generator\", \"description\": \"Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"destination\": {\"type\": \"string\", \"description\": \"Destination city of the trip.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the trip.\"}, \"daily_budget\": {\"type\": \"integer\", \"description\": \"The maximum daily budget for the trip.\"}, \"exploration_type\": {\"type\": \"string\", \"enum\": [\"nature\", \"urban\", \"history\", \"culture\"], \"description\": \"The preferred exploration type.\", \"default\": \"urban\"}}, \"required\": [\"destination\", \"days\", \"daily_budget\"]}}"}
{"scope": "multiple_function", "query": "What is the wind speed and temperature in location given by coordinates 46.603354,1.8883340 on December 13, 2019?", "query_for_retrieval": "What is the wind speed and temperature in location given by coordinates 46.603354,1.8883340 on December 13, 2019?", "answer": "weather.get_by_city_date", "answer_params": "", "api_description": "def weather.get_by_city_date:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the historical weather data based on city and date.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city for which to retrieve the weather.\n\t- date : string = None (required) The date for which to retrieve the historical weather data in the format YYYY-MM-DD.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather.get_by_city_date\", \"description\": \"Retrieves the historical weather data based on city and date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city for which to retrieve the weather.\"}, \"date\": {\"type\": \"string\", \"format\": \"date\", \"description\": \"The date for which to retrieve the historical weather data in the format YYYY-MM-DD.\"}}, \"required\": [\"city\", \"date\"]}}"}
{"scope": "simple", "query": "Calculate the derivative of the function 2x^2 at x = 1.", "query_for_retrieval": "Calculate the derivative of the function 2x^2 at x = 1.", "answer": "calculus.derivative", "answer_params": "", "api_description": "def calculus.derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the derivative of a function at a specific value.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- value : integer = None (required) The value where the derivative needs to be calculated at.\n\t- function_variable : string = None (optional) The variable present in the function, for instance x or y, etc. Default is 'x'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculus.derivative\", \"description\": \"Compute the derivative of a function at a specific value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"value\": {\"type\": \"integer\", \"description\": \"The value where the derivative needs to be calculated at.\"}, \"function_variable\": {\"type\": \"string\", \"description\": \"The variable present in the function, for instance x or y, etc. Default is 'x'.\"}}, \"required\": [\"function\", \"value\"]}}"}
{"scope": "relevance", "query": "Where is the closest Italian restaurant?", "query_for_retrieval": "Where is the closest Italian restaurant?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount of money from one currency to another\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert\n\t- from_currency : string = None (required) The current currency of the money\n\t- to_currency : string = None (required) The desired currency of the money\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount of money from one currency to another\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The current currency of the money\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The desired currency of the money\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "parallel_function", "query": "\"In a board game, you have a six-sided die. You are curious about the probability of rolling a 4 three times in a row. After that, you want to know the probability of rolling a 2 twice in a row. Finally, you wonder what the probability would be if the die had 8 sides and you wanted to roll a 7 two times in a row. Can you calculate these probabilities?\"", "query_for_retrieval": "\"In a board game, you have a six-sided die. You are curious about the probability of rolling a 4 three times in a row. After that, you want to know the probability of rolling a 2 twice in a row. Finally, you wonder what the probability would be if the die had 8 sides and you wanted to roll a 7 two times in a row. Can you calculate these probabilities?\"", "answer": "probability.dice_roll", "answer_params": "", "api_description": "def probability.dice_roll:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\n\t\n\tArguments:\n\t---------\n\t- desired_number : integer = None (required) The number you want to roll.\n\t- number_of_rolls : integer = None (required) How many times you want to roll that number in a row.\n\t- die_sides : integer = None (optional) The number of sides on the die (optional; default is 6).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability.dice_roll\", \"description\": \"Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"desired_number\": {\"type\": \"integer\", \"description\": \"The number you want to roll.\"}, \"number_of_rolls\": {\"type\": \"integer\", \"description\": \"How many times you want to roll that number in a row.\"}, \"die_sides\": {\"type\": \"integer\", \"description\": \"The number of sides on the die (optional; default is 6).\"}}, \"required\": [\"desired_number\", \"number_of_rolls\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please tell me the ranking of the New York Yankees in the Major League Baseball for the 2019 season, then check the ranking of the Los Angeles Lakers in the National Basketball Association for the 2020 season, and finally, could you provide the air quality index for Los Angeles on December 25, 2020 and for New York on January 1, 2021?\"", "query_for_retrieval": "\"Could you please tell me the ranking of the New York Yankees in the Major League Baseball for the 2019 season, then check the ranking of the Los Angeles Lakers in the National Basketball Association for the 2020 season, and finally, could you provide the air quality index for Los Angeles on December 25, 2020 and for New York on January 1, 2021?\"", "answer": "air_quality", "answer_params": "", "api_description": "def air_quality:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the air quality index for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the air quality index for.\n\t- date : string = None (required) The date you want to get the air quality index for. Default is today.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"air_quality\", \"description\": \"Retrieve the air quality index for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the air quality index for.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date you want to get the air quality index for. Default is today.\"}}, \"required\": [\"location\", \"date\"]}}"}
{"scope": "simple", "query": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "query_for_retrieval": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "answer": "create_player_profile", "answer_params": "", "api_description": "def create_player_profile:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a new player profile with character name, class and starting level.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The desired name of the player.\n\t- _class : string = None (required) The character class for the player\n\t- starting_level : integer = 1 (optional) The starting level for the player\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_player_profile\", \"description\": \"Create a new player profile with character name, class and starting level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The desired name of the player.\"}, \"_class\": {\"type\": \"string\", \"description\": \"The character class for the player\"}, \"starting_level\": {\"type\": \"integer\", \"description\": \"The starting level for the player\", \"default\": 1}}, \"required\": [\"player_name\", \"_class\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a project about how holidays are celebrated across different nations and how these celebrations have evolved. Right now, I'm focusing on France, specifically the year 2010. I need a list of all the public holidays that were observed in France during that year. Can you help me out with that?", "query_for_retrieval": "I'm working on a project about how holidays are celebrated across different nations and how these celebrations have evolved. Right now, I'm focusing on France, specifically the year 2010. I need a list of all the public holidays that were observed in France during that year. Can you help me out with that?", "answer": "retrieve_holiday_by_year", "answer_params": "", "api_description": "def retrieve_holiday_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the holidays of a year.\n\t\n\tArguments:\n\t---------\n\t- year : string = None (required) The year of the holidays.\n\t- country : string = None (required) The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_holiday_by_year\", \"description\": \"Finds the holidays of a year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"string\", \"description\": \"The year of the holidays.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\"}}, \"required\": [\"year\", \"country\"]}}"}
{"scope": "javascript", "query": "How do I add a 'click' event listener to a button element 'myButton' that triggers a function named 'handleButtonClick' and stops the event from propagating by setting options's stopProgation to true?", "query_for_retrieval": "How do I add a 'click' event listener to a button element 'myButton' that triggers a function named 'handleButtonClick' and stops the event from propagating by setting options's stopProgation to true?", "answer": "buttonAddClickHandler", "answer_params": "", "api_description": "def buttonAddClickHandler:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function attaches a click event listener to a specified button element with options to control event flow and behavior.\n\t\n\tArguments:\n\t---------\n\t- element : any = None (required) The button element to which the event listener will be added.\n\t- callback : any = None (required) The function to be called when the button is clicked.\n\t- options : dict = None (optional) An options object to specify characteristics about the event listener, such as stopping propagation. Optional parameter. Default to be empty dictionary\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"buttonAddClickHandler\", \"description\": \"This function attaches a click event listener to a specified button element with options to control event flow and behavior.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"element\": {\"type\": \"any\", \"description\": \"The button element to which the event listener will be added.\"}, \"callback\": {\"type\": \"any\", \"description\": \"The function to be called when the button is clicked.\"}, \"options\": {\"type\": \"dict\", \"description\": \"An options object to specify characteristics about the event listener, such as stopping propagation. Optional parameter. Default to be empty dictionary\"}}, \"required\": [\"element\", \"callback\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you provide me with the exhibition information for the Louvre museum for the next 3 months and then tell me about the best Italian and Chinese restaurants in the area of Paris?\"", "query_for_retrieval": "\"Can you provide me with the exhibition information for the Louvre museum for the next 3 months and then tell me about the best Italian and Chinese restaurants in the area of Paris?\"", "answer": "restaurant_info", "answer_params": "", "api_description": "def restaurant_info:\n\t\"\"\"\n\tDescription:\n\t\n\tGet restaurant information for a specific area.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location for which to find restaurants.\n\t- food_type : string = None (optional) Type of cuisine for which to find restaurants. Default is 'all' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_info\", \"description\": \"Get restaurant information for a specific area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location for which to find restaurants.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"Type of cuisine for which to find restaurants. Default is 'all' if not specified.\", \"enum\": [\"Italian\", \"Chinese\", \"Mexican\", \"American\"]}}, \"required\": [\"location\"]}}"}
{"scope": "relevance", "query": "Who was the most famous composers in United States.", "query_for_retrieval": "Who was the most famous composers in United States.", "answer": "music_theory.create_chord_progression", "answer_params": "", "api_description": "def music_theory.create_chord_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a chord progression based on given musical key.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The musical key for the chord progression.\n\t- progression_pattern : array = None (required) The chord progression pattern.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_theory.create_chord_progression\", \"description\": \"Creates a chord progression based on given musical key.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The musical key for the chord progression.\"}, \"progression_pattern\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The chord progression pattern.\"}}, \"required\": [\"key\", \"progression_pattern\"]}}"}
{"scope": "relevance", "query": "Give me the price of a Tesla model S in India.", "query_for_retrieval": "Give me the price of a Tesla model S in India.", "answer": "get_exchange_rate", "answer_params": "", "api_description": "def get_exchange_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current exchange rate between two currencies.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency.\n\t- target_currency : string = None (required) The target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_exchange_rate\", \"description\": \"Retrieve the current exchange rate between two currencies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The target currency.\"}}, \"required\": [\"base_currency\", \"target_currency\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few calculations and searches? First, I'm studying probability and I'd like to calculate the binomial probability for a scenario where I have 20 trials, and I'm interested in 5 successful outcomes. Let's assume the probability of success on any given trial is 0.25. Secondly, I'm a big fan of basketball and I'm curious to know who the top female player is currently. Thirdly, I'm planning to buy a guitar and my budget is $500. I prefer a Fender make. Lastly, I'm working on a physics problem where I need to calculate the electromagnetic force between two charges. The first charge is 2 coulombs, the second charge is 3 coulombs and they are placed 0.5 meters apart. Could you help me with these?\"", "query_for_retrieval": "\"Could you help me with a few calculations and searches? First, I'm studying probability and I'd like to calculate the binomial probability for a scenario where I have 20 trials, and I'm interested in 5 successful outcomes. Let's assume the probability of success on any given trial is 0.25. Secondly, I'm a big fan of basketball and I'm curious to know who the top female player is currently. Thirdly, I'm planning to buy a guitar and my budget is $500. I prefer a Fender make. Lastly, I'm working on a physics problem where I need to calculate the electromagnetic force between two charges. The first charge is 2 coulombs, the second charge is 3 coulombs and they are placed 0.5 meters apart. Could you help me with these?\"", "answer": "sports_ranking.get_top_player", "answer_params": "", "api_description": "def sports_ranking.get_top_player:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the top player in a specific sport.\n\t\n\tArguments:\n\t---------\n\t- sport : string = None (required) The type of sport.\n\t- gender : string = men (optional) The gender of the sport category. Optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_top_player\", \"description\": \"Get the top player in a specific sport.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sport\": {\"type\": \"string\", \"description\": \"The type of sport.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the sport category. Optional.\", \"default\": \"men\"}}, \"required\": [\"sport\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you first find out the key historical events related to 'War' and 'Economy' that took place in France between the years 1800 and 1900? After that, could you please tell me the current market value of the sculpture 'The Thinker' created by the artist 'Auguste Rodin'? Lastly, I would also like to know the market value of the sculpture 'The Kiss', also created by 'Auguste Rodin', in the year 1882.\"", "query_for_retrieval": "\"Can you first find out the key historical events related to 'War' and 'Economy' that took place in France between the years 1800 and 1900? After that, could you please tell me the current market value of the sculpture 'The Thinker' created by the artist 'Auguste Rodin'? Lastly, I would also like to know the market value of the sculpture 'The Kiss', also created by 'Auguste Rodin', in the year 1882.\"", "answer": "get_sculpture_value", "answer_params": "", "api_description": "def get_sculpture_value:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current market value of a particular sculpture by a specific artist.\n\t\n\tArguments:\n\t---------\n\t- sculpture : string = None (required) The name of the sculpture.\n\t- artist : string = None (required) The name of the artist who created the sculpture.\n\t- year : integer = None (optional) The year the sculpture was created. This is optional and is not required for all sculptures. Default is the current year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sculpture_value\", \"description\": \"Retrieve the current market value of a particular sculpture by a specific artist.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sculpture\": {\"type\": \"string\", \"description\": \"The name of the sculpture.\"}, \"artist\": {\"type\": \"string\", \"description\": \"The name of the artist who created the sculpture.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year the sculpture was created. This is optional and is not required for all sculptures. Default is the current year.\"}}, \"required\": [\"sculpture\", \"artist\"]}}"}
{"scope": "simple", "query": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "query_for_retrieval": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "answer": "lawsuit.check_case", "answer_params": "", "api_description": "def lawsuit.check_case:\n\t\"\"\"\n\tDescription:\n\t\n\tVerify the details of a lawsuit case and check its status using case ID.\n\t\n\tArguments:\n\t---------\n\t- case_id : integer = None (required) The identification number of the lawsuit case.\n\t- closed_status : boolean = None (required) The status of the lawsuit case to be verified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit.check_case\", \"description\": \"Verify the details of a lawsuit case and check its status using case ID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_id\": {\"type\": \"integer\", \"description\": \"The identification number of the lawsuit case.\"}, \"closed_status\": {\"type\": \"boolean\", \"description\": \"The status of the lawsuit case to be verified.\"}}, \"required\": [\"case_id\", \"closed_status\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the factorial of 8 and generate the prime numbers from 1 to 50.", "query_for_retrieval": "Calculate the factorial of 8 and generate the prime numbers from 1 to 50.", "answer": "calculate_fibonacci", "answer_params": "", "api_description": "def calculate_fibonacci:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Fibonacci series up to a specific position.\n\t\n\tArguments:\n\t---------\n\t- position : integer = None (required) The position up to which you want to calculate the Fibonacci series.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_fibonacci\", \"description\": \"Calculate the Fibonacci series up to a specific position.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"position\": {\"type\": \"integer\", \"description\": \"The position up to which you want to calculate the Fibonacci series.\"}}, \"required\": [\"position\"]}}"}
{"scope": "relevance", "query": "Who initiate Protestant Reformation?", "query_for_retrieval": "Who initiate Protestant Reformation?", "answer": "religion_history.get_event_year", "answer_params": "", "api_description": "def religion_history.get_event_year:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the year a specific historical religious event happened.\n\t\n\tArguments:\n\t---------\n\t- event_name : string = None (required) The name of the historical religious event.\n\t- period : string = None (required) The period in which the event took place.\n\t- location : string = Worldwide (optional) The location where the event took place.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion_history.get_event_year\", \"description\": \"Retrieve the year a specific historical religious event happened.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event_name\": {\"type\": \"string\", \"description\": \"The name of the historical religious event.\"}, \"period\": {\"type\": \"string\", \"description\": \"The period in which the event took place.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the event took place.\", \"default\": \"Worldwide\"}}, \"required\": [\"event_name\", \"period\"]}}"}
{"scope": "multiple_function", "query": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "query_for_retrieval": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits related to a specific company within a specific date range and location.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company related to the lawsuit.\n\t- start_date : string = None (required) Start of the date range for when the lawsuit was filed.\n\t- location : string = None (required) Location where the lawsuit was filed.\n\t- status : string = None (optional) The status of the lawsuit. Default is 'ongoing'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Search for lawsuits related to a specific company within a specific date range and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company related to the lawsuit.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"Start of the date range for when the lawsuit was filed.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location where the lawsuit was filed.\"}, \"status\": {\"type\": \"string\", \"enum\": [\"ongoing\", \"settled\", \"dismissed\"], \"description\": \"The status of the lawsuit. Default is 'ongoing'.\"}}, \"required\": [\"company\", \"start_date\", \"location\"]}}"}
{"scope": "javascript", "query": "How can I verify if an email address 'example@domain.com' conforms to the standard email format, optionally allowing for custom domain validation with 'domain.com'?", "query_for_retrieval": "How can I verify if an email address 'example@domain.com' conforms to the standard email format, optionally allowing for custom domain validation with 'domain.com'?", "answer": "emailFormatValidator", "answer_params": "", "api_description": "def emailFormatValidator:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function validates if a given email address adheres to the standard email format and can optionally check against specific domain criteria.\n\t\n\tArguments:\n\t---------\n\t- email : String = None (required) The email address to validate against the standard email format.\n\t- domain : String = None (optional) An optional parameter for domain-specific validation. Default is an empty string, which means no custom domain validation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"emailFormatValidator\", \"description\": \"This function validates if a given email address adheres to the standard email format and can optionally check against specific domain criteria.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"email\": {\"type\": \"String\", \"description\": \"The email address to validate against the standard email format.\"}, \"domain\": {\"type\": \"String\", \"description\": \"An optional parameter for domain-specific validation. Default is an empty string, which means no custom domain validation.\"}}, \"required\": [\"email\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few things? First, I need to update my user information in the CustomerInfo database. My user ID is 12345, and I want to change my name to John Doe and my email to johndoe@example.com. Second, I'm curious about the last match played by the soccer club Manchester United, and I'd like to know the match statistics as well. Third, I'm doing a history project and need to know who the U.S. president was in the year 1980, and I'd like the full name with middle initial if applicable. Lastly, I'm playing a card game and need to find the Ace of Spades in a standard 52 card deck. Can you assist with these?\"", "query_for_retrieval": "\"Can you help me with a few things? First, I need to update my user information in the CustomerInfo database. My user ID is 12345, and I want to change my name to John Doe and my email to johndoe@example.com. Second, I'm curious about the last match played by the soccer club Manchester United, and I'd like to know the match statistics as well. Third, I'm doing a history project and need to know who the U.S. president was in the year 1980, and I'd like the full name with middle initial if applicable. Lastly, I'm playing a card game and need to find the Ace of Spades in a standard 52 card deck. Can you assist with these?\"", "answer": "find_card_in_deck", "answer_params": "", "api_description": "def find_card_in_deck:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a particular card in a deck based on rank and suit.\n\t\n\tArguments:\n\t---------\n\t- rank : string = None (required) Rank of the card (e.g. Ace, Two, King).\n\t- suit : string = None (required) Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n\t- deck : array = None (optional) Deck of cards. If not provided, the deck will be default to an empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_card_in_deck\", \"description\": \"Locate a particular card in a deck based on rank and suit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\", \"description\": \"Rank of the card (e.g. Ace, Two, King).\"}, \"suit\": {\"type\": \"string\", \"description\": \"Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\"}, \"deck\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\"}, \"suit\": {\"type\": \"string\"}}}, \"description\": \"Deck of cards. If not provided, the deck will be default to an empty array\"}}, \"required\": [\"rank\", \"suit\"]}}"}
{"scope": "simple", "query": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats.", "query_for_retrieval": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats.", "answer": "music_generator.generate_scale_progression", "answer_params": "", "api_description": "def music_generator.generate_scale_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a music scale progression in a specific key with a given tempo and duration.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key in which to generate the scale progression.\n\t- tempo : integer = None (required) The tempo of the scale progression in BPM.\n\t- duration : integer = None (required) The duration of each note in beats.\n\t- scale_type : string = major (optional) The type of scale to generate. Defaults to 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_generator.generate_scale_progression\", \"description\": \"Generate a music scale progression in a specific key with a given tempo and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key in which to generate the scale progression.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"The tempo of the scale progression in BPM.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of each note in beats.\"}, \"scale_type\": {\"type\": \"string\", \"default\": \"major\", \"description\": \"The type of scale to generate. Defaults to 'major'.\"}}, \"required\": [\"key\", \"tempo\", \"duration\"]}}"}
{"scope": "sql", "query": "In our chemistry database, we have a table named \"Elements\" which contains information about all the known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. Recently, there has been a revision in the atomic weight of the element \"Hydrogen\". The new atomic weight is 1.008. Can you please update this information in our database? Use the condition where 'ElementName' is \"Hydrogen\".", "query_for_retrieval": "In our chemistry database, we have a table named \"Elements\" which contains information about all the known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. Recently, there has been a revision in the atomic weight of the element \"Hydrogen\". The new atomic weight is 1.008. Can you please update this information in our database? Use the condition where 'ElementName' is \"Hydrogen\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "What is the total area of three circles, where the first circle has a radius of 5 meters, the second circle has a radius of 10 meters, and the third circle has a radius of 15 meters, all measured in meters?", "query_for_retrieval": "What is the total area of three circles, where the first circle has a radius of 5 meters, the second circle has a radius of 10 meters, and the third circle has a radius of 15 meters, all measured in meters?", "answer": "geometry.area_circle", "answer_params": "", "api_description": "def geometry.area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- units : string = meters (optional) The units in which the radius is measured (defaults to meters).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_circle\", \"description\": \"Calculate the area of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"The units in which the radius is measured (defaults to meters).\", \"default\": \"meters\"}}, \"required\": [\"radius\"]}}"}
{"scope": "relevance", "query": "I need a security guard, where can I find the most popular one in New York?", "query_for_retrieval": "I need a security guard, where can I find the most popular one in New York?", "answer": "search_lawyer", "answer_params": "", "api_description": "def search_lawyer:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a list of lawyers in a specific area, sorted by the number of cases they have won.\n\t\n\tArguments:\n\t---------\n\t- area : string = None (required) The city and state where you need a lawyer.\n\t- specialization : string = None (required) The field in which the lawyer should be specialized.\n\t- min_experience : integer = 0 (optional) The minimum years of experience required for the lawyer.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"search_lawyer\", \"description\": \"Find a list of lawyers in a specific area, sorted by the number of cases they have won.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"area\": {\"type\": \"string\", \"description\": \"The city and state where you need a lawyer.\"}, \"specialization\": {\"type\": \"string\", \"description\": \"The field in which the lawyer should be specialized.\"}, \"min_experience\": {\"type\": \"integer\", \"description\": \"The minimum years of experience required for the lawyer.\", \"default\": 0}}, \"required\": [\"area\", \"specialization\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm planning a small get-together this weekend and I'd like to order some food for my guests. I'd like to start with 10 burgers at $5 each. Following that, I'd want to add 7 ice creams, each costing $2. Then, I'd like to include 3 pizzas for $8 apiece in the order. Lastly, to top it off, I'd like 12 donuts at $1 each. Could you calculate the total cost for these items using your ordering system?", "query_for_retrieval": "I'm planning a small get-together this weekend and I'd like to order some food for my guests. I'd like to start with 10 burgers at $5 each. Following that, I'd want to add 7 ice creams, each costing $2. Then, I'd like to include 3 pizzas for $8 apiece in the order. Lastly, to top it off, I'd like 12 donuts at $1 each. Could you calculate the total cost for these items using your ordering system?", "answer": "order_food", "answer_params": "", "api_description": "def order_food:\n\t\"\"\"\n\tDescription:\n\t\n\tOrders food for a customer.Return the total price.\n\t\n\tArguments:\n\t---------\n\t- item : array = None (required) No description available.\n\t- quantity : array = None (required) No description available.\n\t- price : array = None (required) No description available.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"order_food\", \"description\": \"Orders food for a customer.Return the total price.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak'].\"}}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\", \"description\": \"the number of the product purchased.\"}}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"float\", \"description\": \"the number of the product purchased.\"}}}, \"required\": [\"item\", \"quantity\", \"price\"]}}"}
{"scope": "relevance", "query": "What is the gold price today in USA?", "query_for_retrieval": "What is the gold price today in USA?", "answer": "calculate_Bond_Price", "answer_params": "", "api_description": "def calculate_Bond_Price:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the bond price given the face value, coupon rate, required rate of return, and maturity period.\n\t\n\tArguments:\n\t---------\n\t- Face_Value : float = None (required) The face value of the bond.\n\t- Coupon_rate : float = None (required) The coupon rate of the bond.\n\t- Required_return : float = None (required) The required rate of return on the bond.\n\t- maturity_years : integer = None (required) The number of years to maturity of the bond.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_Bond_Price\", \"description\": \"Calculate the bond price given the face value, coupon rate, required rate of return, and maturity period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"Face_Value\": {\"type\": \"float\", \"description\": \"The face value of the bond.\"}, \"Coupon_rate\": {\"type\": \"float\", \"description\": \"The coupon rate of the bond.\"}, \"Required_return\": {\"type\": \"float\", \"description\": \"The required rate of return on the bond.\"}, \"maturity_years\": {\"type\": \"integer\", \"description\": \"The number of years to maturity of the bond.\"}}, \"required\": [\"Face_Value\", \"Coupon_rate\", \"Required_return\", \"maturity_years\"]}}"}
{"scope": "rest", "query": "Can you provide the latitude and longitude coordinates for latitude 37.4224764 and longitude -122.0842499 using the Geocoding API, and I have the API key 'YOUR-GEOCODE-API-KEY'? Also, can I get the response in the 'geojson' format?", "query_for_retrieval": "Can you provide the latitude and longitude coordinates for latitude 37.4224764 and longitude -122.0842499 using the Geocoding API, and I have the API key 'YOUR-GEOCODE-API-KEY'? Also, can I get the response in the 'geojson' format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/reverse (required) Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the location to reverse geocode.\n\t  - lon : float = None (required) Longitude of the location to reverse geocode.\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\", \"default\": \"https://geocode.maps.co/reverse\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the location to reverse geocode.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the location to reverse geocode.\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on some calculus problems and could use some help with derivatives. Specifically, I need the derivative estimates for a set of functions at particular points. Could you help me with the following?\n\n1. Find the derivative of f(x) = 3x^2 + 2x - 1 at x = 4.\n2. Calculate the derivative when x is -2, g(x) = 5x^3 - 3x^2 + 2x + 1.\n3. Determine the derivative of h(x) = 2x^4 - 3x^3 + 2x^2 - x + 1 at x = 0.\n4. Get the derivative of i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1 at x = 1.\n\nCan you run those calculations for me?", "query_for_retrieval": "I'm working on some calculus problems and could use some help with derivatives. Specifically, I need the derivative estimates for a set of functions at particular points. Could you help me with the following?\n\n1. Find the derivative of f(x) = 3x^2 + 2x - 1 at x = 4.\n2. Calculate the derivative when x is -2, g(x) = 5x^3 - 3x^2 + 2x + 1.\n3. Determine the derivative of h(x) = 2x^4 - 3x^3 + 2x^2 - x + 1 at x = 0.\n4. Get the derivative of i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1 at x = 1.\n\nCan you run those calculations for me?", "answer": "estimate_derivative", "answer_params": "", "api_description": "def estimate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the derivative of a function at a given point.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- x : integer = None (required) The point to calculate the derivative at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_derivative\", \"description\": \"Estimate the derivative of a function at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"x\": {\"type\": \"integer\", \"description\": \"The point to calculate the derivative at.\"}}, \"required\": [\"function\", \"x\"]}}"}
{"scope": "simple", "query": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "query_for_retrieval": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "answer": "calculate_speed", "answer_params": "", "api_description": "def calculate_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the speed of an object based on the distance travelled and the time taken.\n\t\n\tArguments:\n\t---------\n\t- distance : integer = None (required) The distance the object travelled in meters.\n\t- time : integer = None (required) The time it took for the object to travel in seconds.\n\t- to_unit : string = None (optional) The unit in which the speed should be calculated, default is m/s.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_speed\", \"description\": \"Calculate the speed of an object based on the distance travelled and the time taken.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"integer\", \"description\": \"The distance the object travelled in meters.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time it took for the object to travel in seconds.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit in which the speed should be calculated, default is m/s.\"}}, \"required\": [\"distance\", \"time\"]}}"}
{"scope": "parallel_function", "query": "What is the prime factorization of the number 4567 and the number 7890, if we want the results to be returned in a 'dictionary' format?", "query_for_retrieval": "What is the prime factorization of the number 4567 and the number 7890, if we want the results to be returned in a 'dictionary' format?", "answer": "prime_factorize", "answer_params": "", "api_description": "def prime_factorize:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the prime factorization of a given integer.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which to calculate the prime factorization.\n\t- return_type : string = None (optional) Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prime_factorize\", \"description\": \"Calculate the prime factorization of a given integer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which to calculate the prime factorization.\"}, \"return_type\": {\"type\": \"string\", \"description\": \"Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\"}}, \"required\": [\"number\"]}}"}
{"scope": "relevance", "query": "What is the time difference between Los Angeles and Berlin?", "query_for_retrieval": "What is the time difference between Los Angeles and Berlin?", "answer": "get_co-ordinate", "answer_params": "", "api_description": "def get_co-ordinate:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch geographical coordinates of a particular location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city name you want coordinates for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_co-ordinate\", \"description\": \"Fetch geographical coordinates of a particular location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city name you want coordinates for.\"}}, \"required\": [\"location\"]}}"}
{"scope": "java", "query": "How can I update the contents of a file in the non-blocking file system with an input stream `fileStream`, ensuring that the operation is forced and history is not kept, while monitoring the progress with `progressMonitor`?", "query_for_retrieval": "How can I update the contents of a file in the non-blocking file system with an input stream `fileStream`, ensuring that the operation is forced and history is not kept, while monitoring the progress with `progressMonitor`?", "answer": "EFSNIOFile.setContents", "answer_params": "", "api_description": "def EFSNIOFile.setContents:\n\t\"\"\"\n\tDescription:\n\t\n\tSets the contents of a file with data from the provided InputStream, with options to force the operation and to keep or discard the file history.\n\t\n\tArguments:\n\t---------\n\t- source : any = None (required) The InputStream from which file contents are read.\n\t- force : boolean = None (required) If true, the operation is forced, otherwise it's a normal set content operation.\n\t- keepHistory : boolean = None (required) If true, keeps the file history, otherwise discards it.\n\t- monitor : any = None (required) The IProgressMonitor to report progress of the operation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"EFSNIOFile.setContents\", \"description\": \"Sets the contents of a file with data from the provided InputStream, with options to force the operation and to keep or discard the file history.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"source\": {\"type\": \"any\", \"description\": \"The InputStream from which file contents are read.\"}, \"force\": {\"type\": \"boolean\", \"description\": \"If true, the operation is forced, otherwise it's a normal set content operation.\"}, \"keepHistory\": {\"type\": \"boolean\", \"description\": \"If true, keeps the file history, otherwise discards it.\"}, \"monitor\": {\"type\": \"any\", \"description\": \"The IProgressMonitor to report progress of the operation.\"}}, \"required\": [\"source\", \"force\", \"keepHistory\", \"monitor\"]}}"}
{"scope": "executable_simple", "query": "A couple I'm working with has found their dream home valued at $500,000, and they're weighing their financing options. To help them out, I need to calculate their monthly mortgage payments. They're considering a 25-year loan with a 4.5% interest rate. Could you calculate their monthly payment for a loan amount of $500,000 at 4.5% interest over a 25-year period?", "query_for_retrieval": "A couple I'm working with has found their dream home valued at $500,000, and they're weighing their financing options. To help them out, I need to calculate their monthly mortgage payments. They're considering a 25-year loan with a 4.5% interest rate. Could you calculate their monthly payment for a loan amount of $500,000 at 4.5% interest over a 25-year period?", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "parallel_function", "query": "What are the boiling and melting points of water and iron at sea levels of 0 meters and 1000 meters respectively?", "query_for_retrieval": "What are the boiling and melting points of water and iron at sea levels of 0 meters and 1000 meters respectively?", "answer": "get_boiling_melting_points", "answer_params": "", "api_description": "def get_boiling_melting_points:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the boiling point and melting point of a substance based on its name and the sea level.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The name of the substance.\n\t- sea_level : integer = None (required) The sea level in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_boiling_melting_points\", \"description\": \"Retrieve the boiling point and melting point of a substance based on its name and the sea level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The name of the substance.\"}, \"sea_level\": {\"type\": \"integer\", \"description\": \"The sea level in meters.\"}}, \"required\": [\"substance\", \"sea_level\"]}}"}
{"scope": "simple", "query": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "query_for_retrieval": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "answer": "estimate_mutual_fund_return", "answer_params": "", "api_description": "def estimate_mutual_fund_return:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.\n\t\n\tArguments:\n\t---------\n\t- yearly_yield : float = None (required) The yearly yield of the mutual fund as a percentage.\n\t- investment_amount : integer = None (required) The initial investment amount in the mutual fund.\n\t- years : integer = None (required) The time period for which the investment is made in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_mutual_fund_return\", \"description\": \"Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"yearly_yield\": {\"type\": \"float\", \"description\": \"The yearly yield of the mutual fund as a percentage.\"}, \"investment_amount\": {\"type\": \"integer\", \"description\": \"The initial investment amount in the mutual fund.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time period for which the investment is made in years.\"}}, \"required\": [\"yearly_yield\", \"investment_amount\", \"years\"]}}"}
{"scope": "relevance", "query": "What is the best player in soccer today?", "query_for_retrieval": "What is the best player in soccer today?", "answer": "stock_market_prediction", "answer_params": "", "api_description": "def stock_market_prediction:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the future value of stocks based on historical data.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The name of the stock.\n\t- days : integer = None (required) Number of future days for the forecast.\n\t- data_interval : string = None (optional) The time interval of historical data, e.g. daily, weekly. Default is daily\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_market_prediction\", \"description\": \"Predict the future value of stocks based on historical data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The name of the stock.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of future days for the forecast.\"}, \"data_interval\": {\"type\": \"string\", \"description\": \"The time interval of historical data, e.g. daily, weekly. Default is daily\"}}, \"required\": [\"stock_name\", \"days\"]}}"}
{"scope": "simple", "query": "What's the average review rating and the age range for the board game 'Catan'?", "query_for_retrieval": "What's the average review rating and the age range for the board game 'Catan'?", "answer": "board_game_info", "answer_params": "", "api_description": "def board_game_info:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the information about a board game from a database. \n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) Name of the board game.\n\t- info_required : array = None (required) Array of information requested for the game.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game_info\", \"description\": \"Get the information about a board game from a database. \", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"Name of the board game.\"}, \"info_required\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"average_review_rating\", \"age_range\", \"number_of_players\", \"playing_time\", \"genre\"]}, \"description\": \"Array of information requested for the game.\"}}, \"required\": [\"game_name\", \"info_required\"]}}"}
{"scope": "relevance", "query": "What was the casualty number of the Battle of Waterloo?", "query_for_retrieval": "What was the casualty number of the Battle of Waterloo?", "answer": "historical_event.get_date", "answer_params": "", "api_description": "def historical_event.get_date:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the date of a specific historical event.\n\t\n\tArguments:\n\t---------\n\t- event_name : string = None (required) The name of the historical event.\n\t- format : string = None (optional) The desired date format. Default is YYYY-MM-DD.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historical_event.get_date\", \"description\": \"Retrieve the date of a specific historical event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event_name\": {\"type\": \"string\", \"description\": \"The name of the historical event.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired date format. Default is YYYY-MM-DD.\"}}, \"required\": [\"event_name\"]}}"}
{"scope": "relevance", "query": "Who created the sculpture 'The Thinker'?", "query_for_retrieval": "Who created the sculpture 'The Thinker'?", "answer": "architecture_capacity.evaluate_capacity", "answer_params": "", "api_description": "def architecture_capacity.evaluate_capacity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the maximum seating capacity of a certain architectural structure.\n\t\n\tArguments:\n\t---------\n\t- structure_name : string = None (required) The name of the architectural structure.\n\t- area_per_person : integer = 6 (required) The average space a person takes up in sq ft. This value differs based on the use-case, eg: standing concert, football match etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"architecture_capacity.evaluate_capacity\", \"description\": \"Calculate the maximum seating capacity of a certain architectural structure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"structure_name\": {\"type\": \"string\", \"description\": \"The name of the architectural structure.\"}, \"area_per_person\": {\"type\": \"integer\", \"description\": \"The average space a person takes up in sq ft. This value differs based on the use-case, eg: standing concert, football match etc.\", \"default\": 6}}, \"required\": [\"structure_name\", \"area_per_person\"]}}"}
{"scope": "sql", "query": "In a database table named \"Students\", can you remove the records of students who have a GPA less than 2.0? The columns involved in this operation are \"StudentID\", \"Name\", and \"GPA\".", "query_for_retrieval": "In a database table named \"Students\", can you remove the records of students who have a GPA less than 2.0? The columns involved in this operation are \"StudentID\", \"Name\", and \"GPA\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "What is the population of turtles in the Galapagos Islands in 2015, and can you also provide the species information? After that, can you also tell me the same information for the same location but for the year 2020?", "query_for_retrieval": "What is the population of turtles in the Galapagos Islands in 2015, and can you also provide the species information? After that, can you also tell me the same information for the same location but for the year 2020?", "answer": "ecology.get_turtle_population", "answer_params": "", "api_description": "def ecology.get_turtle_population:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the population and species of turtles in a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the location.\n\t- year : integer = None (optional) The year of the data requested. (optional). default is 2000\n\t- species : boolean = None (optional) Whether to include species information. Default is false. (optional)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ecology.get_turtle_population\", \"description\": \"Get the population and species of turtles in a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the location.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year of the data requested. (optional). default is 2000\"}, \"species\": {\"type\": \"boolean\", \"description\": \"Whether to include species information. Default is false. (optional)\"}}, \"required\": [\"location\"]}}"}
{"scope": "rest", "query": "Use my API key 'YOUR-GEOCODE-API-KEY', can you convert the address 'Soda Hall, Berkeley, CA' to latitude and longitude coordinates using our Geocoding API, and also make sure to return the results in GeoJSON format?", "query_for_retrieval": "Use my API key 'YOUR-GEOCODE-API-KEY', can you convert the address 'Soda Hall, Berkeley, CA' to latitude and longitude coordinates using our Geocoding API, and also make sure to return the results in GeoJSON format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/search (required) Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - q : string = None (required) user query string to a particular address\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\", \"default\": \"https://geocode.maps.co/search\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"q\": {\"type\": \"string\", \"description\": \"user query string to a particular address\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"q\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I was reviewing the basics of geometry and ended up with a challenge to calculate the area of a polygon. The polygon is defined by these vertices: [[1,2],[3,4],[1,4],[3,7]]. Can you help me determine the area of this polygon using the shoelace formula?", "query_for_retrieval": "I was reviewing the basics of geometry and ended up with a challenge to calculate the area of a polygon. The polygon is defined by these vertices: [[1,2],[3,4],[1,4],[3,7]]. Can you help me determine the area of this polygon using the shoelace formula?", "answer": "polygon_area", "answer_params": "", "api_description": "def polygon_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a polygon given its vertices using the shoelace formula.\n\t\n\tArguments:\n\t---------\n\t- vertices : array = None (required) The vertices of the polygon, where each vertex is a 2 element list [x, y].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"polygon_area\", \"description\": \"Calculate the area of a polygon given its vertices using the shoelace formula.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vertices\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A single vertex represented by a 2 element list [x, y].\"}, \"description\": \"The vertices of the polygon, where each vertex is a 2 element list [x, y].\"}}, \"required\": [\"vertices\"]}}"}
{"scope": "simple", "query": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "query_for_retrieval": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "answer": "run_linear_regression", "answer_params": "", "api_description": "def run_linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tBuild a linear regression model using given predictor variables and a target variable.\n\t\n\tArguments:\n\t---------\n\t- predictors : array = None (required) Array containing the names of predictor variables.\n\t- target : string = None (required) The name of target variable.\n\t- standardize : boolean = None (optional) Option to apply standardization on the predictors. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"run_linear_regression\", \"description\": \"Build a linear regression model using given predictor variables and a target variable.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"predictors\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Array containing the names of predictor variables.\"}, \"target\": {\"type\": \"string\", \"description\": \"The name of target variable.\"}, \"standardize\": {\"type\": \"boolean\", \"description\": \"Option to apply standardization on the predictors. Defaults to False.\"}}, \"required\": [\"predictors\", \"target\"]}}"}
{"scope": "relevance", "query": "Find the shortest path in a game from 'Point A' to 'Point B'", "query_for_retrieval": "Find the shortest path in a game from 'Point A' to 'Point B'", "answer": "calculate_taxi_fare", "answer_params": "", "api_description": "def calculate_taxi_fare:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the taxi fare for a specific distance and time\n\t\n\tArguments:\n\t---------\n\t- distance : float = None (required) The distance travelled in miles.\n\t- wait_time : float = None (required) The waiting time in minutes.\n\t- surge : boolean = None (optional) Whether there's a surge pricing. Default is false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_taxi_fare\", \"description\": \"Calculate the taxi fare for a specific distance and time\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"float\", \"description\": \"The distance travelled in miles.\"}, \"wait_time\": {\"type\": \"float\", \"description\": \"The waiting time in minutes.\"}, \"surge\": {\"type\": \"boolean\", \"description\": \"Whether there's a surge pricing. Default is false\"}}, \"required\": [\"distance\", \"wait_time\"]}}"}
{"scope": "simple", "query": "Calculate the derivative of the function 3x^2 + 2x - 1.", "query_for_retrieval": "Calculate the derivative of the function 3x^2 + 2x - 1.", "answer": "calculate_derivative", "answer_params": "", "api_description": "def calculate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the derivative of a polynomial function.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The polynomial function.\n\t- x_value : float = None (optional) The x-value at which the derivative is calculated. Optional, default to 0.00.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_derivative\", \"description\": \"Calculate the derivative of a polynomial function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The polynomial function.\"}, \"x_value\": {\"type\": \"float\", \"description\": \"The x-value at which the derivative is calculated. Optional, default to 0.00.\"}}, \"required\": [\"function\"]}}"}
{"scope": "simple", "query": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "query_for_retrieval": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "answer": "maps.get_distance_duration", "answer_params": "", "api_description": "def maps.get_distance_duration:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the travel distance and estimated travel time from one location to another via car\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) Starting point of the journey\n\t- end_location : string = None (required) Ending point of the journey\n\t- traffic : boolean = None (optional) If true, considers current traffic. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maps.get_distance_duration\", \"description\": \"Retrieve the travel distance and estimated travel time from one location to another via car\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"Starting point of the journey\"}, \"end_location\": {\"type\": \"string\", \"description\": \"Ending point of the journey\"}, \"traffic\": {\"type\": \"boolean\", \"description\": \"If true, considers current traffic. Default is false.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are working on a programming project and you encounter the following tasks. First, you need to solve a quadratic equation where the coefficient of x^2 is 5, the coefficient of x is 6, and the constant term is 1. After that, you need to convert an RGB color code to a hexadecimal color code. The RGB values are Red: 255, Green: 160, and Blue: 0. Finally, you have a string 'Hello, World!' that needs to be reversed. Can you perform these tasks using the appropriate functions?\"", "query_for_retrieval": "\"Imagine you are working on a programming project and you encounter the following tasks. First, you need to solve a quadratic equation where the coefficient of x^2 is 5, the coefficient of x is 6, and the constant term is 1. After that, you need to convert an RGB color code to a hexadecimal color code. The RGB values are Red: 255, Green: 160, and Blue: 0. Finally, you have a string 'Hello, World!' that needs to be reversed. Can you perform these tasks using the appropriate functions?\"", "answer": "perform.string_reverse", "answer_params": "", "api_description": "def perform.string_reverse:\n\t\"\"\"\n\tDescription:\n\t\n\tReverses a given string.\n\t\n\tArguments:\n\t---------\n\t- input_string : string = None (required) The string to be reversed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"perform.string_reverse\", \"description\": \"Reverses a given string.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"input_string\": {\"type\": \"string\", \"description\": \"The string to be reversed.\"}}, \"required\": [\"input_string\"]}}"}
{"scope": "multiple_function", "query": "Calculate the greatest common divisor between 128 and 256.", "query_for_retrieval": "Calculate the greatest common divisor between 128 and 256.", "answer": "calculate_lcm", "answer_params": "", "api_description": "def calculate_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the least common multiple (lcm) between two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) First number to calculate lcm for.\n\t- num2 : integer = None (required) Second number to calculate lcm for.\n\t- method : string = None (optional) The specific method to use in the calculation. Supported values: 'standard', 'reduced'. Default 'standard'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_lcm\", \"description\": \"Calculate the least common multiple (lcm) between two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"First number to calculate lcm for.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"Second number to calculate lcm for.\"}, \"method\": {\"type\": \"string\", \"description\": \"The specific method to use in the calculation. Supported values: 'standard', 'reduced'. Default 'standard'\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm doing a comparative analysis of different products on Amazon, and customer ratings are a crucial factor in my research. I have a list of products identified by their unique ASIN codes, and I need to get the ratings for each one. Could you start by finding the rating for the product with ASIN 'B08PPDJWC8'? After that, I also need the ratings for ASINs 'B07ZPKBL9V', 'B075H2B962', and 'B08BHXG144'.", "query_for_retrieval": "I'm doing a comparative analysis of different products on Amazon, and customer ratings are a crucial factor in my research. I have a list of products identified by their unique ASIN codes, and I need to get the ratings for each one. Could you start by finding the rating for the product with ASIN 'B08PPDJWC8'? After that, I also need the ratings for ASINs 'B07ZPKBL9V', 'B075H2B962', and 'B08BHXG144'.", "answer": "get_rating_by_amazon_ASIN", "answer_params": "", "api_description": "def get_rating_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the rating of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_rating_by_amazon_ASIN\", \"description\": \"Finds the rating of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project where I need to calculate the distances between several pairs of points on a 2D plane. I need the distances between (3, 4) and (7, 9), then between (1, 2) and (5, 6), followed by (0, 0) and (8, 15), and finally between (10, 12) and (20, 25). Can you help me with these calculations?", "query_for_retrieval": "I'm working on a project where I need to calculate the distances between several pairs of points on a 2D plane. I need the distances between (3, 4) and (7, 9), then between (1, 2) and (5, 6), followed by (0, 0) and (8, 15), and finally between (10, 12) and (20, 25). Can you help me with these calculations?", "answer": "get_distance", "answer_params": "", "api_description": "def get_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the distance between two 2D points.\n\t\n\tArguments:\n\t---------\n\t- pointA : tuple = None (required) The first point.\n\t- pointB : tuple = None (required) The second point.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_distance\", \"description\": \"Calculates the distance between two 2D points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"tuple\", \"description\": \"The first point.\", \"items\": {\"type\": \"float\"}}, \"pointB\": {\"type\": \"tuple\", \"description\": \"The second point.\", \"items\": {\"type\": \"float\"}}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "multiple_function", "query": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "query_for_retrieval": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "answer": "get_collectables_in_season", "answer_params": "", "api_description": "def get_collectables_in_season:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a list of collectable items in a specific game during a specified season.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) Name of the game.\n\t- season : string = None (required) The season for which to retrieve the collectable items.\n\t- item_type : string = None (optional) The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_collectables_in_season\", \"description\": \"Retrieve a list of collectable items in a specific game during a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"Name of the game.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which to retrieve the collectable items.\"}, \"item_type\": {\"type\": \"string\", \"description\": \"The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\"}}, \"required\": [\"game_name\", \"season\"]}}"}
{"scope": "simple", "query": "Find a vegan soup recipe that takes under 30 minutes to make.", "query_for_retrieval": "Find a vegan soup recipe that takes under 30 minutes to make.", "answer": "get_vegan_recipe", "answer_params": "", "api_description": "def get_vegan_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a vegan soup recipe based on the provided cooking time.\n\t\n\tArguments:\n\t---------\n\t- dish_type : string = None (required) The type of dish, e.g. soup, dessert, etc.\n\t- cooking_time : integer = None (required) The maximum cooking time for the recipe in minutes.\n\t- ingredient_preference : array = None (optional) Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_vegan_recipe\", \"description\": \"Retrieve a vegan soup recipe based on the provided cooking time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dish_type\": {\"type\": \"string\", \"description\": \"The type of dish, e.g. soup, dessert, etc.\", \"enum\": [\"soup\", \"main dish\", \"dessert\", \"salad\"]}, \"cooking_time\": {\"type\": \"integer\", \"description\": \"The maximum cooking time for the recipe in minutes.\"}, \"ingredient_preference\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided.\"}}, \"required\": [\"dish_type\", \"cooking_time\"]}}"}
{"scope": "multiple_function", "query": "Find the greatest common divisor (GCD) of 12 and 18", "query_for_retrieval": "Find the greatest common divisor (GCD) of 12 and 18", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the greatest common divisor of two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) First number.\n\t- num2 : integer = None (required) Second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Calculate the greatest common divisor of two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"First number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"Second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "executable_simple", "query": "I'm planning a business trip to New York, and I've decided to extend my stay to enjoy the city a bit more. I'd like to book a deluxe room for the duration of my trip. The dates I'm looking at are from August 11, 2024, to August 15, 2024. I've got a budget set aside for accommodation, and I'm willing to spend up to $1000 for a comfortable stay. My customer ID is 123. Could you go ahead and book that room for me?", "query_for_retrieval": "I'm planning a business trip to New York, and I've decided to extend my stay to enjoy the city a bit more. I'd like to book a deluxe room for the duration of my trip. The dates I'm looking at are from August 11, 2024, to August 15, 2024. I've got a budget set aside for accommodation, and I'm willing to spend up to $1000 for a comfortable stay. My customer ID is 123. Could you go ahead and book that room for me?", "answer": "book_room", "answer_params": "", "api_description": "def book_room:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a room for a customer.\n\t\n\tArguments:\n\t---------\n\t- room_type : string = None (required) The room type to book.\n\t- price : float = None (optional) The max price of the room. Default 0.0\n\t- check_in_date : string = None (required) The check-in date in format of MM-DD-YYYY. \n\t- check_out_date : string = None (required) The check-out date in format of MM-DD-YYYY.\n\t- customer_id : string = None (required) The customer ID.\n\t- discount_code : string = None (optional) The discount code (if any).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_room\", \"description\": \"Books a room for a customer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"room_type\": {\"type\": \"string\", \"description\": \"The room type to book.\"}, \"price\": {\"type\": \"float\", \"description\": \"The max price of the room. Default 0.0\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in format of MM-DD-YYYY. \"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in format of MM-DD-YYYY.\"}, \"customer_id\": {\"type\": \"string\", \"description\": \"The customer ID.\"}, \"discount_code\": {\"type\": \"string\", \"description\": \"The discount code (if any).\", \"default\": null}}, \"required\": [\"room_type\", \"check_in_date\", \"check_out_date\", \"customer_id\"]}}"}
{"scope": "multiple_function", "query": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "query_for_retrieval": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "answer": "get_case_info", "answer_params": "", "api_description": "def get_case_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve case details using a specific case docket number and court location.\n\t\n\tArguments:\n\t---------\n\t- docket : string = None (required) Docket number for the specific court case.\n\t- court : string = None (required) Court in which the case was heard.\n\t- info_type : string = None (required) Specify the information type needed for the case. i.e., victim, accused, verdict etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_case_info\", \"description\": \"Retrieve case details using a specific case docket number and court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"docket\": {\"type\": \"string\", \"description\": \"Docket number for the specific court case.\"}, \"court\": {\"type\": \"string\", \"description\": \"Court in which the case was heard.\"}, \"info_type\": {\"type\": \"string\", \"description\": \"Specify the information type needed for the case. i.e., victim, accused, verdict etc.\"}}, \"required\": [\"docket\", \"court\", \"info_type\"]}}"}
{"scope": "relevance", "query": "Who was the winner of Wimbledon Men's Singles in 2021?", "query_for_retrieval": "Who was the winner of Wimbledon Men's Singles in 2021?", "answer": "find_top_sports_celebrity", "answer_params": "", "api_description": "def find_top_sports_celebrity:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches information about a top sports celebrity including basic information, match records, endorsements and net worth.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) Name of the celebrity.\n\t- year : integer = None (required) The year in which the celebrity rose to fame or importance.\n\t- sports_type : string = All (optional) The type of sport the celebrity is known for, e.g. Tennis, Basketball, Football.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_top_sports_celebrity\", \"description\": \"Fetches information about a top sports celebrity including basic information, match records, endorsements and net worth.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"Name of the celebrity.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the celebrity rose to fame or importance.\"}, \"sports_type\": {\"type\": \"string\", \"description\": \"The type of sport the celebrity is known for, e.g. Tennis, Basketball, Football.\", \"default\": \"All\"}}, \"required\": [\"name\", \"year\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project that involves analyzing geometric patterns, and I need to figure out the maximum number of points that lie on a single straight line within various sets of coordinates. Could you help me with this?\n\nFirstly, for the set of points [[1,1],[2,2],[3,4],[5,5]], how many points are on the same line? \n\nNext, for [[1,2],[3,2],[5,2],[4,2]], what's the maximum number on one line?\n\nThen, for the set [[0,0],[1,1],[0,1],[1,0]], can you determine the maximum number of collinear points?\n\nLastly, for the coordinates [[1,1],[3,2],[5,3],[7,4]], I need the same calculation. \n\nPlease provide the maximum number of collinear points for each set of coordinates.", "query_for_retrieval": "I'm working on a project that involves analyzing geometric patterns, and I need to figure out the maximum number of points that lie on a single straight line within various sets of coordinates. Could you help me with this?\n\nFirstly, for the set of points [[1,1],[2,2],[3,4],[5,5]], how many points are on the same line? \n\nNext, for [[1,2],[3,2],[5,2],[4,2]], what's the maximum number on one line?\n\nThen, for the set [[0,0],[1,1],[0,1],[1,0]], can you determine the maximum number of collinear points?\n\nLastly, for the coordinates [[1,1],[3,2],[5,3],[7,4]], I need the same calculation. \n\nPlease provide the maximum number of collinear points for each set of coordinates.", "answer": "maxPoints", "answer_params": "", "api_description": "def maxPoints:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the maximum number of points on a line.\n\t\n\tArguments:\n\t---------\n\t- points : array = None (required) The list of points. Points are 2 element lists.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maxPoints\", \"description\": \"Finds the maximum number of points on a line.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"points\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A point represented by a 2 element list [x, y].\"}, \"description\": \"The list of points. Points are 2 element lists.\"}}, \"required\": [\"points\"]}}"}
{"scope": "javascript", "query": "How can I asynchronously retrieve a map of remote Git references and their corresponding commit hashes for a repository URL 'https://github.com/yarnpkg/berry' from a starting directory '/home/user/projects'?", "query_for_retrieval": "How can I asynchronously retrieve a map of remote Git references and their corresponding commit hashes for a repository URL 'https://github.com/yarnpkg/berry' from a starting directory '/home/user/projects'?", "answer": "Sde", "answer_params": "", "api_description": "def Sde:\n\t\"\"\"\n\tDescription:\n\t\n\tThis asynchronous function retrieves a map of remote Git references and their corresponding commit hashes for a given repository URL, using a specified starting directory.\n\t\n\tArguments:\n\t---------\n\t- t : String = None (required) The repository URL.\n\t- e : dict = None (required) The execution context for the Git command.\n\t  - startingCwd : String = None (required) The starting directory from which the Git command is executed.\n\t  - configuration : dict = None (optional) Additional configuration for the Git command.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Sde\", \"description\": \"This asynchronous function retrieves a map of remote Git references and their corresponding commit hashes for a given repository URL, using a specified starting directory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"t\": {\"type\": \"String\", \"description\": \"The repository URL.\"}, \"e\": {\"type\": \"dict\", \"properties\": {\"startingCwd\": {\"type\": \"String\", \"description\": \"The starting directory from which the Git command is executed.\"}, \"configuration\": {\"type\": \"dict\", \"description\": \"Additional configuration for the Git command.\"}}, \"description\": \"The execution context for the Git command.\", \"required\": [\"startingCwd\"]}}, \"required\": [\"t\", \"e\"]}}"}
{"scope": "multiple_function", "query": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "query_for_retrieval": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "answer": "modify_painting", "answer_params": "", "api_description": "def modify_painting:\n\t\"\"\"\n\tDescription:\n\t\n\tModify an existing painting's attributes such as size, medium, and color.\n\t\n\tArguments:\n\t---------\n\t- size : string = None (required) The size of the painting in inches, width by height.\n\t- medium : string = None (required) The medium of the painting, such as oil, acrylic, etc.\n\t- dominant_color : string = None (optional) The dominant color of the painting. Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"modify_painting\", \"description\": \"Modify an existing painting's attributes such as size, medium, and color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"size\": {\"type\": \"string\", \"description\": \"The size of the painting in inches, width by height.\"}, \"medium\": {\"type\": \"string\", \"description\": \"The medium of the painting, such as oil, acrylic, etc.\"}, \"dominant_color\": {\"type\": \"string\", \"description\": \"The dominant color of the painting. Default ''\"}}, \"required\": [\"size\", \"medium\"]}}"}
{"scope": "simple", "query": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "query_for_retrieval": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "answer": "soccer.get_last_match", "answer_params": "", "api_description": "def soccer.get_last_match:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of the last match played by a specified soccer club.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the soccer club.\n\t- include_stats : boolean = None (optional) If true, include match statistics like possession, shots on target etc. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"soccer.get_last_match\", \"description\": \"Retrieve the details of the last match played by a specified soccer club.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the soccer club.\"}, \"include_stats\": {\"type\": \"boolean\", \"description\": \"If true, include match statistics like possession, shots on target etc. Default is false.\"}}, \"required\": [\"team_name\"]}}"}
{"scope": "rest", "query": "I have an address '1600 Amphitheatre Parkway, Mountain View, CA' that I need to convert into latitude and longitude coordinates for my geospatial analysis project. Can you show me how to make a request to the Geocoding API using my API key 'YOUR-GEOCODE-API-KEY' and ensure the response is in JSON format?", "query_for_retrieval": "I have an address '1600 Amphitheatre Parkway, Mountain View, CA' that I need to convert into latitude and longitude coordinates for my geospatial analysis project. Can you show me how to make a request to the Geocoding API using my API key 'YOUR-GEOCODE-API-KEY' and ensure the response is in JSON format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/search (required) Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - q : string = None (required) user query string to a particular address\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\", \"default\": \"https://geocode.maps.co/search\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"q\": {\"type\": \"string\", \"description\": \"user query string to a particular address\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"q\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "I would like to book a single room for two nights at The Plaza hotel.", "query_for_retrieval": "I would like to book a single room for two nights at The Plaza hotel.", "answer": "book_room", "answer_params": "", "api_description": "def book_room:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a room in a specified hotel.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- room_type : string = None (required) The type of room to be booked.\n\t- num_nights : integer = None (required) The number of nights to book the room for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_room\", \"description\": \"Book a room in a specified hotel.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of room to be booked.\"}, \"num_nights\": {\"type\": \"integer\", \"description\": \"The number of nights to book the room for.\"}}, \"required\": [\"hotel_name\", \"room_type\", \"num_nights\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I need to calculate the derivative of the function \\( f(x) = x^2 \\) at the point where \\( x = 5 \\). Additionally, I'm looking to find out the area of a circle that has a radius of 10. Switching gears a bit, I'm also interested in the stock history of Apple, focusing on the monthly interval, and for this query, the diff and splits information isn't necessary. Finally, I'd like to get the latest numbers on the active COVID cases in the United States. Can you assist me with these calculations and data retrievals?", "query_for_retrieval": "I need to calculate the derivative of the function \\( f(x) = x^2 \\) at the point where \\( x = 5 \\). Additionally, I'm looking to find out the area of a circle that has a radius of 10. Switching gears a bit, I'm also interested in the stock history of Apple, focusing on the monthly interval, and for this query, the diff and splits information isn't necessary. Finally, I'd like to get the latest numbers on the active COVID cases in the United States. Can you assist me with these calculations and data retrievals?", "answer": "estimate_derivative", "answer_params": "", "api_description": "def estimate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the derivative of a function at a given point.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- x : integer = None (required) The point to calculate the derivative at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_derivative\", \"description\": \"Estimate the derivative of a function at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"x\": {\"type\": \"integer\", \"description\": \"The point to calculate the derivative at.\"}}, \"required\": [\"function\", \"x\"]}}"}
{"scope": "relevance", "query": "What is the time now in New York City?", "query_for_retrieval": "What is the time now in New York City?", "answer": "calculate_sunrise_and_sunset", "answer_params": "", "api_description": "def calculate_sunrise_and_sunset:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the sunrise and sunset time of a location for the given date.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location in city, state format.\n\t- date : string = None (required) The date for which the sunrise and sunset needs to be calculated in yyyy-mm-dd format.\n\t- output_format : string = 12-hour (optional) The desired output time format.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_sunrise_and_sunset\", \"description\": \"Calculate the sunrise and sunset time of a location for the given date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location in city, state format.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date for which the sunrise and sunset needs to be calculated in yyyy-mm-dd format.\"}, \"output_format\": {\"type\": \"string\", \"description\": \"The desired output time format.\", \"enum\": [\"24-hour\", \"12-hour\"], \"default\": \"12-hour\"}}, \"required\": [\"location\", \"date\"]}}"}
{"scope": "simple", "query": "Find the shortest driving distance between New York City and Washington D.C.", "query_for_retrieval": "Find the shortest driving distance between New York City and Washington D.C.", "answer": "get_shortest_driving_distance", "answer_params": "", "api_description": "def get_shortest_driving_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the shortest driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- origin : string = None (required) Starting point of the journey. You should format it as city name like Boston.\n\t- destination : string = None (required) End point of the journey. You should format it as city name like Boston.\n\t- unit : string = None (optional) Preferred unit of distance (optional, default is 'km').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_shortest_driving_distance\", \"description\": \"Calculate the shortest driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"string\", \"description\": \"Starting point of the journey. You should format it as city name like Boston.\"}, \"destination\": {\"type\": \"string\", \"description\": \"End point of the journey. You should format it as city name like Boston.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Preferred unit of distance (optional, default is 'km').\"}}, \"required\": [\"origin\", \"destination\"]}}"}
{"scope": "javascript", "query": "How can I obtain a collection of records from the 'employeeRecords' database where the 'department' field is 'Sales' using a custom query function in javascript using function variable `getSales`?", "query_for_retrieval": "How can I obtain a collection of records from the 'employeeRecords' database where the 'department' field is 'Sales' using a custom query function in javascript using function variable `getSales`?", "answer": "fetchSalesDepartmentRecords", "answer_params": "", "api_description": "def fetchSalesDepartmentRecords:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function asynchronously fetches a collection of records from a specified database where the 'department' field matches a given criterion, using a custom query function.\n\t\n\tArguments:\n\t---------\n\t- databaseName : String = None (required) The name of the database from which to retrieve the records.\n\t- queryFunction : any = None (required) A function used to query the database. It should take a record as input and return a boolean indicating whether the record should be included in the results based on the 'department' field.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetchSalesDepartmentRecords\", \"description\": \"This function asynchronously fetches a collection of records from a specified database where the 'department' field matches a given criterion, using a custom query function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"databaseName\": {\"type\": \"String\", \"description\": \"The name of the database from which to retrieve the records.\"}, \"queryFunction\": {\"type\": \"any\", \"description\": \"A function used to query the database. It should take a record as input and return a boolean indicating whether the record should be included in the results based on the 'department' field.\"}}, \"required\": [\"databaseName\", \"queryFunction\"]}}"}
{"scope": "sql", "query": "Can you provide the names of the students from the \"Physics_Class\" table who scored above 90 in the final exam? The column names involved in this operation are \"student_name\" and \"final_score\".", "query_for_retrieval": "Can you provide the names of the students from the \"Physics_Class\" table who scored above 90 in the final exam? The column names involved in this operation are \"student_name\" and \"final_score\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "I want to find out the age rating for the movie 'The Social Network', and I'm also interested in getting the full plot. What's the correct request using the OMDB API? I have the API key 'YOUR-OMDB-API-KEY' ready to use.", "query_for_retrieval": "I want to find out the age rating for the movie 'The Social Network', and I'm also interested in getting the full plot. What's the correct request using the OMDB API? I have the API key 'YOUR-OMDB-API-KEY' ready to use.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "sql", "query": "In a database table called \"Survey_Responses\", can you modify the \"Response\" column to 'Yes' for all participants whose \"Age\" is above 50 and \"Gender\" is 'Male'?", "query_for_retrieval": "In a database table called \"Survey_Responses\", can you modify the \"Response\" column to 'Yes' for all participants whose \"Age\" is above 50 and \"Gender\" is 'Male'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"A car is traveling on a straight road. At the start, it has an initial speed of 5 m/s. Suddenly, the driver sees a traffic light turning red in the distance and starts to accelerate at a rate of 2 m/s^2. The driver keeps this acceleration for 10 seconds. Can you calculate the displacement of the car during this time? Also, what is the final speed of the car after this 10 seconds? Please round off your answers to 2 decimal places.\"", "query_for_retrieval": "\"A car is traveling on a straight road. At the start, it has an initial speed of 5 m/s. Suddenly, the driver sees a traffic light turning red in the distance and starts to accelerate at a rate of 2 m/s^2. The driver keeps this acceleration for 10 seconds. Can you calculate the displacement of the car during this time? Also, what is the final speed of the car after this 10 seconds? Please round off your answers to 2 decimal places.\"", "answer": "kinematics.calculate_final_speed", "answer_params": "", "api_description": "def kinematics.calculate_final_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.\n\t\n\tArguments:\n\t---------\n\t- initial_speed : float = None (required) The initial speed of the moving object in m/s.\n\t- acceleration : float = None (required) The rate of change of speed, m/s^2.\n\t- time : float = None (required) The time interval during which the acceleration is applied, in seconds.\n\t- rounding : integer = 2 (optional) The number of decimals to round off the result (optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.calculate_final_speed\", \"description\": \"Calculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"float\", \"description\": \"The initial speed of the moving object in m/s.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The rate of change of speed, m/s^2.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time interval during which the acceleration is applied, in seconds.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"The number of decimals to round off the result (optional).\", \"default\": 2}}, \"required\": [\"initial_speed\", \"acceleration\", \"time\"]}}"}
{"scope": "rest", "query": "My friends were going to the concert watching 'Barbie' released in 2023, said it's very good. But, I decided to watch 'Oppenheimer', I forgot when it released. I want to see the reviews of 'Oppenheimer' and I prefer the response in JSON format with full plot details. I think Oppenheimer is better than Barbie. What would be the proper request call using requests.get with API key 'YOUR-OMDB-API-KEY'to achieve this?", "query_for_retrieval": "My friends were going to the concert watching 'Barbie' released in 2023, said it's very good. But, I decided to watch 'Oppenheimer', I forgot when it released. I want to see the reviews of 'Oppenheimer' and I prefer the response in JSON format with full plot details. I think Oppenheimer is better than Barbie. What would be the proper request call using requests.get with API key 'YOUR-OMDB-API-KEY'to achieve this?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "What is the probability of getting a face card in a standard deck?", "query_for_retrieval": "What is the probability of getting a face card in a standard deck?", "answer": "probability.coin_toss_heads", "answer_params": "", "api_description": "def probability.coin_toss_heads:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of getting a specific number of heads after tossing a coin multiple times.\n\t\n\tArguments:\n\t---------\n\t- coin_tosses : integer = None (required) The number of times the coin is tossed.\n\t- heads_needed : integer = None (required) The specific number of heads you want to get after coin tosses.\n\t- coin_type : string = fair (optional) The type of the coin. Default is 'fair'. Possible values are 'fair', 'double_heads', 'double_tails'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability.coin_toss_heads\", \"description\": \"Calculate the probability of getting a specific number of heads after tossing a coin multiple times.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coin_tosses\": {\"type\": \"integer\", \"description\": \"The number of times the coin is tossed.\"}, \"heads_needed\": {\"type\": \"integer\", \"description\": \"The specific number of heads you want to get after coin tosses.\"}, \"coin_type\": {\"type\": \"string\", \"default\": \"fair\", \"description\": \"The type of the coin. Default is 'fair'. Possible values are 'fair', 'double_heads', 'double_tails'.\", \"enum\": [\"fair\", \"double_heads\", \"double_tails\"]}}, \"required\": [\"coin_tosses\", \"heads_needed\"]}}"}
{"scope": "relevance", "query": "Who establish laws and orders in Ancient Greek.", "query_for_retrieval": "Who establish laws and orders in Ancient Greek.", "answer": "music.search_composer", "answer_params": "", "api_description": "def music.search_composer:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch the composer of a specific musical piece\n\t\n\tArguments:\n\t---------\n\t- title : string = None (required) The title of the musical piece.\n\t- epoch : string = None (required) The historical period or style of the musical piece.\n\t- performer : string = None (optional) The performer of the musical piece, Default: 'vivian'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music.search_composer\", \"description\": \"Search the composer of a specific musical piece\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"The title of the musical piece.\"}, \"epoch\": {\"type\": \"string\", \"description\": \"The historical period or style of the musical piece.\"}, \"performer\": {\"type\": \"string\", \"description\": \"The performer of the musical piece, Default: 'vivian'\"}}, \"required\": [\"title\", \"epoch\"]}}"}
{"scope": "javascript", "query": "How do I change the content of a div with the ID 'contentBox' and new content 'Hello World' by invoking the 'update' action?", "query_for_retrieval": "How do I change the content of a div with the ID 'contentBox' and new content 'Hello World' by invoking the 'update' action?", "answer": "contentUpdater", "answer_params": "", "api_description": "def contentUpdater:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function updates the inner content of a specified div element when the 'update' action is called.\n\t\n\tArguments:\n\t---------\n\t- elementID : String = None (required) The ID of the div element whose content is to be updated.\n\t- newContent : String = None (required) The new content that will replace the current content of the div element.\n\t- action : String = None (required) The action to be performed. In this case, it should be 'update' to change the content.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"contentUpdater\", \"description\": \"This function updates the inner content of a specified div element when the 'update' action is called.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"elementID\": {\"type\": \"String\", \"description\": \"The ID of the div element whose content is to be updated.\"}, \"newContent\": {\"type\": \"String\", \"description\": \"The new content that will replace the current content of the div element.\"}, \"action\": {\"type\": \"String\", \"description\": \"The action to be performed. In this case, it should be 'update' to change the content.\"}}, \"required\": [\"elementID\", \"newContent\", \"action\"]}}"}
{"scope": "simple", "query": "Who was the King of France in 1510?", "query_for_retrieval": "Who was the King of France in 1510?", "answer": "historic_leader_search", "answer_params": "", "api_description": "def historic_leader_search:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a historical leader given a location and date.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The country or region in question.\n\t- date : integer = None (required) The year being queried.\n\t- title : string = None (optional) The official title of the position. Default is 'King'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historic_leader_search\", \"description\": \"Retrieve information about a historical leader given a location and date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The country or region in question.\"}, \"date\": {\"type\": \"integer\", \"description\": \"The year being queried.\"}, \"title\": {\"type\": \"string\", \"description\": \"The official title of the position. Default is 'King'.\"}}, \"required\": [\"location\", \"date\"]}}"}
{"scope": "parallel_function", "query": "Can you help me find public libraries in New York, NY that have a Reading Room and Fiction section, and then in Los Angeles, CA that offer Wi-Fi and have a Children Section, and finally in Chicago, IL that have a Cafe and a Reading Room?", "query_for_retrieval": "Can you help me find public libraries in New York, NY that have a Reading Room and Fiction section, and then in Los Angeles, CA that offer Wi-Fi and have a Children Section, and finally in Chicago, IL that have a Cafe and a Reading Room?", "answer": "public_library.find_nearby", "answer_params": "", "api_description": "def public_library.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Boston, MA\n\t- facilities : array = None (required) Facilities and sections in public library.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"public_library.find_nearby\", \"description\": \"Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Boston, MA\"}, \"facilities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Wi-Fi\", \"Reading Room\", \"Fiction\", \"Children Section\", \"Cafe\"]}, \"description\": \"Facilities and sections in public library.\"}}, \"required\": [\"location\", \"facilities\"]}}"}
{"scope": "parallel_function", "query": "Using watercolor, what combination of colors should I mix to get the color magenta and what quantity for each color? Also, I want to know how to get color navy by using acrylic paint and their respective quantities.", "query_for_retrieval": "Using watercolor, what combination of colors should I mix to get the color magenta and what quantity for each color? Also, I want to know how to get color navy by using acrylic paint and their respective quantities.", "answer": "paint_color_mixture", "answer_params": "", "api_description": "def paint_color_mixture:\n\t\"\"\"\n\tDescription:\n\t\n\tGives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.\n\t\n\tArguments:\n\t---------\n\t- paint_type : string = None (required) The type of paint (Watercolor, Oil, Acrylic).\n\t- color : string = None (required) The color to be produced from the mixture.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"paint_color_mixture\", \"description\": \"Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"paint_type\": {\"type\": \"string\", \"description\": \"The type of paint (Watercolor, Oil, Acrylic).\"}, \"color\": {\"type\": \"string\", \"description\": \"The color to be produced from the mixture.\"}}, \"required\": [\"paint_type\", \"color\"]}}"}
{"scope": "javascript", "query": "How can I process and transform all decorators of a TypeScript declaration node named 'myNode', within a container named 'myContainer'?", "query_for_retrieval": "How can I process and transform all decorators of a TypeScript declaration node named 'myNode', within a container named 'myContainer'?", "answer": "transformAllDecoratorsOfDeclaration", "answer_params": "", "api_description": "def transformAllDecoratorsOfDeclaration:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function processes and transforms all decorators associated with a TypeScript declaration node. It combines transformed decorators and parameters decorators into a single array.\n\t\n\tArguments:\n\t---------\n\t- node : any = None (required) The TypeScript declaration node to process.\n\t- container : any = None (required) The container that holds the node.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"transformAllDecoratorsOfDeclaration\", \"description\": \"This function processes and transforms all decorators associated with a TypeScript declaration node. It combines transformed decorators and parameters decorators into a single array.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"node\": {\"type\": \"any\", \"description\": \"The TypeScript declaration node to process.\"}, \"container\": {\"type\": \"any\", \"description\": \"The container that holds the node.\"}}, \"required\": [\"node\", \"container\"]}}"}
{"scope": "java", "query": "How can I validate that the user-provided password 'P@ssw0rd!' matches the encrypted password 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' stored in the system for authentication?", "query_for_retrieval": "How can I validate that the user-provided password 'P@ssw0rd!' matches the encrypted password 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' stored in the system for authentication?", "answer": "JndiLoginModule.verifyPassword", "answer_params": "", "api_description": "def JndiLoginModule.verifyPassword:\n\t\"\"\"\n\tDescription:\n\t\n\tCompares an encrypted password with a plaintext password to verify if they match after encryption.\n\t\n\tArguments:\n\t---------\n\t- encryptedPassword : String = None (required) The encrypted password to be compared against.\n\t- password : String = None (required) The plaintext password provided by the user.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"JndiLoginModule.verifyPassword\", \"description\": \"Compares an encrypted password with a plaintext password to verify if they match after encryption.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"encryptedPassword\": {\"type\": \"String\", \"description\": \"The encrypted password to be compared against.\"}, \"password\": {\"type\": \"String\", \"description\": \"The plaintext password provided by the user.\"}}, \"required\": [\"encryptedPassword\", \"password\"]}}"}
{"scope": "relevance", "query": "how long will it take to paint the Eiffel Tower?", "query_for_retrieval": "how long will it take to paint the Eiffel Tower?", "answer": "get_case_result", "answer_params": "", "api_description": "def get_case_result:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the result of a specific law case based on the year and name of the case.\n\t\n\tArguments:\n\t---------\n\t- case_year : integer = None (required) The year when the law case was established.\n\t- case_name : string = None (required) The name of the law case.\n\t- jurisdiction : string = None (optional) The jurisdiction under which the case was adjudged. Default is 'US Supreme Court'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_case_result\", \"description\": \"Retrieve the result of a specific law case based on the year and name of the case.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_year\": {\"type\": \"integer\", \"description\": \"The year when the law case was established.\"}, \"case_name\": {\"type\": \"string\", \"description\": \"The name of the law case.\"}, \"jurisdiction\": {\"type\": \"string\", \"description\": \"The jurisdiction under which the case was adjudged. Default is 'US Supreme Court'.\"}}, \"required\": [\"case_year\", \"case_name\"]}}"}
{"scope": "simple", "query": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "query_for_retrieval": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "answer": "forest_growth_forecast", "answer_params": "", "api_description": "def forest_growth_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredicts the forest growth over the next N years based on current trends.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where you want to predict forest growth.\n\t- years : integer = None (required) The number of years for the forecast.\n\t- include_human_impact : boolean = None (optional) Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"forest_growth_forecast\", \"description\": \"Predicts the forest growth over the next N years based on current trends.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where you want to predict forest growth.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for the forecast.\"}, \"include_human_impact\": {\"type\": \"boolean\", \"description\": \"Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\"}}, \"required\": [\"location\", \"years\"]}}"}
{"scope": "java", "query": "How can I generate the XContent with xContentBuilderInstance for a RootObjectMapper that includes default settings for dynamic date formats, dynamic templates, date detection, and numeric detection, while skipping runtime fields?", "query_for_retrieval": "How can I generate the XContent with xContentBuilderInstance for a RootObjectMapper that includes default settings for dynamic date formats, dynamic templates, date detection, and numeric detection, while skipping runtime fields?", "answer": "RootObjectMapper.doXContent", "answer_params": "", "api_description": "def RootObjectMapper.doXContent:\n\t\"\"\"\n\tDescription:\n\t\n\tSerializes the RootObjectMapper settings to XContent, with options to include default values and to skip runtime fields.\n\t\n\tArguments:\n\t---------\n\t- builder : any = None (required) The XContentBuilder to which the content should be written.\n\t- params : ArrayList = None (required) Parameters controlling the serialization, including whether to include defaults and whether to skip runtime fields.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RootObjectMapper.doXContent\", \"description\": \"Serializes the RootObjectMapper settings to XContent, with options to include default values and to skip runtime fields.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"builder\": {\"type\": \"any\", \"description\": \"The XContentBuilder to which the content should be written.\"}, \"params\": {\"type\": \"ArrayList\", \"description\": \"Parameters controlling the serialization, including whether to include defaults and whether to skip runtime fields.\", \"items\": {\"type\": \"any\"}}}, \"required\": [\"builder\", \"params\"]}}"}
{"scope": "simple", "query": "Find an acoustic instrument within my budget of $1000.", "query_for_retrieval": "Find an acoustic instrument within my budget of $1000.", "answer": "find_instrument", "answer_params": "", "api_description": "def find_instrument:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a musical instrument within specified budget and of specific type.\n\t\n\tArguments:\n\t---------\n\t- budget : integer = None (required) Your budget for the instrument.\n\t- type : string = None (required) Type of the instrument\n\t- make : string = None (optional) Maker of the instrument. Default to not use if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_instrument\", \"description\": \"Search for a musical instrument within specified budget and of specific type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"budget\": {\"type\": \"integer\", \"description\": \"Your budget for the instrument.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of the instrument\"}, \"make\": {\"type\": \"string\", \"description\": \"Maker of the instrument. Default to not use if not specified.\"}}, \"required\": [\"budget\", \"type\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with the following tasks? First, I have two groups of data points: group1 consists of [12, 15, 18, 22, 25] and group2 consists of [20, 23, 26, 29, 32]. I want to run a two-sample t-test on these groups with the assumption that they have equal variance. Second, I'm currently in Boston, MA and I'm craving for some Sushi. Could you find the closest sushi restaurant that has a Patio and Wi-Fi? Lastly, I've recently taken up painting as a hobby and I'm curious about the common personality traits associated with it. Could you retrieve the top 5 personality traits of people who enjoy painting?\"", "query_for_retrieval": "\"Could you please help me with the following tasks? First, I have two groups of data points: group1 consists of [12, 15, 18, 22, 25] and group2 consists of [20, 23, 26, 29, 32]. I want to run a two-sample t-test on these groups with the assumption that they have equal variance. Second, I'm currently in Boston, MA and I'm craving for some Sushi. Could you find the closest sushi restaurant that has a Patio and Wi-Fi? Lastly, I've recently taken up painting as a hobby and I'm curious about the common personality traits associated with it. Could you retrieve the top 5 personality traits of people who enjoy painting?\"", "answer": "run_two_sample_ttest", "answer_params": "", "api_description": "def run_two_sample_ttest:\n\t\"\"\"\n\tDescription:\n\t\n\tRuns a two sample t-test for two given data groups.\n\t\n\tArguments:\n\t---------\n\t- group1 : array = None (required) First group of data points.\n\t- group2 : array = None (required) Second group of data points.\n\t- equal_variance : boolean = True (optional) Assumption about whether the two samples have equal variance.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"run_two_sample_ttest\", \"description\": \"Runs a two sample t-test for two given data groups.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"group1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"First group of data points.\"}, \"group2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Second group of data points.\"}, \"equal_variance\": {\"type\": \"boolean\", \"description\": \"Assumption about whether the two samples have equal variance.\", \"default\": true}}, \"required\": [\"group1\", \"group2\"]}}"}
{"scope": "java", "query": "How can I instantiate a dummy server with SSL encryption for testing purposes, using the IP address `192.168.1.10` and port `8080`, and a pre-configured SSL context named `testSSLContext`?", "query_for_retrieval": "How can I instantiate a dummy server with SSL encryption for testing purposes, using the IP address `192.168.1.10` and port `8080`, and a pre-configured SSL context named `testSSLContext`?", "answer": "CookieHeaderTest.create", "answer_params": "", "api_description": "def CookieHeaderTest.create:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a DummyServer instance with SSL support using the provided socket address and SSL context.\n\t\n\tArguments:\n\t---------\n\t- sa : any = None (required) The socket address to bind the server to. This is an InetSocketAddress object that has a constructor taking first field as ip address, such as 192.168.1.1, as a string and taking second field is socket address such as 8000\n\t- sslContext : any = None (required) The SSL context to be used for creating the server socket. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CookieHeaderTest.create\", \"description\": \"Creates a DummyServer instance with SSL support using the provided socket address and SSL context.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sa\": {\"type\": \"any\", \"description\": \"The socket address to bind the server to. This is an InetSocketAddress object that has a constructor taking first field as ip address, such as 192.168.1.1, as a string and taking second field is socket address such as 8000\"}, \"sslContext\": {\"type\": \"any\", \"description\": \"The SSL context to be used for creating the server socket. \"}}, \"required\": [\"sa\", \"sslContext\"]}}"}
{"scope": "executable_simple", "query": "We've been tracking potential security breaches and '192.168.1.1' keeps popping up in our logs. I need to pinpoint the geographical origin of this IP. Could you determine the latitude and longitude for this address?", "query_for_retrieval": "We've been tracking potential security breaches and '192.168.1.1' keeps popping up in our logs. I need to pinpoint the geographical origin of this IP. Could you determine the latitude and longitude for this address?", "answer": "get_coordinate_by_ip_address", "answer_params": "", "api_description": "def get_coordinate_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the latitude and longitude of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinate_by_ip_address\", \"description\": \"Finds the latitude and longitude of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "multiple_function", "query": "Find the closest sushi restaurant with a patio in Boston.", "query_for_retrieval": "Find the closest sushi restaurant with a patio in Boston.", "answer": "board_game.chess.get_top_players", "answer_params": "", "api_description": "def board_game.chess.get_top_players:\n\t\"\"\"\n\tDescription:\n\t\n\tFind top chess players in a location based on rating.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city you want to find the players from.\n\t- minimum_rating : integer = None (required) Minimum rating to filter the players.\n\t- number_of_players : integer = 10 (optional) Number of players you want to retrieve, default value is 10\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game.chess.get_top_players\", \"description\": \"Find top chess players in a location based on rating.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city you want to find the players from.\"}, \"minimum_rating\": {\"type\": \"integer\", \"description\": \"Minimum rating to filter the players.\"}, \"number_of_players\": {\"type\": \"integer\", \"default\": 10, \"description\": \"Number of players you want to retrieve, default value is 10\"}}, \"required\": [\"location\", \"minimum_rating\"]}}"}
{"scope": "multiple_function", "query": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "query_for_retrieval": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "answer": "get_lawsuit_details", "answer_params": "", "api_description": "def get_lawsuit_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the detailed information about a lawsuit based on its case number and the court location.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The case number of the lawsuit.\n\t- court_location : string = None (required) The location of the court where the case is filed.\n\t- additional_details : array = None (optional) Optional. Array containing additional details to be fetched. Default is empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_lawsuit_details\", \"description\": \"Retrieve the detailed information about a lawsuit based on its case number and the court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The case number of the lawsuit.\"}, \"court_location\": {\"type\": \"string\", \"description\": \"The location of the court where the case is filed.\"}, \"additional_details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"attorneys\", \"plaintiffs\", \"defendants\", \"charges\", \"court_updates\"]}, \"description\": \"Optional. Array containing additional details to be fetched. Default is empty array.\"}}, \"required\": [\"case_number\", \"court_location\"]}}"}
{"scope": "relevance", "query": "Can I report noise complaint to my local council in city of Atlanta?", "query_for_retrieval": "Can I report noise complaint to my local council in city of Atlanta?", "answer": "get_law_categories", "answer_params": "", "api_description": "def get_law_categories:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the list of categories within a specified type of law.\n\t\n\tArguments:\n\t---------\n\t- law_type : string = None (required) The type of law to be searched.\n\t- country : string = None (required) The country where the law is applicable.\n\t- specific_category : string = None (optional) Specific category within the type of law (Optional). Default: 'business'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_law_categories\", \"description\": \"Retrieves the list of categories within a specified type of law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"law_type\": {\"type\": \"string\", \"description\": \"The type of law to be searched.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the law is applicable.\"}, \"specific_category\": {\"type\": \"string\", \"description\": \"Specific category within the type of law (Optional). Default: 'business'\"}}, \"required\": [\"law_type\", \"country\"]}}"}
{"scope": "rest", "query": "What is the correct way to use the requests.get function to find the timezone for a specific GPS location at latitude 40.7128 and longitude -74.0060, incorporating my RapidAPI credentials with key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "What is the correct way to use the requests.get function to find the timezone for a specific GPS location at latitude 40.7128 and longitude -74.0060, incorporating my RapidAPI credentials with key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "javascript", "query": "How can I determine the appropriate directory to monitor for changes, starting from a failed lookup location directory full path '/projects/myApp/node_modules/react', to ensure efficient file watching in a TypeScript project?", "query_for_retrieval": "How can I determine the appropriate directory to monitor for changes, starting from a failed lookup location directory full path '/projects/myApp/node_modules/react', to ensure efficient file watching in a TypeScript project?", "answer": "getDirectoryToWatchFromFailedLookupLocationDirectory", "answer_params": "", "api_description": "def getDirectoryToWatchFromFailedLookupLocationDirectory:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function determines the most suitable directory to watch for file changes based on a given directory path, especially handling paths within 'node_modules' by selecting the top-most 'node_modules' directory or an ancestor directory.\n\t\n\tArguments:\n\t---------\n\t- dir : String = None (required) The initial directory to consider for watching.\n\t- dirPath : String = None (required) The full path of the directory to consider for watching.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"getDirectoryToWatchFromFailedLookupLocationDirectory\", \"description\": \"This function determines the most suitable directory to watch for file changes based on a given directory path, especially handling paths within 'node_modules' by selecting the top-most 'node_modules' directory or an ancestor directory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dir\": {\"type\": \"String\", \"description\": \"The initial directory to consider for watching.\"}, \"dirPath\": {\"type\": \"String\", \"description\": \"The full path of the directory to consider for watching.\"}}, \"required\": [\"dir\", \"dirPath\"]}}"}
{"scope": "multiple_function", "query": "Which paint color is currently most popular for living rooms?", "query_for_retrieval": "Which paint color is currently most popular for living rooms?", "answer": "weather_forecast", "answer_params": "", "api_description": "def weather_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a weather forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the weather for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_forecast\", \"description\": \"Retrieve a weather forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the weather for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "simple", "query": "How much time will it take to cook a roast chicken of 1.5 kg?", "query_for_retrieval": "How much time will it take to cook a roast chicken of 1.5 kg?", "answer": "calculate_cooking_time", "answer_params": "", "api_description": "def calculate_cooking_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the cooking time for a roast chicken.\n\t\n\tArguments:\n\t---------\n\t- weight_kg : float = None (required) The weight of the chicken in kilograms.\n\t- cooking_method : string = None (optional) The method of cooking, defaults to 'roast'.\n\t- temp_celsius : integer = None (optional) The cooking temperature in degrees celsius, defaults to 180.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cooking_time\", \"description\": \"Calculate the cooking time for a roast chicken.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight_kg\": {\"type\": \"float\", \"description\": \"The weight of the chicken in kilograms.\"}, \"cooking_method\": {\"type\": \"string\", \"description\": \"The method of cooking, defaults to 'roast'.\"}, \"temp_celsius\": {\"type\": \"integer\", \"description\": \"The cooking temperature in degrees celsius, defaults to 180.\"}}, \"required\": [\"weight_kg\"]}}"}
{"scope": "sql", "query": "Can you create a new table in the database named 'EconomicData' with columns 'Year', 'GDP', 'InflationRate', 'UnemploymentRate', and 'InterestRate'?", "query_for_retrieval": "Can you create a new table in the database named 'EconomicData' with columns 'Year', 'GDP', 'InflationRate', 'UnemploymentRate', and 'InterestRate'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "javascript", "query": "How can I extract all data entries with the attribute 'data-active' set to true from a list element stored in a variable named 'listElement'?", "query_for_retrieval": "How can I extract all data entries with the attribute 'data-active' set to true from a list element stored in a variable named 'listElement'?", "answer": "getActiveDataEntries", "answer_params": "", "api_description": "def getActiveDataEntries:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function extracts data entries from a list element based on a specified attribute and its value. It checks for the presence of the 'data-active' attribute and whether it is set to true.\n\t\n\tArguments:\n\t---------\n\t- listElement : any = None (required) The list element from which to extract active data entries.\n\t- attribute : String = data-active (optional) The data attribute used to filter entries. Optional parameter with a default value of 'data-active'.\n\t- value : Boolean = True (optional) The value of the attribute to match. Optional parameter with a default value of true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"getActiveDataEntries\", \"description\": \"This function extracts data entries from a list element based on a specified attribute and its value. It checks for the presence of the 'data-active' attribute and whether it is set to true.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"listElement\": {\"type\": \"any\", \"description\": \"The list element from which to extract active data entries.\"}, \"attribute\": {\"type\": \"String\", \"description\": \"The data attribute used to filter entries. Optional parameter with a default value of 'data-active'.\", \"default\": \"data-active\"}, \"value\": {\"type\": \"Boolean\", \"description\": \"The value of the attribute to match. Optional parameter with a default value of true.\", \"default\": true}}, \"required\": [\"listElement\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "We're tracking a rocket's trajectory, which aligns with a quadratic equation. The coefficients are a=2, b=-3, c=5. I need two things: first, to calculate the roots of this equation, and second, to determine the rate of change of the rocket's position when x equals 4. Can you process these for me?", "query_for_retrieval": "We're tracking a rocket's trajectory, which aligns with a quadratic equation. The coefficients are a=2, b=-3, c=5. I need two things: first, to calculate the roots of this equation, and second, to determine the rate of change of the rocket's position when x equals 4. Can you process these for me?", "answer": "get_distance", "answer_params": "", "api_description": "def get_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the distance between two 2D points.\n\t\n\tArguments:\n\t---------\n\t- pointA : tuple = None (required) The first point.\n\t- pointB : tuple = None (required) The second point.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_distance\", \"description\": \"Calculates the distance between two 2D points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"tuple\", \"description\": \"The first point.\", \"items\": {\"type\": \"float\"}}, \"pointB\": {\"type\": \"tuple\", \"description\": \"The second point.\", \"items\": {\"type\": \"float\"}}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me identify the bird species I saw during my recent trip? The first one was a small bird with a vibrant blue color that I spotted in a forest. The second one was a large bird with a mix of black colors that I saw near a lake. The third one was a medium-sized bird with a brown color that I noticed in a desert. Lastly, the fourth one was a large bird with a green color that I observed in a tropical rainforest. What could these birds be?\"", "query_for_retrieval": "\"Can you help me identify the bird species I saw during my recent trip? The first one was a small bird with a vibrant blue color that I spotted in a forest. The second one was a large bird with a mix of black colors that I saw near a lake. The third one was a medium-sized bird with a brown color that I noticed in a desert. Lastly, the fourth one was a large bird with a green color that I observed in a tropical rainforest. What could these birds be?\"", "answer": "identify_bird", "answer_params": "", "api_description": "def identify_bird:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify a bird species based on certain characteristics.\n\t\n\tArguments:\n\t---------\n\t- color : string = None (required) Color of the bird.\n\t- habitat : string = None (required) Habitat of the bird.\n\t- size : string = small (optional) Size of the bird.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"identify_bird\", \"description\": \"Identify a bird species based on certain characteristics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color\": {\"type\": \"string\", \"description\": \"Color of the bird.\"}, \"habitat\": {\"type\": \"string\", \"description\": \"Habitat of the bird.\"}, \"size\": {\"type\": \"string\", \"enum\": [\"small\", \"medium\", \"large\"], \"description\": \"Size of the bird.\", \"default\": \"small\"}}, \"required\": [\"color\", \"habitat\"]}}"}
{"scope": "multiple_function", "query": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "query_for_retrieval": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "answer": "math.power", "answer_params": "", "api_description": "def math.power:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the power of one number raised to another.\n\t\n\tArguments:\n\t---------\n\t- base : float = None (required) The base number.\n\t- exponent : float = None (required) The exponent.\n\t- mod : integer = None (optional) The modulus. Default is None. Calculates pow(base, exponent) % mod when provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.power\", \"description\": \"Calculate the power of one number raised to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"float\", \"description\": \"The base number.\"}, \"exponent\": {\"type\": \"float\", \"description\": \"The exponent.\"}, \"mod\": {\"type\": \"integer\", \"description\": \"The modulus. Default is None. Calculates pow(base, exponent) % mod when provided.\"}}, \"required\": [\"base\", \"exponent\"]}}"}
{"scope": "relevance", "query": "Can you list some horror movies I can watch?", "query_for_retrieval": "Can you list some horror movies I can watch?", "answer": "get_stock_prices", "answer_params": "", "api_description": "def get_stock_prices:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the historical prices of a specified stock\n\t\n\tArguments:\n\t---------\n\t- ticker_symbol : string = None (required) The symbol representing the stock.\n\t- start_date : string = None (required) The starting date from which to retrieve stock prices. Format: 'yyyy-mm-dd'.\n\t- end_date : string = None (required) The ending date until which to retrieve stock prices. Format: 'yyyy-mm-dd'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_prices\", \"description\": \"Fetches the historical prices of a specified stock\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ticker_symbol\": {\"type\": \"string\", \"description\": \"The symbol representing the stock.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The starting date from which to retrieve stock prices. Format: 'yyyy-mm-dd'.\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The ending date until which to retrieve stock prices. Format: 'yyyy-mm-dd'.\"}}, \"required\": [\"ticker_symbol\", \"start_date\", \"end_date\"]}}"}
{"scope": "relevance", "query": "Solve the quadratic equation with coefficients a = 1, b = 2, and c = 3.", "query_for_retrieval": "Solve the quadratic equation with coefficients a = 1, b = 2, and c = 3.", "answer": "math.sum", "answer_params": "", "api_description": "def math.sum:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the sum of all numbers in a list.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers to be added up.\n\t- decimal_places : integer = None (optional) The number of decimal places to round to. Default is 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.sum\", \"description\": \"Compute the sum of all numbers in a list.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers to be added up.\"}, \"decimal_places\": {\"type\": \"integer\", \"description\": \"The number of decimal places to round to. Default is 2.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "parallel_function", "query": "Get the latest closing prices and volumes for Apple Inc., Google LLC., and Microsoft Corporation in the New York Stock Exchange", "query_for_retrieval": "Get the latest closing prices and volumes for Apple Inc., Google LLC., and Microsoft Corporation in the New York Stock Exchange", "answer": "get_stock_data", "answer_params": "", "api_description": "def get_stock_data:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the most recent trading day's closing price and volume for a specified stock.\n\t\n\tArguments:\n\t---------\n\t- symbol : string = None (required) The stock symbol of the company.\n\t- data_points : array = None (required) The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_data\", \"description\": \"Retrieve the most recent trading day's closing price and volume for a specified stock.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"symbol\": {\"type\": \"string\", \"description\": \"The stock symbol of the company.\"}, \"data_points\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"price\", \"volume\"]}, \"description\": \"The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc.\"}}, \"required\": [\"symbol\", \"data_points\"]}}"}
{"scope": "multiple_function", "query": "Calculate the area of a triangle, given the lengths of its three sides: 3, 4, and 5.", "query_for_retrieval": "Calculate the area of a triangle, given the lengths of its three sides: 3, 4, and 5.", "answer": "math.triangle_area_heron", "answer_params": "", "api_description": "def math.triangle_area_heron:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a triangle using Heron's formula, given the lengths of its three sides.\n\t\n\tArguments:\n\t---------\n\t- side1 : integer = None (required) Length of the first side of the triangle.\n\t- side2 : integer = None (required) Length of the second side of the triangle.\n\t- side3 : integer = None (required) Length of the third side of the triangle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.triangle_area_heron\", \"description\": \"Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"side1\": {\"type\": \"integer\", \"description\": \"Length of the first side of the triangle.\"}, \"side2\": {\"type\": \"integer\", \"description\": \"Length of the second side of the triangle.\"}, \"side3\": {\"type\": \"integer\", \"description\": \"Length of the third side of the triangle.\"}}, \"required\": [\"side1\", \"side2\", \"side3\"]}}"}
{"scope": "simple", "query": "Find all Patent lawsuit cases of Facebook in 2018.", "query_for_retrieval": "Find all Patent lawsuit cases of Facebook in 2018.", "answer": "get_lawsuit_cases", "answer_params": "", "api_description": "def get_lawsuit_cases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve all lawsuit cases related to a specific company during a particular year.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- year : integer = None (required) The specific year to search for lawsuit cases.\n\t- status : string = None (optional) The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_lawsuit_cases\", \"description\": \"Retrieve all lawsuit cases related to a specific company during a particular year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The specific year to search for lawsuit cases.\"}, \"status\": {\"type\": \"string\", \"enum\": [\"open\", \"closed\", \"all\"], \"description\": \"The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'.\"}}, \"required\": [\"company_name\", \"year\"]}}"}
{"scope": "java", "query": "How can I output a formatted Java constant declaration for a large Base64 encoded string representing a certificate, with the constant name 'CERTIFICATE' and the value being a 1024-character long Base64 string with 'MIIFdTCCBF2gAwIBAgISESG'?", "query_for_retrieval": "How can I output a formatted Java constant declaration for a large Base64 encoded string representing a certificate, with the constant name 'CERTIFICATE' and the value being a 1024-character long Base64 string with 'MIIFdTCCBF2gAwIBAgISESG'?", "answer": "LargeHandshakeTest.format", "answer_params": "", "api_description": "def LargeHandshakeTest.format:\n\t\"\"\"\n\tDescription:\n\t\n\tOutputs a formatted Java constant declaration for a given name and value, splitting the value into multiple lines if it exceeds 60 characters.\n\t\n\tArguments:\n\t---------\n\t- name : String = None (required) The name of the Java constant.\n\t- value : String = None (required) The value of the Java constant, which will be split into multiple lines if it's too long.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"LargeHandshakeTest.format\", \"description\": \"Outputs a formatted Java constant declaration for a given name and value, splitting the value into multiple lines if it exceeds 60 characters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"String\", \"description\": \"The name of the Java constant.\"}, \"value\": {\"type\": \"String\", \"description\": \"The value of the Java constant, which will be split into multiple lines if it's too long.\"}}, \"required\": [\"name\", \"value\"]}}"}
{"scope": "simple", "query": "Find out the possible punishments for the crime of theft in California in detail.", "query_for_retrieval": "Find out the possible punishments for the crime of theft in California in detail.", "answer": "crime_statute_lookup", "answer_params": "", "api_description": "def crime_statute_lookup:\n\t\"\"\"\n\tDescription:\n\t\n\tLook up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.\n\t\n\tArguments:\n\t---------\n\t- jurisdiction : string = None (required) The jurisdiction to search in, usually a state or country.\n\t- crime : string = None (required) The crime to search for.\n\t- detail_level : string = None (optional) How detailed of a report to return. Optional, default is 'basic'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"crime_statute_lookup\", \"description\": \"Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"jurisdiction\": {\"type\": \"string\", \"description\": \"The jurisdiction to search in, usually a state or country.\"}, \"crime\": {\"type\": \"string\", \"description\": \"The crime to search for.\"}, \"detail_level\": {\"type\": \"string\", \"enum\": [\"basic\", \"detailed\"], \"description\": \"How detailed of a report to return. Optional, default is 'basic'.\"}}, \"required\": [\"jurisdiction\", \"crime\"]}}"}
{"scope": "simple", "query": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "query_for_retrieval": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "answer": "get_song_lyrics", "answer_params": "", "api_description": "def get_song_lyrics:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the lyrics of a song based on the artist's name and song title.\n\t\n\tArguments:\n\t---------\n\t- song_title : string = None (required) The title of the song.\n\t- artist_name : string = None (required) The name of the artist who performed the song.\n\t- lang : string = None (optional) The language of the lyrics. Default is English.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_song_lyrics\", \"description\": \"Retrieve the lyrics of a song based on the artist's name and song title.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"song_title\": {\"type\": \"string\", \"description\": \"The title of the song.\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist who performed the song.\"}, \"lang\": {\"type\": \"string\", \"description\": \"The language of the lyrics. Default is English.\", \"enum\": [\"English\", \"French\", \"Spanish\", \"German\", \"Italian\"]}}, \"required\": [\"song_title\", \"artist_name\"]}}"}
{"scope": "simple", "query": "Find the probability of getting exactly 5 heads in 10 fair coin tosses.", "query_for_retrieval": "Find the probability of getting exactly 5 heads in 10 fair coin tosses.", "answer": "prob_dist.binomial", "answer_params": "", "api_description": "def prob_dist.binomial:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the probability of having 'success' outcome from binomial distribution.\n\t\n\tArguments:\n\t---------\n\t- trials : integer = None (required) The number of independent experiments.\n\t- successes : integer = None (required) The number of success events.\n\t- p : float = None (optional) The probability of success on any given trial, defaults to 0.5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prob_dist.binomial\", \"description\": \"Compute the probability of having 'success' outcome from binomial distribution.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"trials\": {\"type\": \"integer\", \"description\": \"The number of independent experiments.\"}, \"successes\": {\"type\": \"integer\", \"description\": \"The number of success events.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success on any given trial, defaults to 0.5\"}}, \"required\": [\"trials\", \"successes\"]}}"}
{"scope": "multiple_function", "query": "Who were the main participants and what was the location of the Battle of Stalingrad?", "query_for_retrieval": "Who were the main participants and what was the location of the Battle of Stalingrad?", "answer": "european_history.war_details", "answer_params": "", "api_description": "def european_history.war_details:\n\t\"\"\"\n\tDescription:\n\t\n\tGet details of a specific historical European war.\n\t\n\tArguments:\n\t---------\n\t- war : string = None (required) Name of the war\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"european_history.war_details\", \"description\": \"Get details of a specific historical European war.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"war\": {\"type\": \"string\", \"description\": \"Name of the war\"}}, \"required\": [\"war\"]}}"}
{"scope": "simple", "query": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "query_for_retrieval": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "answer": "get_case_info", "answer_params": "", "api_description": "def get_case_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve case details using a specific case docket number and court location.\n\t\n\tArguments:\n\t---------\n\t- docket : string = None (required) Docket number for the specific court case.\n\t- court : string = None (required) Court in which the case was heard.\n\t- info_type : string = None (required) Specify the information type needed for the case. i.e., victim, accused, verdict etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_case_info\", \"description\": \"Retrieve case details using a specific case docket number and court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"docket\": {\"type\": \"string\", \"description\": \"Docket number for the specific court case.\"}, \"court\": {\"type\": \"string\", \"description\": \"Court in which the case was heard.\"}, \"info_type\": {\"type\": \"string\", \"description\": \"Specify the information type needed for the case. i.e., victim, accused, verdict etc.\"}}, \"required\": [\"docket\", \"court\", \"info_type\"]}}"}
{"scope": "simple", "query": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "query_for_retrieval": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "answer": "get_exchange_rate_with_fee", "answer_params": "", "api_description": "def get_exchange_rate_with_fee:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the exchange rate between two currencies including transaction fee.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency.\n\t- target_currency : string = None (required) The target currency.\n\t- fee : float = None (required) The transaction fee in percentage. Default is 0%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_exchange_rate_with_fee\", \"description\": \"Retrieve the exchange rate between two currencies including transaction fee.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The target currency.\"}, \"fee\": {\"type\": \"float\", \"description\": \"The transaction fee in percentage. Default is 0%.\"}}, \"required\": [\"base_currency\", \"target_currency\", \"fee\"]}}"}
{"scope": "java", "query": "How can I initialize the GIS geometry presentation in a user interface, providing a specific result set controller `mapController` and a composite UI element `mapArea` to display the GIS data?", "query_for_retrieval": "How can I initialize the GIS geometry presentation in a user interface, providing a specific result set controller `mapController` and a composite UI element `mapArea` to display the GIS data?", "answer": "GeometryPresentation.createPresentation", "answer_params": "", "api_description": "def GeometryPresentation.createPresentation:\n\t\"\"\"\n\tDescription:\n\t\n\tInitializes the GIS geometry presentation within the provided UI composite, using the given result set controller.\n\t\n\tArguments:\n\t---------\n\t- controller : any = None (required) The IResultSetController instance responsible for controlling the result set.\n\t- parent : any = None (required) The Composite UI element where the GIS presentation will be displayed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"GeometryPresentation.createPresentation\", \"description\": \"Initializes the GIS geometry presentation within the provided UI composite, using the given result set controller.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"controller\": {\"type\": \"any\", \"description\": \"The IResultSetController instance responsible for controlling the result set.\"}, \"parent\": {\"type\": \"any\", \"description\": \"The Composite UI element where the GIS presentation will be displayed.\"}}, \"required\": [\"controller\", \"parent\"]}}"}
{"scope": "relevance", "query": "What is the acceleration a ball will reach if it's thrown straight upwards with a velocity of 5 m/s?", "query_for_retrieval": "What is the acceleration a ball will reach if it's thrown straight upwards with a velocity of 5 m/s?", "answer": "calculate_maximum_height", "answer_params": "", "api_description": "def calculate_maximum_height:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the maximum height an object will reach if it's thrown straight upwards with an initial velocity, ignoring air resistance.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity in meters per second.\n\t- gravity : float = None (optional) The acceleration due to gravity in meters per second squared, default value is 9.8.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_maximum_height\", \"description\": \"Calculate the maximum height an object will reach if it's thrown straight upwards with an initial velocity, ignoring air resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity in meters per second.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The acceleration due to gravity in meters per second squared, default value is 9.8.\"}}, \"required\": [\"initial_velocity\"]}}"}
{"scope": "java", "query": "How can I update the launcher information in the JNI Bridge with the launcher path '/usr/local/bin/dbeaver' and the launcher name 'DBeaverLauncher'?", "query_for_retrieval": "How can I update the launcher information in the JNI Bridge with the launcher path '/usr/local/bin/dbeaver' and the launcher name 'DBeaverLauncher'?", "answer": "JNIBridge.setLauncherInfo", "answer_params": "", "api_description": "def JNIBridge.setLauncherInfo:\n\t\"\"\"\n\tDescription:\n\t\n\tSets the launcher information in the JNI Bridge, which includes the path and name of the launcher.\n\t\n\tArguments:\n\t---------\n\t- launcher : String = None (required) The full path to the launcher.\n\t- name : String = None (required) The name of the launcher.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"JNIBridge.setLauncherInfo\", \"description\": \"Sets the launcher information in the JNI Bridge, which includes the path and name of the launcher.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"launcher\": {\"type\": \"String\", \"description\": \"The full path to the launcher.\"}, \"name\": {\"type\": \"String\", \"description\": \"The name of the launcher.\"}}, \"required\": [\"launcher\", \"name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've just sold some of my photography equipment and ended up with 1000 USD in my pocket. I'm planning a trip to Europe and it would be handy to have euros instead. Could you help me convert this amount into EUR? I'm curious to see how much I'll end up with for my trip. Oh, and just out of interest, I used to love math problems in school \u2013 could you calculate the factorial of 1000 for me? I know it's a huge number, but I'm just curious!", "query_for_retrieval": "I've just sold some of my photography equipment and ended up with 1000 USD in my pocket. I'm planning a trip to Europe and it would be handy to have euros instead. Could you help me convert this amount into EUR? I'm curious to see how much I'll end up with for my trip. Oh, and just out of interest, I used to love math problems in school \u2013 could you calculate the factorial of 1000 for me? I know it's a huge number, but I'm just curious!", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "parallel_function", "query": "What were the 'Open', 'Close', 'High', and 'Low' stock prices for Microsoft and Apple over the past 30 days?", "query_for_retrieval": "What were the 'Open', 'Close', 'High', and 'Low' stock prices for Microsoft and Apple over the past 30 days?", "answer": "stock_price", "answer_params": "", "api_description": "def stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tGet stock price data for a given company over a specified number of days.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company name.\n\t- days : integer = None (required) The number of previous days to retrieve data for.\n\t- data_type : string = None (optional) The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_price\", \"description\": \"Get stock price data for a given company over a specified number of days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company name.\"}, \"days\": {\"type\": \"integer\", \"description\": \"The number of previous days to retrieve data for.\"}, \"data_type\": {\"type\": \"string\", \"description\": \"The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the final velocity of a moving object given initial velocity of 20 m/s, acceleration of 5 m/s^2 and time of 6 seconds. Also, compute the total distance covered by the object.", "query_for_retrieval": "Calculate the final velocity of a moving object given initial velocity of 20 m/s, acceleration of 5 m/s^2 and time of 6 seconds. Also, compute the total distance covered by the object.", "answer": "kinematics.distance_traveled", "answer_params": "", "api_description": "def kinematics.distance_traveled:\n\t\"\"\"\n\tDescription:\n\t\n\tComputes the total distance covered by a moving object given initial velocity, acceleration and time.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object in m/s.\n\t- acceleration : float = None (required) The acceleration of the object in m/s^2.\n\t- time : float = None (required) The time for which the object has been moving in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.distance_traveled\", \"description\": \"Computes the total distance covered by a moving object given initial velocity, acceleration and time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object in m/s.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time for which the object has been moving in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "parallel_function", "query": "Can you provide a detailed description of the structure and functioning of a neuron cell and then compare it with a less detailed description of a muscle cell in the human body?", "query_for_retrieval": "Can you provide a detailed description of the structure and functioning of a neuron cell and then compare it with a less detailed description of a muscle cell in the human body?", "answer": "biology.get_cell_info", "answer_params": "", "api_description": "def biology.get_cell_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about the structure and functioning of a specified type of cell\n\t\n\tArguments:\n\t---------\n\t- cell_type : string = None (required) Type of cell you want information about\n\t- detailed : boolean = false (optional) Indicate if you want a detailed description of the cell\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"biology.get_cell_info\", \"description\": \"Retrieve information about the structure and functioning of a specified type of cell\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_type\": {\"type\": \"string\", \"description\": \"Type of cell you want information about\"}, \"detailed\": {\"type\": \"boolean\", \"description\": \"Indicate if you want a detailed description of the cell\", \"default\": \"false\"}}, \"required\": [\"cell_type\"]}}"}
{"scope": "simple", "query": "What's the probability of rolling a six on a six-sided die twice in a row?", "query_for_retrieval": "What's the probability of rolling a six on a six-sided die twice in a row?", "answer": "probability.dice_roll", "answer_params": "", "api_description": "def probability.dice_roll:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\n\t\n\tArguments:\n\t---------\n\t- desired_number : integer = None (required) The number you want to roll.\n\t- number_of_rolls : integer = None (required) How many times you want to roll that number in a row.\n\t- die_sides : integer = None (optional) The number of sides on the die (optional; default is 6).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability.dice_roll\", \"description\": \"Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"desired_number\": {\"type\": \"integer\", \"description\": \"The number you want to roll.\"}, \"number_of_rolls\": {\"type\": \"integer\", \"description\": \"How many times you want to roll that number in a row.\"}, \"die_sides\": {\"type\": \"integer\", \"description\": \"The number of sides on the die (optional; default is 6).\"}}, \"required\": [\"desired_number\", \"number_of_rolls\"]}}"}
{"scope": "simple", "query": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "query_for_retrieval": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "answer": "calculate_cell_density", "answer_params": "", "api_description": "def calculate_cell_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the cell density of a biological sample based on its optical density and the experiment dilution.\n\t\n\tArguments:\n\t---------\n\t- optical_density : float = None (required) The optical density of the sample, usually obtained from a spectrophotometer reading.\n\t- dilution : integer = None (required) The dilution factor applied during the experiment.\n\t- calibration_factor : float = None (optional) The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cell_density\", \"description\": \"Calculate the cell density of a biological sample based on its optical density and the experiment dilution.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"optical_density\": {\"type\": \"float\", \"description\": \"The optical density of the sample, usually obtained from a spectrophotometer reading.\"}, \"dilution\": {\"type\": \"integer\", \"description\": \"The dilution factor applied during the experiment.\"}, \"calibration_factor\": {\"type\": \"float\", \"description\": \"The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL.\"}}, \"required\": [\"optical_density\", \"dilution\"]}}"}
{"scope": "simple", "query": "Retrieve cases from 2020 about theft crimes in Los Angeles, California", "query_for_retrieval": "Retrieve cases from 2020 about theft crimes in Los Angeles, California", "answer": "civil_cases.retrieve", "answer_params": "", "api_description": "def civil_cases.retrieve:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve civil cases based on given parameters, including year, crime type, and location.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) Year of the cases\n\t- crime_type : string = None (required) Type of the crime.\n\t- location : string = None (required) Location of the case in the format of city name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"civil_cases.retrieve\", \"description\": \"Retrieve civil cases based on given parameters, including year, crime type, and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"Year of the cases\"}, \"crime_type\": {\"type\": \"string\", \"description\": \"Type of the crime.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location of the case in the format of city name.\"}}, \"required\": [\"year\", \"crime_type\", \"location\"]}}"}
{"scope": "sql", "query": "What are the names of the employees from the 'employees' table who have a salary greater than $5000?", "query_for_retrieval": "What are the names of the employees from the 'employees' table who have a salary greater than $5000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Shuffle a deck of cards, and draw 3 cards from the top.", "query_for_retrieval": "Shuffle a deck of cards, and draw 3 cards from the top.", "answer": "cards.shuffle_and_draw", "answer_params": "", "api_description": "def cards.shuffle_and_draw:\n\t\"\"\"\n\tDescription:\n\t\n\tShuffle a standard deck of 52 cards and draw a specified number of cards from the top.\n\t\n\tArguments:\n\t---------\n\t- num_cards : integer = None (required) Number of cards to be drawn. The default is 1 if no value is provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cards.shuffle_and_draw\", \"description\": \"Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num_cards\": {\"type\": \"integer\", \"description\": \"Number of cards to be drawn. The default is 1 if no value is provided.\"}}, \"required\": [\"num_cards\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the time required for a car moving at 50 m/s to travel a distance of 600 m. Also calculate the time required for a bullet moving at 400 m/s to cover a distance of 1000 m.", "query_for_retrieval": "Calculate the time required for a car moving at 50 m/s to travel a distance of 600 m. Also calculate the time required for a bullet moving at 400 m/s to cover a distance of 1000 m.", "answer": "physics.calculate_force", "answer_params": "", "api_description": "def physics.calculate_force:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the force required to move an object of a particular mass at a particular acceleration.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) The mass of the object in kg.\n\t- acceleration : integer = None (required) The acceleration of the object in m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"physics.calculate_force\", \"description\": \"Calculate the force required to move an object of a particular mass at a particular acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"The mass of the object in kg.\"}, \"acceleration\": {\"type\": \"integer\", \"description\": \"The acceleration of the object in m/s^2.\"}}, \"required\": [\"mass\", \"acceleration\"]}}"}
{"scope": "rest", "query": "How to convert the GPS coordinates of the Eiffel Tower (latitude 48.8584, longitude 2.2945) into its respective timezone, using my API key 'YOUR-RAPID-API-KEY' with the host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "How to convert the GPS coordinates of the Eiffel Tower (latitude 48.8584, longitude 2.2945) into its respective timezone, using my API key 'YOUR-RAPID-API-KEY' with the host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "query_for_retrieval": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "answer": "soccer_stat.get_player_stats", "answer_params": "", "api_description": "def soccer_stat.get_player_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve soccer player statistics for a given season.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) Name of the player.\n\t- season : string = None (required) Soccer season, usually specified by two years.\n\t- league : string = None (optional) Optional - the soccer league, defaults to all leagues if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"soccer_stat.get_player_stats\", \"description\": \"Retrieve soccer player statistics for a given season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"Name of the player.\"}, \"season\": {\"type\": \"string\", \"description\": \"Soccer season, usually specified by two years.\"}, \"league\": {\"type\": \"string\", \"description\": \"Optional - the soccer league, defaults to all leagues if not specified.\"}}, \"required\": [\"player_name\", \"season\"]}}"}
{"scope": "relevance", "query": "What type of rock is the most suitable for creating a garden sculpture?", "query_for_retrieval": "What type of rock is the most suitable for creating a garden sculpture?", "answer": "sculpture.create", "answer_params": "", "api_description": "def sculpture.create:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a 3D model of a sculpture from given inputs\n\t\n\tArguments:\n\t---------\n\t- design : string = None (required) The design to be used for creating the sculpture\n\t- material : string = None (optional) The material to be used for creating the sculpture, default is marble\n\t- size : string = None (required) The desired size of the sculpture\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture.create\", \"description\": \"Create a 3D model of a sculpture from given inputs\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"design\": {\"type\": \"string\", \"description\": \"The design to be used for creating the sculpture\"}, \"material\": {\"type\": \"string\", \"description\": \"The material to be used for creating the sculpture, default is marble\"}, \"size\": {\"type\": \"string\", \"description\": \"The desired size of the sculpture\"}}, \"required\": [\"design\", \"size\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "Last year, when I was staying in Spain, I never quite kept track of all the public holidays, which I regret since it would have been handy for planning trips. Could you provide me with a list of the official Spanish holidays for the year 2020? Also, I was reminiscing about a physics experiment from the same year, where we propelled an object with an initial velocity of 10 meters per second and it had a consistent acceleration of 2 meters per second squared. The object was in motion for a total of 5 seconds. I need to calculate how far the object traveled during that time. Can you help me with that as well?", "query_for_retrieval": "Last year, when I was staying in Spain, I never quite kept track of all the public holidays, which I regret since it would have been handy for planning trips. Could you provide me with a list of the official Spanish holidays for the year 2020? Also, I was reminiscing about a physics experiment from the same year, where we propelled an object with an initial velocity of 10 meters per second and it had a consistent acceleration of 2 meters per second squared. The object was in motion for a total of 5 seconds. I need to calculate how far the object traveled during that time. Can you help me with that as well?", "answer": "retrieve_holiday_by_year", "answer_params": "", "api_description": "def retrieve_holiday_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the holidays of a year.\n\t\n\tArguments:\n\t---------\n\t- year : string = None (required) The year of the holidays.\n\t- country : string = None (required) The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_holiday_by_year\", \"description\": \"Finds the holidays of a year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"string\", \"description\": \"The year of the holidays.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\"}}, \"required\": [\"year\", \"country\"]}}"}
{"scope": "relevance", "query": "What's the area of a rectangle that has width of 5m and length of 7m?", "query_for_retrieval": "What's the area of a rectangle that has width of 5m and length of 7m?", "answer": "draw_circle", "answer_params": "", "api_description": "def draw_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tDraw a circle based on the radius provided.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) The radius of the circle.\n\t- unit : string = None (required) The unit of measurement for the radius. e.g. 'm' for meters, 'cm' for centimeters\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"draw_circle\", \"description\": \"Draw a circle based on the radius provided.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"The radius of the circle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for the radius. e.g. 'm' for meters, 'cm' for centimeters\"}}, \"required\": [\"radius\", \"unit\"]}}"}
{"scope": "simple", "query": "What are the career stats of basketball player LeBron James?", "query_for_retrieval": "What are the career stats of basketball player LeBron James?", "answer": "get_career_stats", "answer_params": "", "api_description": "def get_career_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the career statistics of a basketball player based on the player's name.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the basketball player.\n\t- team : string = None (optional) The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_career_stats\", \"description\": \"Retrieve the career statistics of a basketball player based on the player's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the basketball player.\"}, \"team\": {\"type\": \"string\", \"description\": \"The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "simple", "query": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "query_for_retrieval": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "answer": "game_result.get_winner", "answer_params": "", "api_description": "def game_result.get_winner:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the winner of a specific basketball game.\n\t\n\tArguments:\n\t---------\n\t- teams : array = None (required) List of two teams who played the game.\n\t- date : string = None (required) The date of the game, formatted as YYYY-MM-DD.\n\t- venue : string = None (optional) Optional: The venue of the game. Default is 'home'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_result.get_winner\", \"description\": \"Get the winner of a specific basketball game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"teams\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of two teams who played the game.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the game, formatted as YYYY-MM-DD.\"}, \"venue\": {\"type\": \"string\", \"optional\": true, \"description\": \"Optional: The venue of the game. Default is 'home'.\"}}, \"required\": [\"teams\", \"date\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the volume of a cuboid with a height of 10m, a width of 5m, and a depth of 8m. And find out the volume of a sphere with a radius of 4m.", "query_for_retrieval": "Calculate the volume of a cuboid with a height of 10m, a width of 5m, and a depth of 8m. And find out the volume of a sphere with a radius of 4m.", "answer": "calcVolume.cuboid", "answer_params": "", "api_description": "def calcVolume.cuboid:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the volume of a cuboid.\n\t\n\tArguments:\n\t---------\n\t- height : float = None (required) The height of the cuboid.\n\t- width : float = None (required) The width of the cuboid.\n\t- depth : float = None (required) The depth of the cuboid.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calcVolume.cuboid\", \"description\": \"Calculates the volume of a cuboid.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"height\": {\"type\": \"float\", \"description\": \"The height of the cuboid.\"}, \"width\": {\"type\": \"float\", \"description\": \"The width of the cuboid.\"}, \"depth\": {\"type\": \"float\", \"description\": \"The depth of the cuboid.\"}}, \"required\": [\"height\", \"width\", \"depth\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please find the latest updates for the game 'Call of Duty' on the 'Playstation' platform for the 'European' region, then find the current price for the same game on the 'Xbox' platform, and finally find reviews for the game 'FIFA 21' from the 'American' region?\"", "query_for_retrieval": "\"Could you please find the latest updates for the game 'Call of Duty' on the 'Playstation' platform for the 'European' region, then find the current price for the same game on the 'Xbox' platform, and finally find reviews for the game 'FIFA 21' from the 'American' region?\"", "answer": "games.update.find", "answer_params": "", "api_description": "def games.update.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the latest updates or patches for a specific game on a specified gaming platform.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the game.\n\t- platform : string = None (required) The gaming platform, e.g. Xbox, Playstation, PC.\n\t- region : string = None (optional) The region of the update (optional, default is 'global')\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"games.update.find\", \"description\": \"Find the latest updates or patches for a specific game on a specified gaming platform.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The gaming platform, e.g. Xbox, Playstation, PC.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region of the update (optional, default is 'global')\"}}, \"required\": [\"game\", \"platform\"]}}"}
{"scope": "multiple_function", "query": "Find a Landscape Architect who is experienced 5 years in small space garden design in Portland", "query_for_retrieval": "Find a Landscape Architect who is experienced 5 years in small space garden design in Portland", "answer": "home_renovation_expert.find_specialty", "answer_params": "", "api_description": "def home_renovation_expert.find_specialty:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a home renovation expert based on the location and specialization\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City and state where the professional is based, e.g. Portland, OR.\n\t- specialization : string = None (required) A specific area of expertise, such as kitchen or bathroom renovation.\n\t- years_experience : integer = 0 (optional) Number of years the professional has been practicing in their field. (optional)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"home_renovation_expert.find_specialty\", \"description\": \"Search for a home renovation expert based on the location and specialization\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City and state where the professional is based, e.g. Portland, OR.\"}, \"specialization\": {\"type\": \"string\", \"description\": \"A specific area of expertise, such as kitchen or bathroom renovation.\"}, \"years_experience\": {\"type\": \"integer\", \"description\": \"Number of years the professional has been practicing in their field. (optional)\", \"default\": 0}}, \"required\": [\"location\", \"specialization\"]}}"}
{"scope": "simple", "query": "Who was the President of the United States in 1940?", "query_for_retrieval": "Who was the President of the United States in 1940?", "answer": "history_api.get_president_by_year", "answer_params": "", "api_description": "def history_api.get_president_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the name of the U.S. President for a specified year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year you want to know the U.S. president of.\n\t- full_term_only : boolean = False (optional) Flag to determine if we should only return presidents that served a full term for the specified year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history_api.get_president_by_year\", \"description\": \"Get the name of the U.S. President for a specified year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year you want to know the U.S. president of.\"}, \"full_term_only\": {\"type\": \"boolean\", \"description\": \"Flag to determine if we should only return presidents that served a full term for the specified year.\", \"default\": false}}, \"required\": [\"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a property in San Francisco, CA that is a condo with 2 bedrooms and fits within my budget range of $500,000 to $800,000? After that, could you also provide an estimated value for a villa in Los Angeles, CA with 3 bedrooms that is 5 years old? Lastly, I would also like to know the estimated value of an apartment in New York, NY with 1 bedroom that is 10 years old.\"", "query_for_retrieval": "\"Can you help me find a property in San Francisco, CA that is a condo with 2 bedrooms and fits within my budget range of $500,000 to $800,000? After that, could you also provide an estimated value for a villa in Los Angeles, CA with 3 bedrooms that is 5 years old? Lastly, I would also like to know the estimated value of an apartment in New York, NY with 1 bedroom that is 10 years old.\"", "answer": "property_valuation.get", "answer_params": "", "api_description": "def property_valuation.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet estimated value of a property based on location, specifications and age\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City and state where the property is located, e.g. San Diego, CA.\n\t- propertyType : string = None (required) Type of property such as villa, condo, apartment, etc.\n\t- bedrooms : integer = None (required) Number of bedrooms required in the property.\n\t- age : integer = None (required) Age of the property in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"property_valuation.get\", \"description\": \"Get estimated value of a property based on location, specifications and age\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City and state where the property is located, e.g. San Diego, CA.\"}, \"propertyType\": {\"type\": \"string\", \"description\": \"Type of property such as villa, condo, apartment, etc.\"}, \"bedrooms\": {\"type\": \"integer\", \"description\": \"Number of bedrooms required in the property.\"}, \"age\": {\"type\": \"integer\", \"description\": \"Age of the property in years.\"}}, \"required\": [\"location\", \"propertyType\", \"bedrooms\", \"age\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on some mathematical problems and need to do a couple of calculations. First, I need to figure out the greatest common divisor (GCD) for the numbers 36 and 48. After that, I need to estimate the derivative of the function f(x) = x^2 at the point where x equals 5. Can you help me with these two tasks?", "query_for_retrieval": "I'm working on some mathematical problems and need to do a couple of calculations. First, I need to figure out the greatest common divisor (GCD) for the numbers 36 and 48. After that, I need to estimate the derivative of the function f(x) = x^2 at the point where x equals 5. Can you help me with these two tasks?", "answer": "math_gcd", "answer_params": "", "api_description": "def math_gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "simple", "query": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "query_for_retrieval": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "answer": "calculate_bacteria_evolution_rate", "answer_params": "", "api_description": "def calculate_bacteria_evolution_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.\n\t\n\tArguments:\n\t---------\n\t- start_population : integer = None (required) The starting population of bacteria.\n\t- duplication_frequency : integer = None (required) The frequency of bacteria duplication per hour.\n\t- duration : integer = None (required) Total duration in hours.\n\t- generation_time : integer = None (optional) The average generation time of the bacteria in minutes. Default is 20 minutes\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bacteria_evolution_rate\", \"description\": \"Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_population\": {\"type\": \"integer\", \"description\": \"The starting population of bacteria.\"}, \"duplication_frequency\": {\"type\": \"integer\", \"description\": \"The frequency of bacteria duplication per hour.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"Total duration in hours.\"}, \"generation_time\": {\"type\": \"integer\", \"description\": \"The average generation time of the bacteria in minutes. Default is 20 minutes\"}}, \"required\": [\"start_population\", \"duplication_frequency\", \"duration\"]}}"}
{"scope": "simple", "query": "Calculate the probability of drawing a king from a deck of cards.", "query_for_retrieval": "Calculate the probability of drawing a king from a deck of cards.", "answer": "calculate_probability", "answer_params": "", "api_description": "def calculate_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of an event.\n\t\n\tArguments:\n\t---------\n\t- total_outcomes : integer = None (required) Total number of possible outcomes.\n\t- favorable_outcomes : integer = None (required) Number of outcomes considered as 'successful'.\n\t- round_to : integer = 2 (optional) Number of decimal places to round the result to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_probability\", \"description\": \"Calculate the probability of an event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_outcomes\": {\"type\": \"integer\", \"description\": \"Total number of possible outcomes.\"}, \"favorable_outcomes\": {\"type\": \"integer\", \"description\": \"Number of outcomes considered as 'successful'.\"}, \"round_to\": {\"type\": \"integer\", \"description\": \"Number of decimal places to round the result to.\", \"default\": 2}}, \"required\": [\"total_outcomes\", \"favorable_outcomes\"]}}"}
{"scope": "parallel_function", "query": "\"Imagine you are a drone operator. You are currently operating a drone that is at a point (5, 7) in the sky. You are asked to move the drone to a new point (10, 15). After reaching the new point, you are again asked to move the drone to another point (20, 25). Can you calculate the total distance the drone has traveled using the Euclidean norm method?\"", "query_for_retrieval": "\"Imagine you are a drone operator. You are currently operating a drone that is at a point (5, 7) in the sky. You are asked to move the drone to a new point (10, 15). After reaching the new point, you are again asked to move the drone to another point (20, 25). Can you calculate the total distance the drone has traveled using the Euclidean norm method?\"", "answer": "math.hypot", "answer_params": "", "api_description": "def math.hypot:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n\t\n\tArguments:\n\t---------\n\t- x : integer = None (required) The x-coordinate value.\n\t- y : integer = None (required) The y-coordinate value.\n\t- z : integer = None (optional) Optional. The z-coordinate value. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.hypot\", \"description\": \"Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"integer\", \"description\": \"The x-coordinate value.\"}, \"y\": {\"type\": \"integer\", \"description\": \"The y-coordinate value.\"}, \"z\": {\"type\": \"integer\", \"description\": \"Optional. The z-coordinate value. Default is 0.\"}}, \"required\": [\"x\", \"y\"]}}"}
{"scope": "simple", "query": "Find the latest court case between Apple and Samsung occured in USA.", "query_for_retrieval": "Find the latest court case between Apple and Samsung occured in USA.", "answer": "find_latest_court_case", "answer_params": "", "api_description": "def find_latest_court_case:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the latest court case between two companies.\n\t\n\tArguments:\n\t---------\n\t- company1 : string = None (required) The name of the first company.\n\t- company2 : string = None (required) The name of the second company.\n\t- country : string = USA (optional) The country in which the court case is located.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_latest_court_case\", \"description\": \"Find the latest court case between two companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company1\": {\"type\": \"string\", \"description\": \"The name of the first company.\"}, \"company2\": {\"type\": \"string\", \"description\": \"The name of the second company.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country in which the court case is located.\", \"default\": \"USA\"}}, \"required\": [\"company1\", \"company2\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you first analyze the structure of a building with the building_id 'B1234' for floors 1, 2, 3, and 4 using the 'dynamic' mode of analysis? Then, could you retrieve the player statistics for 'Michael Jordan' for the year 1996? After that, can you analyze the structure of another building with the building_id 'B5678' for floors 5, 6, 7, and 8 using the 'static' mode of analysis? Finally, could you retrieve the player statistics for 'LeBron James' for the year 2018, specifically for his time with the 'Los Angeles Lakers' team?\"", "query_for_retrieval": "\"Could you first analyze the structure of a building with the building_id 'B1234' for floors 1, 2, 3, and 4 using the 'dynamic' mode of analysis? Then, could you retrieve the player statistics for 'Michael Jordan' for the year 1996? After that, can you analyze the structure of another building with the building_id 'B5678' for floors 5, 6, 7, and 8 using the 'static' mode of analysis? Finally, could you retrieve the player statistics for 'LeBron James' for the year 2018, specifically for his time with the 'Los Angeles Lakers' team?\"", "answer": "analyze_structure", "answer_params": "", "api_description": "def analyze_structure:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyze a structure of a building based on its Id and floor numbers.\n\t\n\tArguments:\n\t---------\n\t- building_id : string = None (required) The unique identification number of the building.\n\t- floors : array = None (required) Floor numbers to be analyzed.\n\t- mode : string = None (optional) Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"analyze_structure\", \"description\": \"Analyze a structure of a building based on its Id and floor numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_id\": {\"type\": \"string\", \"description\": \"The unique identification number of the building.\"}, \"floors\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Floor numbers to be analyzed.\"}, \"mode\": {\"type\": \"string\", \"description\": \"Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\"}}, \"required\": [\"building_id\", \"floors\"]}}"}
{"scope": "sql", "query": "In the context of a database containing information about various countries' GDP, can you modify the GDP value of the United States in the table named 'country_gdp' under the column 'gdp'? Please set the new GDP value to '21.44 trillion USD' and ensure this operation only affects the row where the 'country_name' is 'United States'.", "query_for_retrieval": "In the context of a database containing information about various countries' GDP, can you modify the GDP value of the United States in the table named 'country_gdp' under the column 'gdp'? Please set the new GDP value to '21.44 trillion USD' and ensure this operation only affects the row where the 'country_name' is 'United States'.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "Find a nature reserve around Berkeley within 10 kilometers that has picnic tables and public restrooms, as well as one around Tokyo within 5 kilometers that has playgrounds and biking trails.", "query_for_retrieval": "Find a nature reserve around Berkeley within 10 kilometers that has picnic tables and public restrooms, as well as one around Tokyo within 5 kilometers that has playgrounds and biking trails.", "answer": "nature_reserve.find_nearby", "answer_params": "", "api_description": "def nature_reserve.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby nature reserves based on specific criteria such as amenities and proximity.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to locate a nature reserve.\n\t- amenities : array = None (required) Preferred amenities in the nature reserve.\n\t- proximity : integer = None (required) The radius within which to look for nature reserves in kilometers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"nature_reserve.find_nearby\", \"description\": \"Locate nearby nature reserves based on specific criteria such as amenities and proximity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to locate a nature reserve.\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Picnic Tables\", \"Public Restrooms\", \"Playgrounds\", \"Biking Trails\", \"Hiking Trails\", \"Camping Grounds\"]}, \"description\": \"Preferred amenities in the nature reserve.\"}, \"proximity\": {\"type\": \"integer\", \"description\": \"The radius within which to look for nature reserves in kilometers.\"}}, \"required\": [\"location\", \"proximity\", \"amenities\"]}}"}
{"scope": "simple", "query": "What's the current temperature and humidity in Seattle, Washington?", "query_for_retrieval": "What's the current temperature and humidity in Seattle, Washington?", "answer": "get_current_weather", "answer_params": "", "api_description": "def get_current_weather:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current temperature and humidity for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city name to get the weather for.\n\t- include_temperature : boolean = None (optional) Whether to include the temperature in the result. Default is true.\n\t- include_humidity : boolean = None (optional) Whether to include the humidity in the result. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current temperature and humidity for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city name to get the weather for.\"}, \"include_temperature\": {\"type\": \"boolean\", \"description\": \"Whether to include the temperature in the result. Default is true.\"}, \"include_humidity\": {\"type\": \"boolean\", \"description\": \"Whether to include the humidity in the result. Default is true.\"}}, \"required\": [\"location\"]}}"}
{"scope": "multiple_function", "query": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "query_for_retrieval": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "answer": "prob_dist.binomial", "answer_params": "", "api_description": "def prob_dist.binomial:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the probability of having 'success' outcome from binomial distribution.\n\t\n\tArguments:\n\t---------\n\t- trials : integer = None (required) The number of independent experiments.\n\t- successes : integer = None (required) The number of success events.\n\t- p : float = None (optional) The probability of success on any given trial, defaults to 0.5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prob_dist.binomial\", \"description\": \"Compute the probability of having 'success' outcome from binomial distribution.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"trials\": {\"type\": \"integer\", \"description\": \"The number of independent experiments.\"}, \"successes\": {\"type\": \"integer\", \"description\": \"The number of success events.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success on any given trial, defaults to 0.5\"}}, \"required\": [\"trials\", \"successes\"]}}"}
{"scope": "javascript", "query": "How can I generate a notification handler for an application `app` that filters messages based on priority level 3, linked to a messaging service 'messagingSvc', and categorized under notification type 2?", "query_for_retrieval": "How can I generate a notification handler for an application `app` that filters messages based on priority level 3, linked to a messaging service 'messagingSvc', and categorized under notification type 2?", "answer": "generateNotificationHandler", "answer_params": "", "api_description": "def generateNotificationHandler:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function generates a notification handler for an application, which can filter incoming messages by priority level. It can also be linked to a specific messaging service and categorized under a certain notification type.\n\t\n\tArguments:\n\t---------\n\t- app : any = None (required) The application for which to generate the notification handler.\n\t- priorityLevel : integer = None (required) The priority level to filter messages. A certain level (e.g., 3) may determine the filtering criteria.\n\t- messagingService : any = None (required) The messaging service associated with the notification handler.\n\t- notificationType : integer = None (required) The notification type category for the handler.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generateNotificationHandler\", \"description\": \"This function generates a notification handler for an application, which can filter incoming messages by priority level. It can also be linked to a specific messaging service and categorized under a certain notification type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"app\": {\"type\": \"any\", \"description\": \"The application for which to generate the notification handler.\"}, \"priorityLevel\": {\"type\": \"integer\", \"description\": \"The priority level to filter messages. A certain level (e.g., 3) may determine the filtering criteria.\"}, \"messagingService\": {\"type\": \"any\", \"description\": \"The messaging service associated with the notification handler.\"}, \"notificationType\": {\"type\": \"integer\", \"description\": \"The notification type category for the handler.\"}}, \"required\": [\"app\", \"priorityLevel\", \"messagingService\", \"notificationType\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working on a traffic light system for a busy crossroads, and we've got two lights that are on different timers. One cycles every 35 seconds, and the other every 45 seconds. For optimal traffic flow, I need to synchronize these lights so they change at the same time. Could you help me calculate the least common multiple for these two cycle times?", "query_for_retrieval": "I'm currently working on a traffic light system for a busy crossroads, and we've got two lights that are on different timers. One cycles every 35 seconds, and the other every 45 seconds. For optimal traffic flow, I need to synchronize these lights so they change at the same time. Could you help me calculate the least common multiple for these two cycle times?", "answer": "math_lcm", "answer_params": "", "api_description": "def math_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the least common multiple of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_lcm\", \"description\": \"Calculates the least common multiple of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "simple", "query": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?", "query_for_retrieval": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?", "answer": "solve_quadratic", "answer_params": "", "api_description": "def solve_quadratic:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the roots of a quadratic equation. Returns both roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x\u00b2.\n\t- b : integer = None (required) Coefficient of x.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic\", \"description\": \"Find the roots of a quadratic equation. Returns both roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x\\u00b2.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "java", "query": "How can I execute a performance test in Java with 500 iterations, outputting the results to a `System.out` stream, and using command-line arguments that specify a wait time of 2 minutes?", "query_for_retrieval": "How can I execute a performance test in Java with 500 iterations, outputting the results to a `System.out` stream, and using command-line arguments that specify a wait time of 2 minutes?", "answer": "thrcputime002.runIt", "answer_params": "", "api_description": "def thrcputime002.runIt:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a performance test by running a specific thread for a given number of iterations and logs the output to the provided PrintStream. It also handles synchronization and status checks before, during, and after the thread execution.\n\t\n\tArguments:\n\t---------\n\t- argv : Array = None (required) An array of command-line arguments to configure the test, including wait time and number of iterations. In the format of -waitTime, <waitTime>, -iterations, <iterations>\n\t- out : any = None (required) The PrintStream to which the test output will be written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"thrcputime002.runIt\", \"description\": \"Executes a performance test by running a specific thread for a given number of iterations and logs the output to the provided PrintStream. It also handles synchronization and status checks before, during, and after the thread execution.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"argv\": {\"type\": \"Array\", \"description\": \"An array of command-line arguments to configure the test, including wait time and number of iterations. In the format of -waitTime, <waitTime>, -iterations, <iterations>\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream to which the test output will be written.\"}}, \"required\": [\"argv\", \"out\"]}}"}
{"scope": "parallel_function", "query": "You have four lists of numbers: [45, 12, 67, 21, 89], [34, 78, 12, 56, 90], [23, 45, 67, 89, 12], and [56, 78, 90, 12, 34]. Can you use the 'array_sort' function to sort these lists in both ascending and descending order?", "query_for_retrieval": "You have four lists of numbers: [45, 12, 67, 21, 89], [34, 78, 12, 56, 90], [23, 45, 67, 89, 12], and [56, 78, 90, 12, 34]. Can you use the 'array_sort' function to sort these lists in both ascending and descending order?", "answer": "array_sort", "answer_params": "", "api_description": "def array_sort:\n\t\"\"\"\n\tDescription:\n\t\n\tSorts a given list in ascending or descending order.\n\t\n\tArguments:\n\t---------\n\t- list : array = None (required) The list of numbers to be sorted.\n\t- order : string = None (required) Order of sorting. If not specified, it will default to ascending.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"array_sort\", \"description\": \"Sorts a given list in ascending or descending order.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"list\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The list of numbers to be sorted.\"}, \"order\": {\"type\": \"string\", \"enum\": [\"ascending\", \"descending\"], \"description\": \"Order of sorting. If not specified, it will default to ascending.\"}}, \"required\": [\"list\", \"order\"]}}"}
{"scope": "parallel_function", "query": "What is the total distance in kilometers if I start my journey from New York, travel to Los Angeles, then from Los Angeles to Miami, and finally from Miami back to New York?", "query_for_retrieval": "What is the total distance in kilometers if I start my journey from New York, travel to Los Angeles, then from Los Angeles to Miami, and finally from Miami back to New York?", "answer": "geo_distance.calculate", "answer_params": "", "api_description": "def geo_distance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the geographic distance between two given locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the distance calculation.\n\t- end_location : string = None (required) The destination location for the distance calculation.\n\t- units : string = None (optional) Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geo_distance.calculate\", \"description\": \"Calculate the geographic distance between two given locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the distance calculation.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the distance calculation.\"}, \"units\": {\"type\": \"string\", \"description\": \"Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "javascript", "query": "How can I determine if an email form element referred to as 'emailForm' includes an input with the name attribute 'emailAddress'?", "query_for_retrieval": "How can I determine if an email form element referred to as 'emailForm' includes an input with the name attribute 'emailAddress'?", "answer": "doesEmailInputExist", "answer_params": "", "api_description": "def doesEmailInputExist:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function verifies whether a given email form contains an input with a specific 'name' attribute value.\n\t\n\tArguments:\n\t---------\n\t- formElem : any = None (required) The email form element to inspect.\n\t- inputName : String = None (required) The value of the 'name' attribute to look for in the input.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"doesEmailInputExist\", \"description\": \"This function verifies whether a given email form contains an input with a specific 'name' attribute value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"formElem\": {\"type\": \"any\", \"description\": \"The email form element to inspect.\"}, \"inputName\": {\"type\": \"String\", \"description\": \"The value of the 'name' attribute to look for in the input.\"}}, \"required\": [\"formElem\", \"inputName\"]}}"}
{"scope": "simple", "query": "What is the air quality index in London 2022/08/16?", "query_for_retrieval": "What is the air quality index in London 2022/08/16?", "answer": "air_quality", "answer_params": "", "api_description": "def air_quality:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the air quality index for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the air quality index for.\n\t- date : string = None (required) The date you want to get the air quality index for. Default is today.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"air_quality\", \"description\": \"Retrieve the air quality index for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the air quality index for.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date you want to get the air quality index for. Default is today.\"}}, \"required\": [\"location\", \"date\"]}}"}
{"scope": "relevance", "query": "What's the mass of an electron?", "query_for_retrieval": "What's the mass of an electron?", "answer": "calculate_current", "answer_params": "", "api_description": "def calculate_current:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric current by giving the voltage and resistance.\n\t\n\tArguments:\n\t---------\n\t- voltage : float = None (required) The electric voltage in volts.\n\t- resistance : float = None (required) The electrical resistance in ohms.\n\t- frequency : float = None (optional) The frequency of the current, default is 50Hz.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_current\", \"description\": \"Calculate the electric current by giving the voltage and resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"voltage\": {\"type\": \"float\", \"description\": \"The electric voltage in volts.\"}, \"resistance\": {\"type\": \"float\", \"description\": \"The electrical resistance in ohms.\"}, \"frequency\": {\"type\": \"float\", \"description\": \"The frequency of the current, default is 50Hz.\"}}, \"required\": [\"voltage\", \"resistance\"]}}"}
{"scope": "relevance", "query": "Find the volume of a cone with base radius 3 cm and height 5 cm.", "query_for_retrieval": "Find the volume of a cone with base radius 3 cm and height 5 cm.", "answer": "investment_calculator.calculate_return", "answer_params": "", "api_description": "def investment_calculator.calculate_return:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return of an investment after a specific duration.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : float = None (required) The initial investment amount.\n\t- annual_rate : float = None (required) The annual rate of return.\n\t- years : integer = None (required) The duration of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment_calculator.calculate_return\", \"description\": \"Calculate the return of an investment after a specific duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"float\", \"description\": \"The initial investment amount.\"}, \"annual_rate\": {\"type\": \"float\", \"description\": \"The annual rate of return.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The duration of the investment in years.\"}}, \"required\": [\"initial_investment\", \"annual_rate\", \"years\"]}}"}
{"scope": "relevance", "query": "Retrieve the average house price in california", "query_for_retrieval": "Retrieve the average house price in california", "answer": "regression_model.predict", "answer_params": "", "api_description": "def regression_model.predict:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the target variable based on input features using a trained regression model.\n\t\n\tArguments:\n\t---------\n\t- features : array = None (required) Input features to make predictions with.\n\t- model : dict = None (required) Trained regression model object.\n\t- scaler : float = 1.2 (optional) Fitted Scaler object for input features scaling.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"regression_model.predict\", \"description\": \"Predict the target variable based on input features using a trained regression model.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"features\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Input features to make predictions with.\"}, \"model\": {\"type\": \"dict\", \"description\": \"Trained regression model object.\"}, \"scaler\": {\"type\": \"float\", \"description\": \"Fitted Scaler object for input features scaling.\", \"default\": \"1.2\"}}, \"required\": [\"features\", \"model\"]}}"}
{"scope": "multiple_function", "query": "Play a song in C Major key at tempo 120 bpm.", "query_for_retrieval": "Play a song in C Major key at tempo 120 bpm.", "answer": "music.generate", "answer_params": "", "api_description": "def music.generate:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a piece of music given a key, tempo, and time signature.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key of the piece, e.g., C Major.\n\t- tempo : integer = None (required) Tempo of the piece in beats per minute.\n\t- time_signature : string = None (optional) Time signature of the piece, e.g., 4/4. Default '4/4'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music.generate\", \"description\": \"Generate a piece of music given a key, tempo, and time signature.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key of the piece, e.g., C Major.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"Tempo of the piece in beats per minute.\"}, \"time_signature\": {\"type\": \"string\", \"description\": \"Time signature of the piece, e.g., 4/4. Default '4/4'\", \"optional\": true}}, \"required\": [\"key\", \"tempo\"]}}"}
{"scope": "parallel_function", "query": "Play songs from the artists Taylor Swift and Maroon 5, with a play time of 20 minutes and 15 minutes respectively, on Spotify.", "query_for_retrieval": "Play songs from the artists Taylor Swift and Maroon 5, with a play time of 20 minutes and 15 minutes respectively, on Spotify.", "answer": "spotify.play", "answer_params": "", "api_description": "def spotify.play:\n\t\"\"\"\n\tDescription:\n\t\n\tPlay specific tracks from a given artist for a specific time duration.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) The artist whose songs you want to play.\n\t- duration : integer = None (required) The duration for which the songs should be played, in minutes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"spotify.play\", \"description\": \"Play specific tracks from a given artist for a specific time duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"The artist whose songs you want to play.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration for which the songs should be played, in minutes.\"}}, \"required\": [\"artist\", \"duration\"]}}"}
{"scope": "multiple_function", "query": "I want to order a custom bronze sculpture of a horse. What material options are available?", "query_for_retrieval": "I want to order a custom bronze sculpture of a horse. What material options are available?", "answer": "painting.create_custom", "answer_params": "", "api_description": "def painting.create_custom:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder a custom painting with your preferred color.\n\t\n\tArguments:\n\t---------\n\t- subject : string = None (required) The subject of the painting, e.g. horse\n\t- color : string = None (required) Preferred main color for the painting.\n\t- size : integer = None (optional) The desired size for the painting in inches. This parameter is optional. Default 12\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"painting.create_custom\", \"description\": \"Order a custom painting with your preferred color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"subject\": {\"type\": \"string\", \"description\": \"The subject of the painting, e.g. horse\"}, \"color\": {\"type\": \"string\", \"enum\": [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Black\"], \"description\": \"Preferred main color for the painting.\"}, \"size\": {\"type\": \"integer\", \"description\": \"The desired size for the painting in inches. This parameter is optional. Default 12\"}}, \"required\": [\"subject\", \"color\"]}}"}
{"scope": "simple", "query": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "query_for_retrieval": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "answer": "hotel_booking", "answer_params": "", "api_description": "def hotel_booking:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a hotel room given the location, room type, stay duration and any additional preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to book the hotel.\n\t- room_type : string = None (required) Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n\t- duration : integer = None (required) The number of nights you want to book the hotel for.\n\t- start_date : string = None (required) The date when your stay begins.\n\t- preferences : array = None (optional) Optional preferences of stay at the hotel. Default to use all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking\", \"description\": \"Books a hotel room given the location, room type, stay duration and any additional preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to book the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"Type of the room required. Options: 'single', 'double', 'deluxe', etc.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The number of nights you want to book the hotel for.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The date when your stay begins.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"pet_friendly\", \"gym\", \"swimming_pool\", \"free_breakfast\", \"parking\"]}, \"description\": \"Optional preferences of stay at the hotel. Default to use all if not specified.\"}}, \"required\": [\"location\", \"room_type\", \"duration\", \"start_date\"]}}"}
{"scope": "java", "query": "How do I parse the HTTP response body from an entity `httpResponseEntity` using a specific parser function `responseParser` that handles the content, with a parser configuration `defaultParserConfig` in an Elasticsearch multi-cluster search test?", "query_for_retrieval": "How do I parse the HTTP response body from an entity `httpResponseEntity` using a specific parser function `responseParser` that handles the content, with a parser configuration `defaultParserConfig` in an Elasticsearch multi-cluster search test?", "answer": "CCSDuelIT.parseEntity", "answer_params": "", "api_description": "def CCSDuelIT.parseEntity:\n\t\"\"\"\n\tDescription:\n\t\n\tParses an HttpEntity using the provided entity parser function and parser configuration, and returns the parsed response of type Resp.\n\t\n\tArguments:\n\t---------\n\t- entity : any = None (required) The HttpEntity to parse.\n\t- entityParser : any = None (required) The function that will parse the XContentParser into the desired response type.\n\t- parserConfig : any = None (required) The configuration for the XContentParser.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CCSDuelIT.parseEntity\", \"description\": \"Parses an HttpEntity using the provided entity parser function and parser configuration, and returns the parsed response of type Resp.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"entity\": {\"type\": \"any\", \"description\": \"The HttpEntity to parse.\"}, \"entityParser\": {\"type\": \"any\", \"description\": \"The function that will parse the XContentParser into the desired response type.\"}, \"parserConfig\": {\"type\": \"any\", \"description\": \"The configuration for the XContentParser.\"}}, \"required\": [\"entity\", \"entityParser\", \"parserConfig\"]}}"}
{"scope": "parallel_function", "query": "\"Imagine you are conducting an experiment with two different objects. The first object is accelerated at a rate of 5 m/s^2 and travels a distance of 100 meters. The second object is accelerated at a rate of 10 m/s^2 and travels a distance of 200 meters. Both objects start from rest. Can you calculate the final velocity of each object using the kinematics.final_velocity_from_distance function?\"", "query_for_retrieval": "\"Imagine you are conducting an experiment with two different objects. The first object is accelerated at a rate of 5 m/s^2 and travels a distance of 100 meters. The second object is accelerated at a rate of 10 m/s^2 and travels a distance of 200 meters. Both objects start from rest. Can you calculate the final velocity of each object using the kinematics.final_velocity_from_distance function?\"", "answer": "kinematics.final_velocity_from_distance", "answer_params": "", "api_description": "def kinematics.final_velocity_from_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\n\t\n\tArguments:\n\t---------\n\t- acceleration : integer = None (required) Acceleration of the object, m/s^2.\n\t- distance : integer = None (required) Distance traveled by the object, m.\n\t- initial_velocity : integer = None (optional) Initial velocity of the object. Default is 0, m/s\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.final_velocity_from_distance\", \"description\": \"Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"acceleration\": {\"type\": \"integer\", \"description\": \"Acceleration of the object, m/s^2.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"Distance traveled by the object, m.\"}, \"initial_velocity\": {\"type\": \"integer\", \"description\": \"Initial velocity of the object. Default is 0, m/s\"}}, \"required\": [\"acceleration\", \"distance\"]}}"}
{"scope": "simple", "query": "Find three personality traits of people who like jogging.", "query_for_retrieval": "Find three personality traits of people who like jogging.", "answer": "get_personality_traits", "answer_params": "", "api_description": "def get_personality_traits:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the common personality traits of people based on their hobbies or activities.\n\t\n\tArguments:\n\t---------\n\t- hobby : string = None (required) The hobby or activity of interest.\n\t- trait_count : integer = None (optional) The number of top traits to return, default is 5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_personality_traits\", \"description\": \"Retrieve the common personality traits of people based on their hobbies or activities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hobby\": {\"type\": \"string\", \"description\": \"The hobby or activity of interest.\"}, \"trait_count\": {\"type\": \"integer\", \"description\": \"The number of top traits to return, default is 5\"}}, \"required\": [\"hobby\"]}}"}
{"scope": "parallel_function", "query": "\"An experiment was conducted where two objects were dropped from different heights without air resistance. The first object had an initial velocity of 0 m/s and was dropped from a height of 10 meters. The second object had an initial velocity of 5 m/s and was dropped from a height of 20 meters. Assuming the gravitational acceleration to be 9.8 m/s^2, can you calculate the final speed of both objects?\"", "query_for_retrieval": "\"An experiment was conducted where two objects were dropped from different heights without air resistance. The first object had an initial velocity of 0 m/s and was dropped from a height of 10 meters. The second object had an initial velocity of 5 m/s and was dropped from a height of 20 meters. Assuming the gravitational acceleration to be 9.8 m/s^2, can you calculate the final speed of both objects?\"", "answer": "calculate_final_speed", "answer_params": "", "api_description": "def calculate_final_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final speed of an object dropped from a certain height without air resistance.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object.\n\t- height : integer = None (required) The height from which the object is dropped.\n\t- gravity : float = None (optional) The gravitational acceleration. Default is 9.8 m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_speed\", \"description\": \"Calculate the final speed of an object dropped from a certain height without air resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height from which the object is dropped.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The gravitational acceleration. Default is 9.8 m/s^2.\"}}, \"required\": [\"initial_velocity\", \"height\"]}}"}
{"scope": "parallel_function", "query": "\"Imagine you have two different investment opportunities. The first one has a present value of $5000, an annual interest rate of 5%, and you plan to hold it for 10 years. The second one has a present value of $7000, an annual interest rate of 4%, and you plan to hold it for 15 years. Both investments compound interest annually. Can you calculate the future value of both investments using the finance.predict_future_value function?\"", "query_for_retrieval": "\"Imagine you have two different investment opportunities. The first one has a present value of $5000, an annual interest rate of 5%, and you plan to hold it for 10 years. The second one has a present value of $7000, an annual interest rate of 4%, and you plan to hold it for 15 years. Both investments compound interest annually. Can you calculate the future value of both investments using the finance.predict_future_value function?\"", "answer": "finance.predict_future_value", "answer_params": "", "api_description": "def finance.predict_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\n\t\n\tArguments:\n\t---------\n\t- present_value : integer = None (required) The present value of the investment.\n\t- annual_interest_rate : float = None (required) The annual interest rate of the investment.\n\t- compounding_periods_per_year : integer = None (optional) The number of times that interest is compounded per year. Default is 1 (annually).\n\t- time_years : integer = None (required) The investment horizon in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.predict_future_value\", \"description\": \"Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"integer\", \"description\": \"The present value of the investment.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate of the investment.\"}, \"compounding_periods_per_year\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per year. Default is 1 (annually).\"}, \"time_years\": {\"type\": \"integer\", \"description\": \"The investment horizon in years.\"}}, \"required\": [\"present_value\", \"annual_interest_rate\", \"time_years\"]}}"}
{"scope": "sql", "query": "Can you generate a new table in the database called 'Employees' with the fields 'EmployeeID', 'FirstName', 'LastName', 'Position', and 'Salary'?", "query_for_retrieval": "Can you generate a new table in the database called 'Employees' with the fields 'EmployeeID', 'FirstName', 'LastName', 'Position', and 'Salary'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Search for upcoming month rock concerts in New York.", "query_for_retrieval": "Search for upcoming month rock concerts in New York.", "answer": "event_finder.find_upcoming", "answer_params": "", "api_description": "def event_finder.find_upcoming:\n\t\"\"\"\n\tDescription:\n\t\n\tFind upcoming events of a specific genre in a given location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state where the search will take place, e.g. New York, NY.\n\t- genre : string = None (required) The genre of events.\n\t- days_ahead : integer = 7 (optional) The number of days from now to include in the search.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"event_finder.find_upcoming\", \"description\": \"Find upcoming events of a specific genre in a given location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state where the search will take place, e.g. New York, NY.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of events.\"}, \"days_ahead\": {\"type\": \"integer\", \"description\": \"The number of days from now to include in the search.\", \"default\": 7}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "parallel_function", "query": "\"In a physics experiment, you are given two charges. The first charge is 5 coulombs and is placed at a distance of 2 meters from the point where the electric field is being measured. The second charge is 3 coulombs and is placed at a distance of 4 meters from the same point. The experiment is conducted in a vacuum. Can you calculate the electric field produced by each charge at the point of measurement by invoking the 'calculate_electric_field' function?\"", "query_for_retrieval": "\"In a physics experiment, you are given two charges. The first charge is 5 coulombs and is placed at a distance of 2 meters from the point where the electric field is being measured. The second charge is 3 coulombs and is placed at a distance of 4 meters from the same point. The experiment is conducted in a vacuum. Can you calculate the electric field produced by each charge at the point of measurement by invoking the 'calculate_electric_field' function?\"", "answer": "calculate_electric_field", "answer_params": "", "api_description": "def calculate_electric_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field produced by a charge at a certain distance.\n\t\n\tArguments:\n\t---------\n\t- charge : integer = None (required) Charge in coulombs producing the electric field.\n\t- distance : integer = None (required) Distance from the charge in meters where the field is being measured.\n\t- permitivity : integer = None (optional) Permitivity of the space where field is being calculated, default is for vacuum.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_field\", \"description\": \"Calculate the electric field produced by a charge at a certain distance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"integer\", \"description\": \"Charge in coulombs producing the electric field.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"Distance from the charge in meters where the field is being measured.\"}, \"permitivity\": {\"type\": \"integer\", \"description\": \"Permitivity of the space where field is being calculated, default is for vacuum.\"}}, \"required\": [\"charge\", \"distance\"]}}"}
{"scope": "simple", "query": "Who discovered Gravity and what was the method used?", "query_for_retrieval": "Who discovered Gravity and what was the method used?", "answer": "science_history.get_discovery_details", "answer_params": "", "api_description": "def science_history.get_discovery_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of a scientific discovery based on the discovery name.\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The name of the discovery, e.g. Gravity\n\t- method_used : string = None (optional) The method used for the discovery, default value is 'default' which gives the most accepted method.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"science_history.get_discovery_details\", \"description\": \"Retrieve the details of a scientific discovery based on the discovery name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The name of the discovery, e.g. Gravity\"}, \"method_used\": {\"type\": \"string\", \"description\": \"The method used for the discovery, default value is 'default' which gives the most accepted method.\"}}, \"required\": [\"discovery\"]}}"}
{"scope": "simple", "query": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "query_for_retrieval": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "answer": "calculate_paint_needed", "answer_params": "", "api_description": "def calculate_paint_needed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.\n\t\n\tArguments:\n\t---------\n\t- coverage_rate : integer = None (required) The area in square feet that one gallon of paint can cover.\n\t- length : integer = None (required) Length of the wall to be painted in feet.\n\t- height : integer = None (required) Height of the wall to be painted in feet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_paint_needed\", \"description\": \"Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coverage_rate\": {\"type\": \"integer\", \"description\": \"The area in square feet that one gallon of paint can cover.\"}, \"length\": {\"type\": \"integer\", \"description\": \"Length of the wall to be painted in feet.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the wall to be painted in feet.\"}}, \"required\": [\"coverage_rate\", \"length\", \"height\"]}}"}
{"scope": "javascript", "query": "How can I replace the current text in an editor with 'Hello, World!' starting from position 5 and covering the next 7 characters?", "query_for_retrieval": "How can I replace the current text in an editor with 'Hello, World!' starting from position 5 and covering the next 7 characters?", "answer": "setText", "answer_params": "", "api_description": "def setText:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function sets new text in an editor, starting from a specified position for a given length. If the length is not specified, it replaces text till the end.\n\t\n\tArguments:\n\t---------\n\t- newText : String = None (required) The new text to set.\n\t- start : float = None (required) The starting position for the new text.\n\t- length : float = None (optional) The length of text to replace. Optional parameter. Default 0.0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"setText\", \"description\": \"This function sets new text in an editor, starting from a specified position for a given length. If the length is not specified, it replaces text till the end.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"newText\": {\"type\": \"String\", \"description\": \"The new text to set.\"}, \"start\": {\"type\": \"float\", \"description\": \"The starting position for the new text.\"}, \"length\": {\"type\": \"float\", \"description\": \"The length of text to replace. Optional parameter. Default 0.0\"}}, \"required\": [\"newText\", \"start\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to calculate the least common multiples for a set of number pairs for a small programming project I'm working on. Could you determine the LCMs for the following pairs: 35 and 45, 72 and 108, 120 and 180, and also for 200 and 300? These calculations will help me optimize a part of my code related to scheduling tasks.", "query_for_retrieval": "I need to calculate the least common multiples for a set of number pairs for a small programming project I'm working on. Could you determine the LCMs for the following pairs: 35 and 45, 72 and 108, 120 and 180, and also for 200 and 300? These calculations will help me optimize a part of my code related to scheduling tasks.", "answer": "math_lcm", "answer_params": "", "api_description": "def math_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the least common multiple of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_lcm\", \"description\": \"Calculates the least common multiple of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project where I need to design several circular components of different sizes. For the manufacturing specifications, I need to know the exact areas of these circles. Could you calculate the areas for circles with radii of 5 units, 10 units, 15 units, and 20 units, respectively? These calculations will help me estimate the material costs for each component.", "query_for_retrieval": "I'm working on a project where I need to design several circular components of different sizes. For the manufacturing specifications, I need to know the exact areas of these circles. Could you calculate the areas for circles with radii of 5 units, 10 units, 15 units, and 20 units, respectively? These calculations will help me estimate the material costs for each component.", "answer": "geometry_area_circle", "answer_params": "", "api_description": "def geometry_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a circle.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle, in feet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry_area_circle\", \"description\": \"Calculates the area of a circle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle, in feet.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "multiple_function", "query": "Who was the founder of Buddhism and where was it originated?", "query_for_retrieval": "Who was the founder of Buddhism and where was it originated?", "answer": "religion.get_core_beliefs", "answer_params": "", "api_description": "def religion.get_core_beliefs:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the core beliefs and practices of a specified religion.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) Name of the religion for which to retrieve the core beliefs and practices.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion.get_core_beliefs\", \"description\": \"Retrieves the core beliefs and practices of a specified religion.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"Name of the religion for which to retrieve the core beliefs and practices.\"}}, \"required\": [\"religion\"]}}"}
{"scope": "simple", "query": "Find out the open hours for the Louvre Museum in Paris.", "query_for_retrieval": "Find out the open hours for the Louvre Museum in Paris.", "answer": "museum.get_hours", "answer_params": "", "api_description": "def museum.get_hours:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the open hours for a museum based on its name and location.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the museum.\n\t- location : string = None (required) The city where the museum is located.\n\t- day : string = None (optional) Optional: Day of the week for specific open hours. Default 'Monday'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum.get_hours\", \"description\": \"Retrieve the open hours for a museum based on its name and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city where the museum is located.\"}, \"day\": {\"type\": \"string\", \"description\": \"Optional: Day of the week for specific open hours. Default 'Monday'.\"}}, \"required\": [\"name\", \"location\"]}}"}
{"scope": "simple", "query": "Who discovered the neutron? Give me detail information.", "query_for_retrieval": "Who discovered the neutron? Give me detail information.", "answer": "get_discoverer", "answer_params": "", "api_description": "def get_discoverer:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the person or team who made a particular scientific discovery\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The discovery for which the discoverer's information is needed.\n\t- detail : boolean = None (required) Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_discoverer\", \"description\": \"Get the person or team who made a particular scientific discovery\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The discovery for which the discoverer's information is needed.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\"}}, \"required\": [\"discovery\", \"detail\"]}}"}
{"scope": "javascript", "query": "How can I update the label of a breaknode in my abstract syntax tree to 'loopEnd' if its current label is not already 'loopEnd'?", "query_for_retrieval": "How can I update the label of a breaknode in my abstract syntax tree to 'loopEnd' if its current label is not already 'loopEnd'?", "answer": "updateBreak", "answer_params": "", "api_description": "def updateBreak:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function updates the label of a break node within an abstract syntax tree. If the current label of the node does not match the provided label, it creates a new break node with the specified label and updates the original node.\n\t\n\tArguments:\n\t---------\n\t- node : any = None (required) The break node to be updated.\n\t- label : String = None (required) The new label to assign to the break node.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"updateBreak\", \"description\": \"This function updates the label of a break node within an abstract syntax tree. If the current label of the node does not match the provided label, it creates a new break node with the specified label and updates the original node.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"node\": {\"type\": \"any\", \"description\": \"The break node to be updated.\"}, \"label\": {\"type\": \"String\", \"description\": \"The new label to assign to the break node.\"}}, \"required\": [\"node\", \"label\"]}}"}
{"scope": "java", "query": "How do I copy an NIO resource to a new path '/backup/data.txt' on the filesystem, ensuring that the copy operation overwrites any existing file at the destination, and track the progress using a progress monitor `progressTracker`?", "query_for_retrieval": "How do I copy an NIO resource to a new path '/backup/data.txt' on the filesystem, ensuring that the copy operation overwrites any existing file at the destination, and track the progress using a progress monitor `progressTracker`?", "answer": "EFSNIOResource.copy", "answer_params": "", "api_description": "def EFSNIOResource.copy:\n\t\"\"\"\n\tDescription:\n\t\n\tCopies the NIO resource to the specified destination path on the filesystem, with an option to force overwrite and a monitor to track progress.\n\t\n\tArguments:\n\t---------\n\t- destination : any = None (required) The destination path object where the resource should be copied to. Defined as a Path object that has constructor taking one path parameter\n\t- force : boolean = None (required) If true, the copy operation will overwrite existing files at the destination.\n\t- monitor : any = None (required) A progress monitor to track the copy operation progress.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"EFSNIOResource.copy\", \"description\": \"Copies the NIO resource to the specified destination path on the filesystem, with an option to force overwrite and a monitor to track progress.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"destination\": {\"type\": \"any\", \"description\": \"The destination path object where the resource should be copied to. Defined as a Path object that has constructor taking one path parameter\"}, \"force\": {\"type\": \"boolean\", \"description\": \"If true, the copy operation will overwrite existing files at the destination.\"}, \"monitor\": {\"type\": \"any\", \"description\": \"A progress monitor to track the copy operation progress.\"}}, \"required\": [\"destination\", \"force\", \"monitor\"]}}"}
{"scope": "rest", "query": "Can you show me how to convert the address lat of 39.4224764 and lon of -112.0842499 into geographic coordinates using my API key 'YOUR-GEOCODE-API-KEY', specifically requesting the response in the 'geojson' format?", "query_for_retrieval": "Can you show me how to convert the address lat of 39.4224764 and lon of -112.0842499 into geographic coordinates using my API key 'YOUR-GEOCODE-API-KEY', specifically requesting the response in the 'geojson' format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/reverse (required) Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the location to reverse geocode.\n\t  - lon : float = None (required) Longitude of the location to reverse geocode.\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\", \"default\": \"https://geocode.maps.co/reverse\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the location to reverse geocode.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the location to reverse geocode.\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "Get the soccer scores for Real Madrid games in La Liga for the last 5 rounds.", "query_for_retrieval": "Get the soccer scores for Real Madrid games in La Liga for the last 5 rounds.", "answer": "basketball_scores.get_scores", "answer_params": "", "api_description": "def basketball_scores.get_scores:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve basketball scores for a specific team and league within a certain range of rounds.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The basketball team whose scores are to be retrieved.\n\t- league : string = None (required) The league in which the team competes.\n\t- rounds : integer = None (required) Number of past rounds for which to retrieve the scores.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"basketball_scores.get_scores\", \"description\": \"Retrieve basketball scores for a specific team and league within a certain range of rounds.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The basketball team whose scores are to be retrieved.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league in which the team competes.\"}, \"rounds\": {\"type\": \"integer\", \"description\": \"Number of past rounds for which to retrieve the scores.\"}}, \"required\": [\"team\", \"league\", \"rounds\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a teacher preparing for a science and art themed day at school. You have planned a series of activities for your students. First, you want to divide your class of 30 students into smaller groups for a group dynamics activity. You know that 15 of your students are extroverts and 15 are introverts. Can you analyze the social dynamics and interactions within these groups based on these personality traits and group size? \n\nNext, you plan an art activity where students will mix two primary paint colors. You have chosen blue and yellow for this activity. Can you predict the resulting color if the lightness level is adjusted to 70%? \n\nThen, you plan a cooking activity where students will convert cooking measurements. You have a recipe that calls for 2 cups of flour, but your measuring cup is in milliliters. Can you convert this measurement from cups to milliliters for flour? \n\nFinally, you plan a physics experiment where students will calculate the electric field strength at a certain distance from a point charge. You have a charge of 0.000001 Coulombs and want to calculate the electric field strength 0.02 meters away from the charge in a vacuum. Can you calculate this for me?\"", "query_for_retrieval": "\"Imagine you are a teacher preparing for a science and art themed day at school. You have planned a series of activities for your students. First, you want to divide your class of 30 students into smaller groups for a group dynamics activity. You know that 15 of your students are extroverts and 15 are introverts. Can you analyze the social dynamics and interactions within these groups based on these personality traits and group size? \n\nNext, you plan an art activity where students will mix two primary paint colors. You have chosen blue and yellow for this activity. Can you predict the resulting color if the lightness level is adjusted to 70%? \n\nThen, you plan a cooking activity where students will convert cooking measurements. You have a recipe that calls for 2 cups of flour, but your measuring cup is in milliliters. Can you convert this measurement from cups to milliliters for flour? \n\nFinally, you plan a physics experiment where students will calculate the electric field strength at a certain distance from a point charge. You have a charge of 0.000001 Coulombs and want to calculate the electric field strength 0.02 meters away from the charge in a vacuum. Can you calculate this for me?\"", "answer": "calculate_electric_field_strength", "answer_params": "", "api_description": "def calculate_electric_field_strength:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field strength at a certain distance from a point charge.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge in Coulombs.\n\t- distance : float = None (required) The distance from the charge in meters.\n\t- medium : string = None (optional) The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_field_strength\", \"description\": \"Calculate the electric field strength at a certain distance from a point charge.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge in Coulombs.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance from the charge in meters.\"}, \"medium\": {\"type\": \"string\", \"description\": \"The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\"}}, \"required\": [\"charge\", \"distance\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the speed of a car that traveled a distance of 500 meters in 25 seconds and provide the answer in km/h? Also, can you calculate the speed of a bicycle that traveled a distance of 1000 meters in 200 seconds and provide the answer in m/s? Lastly, can you calculate the speed of a train that traveled a distance of 10000 meters in 600 seconds and provide the answer in km/h?\"", "query_for_retrieval": "\"Can you calculate the speed of a car that traveled a distance of 500 meters in 25 seconds and provide the answer in km/h? Also, can you calculate the speed of a bicycle that traveled a distance of 1000 meters in 200 seconds and provide the answer in m/s? Lastly, can you calculate the speed of a train that traveled a distance of 10000 meters in 600 seconds and provide the answer in km/h?\"", "answer": "calculate_speed", "answer_params": "", "api_description": "def calculate_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the speed of an object based on the distance travelled and the time taken.\n\t\n\tArguments:\n\t---------\n\t- distance : integer = None (required) The distance the object travelled in meters.\n\t- time : integer = None (required) The time it took for the object to travel in seconds.\n\t- to_unit : string = None (optional) The unit in which the speed should be calculated, default is m/s.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_speed\", \"description\": \"Calculate the speed of an object based on the distance travelled and the time taken.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"integer\", \"description\": \"The distance the object travelled in meters.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time it took for the object to travel in seconds.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit in which the speed should be calculated, default is m/s.\"}}, \"required\": [\"distance\", \"time\"]}}"}
{"scope": "simple", "query": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy.", "query_for_retrieval": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy.", "answer": "sculpture_locator.find_by_artist", "answer_params": "", "api_description": "def sculpture_locator.find_by_artist:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the sculptures of specific artist by material and location\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) Name of the Artist of the sculpture\n\t- material : string = None (required) Material of the sculpture.\n\t- location : string = None (optional) The location where you want to find the sculpture. Default is 'all' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture_locator.find_by_artist\", \"description\": \"Locate the sculptures of specific artist by material and location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"Name of the Artist of the sculpture\"}, \"material\": {\"type\": \"string\", \"description\": \"Material of the sculpture.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where you want to find the sculpture. Default is 'all' if not specified.\"}}, \"required\": [\"artist\", \"material\"]}}"}
{"scope": "parallel_multiple_function", "query": "I want a homemade healthy spaghetti recipe that is gluten free, how long will it take to prepare and cook, and what nutritional information could it provide me.", "query_for_retrieval": "I want a homemade healthy spaghetti recipe that is gluten free, how long will it take to prepare and cook, and what nutritional information could it provide me.", "answer": "recipe_prep_time", "answer_params": "", "api_description": "def recipe_prep_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the estimated preparation and cooking time for a specified recipe.\n\t\n\tArguments:\n\t---------\n\t- recipe : string = None (required) Name of the recipe to calculate time for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_prep_time\", \"description\": \"Calculate the estimated preparation and cooking time for a specified recipe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"recipe\": {\"type\": \"string\", \"description\": \"Name of the recipe to calculate time for.\"}}, \"required\": [\"recipe\"]}}"}
{"scope": "java", "query": "How can I retrieve the encoding information for UTF-8 in a Java application, allowing the use of Java encoding names?", "query_for_retrieval": "How can I retrieve the encoding information for UTF-8 in a Java application, allowing the use of Java encoding names?", "answer": "Encodings.getEncodingInfo", "answer_params": "", "api_description": "def Encodings.getEncodingInfo:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the encoding information for a given encoding name, optionally allowing Java encoding names if the standard IANA name is not found.\n\t\n\tArguments:\n\t---------\n\t- encoding : String = None (required) The IANA or Java encoding name.\n\t- allowJavaNames : boolean = None (required) Flag to determine if Java encoding names are allowed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Encodings.getEncodingInfo\", \"description\": \"Retrieves the encoding information for a given encoding name, optionally allowing Java encoding names if the standard IANA name is not found.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"encoding\": {\"type\": \"String\", \"description\": \"The IANA or Java encoding name.\"}, \"allowJavaNames\": {\"type\": \"boolean\", \"description\": \"Flag to determine if Java encoding names are allowed.\"}}, \"required\": [\"encoding\", \"allowJavaNames\"]}}"}
{"scope": "simple", "query": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "query_for_retrieval": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "answer": "gamespot.getAverageUserScore", "answer_params": "", "api_description": "def gamespot.getAverageUserScore:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the average user score of a game from GameSpot.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) The name of the game.\n\t- platform : string = all platforms (required) The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"gamespot.getAverageUserScore\", \"description\": \"Retrieve the average user score of a game from GameSpot.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)\", \"default\": \"all platforms\"}}, \"required\": [\"game_name\", \"platform\"]}}"}
{"scope": "simple", "query": "Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals.", "query_for_retrieval": "Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals.", "answer": "calculate_batting_average", "answer_params": "", "api_description": "def calculate_batting_average:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the batting average for a baseball player based on their number of hits and at-bats.\n\t\n\tArguments:\n\t---------\n\t- hits : integer = None (required) The number of hits.\n\t- at_bats : integer = None (required) The number of at-bats.\n\t- decimal_places : integer = None (optional) The number of decimal places to return in the batting average. Default is 3.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_batting_average\", \"description\": \"Calculate the batting average for a baseball player based on their number of hits and at-bats.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hits\": {\"type\": \"integer\", \"description\": \"The number of hits.\"}, \"at_bats\": {\"type\": \"integer\", \"description\": \"The number of at-bats.\"}, \"decimal_places\": {\"type\": \"integer\", \"description\": \"The number of decimal places to return in the batting average. Default is 3.\"}}, \"required\": [\"hits\", \"at_bats\"]}}"}
{"scope": "simple", "query": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "query_for_retrieval": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "answer": "calculate_return_on_equity", "answer_params": "", "api_description": "def calculate_return_on_equity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\n\t\n\tArguments:\n\t---------\n\t- net_income : integer = None (required) The company's net income.\n\t- shareholder_equity : integer = None (required) The company's total shareholder's equity.\n\t- dividends_paid : integer = None (optional) The total dividends paid by the company. Optional. If not given, default to 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_return_on_equity\", \"description\": \"Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"net_income\": {\"type\": \"integer\", \"description\": \"The company's net income.\"}, \"shareholder_equity\": {\"type\": \"integer\", \"description\": \"The company's total shareholder's equity.\"}, \"dividends_paid\": {\"type\": \"integer\", \"description\": \"The total dividends paid by the company. Optional. If not given, default to 0.\"}}, \"required\": [\"net_income\", \"shareholder_equity\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project that involves some heavy matrix calculations, and I need to multiply several pairs of matrices to analyze the data. I've got four different sets of matrices to multiply. \n\nFirst off, I need to multiply these two matrices: \n1. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  and [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\nNext, I have another pair that needs to be multiplied:\n2. [[19, 20], [21, 22]]\n  and [[23, 24], [25, 26]]\n\nThe third set of matrices is:\n3. [[27, 28, 29, 30], [31, 32, 33, 34]]\n and [[35, 36, 37, 38], [39, 40, 41, 42]]\n\nFinally, the last set I need to calculate is:\n4.[[43, 44], [45, 46]]\n  and [[47, 48], [49, 50]]\n\nCould you carry out these matrix multiplications for me?", "query_for_retrieval": "I'm working on a project that involves some heavy matrix calculations, and I need to multiply several pairs of matrices to analyze the data. I've got four different sets of matrices to multiply. \n\nFirst off, I need to multiply these two matrices: \n1. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  and [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\nNext, I have another pair that needs to be multiplied:\n2. [[19, 20], [21, 22]]\n  and [[23, 24], [25, 26]]\n\nThe third set of matrices is:\n3. [[27, 28, 29, 30], [31, 32, 33, 34]]\n and [[35, 36, 37, 38], [39, 40, 41, 42]]\n\nFinally, the last set I need to calculate is:\n4.[[43, 44], [45, 46]]\n  and [[47, 48], [49, 50]]\n\nCould you carry out these matrix multiplications for me?", "answer": "mat_mul", "answer_params": "", "api_description": "def mat_mul:\n\t\"\"\"\n\tDescription:\n\t\n\tMultiplies two matrices.\n\t\n\tArguments:\n\t---------\n\t- matA : array = None (required) The first matrix.\n\t- matB : array = None (required) The second matrix.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mat_mul\", \"description\": \"Multiplies two matrices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"matA\": {\"type\": \"array\", \"description\": \"The first matrix.\", \"items\": {\"type\": \"integer\"}}, \"matB\": {\"type\": \"array\", \"description\": \"The second matrix.\", \"items\": {\"type\": \"integer\"}}}, \"required\": [\"matA\", \"matB\"]}}"}
{"scope": "parallel_function", "query": "Calculate return on investment for an initial investment of $2000 with a gain of $500. Do the same calculation for an initial investment of $5000 with a loss of $1000.", "query_for_retrieval": "Calculate return on investment for an initial investment of $2000 with a gain of $500. Do the same calculation for an initial investment of $5000 with a loss of $1000.", "answer": "calculate_return_on_investment", "answer_params": "", "api_description": "def calculate_return_on_investment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on investment given an initial investment and a gain or loss.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial amount of money invested.\n\t- gain_loss : integer = None (required) The amount gained or lost. If lose, provide as negative value.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_return_on_investment\", \"description\": \"Calculate the return on investment given an initial investment and a gain or loss.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial amount of money invested.\"}, \"gain_loss\": {\"type\": \"integer\", \"description\": \"The amount gained or lost. If lose, provide as negative value.\"}}, \"required\": [\"initial_investment\", \"gain_loss\"]}}"}
{"scope": "executable_simple", "query": "I'm tracking a storm system for my weather report, and I need to provide updates based on the local time where the storm is currently. The storm is right now at latitude 35.22 and longitude -80.75. Can you help me figure out the timezone for this location?", "query_for_retrieval": "I'm tracking a storm system for my weather report, and I need to provide updates based on the local time where the storm is currently. The storm is right now at latitude 35.22 and longitude -80.75. Can you help me figure out the timezone for this location?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "sql", "query": "Can you remove the record from the \"Genes\" table where the \"GeneID\" is \"BRCA1\"?", "query_for_retrieval": "Can you remove the record from the \"Genes\" table where the \"GeneID\" is \"BRCA1\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_multiple_function", "query": "As a data analyst, I've been tracking the daily temperatures in a particular city over the last month. The temperatures I've logged range from 22 to 80 degrees Celsius, changing by 2 degrees each day. I need to calculate the average monthly temperature from this data set to understand the climate trend better. Can you help me with this?", "query_for_retrieval": "As a data analyst, I've been tracking the daily temperatures in a particular city over the last month. The temperatures I've logged range from 22 to 80 degrees Celsius, changing by 2 degrees each day. I need to calculate the average monthly temperature from this data set to understand the climate trend better. Can you help me with this?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "sql", "query": "Can you provide the names and atomic_masses of all elements in the 'ChemicalElements' database where the number of protons is greater than 50?", "query_for_retrieval": "Can you provide the names and atomic_masses of all elements in the 'ChemicalElements' database where the number of protons is greater than 50?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "query_for_retrieval": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "answer": "calc_heat_capacity", "answer_params": "", "api_description": "def calc_heat_capacity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the heat capacity at constant pressure of air using its temperature and volume.\n\t\n\tArguments:\n\t---------\n\t- temp : integer = None (required) The temperature of the gas in Kelvin.\n\t- volume : integer = None (required) The volume of the gas in m^3.\n\t- gas : string = None (optional) Type of gas, with air as default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_heat_capacity\", \"description\": \"Calculate the heat capacity at constant pressure of air using its temperature and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"temp\": {\"type\": \"integer\", \"description\": \"The temperature of the gas in Kelvin.\"}, \"volume\": {\"type\": \"integer\", \"description\": \"The volume of the gas in m^3.\"}, \"gas\": {\"type\": \"string\", \"description\": \"Type of gas, with air as default.\"}}, \"required\": [\"temp\", \"volume\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I came across the term \"Bitcoin\" and I'm really curious about what it means in slang. Can you look up its definition on Urban Dictionary for me? Also, I'm planning a trip and need to handle some finances. I have 1000 Chinese Yuan that I'd like to convert to both US dollars and Euros. And while we're at it, I'm working on a project and need to calculate the distance. Could you help me find out how far apart two points are if one is at (3,5) and the other is at (7,9)?", "query_for_retrieval": "I came across the term \"Bitcoin\" and I'm really curious about what it means in slang. Can you look up its definition on Urban Dictionary for me? Also, I'm planning a trip and need to handle some finances. I have 1000 Chinese Yuan that I'd like to convert to both US dollars and Euros. And while we're at it, I'm working on a project and need to calculate the distance. Could you help me find out how far apart two points are if one is at (3,5) and the other is at (7,9)?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "simple", "query": "Get the recipe for vegan chocolate cake including the steps for preparation.", "query_for_retrieval": "Get the recipe for vegan chocolate cake including the steps for preparation.", "answer": "get_recipe", "answer_params": "", "api_description": "def get_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the recipe for a specific dish along with preparation steps.\n\t\n\tArguments:\n\t---------\n\t- dish_name : string = None (required) Name of the dish whose recipe needs to be fetched.\n\t- diet_preference : string = none (optional) Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_recipe\", \"description\": \"Fetch the recipe for a specific dish along with preparation steps.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dish_name\": {\"type\": \"string\", \"description\": \"Name of the dish whose recipe needs to be fetched.\"}, \"diet_preference\": {\"type\": \"string\", \"description\": \"Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.\", \"default\": \"none\"}}, \"required\": [\"dish_name\"]}}"}
{"scope": "simple", "query": "Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.", "query_for_retrieval": "Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.", "answer": "get_collectables_in_season", "answer_params": "", "api_description": "def get_collectables_in_season:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a list of collectable items in a specific game during a specified season.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) Name of the game.\n\t- season : string = None (required) The season for which to retrieve the collectable items.\n\t- item_type : string = None (optional) The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_collectables_in_season\", \"description\": \"Retrieve a list of collectable items in a specific game during a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"Name of the game.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which to retrieve the collectable items.\"}, \"item_type\": {\"type\": \"string\", \"description\": \"The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\"}}, \"required\": [\"game_name\", \"season\"]}}"}
{"scope": "parallel_function", "query": "What are the annual carbon emissions produced by a gasoline vehicle, a diesel vehicle, and an electric vehicle if they each drive 15,000 miles per year, using the default emission factor for the gasoline vehicle, an emission factor of 2.7 for the diesel vehicle, and an emission factor of 0 for the electric vehicle?", "query_for_retrieval": "What are the annual carbon emissions produced by a gasoline vehicle, a diesel vehicle, and an electric vehicle if they each drive 15,000 miles per year, using the default emission factor for the gasoline vehicle, an emission factor of 2.7 for the diesel vehicle, and an emission factor of 0 for the electric vehicle?", "answer": "calculate_vehicle_emission", "answer_params": "", "api_description": "def calculate_vehicle_emission:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\n\t\n\tArguments:\n\t---------\n\t- vehicle_type : string = None (required) The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\n\t- miles_driven : integer = None (required) The number of miles driven per year.\n\t- emission_factor : float = None (optional) Optional emission factor to calculate emissions. Default factor is set for gas vehicles of 1.4\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_vehicle_emission\", \"description\": \"Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vehicle_type\": {\"type\": \"string\", \"description\": \"The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\"}, \"miles_driven\": {\"type\": \"integer\", \"description\": \"The number of miles driven per year.\"}, \"emission_factor\": {\"type\": \"float\", \"description\": \"Optional emission factor to calculate emissions. Default factor is set for gas vehicles of 1.4\"}}, \"required\": [\"vehicle_type\", \"miles_driven\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working on an architectural project where we're designing a new triangular-shaped park. We've finally settled on the dimensions, and we're planning for the base to be 500 meters long with a height of 300 meters. Could you calculate the area of this park for me?", "query_for_retrieval": "I'm currently working on an architectural project where we're designing a new triangular-shaped park. We've finally settled on the dimensions, and we're planning for the base to be 500 meters long with a height of 300 meters. Could you calculate the area of this park for me?", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a triangle given its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base of the triangle, in meters.\n\t- height : integer = None (required) The height of the triangle, in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculates the area of a triangle given its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base of the triangle, in meters.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle, in meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "relevance", "query": "What's the recipe for lasagna?", "query_for_retrieval": "What's the recipe for lasagna?", "answer": "get_calories_in_recipe", "answer_params": "", "api_description": "def get_calories_in_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total calories in a given recipe based on the ingredients.\n\t\n\tArguments:\n\t---------\n\t- ingredients : array = None (required) No description available.\n\t- servings : integer = None (optional) The number of servings the recipe makes (optional). Default: 1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_calories_in_recipe\", \"description\": \"Calculate the total calories in a given recipe based on the ingredients.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the ingredient.\"}, \"quantity\": {\"type\": \"integer\", \"description\": \"The quantity of the ingredient.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of the ingredient (e.g., 'cup', 'oz').\"}}, \"required\": [\"name\", \"quantity\", \"unit\"]}}, \"servings\": {\"type\": \"integer\", \"description\": \"The number of servings the recipe makes (optional). Default: 1\"}}, \"required\": [\"ingredients\"]}}"}
{"scope": "simple", "query": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "query_for_retrieval": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "answer": "imdb.find_movies_by_actor", "answer_params": "", "api_description": "def imdb.find_movies_by_actor:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches the database to find all movies by a specific actor within a certain year.\n\t\n\tArguments:\n\t---------\n\t- actor_name : string = None (required) The name of the actor.\n\t- year : integer = None (required) The specific year to search in.\n\t- category : string = None (optional) The category of the film (e.g. Drama, Comedy, etc). Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"imdb.find_movies_by_actor\", \"description\": \"Searches the database to find all movies by a specific actor within a certain year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"actor_name\": {\"type\": \"string\", \"description\": \"The name of the actor.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The specific year to search in.\"}, \"category\": {\"type\": \"string\", \"description\": \"The category of the film (e.g. Drama, Comedy, etc). Default is 'all'\"}}, \"required\": [\"actor_name\", \"year\"]}}"}
{"scope": "sql", "query": "Can you provide the names and atomic_numbers of all elements in the 'PeriodicTable' database where the atomic weight is less than 20?", "query_for_retrieval": "Can you provide the names and atomic_numbers of all elements in the 'PeriodicTable' database where the atomic weight is less than 20?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\"", "query_for_retrieval": "\"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\"", "answer": "math.hcf", "answer_params": "", "api_description": "def math.hcf:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the highest common factor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- number1 : integer = None (required) First number.\n\t- number2 : integer = None (required) Second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.hcf\", \"description\": \"Calculate the highest common factor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number1\": {\"type\": \"integer\", \"description\": \"First number.\"}, \"number2\": {\"type\": \"integer\", \"description\": \"Second number.\"}}, \"required\": [\"number1\", \"number2\"]}}"}
{"scope": "parallel_function", "query": "Can you use the 'update_user_info' function to update the name and email of a customer with user ID 12345 in the 'CustomerInfo' database to \"John\" and \"example@.com\", then repeat the same process for another customer with user ID 67890, changing their name and email to the same value as well as well?", "query_for_retrieval": "Can you use the 'update_user_info' function to update the name and email of a customer with user ID 12345 in the 'CustomerInfo' database to \"John\" and \"example@.com\", then repeat the same process for another customer with user ID 67890, changing their name and email to the same value as well as well?", "answer": "update_user_info", "answer_params": "", "api_description": "def update_user_info:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdate user information in the database.\n\t\n\tArguments:\n\t---------\n\t- user_id : integer = None (required) The user ID of the customer.\n\t- update_info : dict = None (required) The new information to update.\n\t  - name : string = None (optional) The customer's updated name.\n\t  - email : string = None (optional) The customer's updated email.\n\t- database : string = CustomerInfo (optional) The database where the user's information is stored.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"update_user_info\", \"description\": \"Update user information in the database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"integer\", \"description\": \"The user ID of the customer.\"}, \"update_info\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The customer's updated name.\"}, \"email\": {\"type\": \"string\", \"description\": \"The customer's updated email.\"}}, \"description\": \"The new information to update.\"}, \"database\": {\"type\": \"string\", \"description\": \"The database where the user's information is stored.\", \"default\": \"CustomerInfo\"}}, \"required\": [\"user_id\", \"update_info\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"In the game 'Animal Crossing', I am interested in collecting bugs during the 'Summer' season. Could you help me find out what bugs are available during this time? Also, in the same game, I would like to know what fish can be collected in the 'Winter' season. On a completely different note, I am studying genetics and I came across a SNP mutation with the ID 'rs53576'. Can you tell me what type of mutation this is in the species 'Homo sapiens'? Lastly, I also found another SNP mutation with the ID 'rs1800497'. Could you help me find out what type of mutation this is in the species 'Mus musculus'?\"", "query_for_retrieval": "\"In the game 'Animal Crossing', I am interested in collecting bugs during the 'Summer' season. Could you help me find out what bugs are available during this time? Also, in the same game, I would like to know what fish can be collected in the 'Winter' season. On a completely different note, I am studying genetics and I came across a SNP mutation with the ID 'rs53576'. Can you tell me what type of mutation this is in the species 'Homo sapiens'? Lastly, I also found another SNP mutation with the ID 'rs1800497'. Could you help me find out what type of mutation this is in the species 'Mus musculus'?\"", "answer": "mutation_type.find", "answer_params": "", "api_description": "def mutation_type.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n\t\n\tArguments:\n\t---------\n\t- snp_id : string = None (required) The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n\t- species : string = None (optional) Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mutation_type.find\", \"description\": \"Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"snp_id\": {\"type\": \"string\", \"description\": \"The ID of the Single Nucleotide Polymorphism (SNP) mutation.\"}, \"species\": {\"type\": \"string\", \"description\": \"Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\"}}, \"required\": [\"snp_id\"]}}"}
{"scope": "executable_parallel_function", "query": "Please sort the list [5, 2, 9, 1, 7] for me. Then, I'd like you to take another list, [3, 8, 6, 4], and sort it but in the opposite order. Once you're done with that, could you also sort [10, 20, 30, 40, 50] in the regular way? And lastly, for the list [100, 200, 300, 400, 500], I need it sorted from highest to lowest.", "query_for_retrieval": "Please sort the list [5, 2, 9, 1, 7] for me. Then, I'd like you to take another list, [3, 8, 6, 4], and sort it but in the opposite order. Once you're done with that, could you also sort [10, 20, 30, 40, 50] in the regular way? And lastly, for the list [100, 200, 300, 400, 500], I need it sorted from highest to lowest.", "answer": "sort_array", "answer_params": "", "api_description": "def sort_array:\n\t\"\"\"\n\tDescription:\n\t\n\tSorts an array of numbers.\n\t\n\tArguments:\n\t---------\n\t- array : array = None (required) The array of numbers.\n\t- reverse : boolean = False (optional) Whether to sort the array in reverse order, i.e., descending order. Default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sort_array\", \"description\": \"Sorts an array of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"array\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The array of numbers.\"}, \"reverse\": {\"type\": \"boolean\", \"description\": \"Whether to sort the array in reverse order, i.e., descending order. Default is False\", \"default\": false}}, \"required\": [\"array\"]}}"}
{"scope": "javascript", "query": "How can I locate a product in a list of products Product A, Product B, Product C where the 'productId' is equal to 123?", "query_for_retrieval": "How can I locate a product in a list of products Product A, Product B, Product C where the 'productId' is equal to 123?", "answer": "findProductById", "answer_params": "", "api_description": "def findProductById:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function iterates over a list of product objects to find a product with a matching 'productId'.\n\t\n\tArguments:\n\t---------\n\t- products : array = None (required) The list of product objects to search within.\n\t- id : integer = None (required) The product ID to look for in the product objects list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"findProductById\", \"description\": \"This function iterates over a list of product objects to find a product with a matching 'productId'.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"products\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The list of product objects to search within.\"}, \"id\": {\"type\": \"integer\", \"description\": \"The product ID to look for in the product objects list.\"}}, \"required\": [\"products\", \"id\"]}}"}
{"scope": "parallel_multiple_function", "query": "Identify objects in my backyard image my_backyard_image_url and analyze the sentiment of today's journal entry my_journal_entry_text.", "query_for_retrieval": "Identify objects in my backyard image my_backyard_image_url and analyze the sentiment of today's journal entry my_journal_entry_text.", "answer": "image_processing.object_identification", "answer_params": "", "api_description": "def image_processing.object_identification:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify objects in a given image.\n\t\n\tArguments:\n\t---------\n\t- image_url : string = None (required) The URL of the image.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"image_processing.object_identification\", \"description\": \"Identify objects in a given image.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"image_url\": {\"type\": \"string\", \"description\": \"The URL of the image.\"}}, \"required\": [\"image_url\"]}}"}
{"scope": "simple", "query": "Generate a customized law contract between John and Alice for rental agreement in California.", "query_for_retrieval": "Generate a customized law contract between John and Alice for rental agreement in California.", "answer": "generate_law_contract", "answer_params": "", "api_description": "def generate_law_contract:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a customized law contract given involved parties, contract type and location.\n\t\n\tArguments:\n\t---------\n\t- parties : array = None (required) Parties involved in the contract.\n\t- contract_type : string = None (required) Type of the contract.\n\t- location : string = None (required) Location where the contract will be in effect.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_law_contract\", \"description\": \"Generates a customized law contract given involved parties, contract type and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"parties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Parties involved in the contract.\"}, \"contract_type\": {\"type\": \"string\", \"description\": \"Type of the contract.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location where the contract will be in effect.\"}}, \"required\": [\"parties\", \"contract_type\", \"location\"]}}"}
{"scope": "simple", "query": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "query_for_retrieval": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits related to a specific company within a specific date range and location.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company related to the lawsuit.\n\t- start_date : string = None (required) Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY.\n\t- location : string = None (required) Location where the lawsuit was filed in the format of full state name.\n\t- status : string = None (optional) The status of the lawsuit. Default is 'ongoing'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Search for lawsuits related to a specific company within a specific date range and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company related to the lawsuit.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location where the lawsuit was filed in the format of full state name.\"}, \"status\": {\"type\": \"string\", \"enum\": [\"ongoing\", \"settled\", \"dismissed\"], \"description\": \"The status of the lawsuit. Default is 'ongoing'.\"}}, \"required\": [\"company\", \"start_date\", \"location\"]}}"}
{"scope": "relevance", "query": "How can I sell my acoustic guitar?", "query_for_retrieval": "How can I sell my acoustic guitar?", "answer": "tune_instrument", "answer_params": "", "api_description": "def tune_instrument:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function helps tune instruments based on the instrument type and the desired key or note.\n\t\n\tArguments:\n\t---------\n\t- instrument_type : string = None (required) The type of the instrument, e.g. 'acoustic guitar', 'piano'.\n\t- key : string = None (required) The key or note to which the instrument should be tuned to. Default is 'Standard' for guitars.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"tune_instrument\", \"description\": \"This function helps tune instruments based on the instrument type and the desired key or note.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument_type\": {\"type\": \"string\", \"description\": \"The type of the instrument, e.g. 'acoustic guitar', 'piano'.\"}, \"key\": {\"type\": \"string\", \"description\": \"The key or note to which the instrument should be tuned to. Default is 'Standard' for guitars.\"}}, \"required\": [\"instrument_type\", \"key\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm looking to compare prices for a few items I've spotted on Amazon, and I have their ASINs ready. Could you help me out by checking the prices for these products? Here are the ASINs: 'B08PPDJWC8', 'B07ZPKBL9V', 'B08BHXG144', and 'B075H2B962'. I'd appreciate it if you could provide the current price for each of these items.", "query_for_retrieval": "I'm looking to compare prices for a few items I've spotted on Amazon, and I have their ASINs ready. Could you help me out by checking the prices for these products? Here are the ASINs: 'B08PPDJWC8', 'B07ZPKBL9V', 'B08BHXG144', and 'B075H2B962'. I'd appreciate it if you could provide the current price for each of these items.", "answer": "get_price_by_amazon_ASIN", "answer_params": "", "api_description": "def get_price_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_price_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the Euclidean norm, or the length of the vector from the origin to the point (3, 4) using the math.hypot function, and then calculate the Euclidean norm from the origin to the point (6, 8) using the same function? Also, can you calculate the Euclidean norm from the origin to the point (9, 12, 15) using the math.hypot function?\"", "query_for_retrieval": "\"Can you calculate the Euclidean norm, or the length of the vector from the origin to the point (3, 4) using the math.hypot function, and then calculate the Euclidean norm from the origin to the point (6, 8) using the same function? Also, can you calculate the Euclidean norm from the origin to the point (9, 12, 15) using the math.hypot function?\"", "answer": "math.hypot", "answer_params": "", "api_description": "def math.hypot:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n\t\n\tArguments:\n\t---------\n\t- x : integer = None (required) The x-coordinate value.\n\t- y : integer = None (required) The y-coordinate value.\n\t- z : integer = None (optional) Optional. The z-coordinate value. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.hypot\", \"description\": \"Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"integer\", \"description\": \"The x-coordinate value.\"}, \"y\": {\"type\": \"integer\", \"description\": \"The y-coordinate value.\"}, \"z\": {\"type\": \"integer\", \"description\": \"Optional. The z-coordinate value. Default is 0.\"}}, \"required\": [\"x\", \"y\"]}}"}
{"scope": "executable_simple", "query": "I've got $1,000,000 set aside as an initial investment and plan to contribute $1,000 each year. I'm looking at a timeframe of 3 years and expecting an annual return of about 10%. However, I also want to consider the inflation rates for these years which I predict to be 1%, 4%, and 4% respectively. Can you calculate what the value of my investment will be at the end of this period, taking into account the inflation?", "query_for_retrieval": "I've got $1,000,000 set aside as an initial investment and plan to contribute $1,000 each year. I'm looking at a timeframe of 3 years and expecting an annual return of about 10%. However, I also want to consider the inflation rates for these years which I predict to be 1%, 4%, and 4% respectively. Can you calculate what the value of my investment will be at the end of this period, taking into account the inflation?", "answer": "calculate_investment_value", "answer_params": "", "api_description": "def calculate_investment_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the value of an investment over time.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- annual_contribution : integer = None (required) The annual contribution amount.\n\t- years : integer = None (required) The number of years to calculate the investment value for.\n\t- annual_return : float = None (required) The annual return rate, ranging from 0 to 1.\n\t- inflation_rate : array = None (required) The inflation rate for each year in percentage, ranging from 0 to 1.\n\t- adjust_for_inflation : boolean = True (optional) Whether to adjust the investment value for inflation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_investment_value\", \"description\": \"Calculates the value of an investment over time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"annual_contribution\": {\"type\": \"integer\", \"description\": \"The annual contribution amount.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to calculate the investment value for.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate, ranging from 0 to 1.\"}, \"inflation_rate\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The inflation rate for each year in percentage, ranging from 0 to 1.\"}, \"adjust_for_inflation\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Whether to adjust the investment value for inflation.\"}}, \"required\": [\"initial_investment\", \"annual_contribution\", \"years\", \"annual_return\", \"inflation_rate\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a sculptor working on a large project. You have two different types of materials available to you, each with a different density. The first material has a density of 5.2 g/cm^3 and the second material has a density of 7.8 g/cm^3. You are planning to create two identical cones, each with a base radius of 10 cm and a height of 30 cm. The first cone will be made from the first material and the second cone will be made from the second material. Can you calculate the volume of each cone, rounding off to 2 decimal places, and then calculate the mass of each cone using their respective densities?\"", "query_for_retrieval": "\"Imagine you are a sculptor working on a large project. You have two different types of materials available to you, each with a different density. The first material has a density of 5.2 g/cm^3 and the second material has a density of 7.8 g/cm^3. You are planning to create two identical cones, each with a base radius of 10 cm and a height of 30 cm. The first cone will be made from the first material and the second cone will be made from the second material. Can you calculate the volume of each cone, rounding off to 2 decimal places, and then calculate the mass of each cone using their respective densities?\"", "answer": "geometry.calculate_cone_volume", "answer_params": "", "api_description": "def geometry.calculate_cone_volume:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the volume of a cone given the radius and height.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) Radius of the cone base.\n\t- height : float = None (required) Height of the cone.\n\t- round_off : integer = 2 (optional) Number of decimal places to round off the answer.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.calculate_cone_volume\", \"description\": \"Calculate the volume of a cone given the radius and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"Radius of the cone base.\"}, \"height\": {\"type\": \"float\", \"description\": \"Height of the cone.\"}, \"round_off\": {\"type\": \"integer\", \"description\": \"Number of decimal places to round off the answer.\", \"default\": 2}}, \"required\": [\"radius\", \"height\"]}}"}
{"scope": "multiple_function", "query": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "query_for_retrieval": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "answer": "cooking_conversion.convert", "answer_params": "", "api_description": "def cooking_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert cooking measurements from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- quantity : integer = None (required) The quantity to be converted.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t- item : string = None (required) The item to be converted.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cooking_conversion.convert\", \"description\": \"Convert cooking measurements from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"quantity\": {\"type\": \"integer\", \"description\": \"The quantity to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}, \"item\": {\"type\": \"string\", \"description\": \"The item to be converted.\"}}, \"required\": [\"quantity\", \"from_unit\", \"to_unit\", \"item\"]}}"}
{"scope": "javascript", "query": "How can I implement a 'dataFetch' operation with an API endpoint URL of 'https://api.example.com/data', expecting the response to be a JSON object containing '{\"key\": \"value\"}', given a request configuration object '{\"method\": \"GET\"}'?", "query_for_retrieval": "How can I implement a 'dataFetch' operation with an API endpoint URL of 'https://api.example.com/data', expecting the response to be a JSON object containing '{\"key\": \"value\"}', given a request configuration object '{\"method\": \"GET\"}'?", "answer": "performDataFetch", "answer_params": "", "api_description": "def performDataFetch:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function fetches data from a specified API endpoint using the provided request configuration, checks the response against an expected JSON object, and handles any potential errors. It supports various request methods like GET or POST.\n\t\n\tArguments:\n\t---------\n\t- apiEndpoint : String = None (required) The URL of the API endpoint from which the data will be fetched.\n\t- requestConfig : dict = None (required) The configuration object for the API request.\n\t  - method : String = None (optional) The HTTP method to be used for the request.\n\t  - headers : dict = None (optional) Any headers to be included in the request.\n\t  - body : String = None (optional) The request payload, if needed for methods like POST.\n\t- expectedResponse : dict = None (required) The JSON object expected to be returned by the API call.\n\t- handleErrors : Boolean = None (optional) If true, the function will handle errors gracefully and provide appropriate feedback. Default false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"performDataFetch\", \"description\": \"This function fetches data from a specified API endpoint using the provided request configuration, checks the response against an expected JSON object, and handles any potential errors. It supports various request methods like GET or POST.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"apiEndpoint\": {\"type\": \"String\", \"description\": \"The URL of the API endpoint from which the data will be fetched.\"}, \"requestConfig\": {\"type\": \"dict\", \"properties\": {\"method\": {\"type\": \"String\", \"description\": \"The HTTP method to be used for the request.\"}, \"headers\": {\"type\": \"dict\", \"description\": \"Any headers to be included in the request.\"}, \"body\": {\"type\": \"String\", \"description\": \"The request payload, if needed for methods like POST.\"}}, \"description\": \"The configuration object for the API request.\"}, \"expectedResponse\": {\"type\": \"dict\", \"description\": \"The JSON object expected to be returned by the API call.\"}, \"handleErrors\": {\"type\": \"Boolean\", \"description\": \"If true, the function will handle errors gracefully and provide appropriate feedback. Default false\"}}, \"required\": [\"apiEndpoint\", \"requestConfig\", \"expectedResponse\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? First, I need to find the greatest common divisor of two numbers, let's say 48 and 36. Second, I'm curious about a historical event. I want to know about the contribution made by Albert Einstein on the date of 1905-05-14 in the field of Physics. Lastly, I'm working on a music project and need to calculate the duration between two notes. The first note has a frequency of 440 Hz and the second note has a frequency of 880 Hz. The tempo of the music is 100 beats per minute. Could you provide me with the results of these calculations?\"", "query_for_retrieval": "\"Could you help me with a few tasks? First, I need to find the greatest common divisor of two numbers, let's say 48 and 36. Second, I'm curious about a historical event. I want to know about the contribution made by Albert Einstein on the date of 1905-05-14 in the field of Physics. Lastly, I'm working on a music project and need to calculate the duration between two notes. The first note has a frequency of 440 Hz and the second note has a frequency of 880 Hz. The tempo of the music is 100 beats per minute. Could you provide me with the results of these calculations?\"", "answer": "historical_contrib.get_contrib", "answer_params": "", "api_description": "def historical_contrib.get_contrib:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical contribution made by a scientist on a specific date.\n\t\n\tArguments:\n\t---------\n\t- scientist : string = None (required) The scientist whose contributions need to be searched.\n\t- date : string = None (required) The date when the contribution was made in yyyy-mm-dd format.\n\t- category : string = None (optional) The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historical_contrib.get_contrib\", \"description\": \"Retrieve historical contribution made by a scientist on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"scientist\": {\"type\": \"string\", \"description\": \"The scientist whose contributions need to be searched.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date when the contribution was made in yyyy-mm-dd format.\"}, \"category\": {\"type\": \"string\", \"description\": \"The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields.\"}}, \"required\": [\"scientist\", \"date\"]}}"}
{"scope": "parallel_function", "query": "\"John and Mary are playing a game where they each choose two numbers and then calculate the greatest common divisor (GCD) of their chosen numbers. John chose the numbers 36 and 48, while Mary chose the numbers 60 and 96. Can you help them find the GCD of their chosen numbers?\"", "query_for_retrieval": "\"John and Mary are playing a game where they each choose two numbers and then calculate the greatest common divisor (GCD) of their chosen numbers. John chose the numbers 36 and 48, while Mary chose the numbers 60 and 96. Can you help them find the GCD of their chosen numbers?\"", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the greatest common divisor of two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) First number.\n\t- num2 : integer = None (required) Second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Calculate the greatest common divisor of two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"First number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"Second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "simple", "query": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes.", "query_for_retrieval": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes.", "answer": "calculate_magnetic_field_strength", "answer_params": "", "api_description": "def calculate_magnetic_field_strength:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.\n\t\n\tArguments:\n\t---------\n\t- current : integer = None (required) The current flowing through the wire in Amperes.\n\t- distance : integer = None (required) The perpendicular distance from the wire to the point where the magnetic field is being calculated.\n\t- permeability : float = None (optional) The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_magnetic_field_strength\", \"description\": \"Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"integer\", \"description\": \"The current flowing through the wire in Amperes.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"The perpendicular distance from the wire to the point where the magnetic field is being calculated.\"}, \"permeability\": {\"type\": \"float\", \"description\": \"The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability).\"}}, \"required\": [\"current\", \"distance\"]}}"}
{"scope": "executable_parallel_function", "query": "With the pandemic still lingering, I'm trying to stay updated on the COVID-19 situation around the globe. I'm particularly interested in the current active case numbers for a few countries. Could you provide me with the latest figures for active COVID-19 cases in France? After that, I'd also like to know the current situation in Italy, the United States, and China.", "query_for_retrieval": "With the pandemic still lingering, I'm trying to stay updated on the COVID-19 situation around the globe. I'm particularly interested in the current active case numbers for a few countries. Could you provide me with the latest figures for active COVID-19 cases in France? After that, I'd also like to know the current situation in Italy, the United States, and China.", "answer": "get_active_covid_case_by_country", "answer_params": "", "api_description": "def get_active_covid_case_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date active cases of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the active cases of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_active_covid_case_by_country\", \"description\": \"Finds the most up to date active cases of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the active cases of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "simple", "query": "Check if any Hilton Hotel is available for two adults in Paris from 2023 April 4th to April 8th?", "query_for_retrieval": "Check if any Hilton Hotel is available for two adults in Paris from 2023 April 4th to April 8th?", "answer": "hilton_hotel.check_availability", "answer_params": "", "api_description": "def hilton_hotel.check_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck hotel availability for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to check hotel availability.\n\t- check_in_date : string = None (required) The check-in date in the format YYYY-MM-DD.\n\t- check_out_date : string = None (required) The check-out date in the format YYYY-MM-DD.\n\t- no_of_adults : integer = None (required) The number of adults for the hotel booking.\n\t- hotel_chain : string = Hilton (optional) The hotel chain where you want to book the hotel.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hilton_hotel.check_availability\", \"description\": \"Check hotel availability for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to check hotel availability.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in the format YYYY-MM-DD.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in the format YYYY-MM-DD.\"}, \"no_of_adults\": {\"type\": \"integer\", \"description\": \"The number of adults for the hotel booking.\"}, \"hotel_chain\": {\"type\": \"string\", \"description\": \"The hotel chain where you want to book the hotel.\", \"default\": \"Hilton\"}}, \"required\": [\"location\", \"check_in_date\", \"check_out_date\", \"no_of_adults\"]}}"}
{"scope": "executable_simple", "query": "I'm currently knee-deep in a geography project where understanding the time zones for different coordinates is crucial. I've got this particular location with longitude 123.45 and latitude -67.89. I need to determine its time zone. Can you help me with this?", "query_for_retrieval": "I'm currently knee-deep in a geography project where understanding the time zones for different coordinates is crucial. I've got this particular location with longitude 123.45 and latitude -67.89. I need to determine its time zone. Can you help me with this?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "multiple_function", "query": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "query_for_retrieval": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "answer": "vegan_restaurant.find_nearby", "answer_params": "", "api_description": "def vegan_restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby vegan restaurants based on specific criteria like operating hours.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York, NY\n\t- operating_hours : integer = None (optional) Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 9.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"vegan_restaurant.find_nearby\", \"description\": \"Locate nearby vegan restaurants based on specific criteria like operating hours.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY\"}, \"operating_hours\": {\"type\": \"integer\", \"description\": \"Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 9.\"}}, \"required\": [\"location\"]}}"}
{"scope": "relevance", "query": "Create a jigsaw puzzle", "query_for_retrieval": "Create a jigsaw puzzle", "answer": "game_functions.solve_jigsaw", "answer_params": "", "api_description": "def game_functions.solve_jigsaw:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate solution for a given jigsaw puzzle image.\n\t\n\tArguments:\n\t---------\n\t- puzzle_image : string = None (required) The image file of the jigsaw puzzle.\n\t- pieces_count : integer = None (required) Number of pieces in the jigsaw puzzle.\n\t- solve_method : string = brute_force (optional) Method to be used to solve the puzzle. Default is brute_force.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_functions.solve_jigsaw\", \"description\": \"Generate solution for a given jigsaw puzzle image.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"puzzle_image\": {\"type\": \"string\", \"description\": \"The image file of the jigsaw puzzle.\"}, \"pieces_count\": {\"type\": \"integer\", \"description\": \"Number of pieces in the jigsaw puzzle.\"}, \"solve_method\": {\"type\": \"string\", \"default\": \"brute_force\", \"enum\": [\"brute_force\", \"genetic_algorithm\"], \"description\": \"Method to be used to solve the puzzle. Default is brute_force.\"}}, \"required\": [\"puzzle_image\", \"pieces_count\"]}}"}
{"scope": "simple", "query": "What is the probability of getting a full house in poker?", "query_for_retrieval": "What is the probability of getting a full house in poker?", "answer": "poker_probability.full_house", "answer_params": "", "api_description": "def poker_probability.full_house:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of getting a full house in a poker game.\n\t\n\tArguments:\n\t---------\n\t- deck_size : integer = None (required) The size of the deck. Default is 52.\n\t- hand_size : integer = None (required) The size of the hand. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_probability.full_house\", \"description\": \"Calculate the probability of getting a full house in a poker game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deck_size\": {\"type\": \"integer\", \"description\": \"The size of the deck. Default is 52.\"}, \"hand_size\": {\"type\": \"integer\", \"description\": \"The size of the hand. Default is 5.\"}}, \"required\": [\"deck_size\", \"hand_size\"]}}"}
{"scope": "relevance", "query": "Find the integral of x^3 from 1 to 5", "query_for_retrieval": "Find the integral of x^3 from 1 to 5", "answer": "str_to_int", "answer_params": "", "api_description": "def str_to_int:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts string value to integer.\n\t\n\tArguments:\n\t---------\n\t- value : string = None (required) String value to be converted to integer\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"str_to_int\", \"description\": \"Converts string value to integer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"string\", \"description\": \"String value to be converted to integer\"}}, \"required\": [\"value\"]}}"}
{"scope": "simple", "query": "Find concerts near me in Seattle that plays jazz music.", "query_for_retrieval": "Find concerts near me in Seattle that plays jazz music.", "answer": "concert.find_nearby", "answer_params": "", "api_description": "def concert.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby concerts based on specific criteria like genre.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Seattle, WA\n\t- genre : string = None (required) Genre of music to be played at the concert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.find_nearby\", \"description\": \"Locate nearby concerts based on specific criteria like genre.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Seattle, WA\"}, \"genre\": {\"type\": \"string\", \"description\": \"Genre of music to be played at the concert.\"}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "multiple_function", "query": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "query_for_retrieval": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "answer": "detailed_weather_forecast", "answer_params": "", "api_description": "def detailed_weather_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the weather for.\n\t- duration : integer = None (required) Duration in hours for the detailed forecast.\n\t- include_precipitation : boolean = None (optional) Whether to include precipitation data in the forecast. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"detailed_weather_forecast\", \"description\": \"Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the weather for.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"Duration in hours for the detailed forecast.\"}, \"include_precipitation\": {\"type\": \"boolean\", \"description\": \"Whether to include precipitation data in the forecast. Default is false.\"}}, \"required\": [\"location\", \"duration\"]}}"}
{"scope": "relevance", "query": "Calculate the compounded interest for a principal amount of $10000, with a annual interest rate of 5% for a period of 3 years.", "query_for_retrieval": "Calculate the compounded interest for a principal amount of $10000, with a annual interest rate of 5% for a period of 3 years.", "answer": "calculate_mortgage_payment", "answer_params": "", "api_description": "def calculate_mortgage_payment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the monthly mortgage payment given the loan amount, loan term and annual interest rate.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The loan amount in USD.\n\t- loan_term : integer = None (required) The loan term in years.\n\t- annual_interest_rate : float = None (required) The annual interest rate in percentage. e.g. 3.5 for 3.5%\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mortgage_payment\", \"description\": \"Calculate the monthly mortgage payment given the loan amount, loan term and annual interest rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The loan amount in USD.\"}, \"loan_term\": {\"type\": \"integer\", \"description\": \"The loan term in years.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate in percentage. e.g. 3.5 for 3.5%\"}}, \"required\": [\"loan_amount\", \"loan_term\", \"annual_interest_rate\"]}}"}
{"scope": "relevance", "query": "What's the current interest rate", "query_for_retrieval": "What's the current interest rate", "answer": "calculate_mortgage_payment", "answer_params": "", "api_description": "def calculate_mortgage_payment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the monthly mortgage payment given the loan amount, annual interest rate, and number of years.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The loan amount.\n\t- annual_rate : float = None (required) The annual interest rate in percentage.\n\t- years : integer = None (required) Number of years the mortgage is amortized over.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mortgage_payment\", \"description\": \"Calculate the monthly mortgage payment given the loan amount, annual interest rate, and number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The loan amount.\"}, \"annual_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate in percentage.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years the mortgage is amortized over.\"}}, \"required\": [\"loan_amount\", \"annual_rate\", \"years\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a new fitness plan and need to tailor it specifically for a few clients with different profiles. Could you help me calculate their daily nutritional needs? Here are the details:\n\n1. A 25-year-old male, 180 cm tall, weighs 75 kg, moderately active (level 3), and wants to gain weight.\n2. A 30-year-old female, 165 cm tall, weighs 65 kg, lightly active (level 2), aiming to maintain her current weight.\n3. A 40-year-old male, 175 cm tall, weighs 85 kg, very active (level 5), with a goal of weight loss.\n4. Lastly, a 55-year-old female, 160 cm tall, weighs 70 kg, not very active (level 1), and also looking to lose weight.\n\nCould you provide the nutritional needs for each of these clients?", "query_for_retrieval": "I'm working on a new fitness plan and need to tailor it specifically for a few clients with different profiles. Could you help me calculate their daily nutritional needs? Here are the details:\n\n1. A 25-year-old male, 180 cm tall, weighs 75 kg, moderately active (level 3), and wants to gain weight.\n2. A 30-year-old female, 165 cm tall, weighs 65 kg, lightly active (level 2), aiming to maintain her current weight.\n3. A 40-year-old male, 175 cm tall, weighs 85 kg, very active (level 5), with a goal of weight loss.\n4. Lastly, a 55-year-old female, 160 cm tall, weighs 70 kg, not very active (level 1), and also looking to lose weight.\n\nCould you provide the nutritional needs for each of these clients?", "answer": "calculate_nutritional_needs", "answer_params": "", "api_description": "def calculate_nutritional_needs:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- height : float = None (required) The height of the person in centimeters.\n\t- age : float = None (required) The age of the person in years.\n\t- gender : string = None (required) The gender of the person. Possible options [male, female, other].\n\t- activity_level : float = None (required) The activity level of the person. Possible options [1,2,3,4,5].\n\t- goal : string = None (required) The goal of the person. Possible options [lose, gain, maintain].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_nutritional_needs\", \"description\": \"Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the person in centimeters.\"}, \"age\": {\"type\": \"float\", \"description\": \"The age of the person in years.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the person. Possible options [male, female, other].\"}, \"activity_level\": {\"type\": \"float\", \"description\": \"The activity level of the person. Possible options [1,2,3,4,5].\"}, \"goal\": {\"type\": \"string\", \"description\": \"The goal of the person. Possible options [lose, gain, maintain].\"}}, \"required\": [\"weight\", \"height\", \"age\", \"gender\", \"activity_level\", \"goal\"]}}"}
{"scope": "parallel_function", "query": "What is the air quality data for New York City, including additional data like PM2.5, PM10, ozone levels, and pollution sources, for today, yesterday, and the day before yesterday? Today is May 5, 2023", "query_for_retrieval": "What is the air quality data for New York City, including additional data like PM2.5, PM10, ozone levels, and pollution sources, for today, yesterday, and the day before yesterday? Today is May 5, 2023", "answer": "get_air_quality", "answer_params": "", "api_description": "def get_air_quality:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve real-time air quality and pollution data for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the air quality data for.\n\t- detail : boolean = None (optional) If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. the value is set to false to default.\n\t- historical : string = today (optional) Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_air_quality\", \"description\": \"Retrieve real-time air quality and pollution data for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the air quality data for.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. the value is set to false to default.\"}, \"historical\": {\"type\": \"string\", \"description\": \"Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.\", \"default\": \"today\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Generate an image of a circle with a radius of 50 pixels and color 'Red'.", "query_for_retrieval": "Generate an image of a circle with a radius of 50 pixels and color 'Red'.", "answer": "generate_circle_image", "answer_params": "", "api_description": "def generate_circle_image:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a circle image based on the given radius and color\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle in pixels.\n\t- color : string = None (required) The color of the circle.\n\t- background : string = None (optional) Optional: The color of the background, default is white.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_circle_image\", \"description\": \"Generates a circle image based on the given radius and color\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle in pixels.\"}, \"color\": {\"type\": \"string\", \"description\": \"The color of the circle.\"}, \"background\": {\"type\": \"string\", \"description\": \"Optional: The color of the background, default is white.\"}}, \"required\": [\"radius\", \"color\"]}}"}
{"scope": "simple", "query": "Convert time 3pm from New York time zone to London time zone.", "query_for_retrieval": "Convert time 3pm from New York time zone to London time zone.", "answer": "timezone.convert", "answer_params": "", "api_description": "def timezone.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert time from one time zone to another.\n\t\n\tArguments:\n\t---------\n\t- time : string = None (required) The local time you want to convert, e.g. 3pm\n\t- from_timezone : string = None (required) The time zone you want to convert from.\n\t- to_timezone : string = None (required) The time zone you want to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"timezone.convert\", \"description\": \"Convert time from one time zone to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"time\": {\"type\": \"string\", \"description\": \"The local time you want to convert, e.g. 3pm\"}, \"from_timezone\": {\"type\": \"string\", \"description\": \"The time zone you want to convert from.\"}, \"to_timezone\": {\"type\": \"string\", \"description\": \"The time zone you want to convert to.\"}}, \"required\": [\"time\", \"from_timezone\", \"to_timezone\"]}}"}
{"scope": "parallel_multiple_function", "query": "Translate the phrase 'Hello World' from English to Spanish and translate 'Goodbye' from French to English. In addition to that get current time in 'Los Angeles' and 'London'.", "query_for_retrieval": "Translate the phrase 'Hello World' from English to Spanish and translate 'Goodbye' from French to English. In addition to that get current time in 'Los Angeles' and 'London'.", "answer": "get_current_time", "answer_params": "", "api_description": "def get_current_time:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches current time for a given location\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location for which to fetch current time\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_time\", \"description\": \"Fetches current time for a given location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to fetch current time\"}}, \"required\": [\"location\"]}}"}
{"scope": "javascript", "query": "How can I generate an authorization token for a user with username 'johndoe', valid for '3600' seconds, issued by 'myapp.net', with a role of 'admin', and encoded with 'HS256' algorithm?", "query_for_retrieval": "How can I generate an authorization token for a user with username 'johndoe', valid for '3600' seconds, issued by 'myapp.net', with a role of 'admin', and encoded with 'HS256' algorithm?", "answer": "createAuthToken", "answer_params": "", "api_description": "def createAuthToken:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function generates an authorization token with user details, validity, issuer, role, and encoding algorithm.\n\t\n\tArguments:\n\t---------\n\t- username : String = None (required) The username of the user for whom the token is being created.\n\t- validity : integer = None (optional) The number of seconds the token remains valid.\n\t- options : dict = None (required) options dictionary, default empty dictionary\n\t  - issuer :  = None (optional) The entity that issued the token.\n\t  - role : String = None (optional) The role of the user in the system.\n\t  - algorithm : String = None (optional) The encoding algorithm to be used for token generation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"createAuthToken\", \"description\": \"This function generates an authorization token with user details, validity, issuer, role, and encoding algorithm.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"username\": {\"type\": \"String\", \"description\": \"The username of the user for whom the token is being created.\"}, \"validity\": {\"type\": \"integer\", \"description\": \"The number of seconds the token remains valid.\"}, \"options\": {\"type\": \"dict\", \"description\": \"options dictionary, default empty dictionary\", \"properties\": {\"issuer\": {\"type\": \"\", \"description\": \"The entity that issued the token.\"}, \"role\": {\"type\": \"String\", \"description\": \"The role of the user in the system.\"}, \"algorithm\": {\"type\": \"String\", \"description\": \"The encoding algorithm to be used for token generation.\"}}}}, \"required\": [\"username\", \"options\"]}}"}
{"scope": "simple", "query": "Find me the detailed profile of basketball player Lebron James", "query_for_retrieval": "Find me the detailed profile of basketball player Lebron James", "answer": "sports_db.find_athlete", "answer_params": "", "api_description": "def sports_db.find_athlete:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the profile information of a sports athlete based on their full name.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The full name of the athlete.\n\t- team : string = None (optional) The team the athlete belongs to. Default to all teams if not specified.\n\t- sport : string = None (required) The sport that athlete plays.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_db.find_athlete\", \"description\": \"Find the profile information of a sports athlete based on their full name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The full name of the athlete.\"}, \"team\": {\"type\": \"string\", \"description\": \"The team the athlete belongs to. Default to all teams if not specified.\"}, \"sport\": {\"type\": \"string\", \"description\": \"The sport that athlete plays.\", \"enum\": [\"Basketball\", \"Baseball\", \"Football\", \"Soccer\"]}}, \"required\": [\"name\", \"sport\"]}}"}
{"scope": "parallel_function", "query": "Calculate the monthly mortgage payment for a loan amount of $400,000, with an annual interest rate of 4% and a loan term of 15, 20 and 30 years.", "query_for_retrieval": "Calculate the monthly mortgage payment for a loan amount of $400,000, with an annual interest rate of 4% and a loan term of 15, 20 and 30 years.", "answer": "calculate_mortgage_payment", "answer_params": "", "api_description": "def calculate_mortgage_payment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : integer = None (required) The loan amount.\n\t- interest_rate : float = None (required) The annual interest rate.\n\t- loan_term : integer = None (required) The loan term in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mortgage_payment\", \"description\": \"Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"integer\", \"description\": \"The loan amount.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate.\"}, \"loan_term\": {\"type\": \"integer\", \"description\": \"The loan term in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_term\"]}}"}
{"scope": "simple", "query": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "query_for_retrieval": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "answer": "calculate_roi", "answer_params": "", "api_description": "def calculate_roi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on investment for a given deposit amount, annual interest rate, and time frame.\n\t\n\tArguments:\n\t---------\n\t- deposit : integer = None (required) The initial deposit amount.\n\t- annual_interest_rate : float = None (required) The annual interest rate provided by the bank.\n\t- years : integer = None (required) The period for which the money is invested.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_roi\", \"description\": \"Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deposit\": {\"type\": \"integer\", \"description\": \"The initial deposit amount.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate provided by the bank.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The period for which the money is invested.\"}}, \"required\": [\"deposit\", \"annual_interest_rate\", \"years\"]}}"}
{"scope": "simple", "query": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine).", "query_for_retrieval": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine).", "answer": "generate_DNA_sequence", "answer_params": "", "api_description": "def generate_DNA_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a random DNA sequence with a specific length and nucleotide preference.\n\t\n\tArguments:\n\t---------\n\t- length : integer = None (required) The length of the DNA sequence to be generated.\n\t- preferences : array = None (required) Preferred nucleotides to include more frequently in the DNA sequence.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_DNA_sequence\", \"description\": \"Generate a random DNA sequence with a specific length and nucleotide preference.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"length\": {\"type\": \"integer\", \"description\": \"The length of the DNA sequence to be generated.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"A\", \"T\", \"C\", \"G\"]}, \"description\": \"Preferred nucleotides to include more frequently in the DNA sequence.\"}}, \"required\": [\"length\", \"preferences\"]}}"}
{"scope": "sql", "query": "Can you establish a new database table called 'Customer' with the fields 'CustomerID', 'FirstName', 'LastName', 'Email', 'Phone', and 'Address'?", "query_for_retrieval": "Can you establish a new database table called 'Customer' with the fields 'CustomerID', 'FirstName', 'LastName', 'Email', 'Phone', and 'Address'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you first calculate the derivative of the function '3x^2 + 2x - 1' at the value of 2 where 'x' is the function variable, then calculate the derivative of the function '5y^3 - 4y + 2' at the value of 3 where 'y' is the function variable, and finally retrieve the strengths and weaknesses of the personality type 'INTJ'?\"", "query_for_retrieval": "\"Could you first calculate the derivative of the function '3x^2 + 2x - 1' at the value of 2 where 'x' is the function variable, then calculate the derivative of the function '5y^3 - 4y + 2' at the value of 3 where 'y' is the function variable, and finally retrieve the strengths and weaknesses of the personality type 'INTJ'?\"", "answer": "calculus.derivative", "answer_params": "", "api_description": "def calculus.derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the derivative of a function at a specific value.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- value : integer = None (required) The value where the derivative needs to be calculated at.\n\t- function_variable : string = None (optional) The variable present in the function, for instance x or y, etc. Default is 'x'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculus.derivative\", \"description\": \"Compute the derivative of a function at a specific value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"value\": {\"type\": \"integer\", \"description\": \"The value where the derivative needs to be calculated at.\"}, \"function_variable\": {\"type\": \"string\", \"description\": \"The variable present in the function, for instance x or y, etc. Default is 'x'.\"}}, \"required\": [\"function\", \"value\"]}}"}
{"scope": "simple", "query": "What's the approximate distance between Boston, MA, and Washington, D.C. in mile?", "query_for_retrieval": "What's the approximate distance between Boston, MA, and Washington, D.C. in mile?", "answer": "geo_distance.calculate", "answer_params": "", "api_description": "def geo_distance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the geographic distance between two given locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the distance calculation. Specify the location in the format of City, State.\n\t- end_location : string = None (required) The destination location for the distance calculation. Specify the location in the format of City, State.\n\t- units : string = None (optional) Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geo_distance.calculate\", \"description\": \"Calculate the geographic distance between two given locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the distance calculation. Specify the location in the format of City, State.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the distance calculation. Specify the location in the format of City, State.\"}, \"units\": {\"type\": \"string\", \"description\": \"Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "simple", "query": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "query_for_retrieval": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "answer": "calc_absolute_pressure", "answer_params": "", "api_description": "def calc_absolute_pressure:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the absolute pressure from gauge and atmospheric pressures.\n\t\n\tArguments:\n\t---------\n\t- atm_pressure : integer = None (optional) The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\n\t- gauge_pressure : integer = None (required) The gauge pressure in atmospheres (atm). Must be provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_absolute_pressure\", \"description\": \"Calculates the absolute pressure from gauge and atmospheric pressures.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"atm_pressure\": {\"type\": \"integer\", \"description\": \"The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\"}, \"gauge_pressure\": {\"type\": \"integer\", \"description\": \"The gauge pressure in atmospheres (atm). Must be provided.\"}}, \"required\": [\"gauge_pressure\"]}}"}
{"scope": "relevance", "query": "What is the pattern of the blues scale in the key of A?", "query_for_retrieval": "What is the pattern of the blues scale in the key of A?", "answer": "find_composer", "answer_params": "", "api_description": "def find_composer:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the composer of a piece of music based on the name of the piece.\n\t\n\tArguments:\n\t---------\n\t- piece_name : string = None (required) The name of the music piece.\n\t- year_composed : integer = optional (optional) The year the music piece was composed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_composer\", \"description\": \"Find the composer of a piece of music based on the name of the piece.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"piece_name\": {\"type\": \"string\", \"description\": \"The name of the music piece.\"}, \"year_composed\": {\"type\": \"integer\", \"description\": \"The year the music piece was composed.\", \"default\": \"optional\"}}, \"required\": [\"piece_name\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a portfolio analysis, and my client is particularly interested in the latest performance of Apple Inc.'s stock. To provide them with the most up-to-date information, I need to check the current stock price for Apple. Could you pull up the latest figures for me?", "query_for_retrieval": "I'm working on a portfolio analysis, and my client is particularly interested in the latest performance of Apple Inc.'s stock. To provide them with the most up-to-date information, I need to check the current stock price for Apple. Could you pull up the latest figures for me?", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : integer = None (required) The amount of the loan.\n\t- interest_rate : integer = None (required) The interest rate of the loan.\n\t- loan_period : integer = None (required) The period of the loan.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"integer\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"integer\", \"description\": \"The interest rate of the loan.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "parallel_function", "query": "Can you use the lawsuit_search function to retrieve all lawsuits involving the entity \"Google\" from the county of \"Santa Clara\" and then do the same for the entity \"Facebook\" in the county of \"San Mateo\", both in the state of California?", "query_for_retrieval": "Can you use the lawsuit_search function to retrieve all lawsuits involving the entity \"Google\" from the county of \"Santa Clara\" and then do the same for the entity \"Facebook\" in the county of \"San Mateo\", both in the state of California?", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve all lawsuits involving a particular entity from specified jurisdiction.\n\t\n\tArguments:\n\t---------\n\t- entity : string = None (required) The entity involved in lawsuits.\n\t- county : string = None (required) The jurisdiction for the lawsuit search.\n\t- state : string = None (optional) The state for the lawsuit search. Default is California.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Retrieve all lawsuits involving a particular entity from specified jurisdiction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"entity\": {\"type\": \"string\", \"description\": \"The entity involved in lawsuits.\"}, \"county\": {\"type\": \"string\", \"description\": \"The jurisdiction for the lawsuit search.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state for the lawsuit search. Default is California.\"}}, \"required\": [\"entity\", \"county\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to calculate the area of three different triangles for a construction project I'm working on. The first one has a base of 15 meters and a height of 20 meters, the second has a base of 25 feet with a height of 30 feet, and the last one has dimensions of 35 inches by 40 inches for the base and height, respectively. Can you give me the areas for each triangle?", "query_for_retrieval": "I need to calculate the area of three different triangles for a construction project I'm working on. The first one has a base of 15 meters and a height of 20 meters, the second has a base of 25 feet with a height of 30 feet, and the last one has dimensions of 35 inches by 40 inches for the base and height, respectively. Can you give me the areas for each triangle?", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a triangle given its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base of the triangle, in meters.\n\t- height : integer = None (required) The height of the triangle, in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculates the area of a triangle given its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base of the triangle, in meters.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle, in meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "simple", "query": "What's the distance in milesfrom the Earth to the Moon?", "query_for_retrieval": "What's the distance in milesfrom the Earth to the Moon?", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two celestial bodies.\n\t\n\tArguments:\n\t---------\n\t- body1 : string = None (required) The first celestial body.\n\t- body2 : string = None (required) The second celestial body.\n\t- unit : string = None (optional) The unit of measurement, default is 'km'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate the distance between two celestial bodies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"body1\": {\"type\": \"string\", \"description\": \"The first celestial body.\"}, \"body2\": {\"type\": \"string\", \"description\": \"The second celestial body.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement, default is 'km'.\"}}, \"required\": [\"body1\", \"body2\"]}}"}
{"scope": "parallel_multiple_function", "query": "Invest $2000 in Google and withdraw $1000 from Apple.", "query_for_retrieval": "Invest $2000 in Google and withdraw $1000 from Apple.", "answer": "investment.withdraw", "answer_params": "", "api_description": "def investment.withdraw:\n\t\"\"\"\n\tDescription:\n\t\n\tWithdraw a specific amount from a company's stock.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company you want to withdraw from.\n\t- amount : float = None (required) The amount you want to withdraw.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment.withdraw\", \"description\": \"Withdraw a specific amount from a company's stock.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company you want to withdraw from.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount you want to withdraw.\"}}, \"required\": [\"company\", \"amount\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm currently doing some financial analysis and I need a bit of computational help. Could you calculate the first 10 numbers in the Fibonacci sequence for me? Also, I'm looking at tech stocks and I'm particularly interested in the latest trading price for Microsoft. Can you find that out as well?", "query_for_retrieval": "I'm currently doing some financial analysis and I need a bit of computational help. Could you calculate the first 10 numbers in the Fibonacci sequence for me? Also, I'm looking at tech stocks and I'm particularly interested in the latest trading price for Microsoft. Can you find that out as well?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "parallel_function", "query": "In a game of Pokemon GO, what moves can a Pikachu learn? Also, check if Bulbasaur can learn a specific move named 'Solar Beam'.", "query_for_retrieval": "In a game of Pokemon GO, what moves can a Pikachu learn? Also, check if Bulbasaur can learn a specific move named 'Solar Beam'.", "answer": "PokemonGO.get_moves", "answer_params": "", "api_description": "def PokemonGO.get_moves:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.\n\t\n\tArguments:\n\t---------\n\t- pokemon : string = None (required) The name of the Pokemon.\n\t- move : string = None (optional) An optional parameter that checks if the Pokemon can learn this specific move. default is 'Run'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"PokemonGO.get_moves\", \"description\": \"Retrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pokemon\": {\"type\": \"string\", \"description\": \"The name of the Pokemon.\"}, \"move\": {\"type\": \"string\", \"description\": \"An optional parameter that checks if the Pokemon can learn this specific move. default is 'Run'\"}}, \"required\": [\"pokemon\"]}}"}
{"scope": "simple", "query": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "query_for_retrieval": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "answer": "calculate_average", "answer_params": "", "api_description": "def calculate_average:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the average of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers to calculate the average of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_average\", \"description\": \"Calculates the average of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers to calculate the average of.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "sql", "query": "In a physics experiment, the data is stored in a database table named 'ExperimentData'. The table has columns 'ExperimentID', 'ExperimentName', 'DataValue', 'Unit', and 'DataTime'. The experiment with ID 'EX123' has a data value of '9.8' with unit 'm/s^2' recorded at '2022-01-01 10:00:00'. However, the data value was recorded incorrectly and should be '10.0'. Can you correct this value in the database?", "query_for_retrieval": "In a physics experiment, the data is stored in a database table named 'ExperimentData'. The table has columns 'ExperimentID', 'ExperimentName', 'DataValue', 'Unit', and 'DataTime'. The experiment with ID 'EX123' has a data value of '9.8' with unit 'm/s^2' recorded at '2022-01-01 10:00:00'. However, the data value was recorded incorrectly and should be '10.0'. Can you correct this value in the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Give me a brief on movie 'Interstellar'", "query_for_retrieval": "Give me a brief on movie 'Interstellar'", "answer": "movie_details.brief", "answer_params": "", "api_description": "def movie_details.brief:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function retrieves a brief about a specified movie.\n\t\n\tArguments:\n\t---------\n\t- title : string = None (required) Title of the movie\n\t- extra_info : boolean = false (optional) Option to get additional information like Director, Cast, Awards etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"movie_details.brief\", \"description\": \"This function retrieves a brief about a specified movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"Title of the movie\"}, \"extra_info\": {\"type\": \"boolean\", \"description\": \"Option to get additional information like Director, Cast, Awards etc.\", \"default\": \"false\"}}, \"required\": [\"title\"]}}"}
{"scope": "executable_simple", "query": "I've been trying to adjust my diet and fitness plan, and I really need to get my nutritional needs dialed in. I'm a 30-year-old guy, weigh about 100 kilograms, and I'm 170 centimeters tall. I'm not the most active person \u2013 my activity level is pretty low, around 1. I want to lose weight. Can you calculate what my daily nutritional intake should be?", "query_for_retrieval": "I've been trying to adjust my diet and fitness plan, and I really need to get my nutritional needs dialed in. I'm a 30-year-old guy, weigh about 100 kilograms, and I'm 170 centimeters tall. I'm not the most active person \u2013 my activity level is pretty low, around 1. I want to lose weight. Can you calculate what my daily nutritional intake should be?", "answer": "calculate_nutritional_needs", "answer_params": "", "api_description": "def calculate_nutritional_needs:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- height : float = None (required) The height of the person in centimeters.\n\t- age : float = None (required) The age of the person in years.\n\t- gender : string = None (required) The gender of the person. Possible options [male, female, other].\n\t- activity_level : integer = None (required) The activity level of the person. Possible options [1,2,3,4,5].\n\t- goal : string = None (required) The goal of the person. Possible options [lose, gain, maintain].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_nutritional_needs\", \"description\": \"Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the person in centimeters.\"}, \"age\": {\"type\": \"float\", \"description\": \"The age of the person in years.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the person. Possible options [male, female, other].\"}, \"activity_level\": {\"type\": \"integer\", \"description\": \"The activity level of the person. Possible options [1,2,3,4,5].\"}, \"goal\": {\"type\": \"string\", \"description\": \"The goal of the person. Possible options [lose, gain, maintain].\"}}, \"required\": [\"weight\", \"height\", \"age\", \"gender\", \"activity_level\", \"goal\"]}}"}
{"scope": "simple", "query": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "query_for_retrieval": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "answer": "mutation_type.find", "answer_params": "", "api_description": "def mutation_type.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n\t\n\tArguments:\n\t---------\n\t- snp_id : string = None (required) The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n\t- species : string = None (optional) Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mutation_type.find\", \"description\": \"Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"snp_id\": {\"type\": \"string\", \"description\": \"The ID of the Single Nucleotide Polymorphism (SNP) mutation.\"}, \"species\": {\"type\": \"string\", \"description\": \"Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\"}}, \"required\": [\"snp_id\"]}}"}
{"scope": "multiple_function", "query": "Who were the kings of France during the 18th century?", "query_for_retrieval": "Who were the kings of France during the 18th century?", "answer": "european_history.get_events", "answer_params": "", "api_description": "def european_history.get_events:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides a list of major historical events based on the specified country and century.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) Country name.\n\t- century : integer = None (required) Century as an integer. For example, for the 1700s, input '18'.\n\t- event_type : string = None (optional) Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"european_history.get_events\", \"description\": \"Provides a list of major historical events based on the specified country and century.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Country name.\"}, \"century\": {\"type\": \"integer\", \"description\": \"Century as an integer. For example, for the 1700s, input '18'.\"}, \"event_type\": {\"type\": \"string\", \"description\": \"Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default is 'all'\"}}, \"required\": [\"country\", \"century\"]}}"}
{"scope": "relevance", "query": "Who are the famous dancers of the 19th Century?", "query_for_retrieval": "Who are the famous dancers of the 19th Century?", "answer": "get_museum_artists", "answer_params": "", "api_description": "def get_museum_artists:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves a list of all artists whose works are present in a museum during a particular period.\n\t\n\tArguments:\n\t---------\n\t- museum_name : string = None (required) The name of the museum.\n\t- period : string = None (required) The time period for which to retrieve the artists, e.g., 19th Century.\n\t- country : string = None (optional) The country where the museum is located, optional parameter. Default: 'USA'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_museum_artists\", \"description\": \"Retrieves a list of all artists whose works are present in a museum during a particular period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"period\": {\"type\": \"string\", \"description\": \"The time period for which to retrieve the artists, e.g., 19th Century.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the museum is located, optional parameter. Default: 'USA'\"}}, \"required\": [\"museum_name\", \"period\"]}}"}
{"scope": "simple", "query": "Get the biography and main contributions of Pope Innocent III.", "query_for_retrieval": "Get the biography and main contributions of Pope Innocent III.", "answer": "religious_history.get_papal_biography", "answer_params": "", "api_description": "def religious_history.get_papal_biography:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the biography and main religious and historical contributions of a Pope based on his papal name.\n\t\n\tArguments:\n\t---------\n\t- papal_name : string = None (required) The papal name of the Pope.\n\t- include_contributions : boolean = False (required) Include main contributions of the Pope in the response if true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religious_history.get_papal_biography\", \"description\": \"Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"papal_name\": {\"type\": \"string\", \"description\": \"The papal name of the Pope.\"}, \"include_contributions\": {\"type\": \"boolean\", \"default\": false, \"description\": \"Include main contributions of the Pope in the response if true.\"}}, \"required\": [\"papal_name\", \"include_contributions\"]}}"}
{"scope": "relevance", "query": "What are the best Crime-Thriller movies of 2020?", "query_for_retrieval": "What are the best Crime-Thriller movies of 2020?", "answer": "detect_forgery", "answer_params": "", "api_description": "def detect_forgery:\n\t\"\"\"\n\tDescription:\n\t\n\tDetect if the given set of documents are forged or not\n\t\n\tArguments:\n\t---------\n\t- documents : array = None (required) Array of document paths on the disk.\n\t- machine_learning_model : string = None (required) The machine learning model to be used.\n\t- confidence_threshold : float = 0.8 (optional) The confidence threshold for deciding if a document is forged or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"detect_forgery\", \"description\": \"Detect if the given set of documents are forged or not\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"documents\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Array of document paths on the disk.\"}, \"machine_learning_model\": {\"type\": \"string\", \"description\": \"The machine learning model to be used.\"}, \"confidence_threshold\": {\"type\": \"float\", \"default\": 0.8, \"description\": \"The confidence threshold for deciding if a document is forged or not.\"}}, \"required\": [\"documents\", \"machine_learning_model\"]}}"}
{"scope": "parallel_function", "query": "What are the current traffic conditions for a route from New York to Los Angeles using driving as the preferred method of transportation, then from Los Angeles to San Francisco using bicycling as the preferred method of transportation, and finally from San Francisco back to New York using transit as the preferred method of transportation?", "query_for_retrieval": "What are the current traffic conditions for a route from New York to Los Angeles using driving as the preferred method of transportation, then from Los Angeles to San Francisco using bicycling as the preferred method of transportation, and finally from San Francisco back to New York using transit as the preferred method of transportation?", "answer": "get_traffic_info", "answer_params": "", "api_description": "def get_traffic_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve current traffic conditions for a specified route.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point of the route.\n\t- end_location : string = None (required) The destination of the route.\n\t- mode : string = None (optional) Preferred method of transportation, default to 'driving'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_traffic_info\", \"description\": \"Retrieve current traffic conditions for a specified route.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point of the route.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination of the route.\"}, \"mode\": {\"type\": \"string\", \"enum\": [\"driving\", \"walking\", \"bicycling\", \"transit\"], \"description\": \"Preferred method of transportation, default to 'driving'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "rest", "query": "I'm trying to find the slang definition of 'lit'. Could you show me the correct requests.get call if I have the API key 'YOUR-RAPID-API-KEY' and the host is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "query_for_retrieval": "I'm trying to find the slang definition of 'lit'. Could you show me the correct requests.get call if I have the API key 'YOUR-RAPID-API-KEY' and the host is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://mashape-community-urban-dictionary.p.rapidapi.com/define (required) Urban Dictionary is the dictionary you write.\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - term : string = None (required) The search term or query parameter required by the API.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Urban Dictionary is the dictionary you write.\", \"default\": \"https://mashape-community-urban-dictionary.p.rapidapi.com/define\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The search term or query parameter required by the API.\"}}, \"type\": \"dict\", \"required\": [\"term\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my trip? I need to book a hotel room in Paris for 5 nights. I prefer a deluxe room and would like to add breakfast and spa services. After that, I need to rent a car in Paris for 7 days. I prefer a SUV and I will pick it up from the airport. Then, I need to book another hotel room in Rome for 3 nights. I prefer a suite and would like to add airport transfer service. Lastly, I need to rent a car in Rome for 5 days. I prefer a compact car and I will pick it up from the hotel.\"", "query_for_retrieval": "\"Can you help me plan my trip? I need to book a hotel room in Paris for 5 nights. I prefer a deluxe room and would like to add breakfast and spa services. After that, I need to rent a car in Paris for 7 days. I prefer a SUV and I will pick it up from the airport. Then, I need to book another hotel room in Rome for 3 nights. I prefer a suite and would like to add airport transfer service. Lastly, I need to rent a car in Rome for 5 days. I prefer a compact car and I will pick it up from the hotel.\"", "answer": "car.rental", "answer_params": "", "api_description": "def car.rental:\n\t\"\"\"\n\tDescription:\n\t\n\tRent a car at the specified location for a specific number of days\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location of the car rental.\n\t- days : integer = None (required) Number of days for which to rent the car.\n\t- car_type : string = None (required) Type of the car to rent.\n\t- pick_up : string = None (optional) Location of where to pick up the car. Default is 'airport' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"car.rental\", \"description\": \"Rent a car at the specified location for a specific number of days\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location of the car rental.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for which to rent the car.\"}, \"car_type\": {\"type\": \"string\", \"description\": \"Type of the car to rent.\"}, \"pick_up\": {\"type\": \"string\", \"description\": \"Location of where to pick up the car. Default is 'airport' if not specified.\"}}, \"required\": [\"location\", \"days\", \"car_type\"]}}"}
{"scope": "relevance", "query": "What were the most impactful cases handled by law firm ABC in the year 2020?", "query_for_retrieval": "What were the most impactful cases handled by law firm ABC in the year 2020?", "answer": "case_info.get", "answer_params": "", "api_description": "def case_info.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve case details including the judgement from a case id.\n\t\n\tArguments:\n\t---------\n\t- case_id : string = None (required) The unique id for the case.\n\t- case_year : string = None (required) The year when the case was conducted.\n\t- judge_name : string = Andrew (optional) The judge's name in the case.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"case_info.get\", \"description\": \"Retrieve case details including the judgement from a case id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_id\": {\"type\": \"string\", \"description\": \"The unique id for the case.\"}, \"case_year\": {\"type\": \"string\", \"description\": \"The year when the case was conducted.\"}, \"judge_name\": {\"type\": \"string\", \"description\": \"The judge's name in the case.\", \"default\": \"Andrew\"}}, \"required\": [\"case_id\", \"case_year\"]}}"}
{"scope": "simple", "query": "Check the amount of protein, calories and carbs in an avocado from Walmart.", "query_for_retrieval": "Check the amount of protein, calories and carbs in an avocado from Walmart.", "answer": "grocery_info.nutritional_info", "answer_params": "", "api_description": "def grocery_info.nutritional_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve nutritional information for a given food item from a particular store\n\t\n\tArguments:\n\t---------\n\t- store : string = None (required) The store where the item is available\n\t- food : string = None (required) Food item for which information is needed.\n\t- information : array = None (required) Nutritional details required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_info.nutritional_info\", \"description\": \"Retrieve nutritional information for a given food item from a particular store\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"store\": {\"type\": \"string\", \"description\": \"The store where the item is available\"}, \"food\": {\"type\": \"string\", \"description\": \"Food item for which information is needed.\"}, \"information\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Protein\", \"Calories\", \"Carbohydrates\", \"Fat\", \"Fiber\"]}, \"description\": \"Nutritional details required.\"}}, \"required\": [\"store\", \"food\", \"information\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm doing an analysis on our network traffic and I need to identify the zip codes for several IP addresses that have come up in the logs. Could you start by finding the zip code for '192.168.1.1'? Once that's done, I also need the zip codes for '172.16.254.1', '10.0.0.1', and '203.0.113.0'. It would really help to understand the potential sources of the traffic.", "query_for_retrieval": "I'm doing an analysis on our network traffic and I need to identify the zip codes for several IP addresses that have come up in the logs. Could you start by finding the zip code for '192.168.1.1'? Once that's done, I also need the zip codes for '172.16.254.1', '10.0.0.1', and '203.0.113.0'. It would really help to understand the potential sources of the traffic.", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "query_for_retrieval": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "answer": "random_forest.train", "answer_params": "", "api_description": "def random_forest.train:\n\t\"\"\"\n\tDescription:\n\t\n\tTrain a Random Forest Model on given data\n\t\n\tArguments:\n\t---------\n\t- n_estimators : integer = None (required) The number of trees in the forest.\n\t- max_depth : integer = None (required) The maximum depth of the tree.\n\t- data : any = None (required) The training data for the model.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"random_forest.train\", \"description\": \"Train a Random Forest Model on given data\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n_estimators\": {\"type\": \"integer\", \"description\": \"The number of trees in the forest.\"}, \"max_depth\": {\"type\": \"integer\", \"description\": \"The maximum depth of the tree.\"}, \"data\": {\"type\": \"any\", \"description\": \"The training data for the model.\"}}, \"required\": [\"n_estimators\", \"max_depth\", \"data\"]}}"}
{"scope": "multiple_function", "query": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "query_for_retrieval": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "answer": "flight.book", "answer_params": "", "api_description": "def flight.book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a direct flight for a specific date and time from departure location to destination location.\n\t\n\tArguments:\n\t---------\n\t- departure_location : string = None (required) The location you are departing from.\n\t- destination_location : string = None (required) The location you are flying to.\n\t- date : string = None (required) The date of the flight. Accepts standard date format e.g., 2022-04-28.\n\t- time : string = None (optional) Preferred time of flight. Default is ''\n\t- direct_flight : boolean = None (optional) If set to true, only direct flights will be searched. Default is false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight.book\", \"description\": \"Book a direct flight for a specific date and time from departure location to destination location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"departure_location\": {\"type\": \"string\", \"description\": \"The location you are departing from.\"}, \"destination_location\": {\"type\": \"string\", \"description\": \"The location you are flying to.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the flight. Accepts standard date format e.g., 2022-04-28.\"}, \"time\": {\"type\": \"string\", \"description\": \"Preferred time of flight. Default is ''\"}, \"direct_flight\": {\"type\": \"boolean\", \"description\": \"If set to true, only direct flights will be searched. Default is false\"}}, \"required\": [\"departure_location\", \"destination_location\", \"date\"]}}"}
{"scope": "simple", "query": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "query_for_retrieval": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "answer": "restaurant.find_nearby", "answer_params": "", "api_description": "def restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on specific criteria like cuisine type.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Seattle, WA\n\t- cuisine : string = None (required) Preferred type of cuisine in restaurant.\n\t- max_distance : integer = None (optional) Maximum distance (in miles) within which to search for restaurants. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_nearby\", \"description\": \"Locate nearby restaurants based on specific criteria like cuisine type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Seattle, WA\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Preferred type of cuisine in restaurant.\"}, \"max_distance\": {\"type\": \"integer\", \"description\": \"Maximum distance (in miles) within which to search for restaurants. Default is 5.\"}}, \"required\": [\"location\", \"cuisine\"]}}"}
{"scope": "sql", "query": "Can you add the new species of frog discovered in the Amazon rainforest, named \"Leptodactylus pentadactylus\", with a lifespan of 10 years, a size of 7.5 cm, and a weight of 80 grams, to the \"Species\" table in the database? The columns in the table are \"Species_Name\", \"Lifespan\", \"Size\", and \"Weight\".", "query_for_retrieval": "Can you add the new species of frog discovered in the Amazon rainforest, named \"Leptodactylus pentadactylus\", with a lifespan of 10 years, a size of 7.5 cm, and a weight of 80 grams, to the \"Species\" table in the database? The columns in the table are \"Species_Name\", \"Lifespan\", \"Size\", and \"Weight\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "query_for_retrieval": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "answer": "find_recipe", "answer_params": "", "api_description": "def find_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a recipe based on the dietary restrictions, recipe type, and time constraints.\n\t\n\tArguments:\n\t---------\n\t- dietary_restrictions : string = None (required) Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n\t- recipe_type : string = None (required) Type of the recipe. E.g. dessert, main course, breakfast.\n\t- time : integer = None (required) Time limit in minutes to prep the meal.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipe\", \"description\": \"Find a recipe based on the dietary restrictions, recipe type, and time constraints.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restrictions\": {\"type\": \"string\", \"description\": \"Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\"}, \"recipe_type\": {\"type\": \"string\", \"description\": \"Type of the recipe. E.g. dessert, main course, breakfast.\"}, \"time\": {\"type\": \"integer\", \"description\": \"Time limit in minutes to prep the meal.\"}}, \"required\": [\"dietary_restrictions\", \"recipe_type\", \"time\"]}}"}
{"scope": "javascript", "query": "How can I execute a callback function named 'processResult' that handles an error 'null' and a result value of 'Operation successful'?", "query_for_retrieval": "How can I execute a callback function named 'processResult' that handles an error 'null' and a result value of 'Operation successful'?", "answer": "invokeCallback", "answer_params": "", "api_description": "def invokeCallback:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function invokes a callback with an error and a value. If the callback throws an error, it is caught and re-thrown asynchronously.\n\t\n\tArguments:\n\t---------\n\t- callback : any = None (required) The callback function to be invoked.\n\t- error : any = None (required) The error to pass to the callback function. Can be 'null' if there is no error.\n\t- value : any = None (required) The value to pass to the callback function.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"invokeCallback\", \"description\": \"This function invokes a callback with an error and a value. If the callback throws an error, it is caught and re-thrown asynchronously.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"callback\": {\"type\": \"any\", \"description\": \"The callback function to be invoked.\"}, \"error\": {\"type\": \"any\", \"description\": \"The error to pass to the callback function. Can be 'null' if there is no error.\"}, \"value\": {\"type\": \"any\", \"description\": \"The value to pass to the callback function.\"}}, \"required\": [\"callback\", \"error\", \"value\"]}}"}
{"scope": "parallel_function", "query": "\"Imagine you are conducting a physics experiment where you are dropping objects from different heights and observing their final velocities. You drop a tennis ball from a height of 10 meters with an initial velocity of 0 m/s and then from a height of 20 meters with the same initial velocity. You also drop a baseball from a height of 15 meters with an initial velocity of 0 m/s and then from a height of 25 meters with the same initial velocity. Assuming the acceleration due to gravity is approximately 9.81 m/s^2, can you calculate the final velocities of the tennis ball and the baseball for each drop?\"", "query_for_retrieval": "\"Imagine you are conducting a physics experiment where you are dropping objects from different heights and observing their final velocities. You drop a tennis ball from a height of 10 meters with an initial velocity of 0 m/s and then from a height of 20 meters with the same initial velocity. You also drop a baseball from a height of 15 meters with an initial velocity of 0 m/s and then from a height of 25 meters with the same initial velocity. Assuming the acceleration due to gravity is approximately 9.81 m/s^2, can you calculate the final velocities of the tennis ball and the baseball for each drop?\"", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\n\t\n\tArguments:\n\t---------\n\t- height : integer = None (required) The height the object is dropped from, in meters.\n\t- initial_velocity : integer = None (optional) The initial velocity of the object in m/s. Default is zero.\n\t- gravity : float = None (optional) Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"height\": {\"type\": \"integer\", \"description\": \"The height the object is dropped from, in meters.\"}, \"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in m/s. Default is zero.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity.\"}}, \"required\": [\"height\"]}}"}
{"scope": "multiple_function", "query": "Calculate how many years ago was the Ice age?", "query_for_retrieval": "Calculate how many years ago was the Ice age?", "answer": "geology.get_era", "answer_params": "", "api_description": "def geology.get_era:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the estimated date of a geological era.\n\t\n\tArguments:\n\t---------\n\t- era_name : string = None (required) The name of the geological era. e.g Ice age\n\t- calculate_years_ago : boolean = None (optional) True if years ago is to be calculated. False by default\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geology.get_era\", \"description\": \"Get the estimated date of a geological era.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"era_name\": {\"type\": \"string\", \"description\": \"The name of the geological era. e.g Ice age\"}, \"calculate_years_ago\": {\"type\": \"boolean\", \"description\": \"True if years ago is to be calculated. False by default\"}}, \"required\": [\"era_name\"]}}"}
{"scope": "rest", "query": "I'm looking to get the latest information on the Meta stock from Yahoo Finance API. Could you fetch me the tickers, and make sure to use my RapidAPI credentials, which are 'YOUR-RAPID-API-KEY' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "query_for_retrieval": "I'm looking to get the latest information on the Meta stock from Yahoo Finance API. Could you fetch me the tickers, and make sure to use my RapidAPI credentials, which are 'YOUR-RAPID-API-KEY' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.", "query_for_retrieval": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.", "answer": "calculate_compounded_interest", "answer_params": "", "api_description": "def calculate_compounded_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.\n\t\n\tArguments:\n\t---------\n\t- principal : integer = None (required) The initial amount of money that is being invested or loaned.\n\t- rate : float = None (required) The annual interest rate.\n\t- time : integer = None (required) The number of time periods the money is invested or loaned for.\n\t- n : integer = None (required) The number of times that interest is compounded per unit time.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compounded_interest\", \"description\": \"Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"integer\", \"description\": \"The initial amount of money that is being invested or loaned.\"}, \"rate\": {\"type\": \"float\", \"description\": \"The annual interest rate.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The number of time periods the money is invested or loaned for.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per unit time.\"}}, \"required\": [\"principal\", \"rate\", \"time\", \"n\"]}}"}
{"scope": "simple", "query": "Get the highest scoring player of game 'Valorant' in 2022 season.", "query_for_retrieval": "Get the highest scoring player of game 'Valorant' in 2022 season.", "answer": "get_highest_scoring_player", "answer_params": "", "api_description": "def get_highest_scoring_player:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the highest scoring player in a specific game and season.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The game in which you want to find the highest scoring player.\n\t- season : string = None (required) The season during which the high score was achieved.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_highest_scoring_player\", \"description\": \"Retrieve the highest scoring player in a specific game and season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The game in which you want to find the highest scoring player.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season during which the high score was achieved.\"}}, \"required\": [\"game\", \"season\"]}}"}
{"scope": "rest", "query": "I'm looking to fetch the full plot details for the movie 'Gorilla' from the OMDB API. Can you provide me with the Python requests.get code to retrieve the information in JSON format? I can provide the API key, it's 'YOUR-OMDB-API-KEY'", "query_for_retrieval": "I'm looking to fetch the full plot details for the movie 'Gorilla' from the OMDB API. Can you provide me with the Python requests.get code to retrieve the information in JSON format? I can provide the API key, it's 'YOUR-OMDB-API-KEY'", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I want to assess the growth of my investment portfolio. I started with $10,000 and I've been adding $1,000 to it every year. It's been five years now, and my portfolio has been growing at an annual interest rate of 5%. However, I know inflation can impact the real value of my money, and the rates have been 1%, 2%, 3%, 4%, and 4% respectively for each of the past five years. Can you calculate the current value of my investment, taking inflation into account?", "query_for_retrieval": "I want to assess the growth of my investment portfolio. I started with $10,000 and I've been adding $1,000 to it every year. It's been five years now, and my portfolio has been growing at an annual interest rate of 5%. However, I know inflation can impact the real value of my money, and the rates have been 1%, 2%, 3%, 4%, and 4% respectively for each of the past five years. Can you calculate the current value of my investment, taking inflation into account?", "answer": "calculate_investment_value", "answer_params": "", "api_description": "def calculate_investment_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the value of an investment over time.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- annual_contribution : integer = None (required) The annual contribution amount.\n\t- years : integer = None (required) The number of years to calculate the investment value for.\n\t- annual_return : float = None (required) The annual return rate, ranging from 0 to 1.\n\t- inflation_rate : array = None (required) The inflation rate for each year in percentage, ranging from 0 to 1.\n\t- adjust_for_inflation : boolean = True (optional) Whether to adjust the investment value for inflation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_investment_value\", \"description\": \"Calculates the value of an investment over time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"annual_contribution\": {\"type\": \"integer\", \"description\": \"The annual contribution amount.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to calculate the investment value for.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate, ranging from 0 to 1.\"}, \"inflation_rate\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The inflation rate for each year in percentage, ranging from 0 to 1.\"}, \"adjust_for_inflation\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Whether to adjust the investment value for inflation.\"}}, \"required\": [\"initial_investment\", \"annual_contribution\", \"years\", \"annual_return\", \"inflation_rate\"]}}"}
{"scope": "javascript", "query": "How can I generate a data accessor for a chart component named 'BarChart', with a module name 'chartModule', in a data visualization library `visualizationLibrary`, to fetch and update its 'DataPoints' and 'Labels' through a configuration object named 'config'?", "query_for_retrieval": "How can I generate a data accessor for a chart component named 'BarChart', with a module name 'chartModule', in a data visualization library `visualizationLibrary`, to fetch and update its 'DataPoints' and 'Labels' through a configuration object named 'config'?", "answer": "chartDataAccessorFactory", "answer_params": "", "api_description": "def chartDataAccessorFactory:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function generates a data accessor for a specific chart component within a data visualization librar `. It provides the capability to fetch and update specific properties such as 'DataPoints' and 'Labels' of the chart through a configuration object.\n\t\n\tArguments:\n\t---------\n\t- chart : dict = None (required) The details of the chart component.\n\t  - nm : String = None (required) The name of the chart component.\n\t  - mn : String = None (required) The module name of the chart component.\n\t- library : any = None (required) The instance of the data visualization library where the chart component is defined.\n\t- configObject : String = None (required) The name of the configuration object used to fetch and update the chart's properties.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chartDataAccessorFactory\", \"description\": \"This function generates a data accessor for a specific chart component within a data visualization librar `. It provides the capability to fetch and update specific properties such as 'DataPoints' and 'Labels' of the chart through a configuration object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"chart\": {\"type\": \"dict\", \"properties\": {\"nm\": {\"type\": \"String\", \"description\": \"The name of the chart component.\"}, \"mn\": {\"type\": \"String\", \"description\": \"The module name of the chart component.\"}}, \"description\": \"The details of the chart component.\", \"required\": [\"nm\", \"mn\"]}, \"library\": {\"type\": \"any\", \"description\": \"The instance of the data visualization library where the chart component is defined.\"}, \"configObject\": {\"type\": \"String\", \"description\": \"The name of the configuration object used to fetch and update the chart's properties.\"}}, \"required\": [\"chart\", \"library\", \"configObject\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me plan my day? I need to go from my home at 123 Main Street to my office at 456 Park Avenue, and I don't want to spend more than $30 on the ride. After work, I need to order groceries from the Whole Foods at 789 Broadway. The items I need are milk, bread, eggs, and apples. I don't want to spend more than $10 on delivery. Then, I need to get a ride from my office to my friend's house at 321 Elm Street, and I don't want to spend more than $20 on that ride. Finally, I need to get a ride from my friend's house back to my home, and I don't want to spend more than $25 on that ride. Can you help me with all of this?\"", "query_for_retrieval": "\"Could you help me plan my day? I need to go from my home at 123 Main Street to my office at 456 Park Avenue, and I don't want to spend more than $30 on the ride. After work, I need to order groceries from the Whole Foods at 789 Broadway. The items I need are milk, bread, eggs, and apples. I don't want to spend more than $10 on delivery. Then, I need to get a ride from my office to my friend's house at 321 Elm Street, and I don't want to spend more than $20 on that ride. Finally, I need to get a ride from my friend's house back to my home, and I don't want to spend more than $25 on that ride. Can you help me with all of this?\"", "answer": "grocery_delivery.order", "answer_params": "", "api_description": "def grocery_delivery.order:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder grocery items from a specific location with optional delivery price limit\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location of the grocery store\n\t- items : array = None (required) List of items to order\n\t- max_delivery_cost : float = 10.0 (optional) The maximum delivery cost. It is optional\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_delivery.order\", \"description\": \"Order grocery items from a specific location with optional delivery price limit\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location of the grocery store\"}, \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items to order\"}, \"max_delivery_cost\": {\"type\": \"float\", \"description\": \"The maximum delivery cost. It is optional\", \"default\": 10.0}}, \"required\": [\"location\", \"items\"]}}"}
{"scope": "simple", "query": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "query_for_retrieval": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "answer": "book_hotel", "answer_params": "", "api_description": "def book_hotel:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The city in which the hotel is located.\n\t- room_type : string = None (required) The type of room to be booked.\n\t- start_date : string = None (required) The start date for the booking.\n\t- nights : integer = None (required) The number of nights for which the booking is to be made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_hotel\", \"description\": \"Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city in which the hotel is located.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of room to be booked.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The start date for the booking.\"}, \"nights\": {\"type\": \"integer\", \"description\": \"The number of nights for which the booking is to be made.\"}}, \"required\": [\"hotel_name\", \"location\", \"room_type\", \"start_date\", \"nights\"]}}"}
{"scope": "relevance", "query": "Which place in Paris that is most famous?", "query_for_retrieval": "Which place in Paris that is most famous?", "answer": "recipe_based_restaurants", "answer_params": "", "api_description": "def recipe_based_restaurants:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for the restaurants based on the specific dishes.\n\t\n\tArguments:\n\t---------\n\t- recipe_name : string = None (required) The name of the dish.\n\t- location : string = None (required) The city where to look for the restaurants.\n\t- price_range : array = ['$$'] (optional) The desired price range.\n\t- preferred_rating : integer = 3 (optional) The minimum restaurant rating.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_based_restaurants\", \"description\": \"Search for the restaurants based on the specific dishes.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"recipe_name\": {\"type\": \"string\", \"description\": \"The name of the dish.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city where to look for the restaurants.\"}, \"price_range\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"$\", \"$$\", \"$$$\", \"$$$$\"]}, \"description\": \"The desired price range.\", \"default\": [\"$$\"]}, \"preferred_rating\": {\"type\": \"integer\", \"description\": \"The minimum restaurant rating.\", \"default\": 3}}, \"required\": [\"recipe_name\", \"location\"]}}"}
{"scope": "rest", "query": "What's the correct way to use requests.get to find the meaning of the slang 'yeet', if I have the RapidAPI key 'YOUR-RAPID-API-KEY' and I know that the required host for the API service is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "query_for_retrieval": "What's the correct way to use requests.get to find the meaning of the slang 'yeet', if I have the RapidAPI key 'YOUR-RAPID-API-KEY' and I know that the required host for the API service is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://mashape-community-urban-dictionary.p.rapidapi.com/define (required) Urban Dictionary is the dictionary you write.\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - term : string = None (required) The search term or query parameter required by the API.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Urban Dictionary is the dictionary you write.\", \"default\": \"https://mashape-community-urban-dictionary.p.rapidapi.com/define\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The search term or query parameter required by the API.\"}}, \"type\": \"dict\", \"required\": [\"term\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "What are the precipitation statistics for the Amazon rainforest for the last six months, the last year, and the last five years?", "query_for_retrieval": "What are the precipitation statistics for the Amazon rainforest for the last six months, the last year, and the last five years?", "answer": "ecology_data.precipitation_stats", "answer_params": "", "api_description": "def ecology_data.precipitation_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve precipitation data for a specified location and time period.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the location, e.g., 'Amazon rainforest'.\n\t- time_frame : string = None (required) The time period for which data is required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ecology_data.precipitation_stats\", \"description\": \"Retrieve precipitation data for a specified location and time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the location, e.g., 'Amazon rainforest'.\"}, \"time_frame\": {\"type\": \"string\", \"enum\": [\"six_months\", \"year\", \"five_years\"], \"description\": \"The time period for which data is required.\"}}, \"required\": [\"location\", \"time_frame\"]}}"}
{"scope": "parallel_function", "query": "You are given a task to train a Random Forest classifier on two different datasets, 'dataset1' and 'dataset2'. For the first run, you are asked to set the maximum depth of the trees in the forest to 10 and the number of trees in the forest to 100. For the second run, you are asked to set the maximum depth of the trees in the forest to 20 and the number of trees in the forest to 200. How would you invoke the 'train_random_forest_classifier' function to accomplish this task?", "query_for_retrieval": "You are given a task to train a Random Forest classifier on two different datasets, 'dataset1' and 'dataset2'. For the first run, you are asked to set the maximum depth of the trees in the forest to 10 and the number of trees in the forest to 100. For the second run, you are asked to set the maximum depth of the trees in the forest to 20 and the number of trees in the forest to 200. How would you invoke the 'train_random_forest_classifier' function to accomplish this task?", "answer": "train_random_forest_classifier", "answer_params": "", "api_description": "def train_random_forest_classifier:\n\t\"\"\"\n\tDescription:\n\t\n\tTrain a Random Forest classifier with the specified parameters.\n\t\n\tArguments:\n\t---------\n\t- dataset : string = None (required) The dataset to train the classifier on.\n\t- max_depth : integer = None (required) The maximum depth of the trees in the forest.\n\t- n_estimators : integer = None (required) The number of trees in the forest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"train_random_forest_classifier\", \"description\": \"Train a Random Forest classifier with the specified parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset\": {\"type\": \"string\", \"description\": \"The dataset to train the classifier on.\"}, \"max_depth\": {\"type\": \"integer\", \"description\": \"The maximum depth of the trees in the forest.\"}, \"n_estimators\": {\"type\": \"integer\", \"description\": \"The number of trees in the forest.\"}}, \"required\": [\"dataset\", \"max_depth\", \"n_estimators\"]}}"}
{"scope": "multiple_function", "query": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "query_for_retrieval": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "answer": "mix_paint_color", "answer_params": "", "api_description": "def mix_paint_color:\n\t\"\"\"\n\tDescription:\n\t\n\tCombine two primary paint colors and adjust the resulting color's lightness level.\n\t\n\tArguments:\n\t---------\n\t- color1 : string = None (required) The first primary color to be mixed.\n\t- color2 : string = None (required) The second primary color to be mixed.\n\t- lightness : integer = None (optional) The desired lightness level of the resulting color in percentage. The default level is set to 50%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mix_paint_color\", \"description\": \"Combine two primary paint colors and adjust the resulting color's lightness level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color1\": {\"type\": \"string\", \"description\": \"The first primary color to be mixed.\"}, \"color2\": {\"type\": \"string\", \"description\": \"The second primary color to be mixed.\"}, \"lightness\": {\"type\": \"integer\", \"description\": \"The desired lightness level of the resulting color in percentage. The default level is set to 50%.\"}}, \"required\": [\"color1\", \"color2\"]}}"}
{"scope": "relevance", "query": "Find the fastest route from New York to Boston.", "query_for_retrieval": "Find the fastest route from New York to Boston.", "answer": "prime_numbers_in_range", "answer_params": "", "api_description": "def prime_numbers_in_range:\n\t\"\"\"\n\tDescription:\n\t\n\tFind all the prime numbers within a certain numeric range.\n\t\n\tArguments:\n\t---------\n\t- start : integer = None (required) The start of the numeric range.\n\t- end : integer = None (required) The end of the numeric range.\n\t- return_format : string = string (optional) The format in which the prime numbers should be returned.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prime_numbers_in_range\", \"description\": \"Find all the prime numbers within a certain numeric range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"integer\", \"description\": \"The start of the numeric range.\"}, \"end\": {\"type\": \"integer\", \"description\": \"The end of the numeric range.\"}, \"return_format\": {\"type\": \"string\", \"enum\": [\"array\", \"string\"], \"description\": \"The format in which the prime numbers should be returned.\", \"default\": \"string\"}}, \"required\": [\"start\", \"end\"]}}"}
{"scope": "simple", "query": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "query_for_retrieval": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "answer": "blackjack.check_winner", "answer_params": "", "api_description": "def blackjack.check_winner:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks and determines the winner in a game of blackjack.\n\t\n\tArguments:\n\t---------\n\t- player_cards : array = None (required) Cards held by the player.\n\t- dealer_cards : array = None (required) Cards held by the dealer.\n\t- ace_value : integer = 11 (optional) The value considered for the ace card, can be either 1 or 11.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"blackjack.check_winner\", \"description\": \"Checks and determines the winner in a game of blackjack.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_cards\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Cards held by the player.\"}, \"dealer_cards\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Cards held by the dealer.\"}, \"ace_value\": {\"type\": \"integer\", \"description\": \"The value considered for the ace card, can be either 1 or 11.\", \"default\": 11}}, \"required\": [\"player_cards\", \"dealer_cards\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? Firstly, I am working on a physics experiment and I need to calculate the magnetic field at the center of a circular loop. The loop carries a current of 5 Amperes and has a radius of 0.02 meters. Secondly, I am planning to attend a concert of my favorite artist, Taylor Swift, in New York. I need to book 3 tickets for the concert. Lastly, I am doing a research on Apple Inc. and I need to find the details of lawsuits involving Apple from the year 2010. Specifically, I am interested in lawsuits related to 'Patent' issues. Could you assist me with these?\"", "query_for_retrieval": "\"Could you help me with a few tasks? Firstly, I am working on a physics experiment and I need to calculate the magnetic field at the center of a circular loop. The loop carries a current of 5 Amperes and has a radius of 0.02 meters. Secondly, I am planning to attend a concert of my favorite artist, Taylor Swift, in New York. I need to book 3 tickets for the concert. Lastly, I am doing a research on Apple Inc. and I need to find the details of lawsuits involving Apple from the year 2010. Specifically, I am interested in lawsuits related to 'Patent' issues. Could you assist me with these?\"", "answer": "lawsuit_details.find", "answer_params": "", "api_description": "def lawsuit_details.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind details of lawsuits involving a specific company from a given year.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) Name of the company.\n\t- year : integer = None (required) Year of the lawsuit.\n\t- case_type : string = None (optional) Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_details.find\", \"description\": \"Find details of lawsuits involving a specific company from a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"Name of the company.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the lawsuit.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is all if not specified.\"}}, \"required\": [\"company_name\", \"year\"]}}"}
{"scope": "parallel_function", "query": "Can you use the get_stock_prices function to retrieve the stock prices for Apple, Microsoft, Amazon, and Tesla over the duration of 1 week, 2 weeks, 3 weeks, and 1 month respectively?", "query_for_retrieval": "Can you use the get_stock_prices function to retrieve the stock prices for Apple, Microsoft, Amazon, and Tesla over the duration of 1 week, 2 weeks, 3 weeks, and 1 month respectively?", "answer": "get_stock_prices", "answer_params": "", "api_description": "def get_stock_prices:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves stock prices for specified companies and duration.\n\t\n\tArguments:\n\t---------\n\t- companies : array = None (required) List of companies to retrieve stock prices for.\n\t- duration : string = None (required) Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_prices\", \"description\": \"Retrieves stock prices for specified companies and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"companies\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of companies to retrieve stock prices for.\"}, \"duration\": {\"type\": \"string\", \"description\": \"Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\"}}, \"required\": [\"companies\", \"duration\"]}}"}
{"scope": "relevance", "query": "What is the frequency of gene variant rs7412 in the European population?", "query_for_retrieval": "What is the frequency of gene variant rs7412 in the European population?", "answer": "get_dominant_trait", "answer_params": "", "api_description": "def get_dominant_trait:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the dominant genetic trait of an organism based on its genetic makeup.\n\t\n\tArguments:\n\t---------\n\t- allele1 : string = None (required) The first allele of the organism.\n\t- allele2 : string = None (required) The second allele of the organism.\n\t- inheritance_pattern : string = None (optional) The type of inheritance pattern (could be dominant, recessive, or co-dominant). Default is 'dominant'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_dominant_trait\", \"description\": \"Calculate the dominant genetic trait of an organism based on its genetic makeup.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"allele1\": {\"type\": \"string\", \"description\": \"The first allele of the organism.\"}, \"allele2\": {\"type\": \"string\", \"description\": \"The second allele of the organism.\"}, \"inheritance_pattern\": {\"type\": \"string\", \"description\": \"The type of inheritance pattern (could be dominant, recessive, or co-dominant). Default is 'dominant'.\"}}, \"required\": [\"allele1\", \"allele2\"]}}"}
{"scope": "simple", "query": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "query_for_retrieval": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "answer": "music.theory.chordProgression", "answer_params": "", "api_description": "def music.theory.chordProgression:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentifies a potential key signature for the given chord progression.\n\t\n\tArguments:\n\t---------\n\t- progression : array = None (required) The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV'].\n\t- returnAllPossibleKeys : boolean = None (optional) Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false.\n\t- assumeMajor : boolean = None (optional) Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music.theory.chordProgression\", \"description\": \"Identifies a potential key signature for the given chord progression.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"progression\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV'].\"}, \"returnAllPossibleKeys\": {\"type\": \"boolean\", \"description\": \"Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false.\"}, \"assumeMajor\": {\"type\": \"boolean\", \"description\": \"Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true.\"}}, \"required\": [\"progression\"]}}"}
{"scope": "parallel_function", "query": "Give me the detail of the exhibition named 'Wonder of Nature' in the Louvre museum, and 'Age of Reptiles' in the British Museum. Plus their cost per visit for children and adult.", "query_for_retrieval": "Give me the detail of the exhibition named 'Wonder of Nature' in the Louvre museum, and 'Age of Reptiles' in the British Museum. Plus their cost per visit for children and adult.", "answer": "museum.exhibition_detail", "answer_params": "", "api_description": "def museum.exhibition_detail:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides details of a particular exhibition in a museum, including the cost per visit for different age groups.\n\t\n\tArguments:\n\t---------\n\t- exhibition_name : string = None (required) The name of the exhibition.\n\t- museum_name : string = None (required) The name of the museum.\n\t- visitor_type : array = None (optional) Age group of the visitor. Default is: ['adult']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum.exhibition_detail\", \"description\": \"Provides details of a particular exhibition in a museum, including the cost per visit for different age groups.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"exhibition_name\": {\"type\": \"string\", \"description\": \"The name of the exhibition.\"}, \"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"visitor_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"child\", \"adult\"]}, \"description\": \"Age group of the visitor. Default is: ['adult']\"}}, \"required\": [\"exhibition_name\", \"museum_name\"]}}"}
{"scope": "executable_simple", "query": "During last night's basketball game, one of the star players was on fire, attempting a whopping 30 free throws. It's generally known that the average success rate for free throws hovers around 50%. I'm curious, with that success probability, what are the chances that the player made exactly 15 out of those 30 attempts?", "query_for_retrieval": "During last night's basketball game, one of the star players was on fire, attempting a whopping 30 free throws. It's generally known that the average success rate for free throws hovers around 50%. I'm curious, with that success probability, what are the chances that the player made exactly 15 out of those 30 attempts?", "answer": "calc_binomial_probability", "answer_params": "", "api_description": "def calc_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of getting k successes in n trials.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of trials.\n\t- k : integer = None (required) The number of successes.\n\t- p : float = None (required) The probability of success.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_probability\", \"description\": \"Calculates the probability of getting k successes in n trials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of trials.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of successes.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success.\"}}, \"required\": [\"n\", \"k\", \"p\"]}}"}
{"scope": "parallel_function", "query": "What is the shortest driving distance in miles from New York City to Los Angeles and then from Los Angeles to Miami, considering that you have to return to New York City from Miami?", "query_for_retrieval": "What is the shortest driving distance in miles from New York City to Los Angeles and then from Los Angeles to Miami, considering that you have to return to New York City from Miami?", "answer": "get_shortest_driving_distance", "answer_params": "", "api_description": "def get_shortest_driving_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the shortest driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- origin : string = None (required) Starting point of the journey.\n\t- destination : string = None (required) End point of the journey.\n\t- unit : string = None (optional) Preferred unit of distance (optional, default is kilometers).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_shortest_driving_distance\", \"description\": \"Calculate the shortest driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"string\", \"description\": \"Starting point of the journey.\"}, \"destination\": {\"type\": \"string\", \"description\": \"End point of the journey.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Preferred unit of distance (optional, default is kilometers).\"}}, \"required\": [\"origin\", \"destination\"]}}"}
{"scope": "java", "query": "How can I truncate the translog for a shard located at the path '/var/data/elasticsearch/nodes/0/indices/1shard', using the terminal interface for output and the index directory at '/var/data/elasticsearch/nodes/0/indices/1shard/index'?", "query_for_retrieval": "How can I truncate the translog for a shard located at the path '/var/data/elasticsearch/nodes/0/indices/1shard', using the terminal interface for output and the index directory at '/var/data/elasticsearch/nodes/0/indices/1shard/index'?", "answer": "TruncateTranslogAction.execute", "answer_params": "", "api_description": "def TruncateTranslogAction.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tTruncates the translog for a given shard path by creating a new empty checkpoint and translog file, and removes the existing translog files.\n\t\n\tArguments:\n\t---------\n\t- terminal : any = None (required) The Terminal interface used for standard I/O interactions.\n\t- shardPath : any = None (required) The ShardPath object representing the path to the shard whose translog needs to be truncated. ShardPath() constructor taking a Path object, which can be returned by  Paths.get(<path string>) for example\n\t- indexDirectory : any = None (required) The Directory object representing the path to the index directory of the shard. Directory object can be obtained by return value of FSDirectory.open a path string\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"TruncateTranslogAction.execute\", \"description\": \"Truncates the translog for a given shard path by creating a new empty checkpoint and translog file, and removes the existing translog files.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"terminal\": {\"type\": \"any\", \"description\": \"The Terminal interface used for standard I/O interactions.\"}, \"shardPath\": {\"type\": \"any\", \"description\": \"The ShardPath object representing the path to the shard whose translog needs to be truncated. ShardPath() constructor taking a Path object, which can be returned by  Paths.get(<path string>) for example\"}, \"indexDirectory\": {\"type\": \"any\", \"description\": \"The Directory object representing the path to the index directory of the shard. Directory object can be obtained by return value of FSDirectory.open a path string\"}}, \"required\": [\"terminal\", \"shardPath\", \"indexDirectory\"]}}"}
{"scope": "simple", "query": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "query_for_retrieval": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "answer": "probability_of_event", "answer_params": "", "api_description": "def probability_of_event:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of an event.\n\t\n\tArguments:\n\t---------\n\t- success_outcomes : integer = None (required) The number of successful outcomes.\n\t- total_outcomes : integer = None (required) The total number of possible outcomes.\n\t- format_as_ratio : boolean = None (optional) When true, formats the output as a ratio instead of a decimal. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability_of_event\", \"description\": \"Calculates the probability of an event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"success_outcomes\": {\"type\": \"integer\", \"description\": \"The number of successful outcomes.\"}, \"total_outcomes\": {\"type\": \"integer\", \"description\": \"The total number of possible outcomes.\"}, \"format_as_ratio\": {\"type\": \"boolean\", \"description\": \"When true, formats the output as a ratio instead of a decimal. Default is false.\"}}, \"required\": [\"success_outcomes\", \"total_outcomes\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few things? First, I'm interested in finding out all the movies that actor Leonardo DiCaprio starred in the year 2010, specifically in the Drama category. Second, I'd like to know about any lawsuits filed against the company 'Apple Inc.' in the location 'California' in the year 2015, and I'm particularly interested in civil cases. Lastly, I need to book a direct flight from 'New York' to 'London' on the date '2022-12-25', and I prefer the time to be around '10:00AM'. Can you assist me with these?\"", "query_for_retrieval": "\"Could you help me with a few things? First, I'm interested in finding out all the movies that actor Leonardo DiCaprio starred in the year 2010, specifically in the Drama category. Second, I'd like to know about any lawsuits filed against the company 'Apple Inc.' in the location 'California' in the year 2015, and I'm particularly interested in civil cases. Lastly, I need to book a direct flight from 'New York' to 'London' on the date '2022-12-25', and I prefer the time to be around '10:00AM'. Can you assist me with these?\"", "answer": "lawsuits_search", "answer_params": "", "api_description": "def lawsuits_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits against a specific company within a specific time and location.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- location : string = None (required) The location where the lawsuit was filed.\n\t- year : integer = None (required) The year when the lawsuit was filed.\n\t- case_type : string = None (optional) The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuits_search\", \"description\": \"Search for lawsuits against a specific company within a specific time and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the lawsuit was filed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the lawsuit was filed.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\"}}, \"required\": [\"company_name\", \"location\", \"year\"]}}"}
{"scope": "simple", "query": "Find a grocery store near me with organic fruits and vegetables in Houston.", "query_for_retrieval": "Find a grocery store near me with organic fruits and vegetables in Houston.", "answer": "grocery_store.find_nearby", "answer_params": "", "api_description": "def grocery_store.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby grocery stores based on specific criteria like organic fruits and vegetables.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Houston, TX\n\t- categories : array = None (optional) Categories of items to be found in the grocery store. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.find_nearby\", \"description\": \"Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Houston, TX\"}, \"categories\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Organic\", \"Vegetables\", \"Fruits\", \"Dairy\", \"Seafood\", \"Bakery\"]}, \"description\": \"Categories of items to be found in the grocery store. Default is all if not specified.\"}}, \"required\": [\"location\"]}}"}
{"scope": "rest", "query": "I'm planning a trip and need to schedule calls across different time zones. How can I find out the timezone for a location with latitude 40.7128 and longitude -74.0060, and get a compact version of the response to save on data usage while using my mobile network, with API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "I'm planning a trip and need to schedule calls across different time zones. How can I find out the timezone for a location with latitude 40.7128 and longitude -74.0060, and get a compact version of the response to save on data usage while using my mobile network, with API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "Get me the transaction history for my account '00125648' for the past 7 days and also calculate the total balance.", "query_for_retrieval": "Get me the transaction history for my account '00125648' for the past 7 days and also calculate the total balance.", "answer": "bank.get_transaction_history", "answer_params": "", "api_description": "def bank.get_transaction_history:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve transaction history for a specific bank account over a specified time frame.\n\t\n\tArguments:\n\t---------\n\t- account : string = None (required) The account number for which transaction history is required.\n\t- days : integer = None (required) Number of past days for which to retrieve the transaction history.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"bank.get_transaction_history\", \"description\": \"Retrieve transaction history for a specific bank account over a specified time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"account\": {\"type\": \"string\", \"description\": \"The account number for which transaction history is required.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days for which to retrieve the transaction history.\"}}, \"required\": [\"account\", \"days\"]}}"}
{"scope": "simple", "query": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "query_for_retrieval": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "answer": "array_sort", "answer_params": "", "api_description": "def array_sort:\n\t\"\"\"\n\tDescription:\n\t\n\tSorts a given list in ascending or descending order.\n\t\n\tArguments:\n\t---------\n\t- list : array = None (required) The list of numbers to be sorted.\n\t- order : string = None (required) Order of sorting.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"array_sort\", \"description\": \"Sorts a given list in ascending or descending order.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"list\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers to be sorted.\"}, \"order\": {\"type\": \"string\", \"enum\": [\"ascending\", \"descending\"], \"description\": \"Order of sorting.\"}}, \"required\": [\"list\", \"order\"]}}"}
{"scope": "parallel_function", "query": "Show me the closest music shop where I can purchase a Yamaha acoustic guitar and a Kawai piano in San Francisco, California, and Chicago, Illinois.", "query_for_retrieval": "Show me the closest music shop where I can purchase a Yamaha acoustic guitar and a Kawai piano in San Francisco, California, and Chicago, Illinois.", "answer": "find_music_instrument_store", "answer_params": "", "api_description": "def find_music_instrument_store:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby music instrument stores that sell specific brands or instruments\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state e.g. San Francisco, CA.\n\t- instruments : array = None (required) A list of specific instruments or brands you are looking for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_music_instrument_store\", \"description\": \"Locate nearby music instrument stores that sell specific brands or instruments\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state e.g. San Francisco, CA.\"}, \"instruments\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of specific instruments or brands you are looking for.\"}}, \"required\": [\"location\", \"instruments\"]}}"}
{"scope": "simple", "query": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "query_for_retrieval": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "answer": "lawyer.find_nearby", "answer_params": "", "api_description": "def lawyer.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby lawyers based on specific criteria like specialty, fee per hour and city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city and state, e.g. Chicago, IL.\n\t- specialty : array = None (required) Specialization of the lawyer.\n\t- fee : integer = None (required) Hourly fee charged by lawyer\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawyer.find_nearby\", \"description\": \"Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Chicago, IL.\"}, \"specialty\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Civil\", \"Divorce\", \"Immigration\", \"Business\", \"Criminal\"]}, \"description\": \"Specialization of the lawyer.\"}, \"fee\": {\"type\": \"integer\", \"description\": \"Hourly fee charged by lawyer\"}}, \"required\": [\"city\", \"specialty\", \"fee\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a project that involves comparing the attributes of different entities to determine how similar they are. I have two entities represented by numerical arrays, and I need to use cosine similarity as a measure of similarity between them. The attributes for the first entity are [0.3, 0.8, 0.1, 0.6, 0.2], and for the second entity, they are [0.5, 0.7, 0.4, 0.9, 0.3]. Could you calculate the cosine similarity for these two vectors for me?", "query_for_retrieval": "I'm working on a project that involves comparing the attributes of different entities to determine how similar they are. I have two entities represented by numerical arrays, and I need to use cosine similarity as a measure of similarity between them. The attributes for the first entity are [0.3, 0.8, 0.1, 0.6, 0.2], and for the second entity, they are [0.5, 0.7, 0.4, 0.9, 0.3]. Could you calculate the cosine similarity for these two vectors for me?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "sql", "query": "Can you retrieve the data from the 'employees' table where the 'age' column is greater than 30 and the 'department' column is 'Sales'?", "query_for_retrieval": "Can you retrieve the data from the 'employees' table where the 'age' column is greater than 30 and the 'department' column is 'Sales'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "What is the shortest distance between New York and Los Angeles using a bus as the preferred mode of public transportation, and then what is the shortest distance if we allow transfer between different modes of transportation?", "query_for_retrieval": "What is the shortest distance between New York and Los Angeles using a bus as the preferred mode of public transportation, and then what is the shortest distance if we allow transfer between different modes of transportation?", "answer": "city_distance.find_shortest", "answer_params": "", "api_description": "def city_distance.find_shortest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the shortest distance between two cities via available public transportation.\n\t\n\tArguments:\n\t---------\n\t- start_city : string = None (required) The city you are starting from.\n\t- end_city : string = None (required) The city you are heading to.\n\t- transportation : string = None (optional) Preferred mode of public transportation. Default is 'bus'.\n\t- allow_transfer : boolean = None (optional) Allows transfer between different transportation if true. default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"city_distance.find_shortest\", \"description\": \"Calculates the shortest distance between two cities via available public transportation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_city\": {\"type\": \"string\", \"description\": \"The city you are starting from.\"}, \"end_city\": {\"type\": \"string\", \"description\": \"The city you are heading to.\"}, \"transportation\": {\"type\": \"string\", \"description\": \"Preferred mode of public transportation. Default is 'bus'.\"}, \"allow_transfer\": {\"type\": \"boolean\", \"description\": \"Allows transfer between different transportation if true. default is False\"}}, \"required\": [\"start_city\", \"end_city\"]}}"}
{"scope": "java", "query": "How can I test that the 'zipkin.collector.activemq.concurrency' property with a value of '10' is correctly applied to the ActiveMQCollector.Builder's concurrency setting when configuring a Zipkin server?", "query_for_retrieval": "How can I test that the 'zipkin.collector.activemq.concurrency' property with a value of '10' is correctly applied to the ActiveMQCollector.Builder's concurrency setting when configuring a Zipkin server?", "answer": "propertyTransferredToCollectorBuilder", "answer_params": "", "api_description": "def propertyTransferredToCollectorBuilder:\n\t\"\"\"\n\tDescription:\n\t\n\tTests that a given property is transferred correctly to the ActiveMQCollector.Builder during the setup of a Zipkin server.\n\t\n\tArguments:\n\t---------\n\t- property : String = None (required) The property name to be tested.\n\t- value : any = None (required) The value of the property to be applied.\n\t- builderExtractor : any = None (required) A function that extracts the value from the builder for comparison.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"propertyTransferredToCollectorBuilder\", \"description\": \"Tests that a given property is transferred correctly to the ActiveMQCollector.Builder during the setup of a Zipkin server.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"property\": {\"type\": \"String\", \"description\": \"The property name to be tested.\"}, \"value\": {\"type\": \"any\", \"description\": \"The value of the property to be applied.\"}, \"builderExtractor\": {\"type\": \"any\", \"description\": \"A function that extracts the value from the builder for comparison.\"}}, \"required\": [\"property\", \"value\", \"builderExtractor\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a pet-friendly library with a cafe inside in New York City, NY and then a store in the same city that has disabled access and operates 24 hours?\"", "query_for_retrieval": "\"Can you help me find a pet-friendly library with a cafe inside in New York City, NY and then a store in the same city that has disabled access and operates 24 hours?\"", "answer": "library.find_nearby", "answer_params": "", "api_description": "def library.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city, for example, New York City, NY\n\t- preferences : array = None (required) Your preferences for the library.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"library.find_nearby\", \"description\": \"Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city, for example, New York City, NY\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Pet-friendly\", \"Disabled Access\", \"24 hours\", \"Cafe Inside\"]}, \"description\": \"Your preferences for the library.\"}}, \"required\": [\"location\", \"preferences\"]}}"}
{"scope": "java", "query": "How can I generate a CodeTree for a call conversion in a Truffle DSL processor, using a non-static method named 'convertValue', which requires a frame parameter named 'frameVar' and a return value represented by 'returnValueCode'?", "query_for_retrieval": "How can I generate a CodeTree for a call conversion in a Truffle DSL processor, using a non-static method named 'convertValue', which requires a frame parameter named 'frameVar' and a return value represented by 'returnValueCode'?", "answer": "InstrumentableProcessor.createCallConverter", "answer_params": "", "api_description": "def InstrumentableProcessor.createCallConverter:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a CodeTree that represents a call to a converter method, handling both static and instance methods, and accommodating for different numbers of parameters.\n\t\n\tArguments:\n\t---------\n\t- converterMethod : any = None (required) The ExecutableElement representing the converter method.\n\t- frameParameterName : String = None (required) The name of the frame parameter to be used in the call.\n\t- returnName : any = None (required) The CodeTree representing the name of the return value.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"InstrumentableProcessor.createCallConverter\", \"description\": \"Generates a CodeTree that represents a call to a converter method, handling both static and instance methods, and accommodating for different numbers of parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"converterMethod\": {\"type\": \"any\", \"description\": \"The ExecutableElement representing the converter method.\"}, \"frameParameterName\": {\"type\": \"String\", \"description\": \"The name of the frame parameter to be used in the call.\"}, \"returnName\": {\"type\": \"any\", \"description\": \"The CodeTree representing the name of the return value.\"}}, \"required\": [\"converterMethod\", \"frameParameterName\", \"returnName\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project related to numerical sequences and their applications, and the Fibonacci sequence has piqued my interest. I need to compare several sequences of different lengths for my analysis. Could you calculate the first 10 numbers in the Fibonacci sequence for me? After that, I'll need the first 20 numbers as well. And to wrap up my data set, please provide the first 5 numbers of the sequence.", "query_for_retrieval": "I'm working on a project related to numerical sequences and their applications, and the Fibonacci sequence has piqued my interest. I need to compare several sequences of different lengths for my analysis. Could you calculate the first 10 numbers in the Fibonacci sequence for me? After that, I'll need the first 20 numbers as well. And to wrap up my data set, please provide the first 5 numbers of the sequence.", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "rest", "query": "As a travel blogger, I'm planning my trips for the upcoming year and I'd like to take advantage of the long weekends. Could you help me find out when the long weekends will occur in Canada for the year 2023? I need this information to optimize my travel schedule and make the most of my time off.", "query_for_retrieval": "As a travel blogger, I'm planning my trips for the upcoming year and I'd like to take advantage of the long weekends. Could you help me find out when the long weekends will occur in Canada for the year 2023? I need this information to optimize my travel schedule and make the most of my time off.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode} (required) The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\", \"default\": \"https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "Find the grocery store closest to Berkeley that has at least a 4.5 star rating, selling tomatoes and also pet food.", "query_for_retrieval": "Find the grocery store closest to Berkeley that has at least a 4.5 star rating, selling tomatoes and also pet food.", "answer": "sentiment_analysis", "answer_params": "", "api_description": "def sentiment_analysis:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform sentiment analysis on a given piece of text.\n\t\n\tArguments:\n\t---------\n\t- text : string = None (required) The text on which to perform sentiment analysis.\n\t- language : string = None (required) The language in which the text is written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sentiment_analysis\", \"description\": \"Perform sentiment analysis on a given piece of text.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text on which to perform sentiment analysis.\"}, \"language\": {\"type\": \"string\", \"description\": \"The language in which the text is written.\"}}, \"required\": [\"text\", \"language\"]}}"}
{"scope": "simple", "query": "Find out how genetically similar a human and a chimp are in percentage.", "query_for_retrieval": "Find out how genetically similar a human and a chimp are in percentage.", "answer": "genetics.calculate_similarity", "answer_params": "", "api_description": "def genetics.calculate_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the genetic similarity between two species based on their DNA sequences.\n\t\n\tArguments:\n\t---------\n\t- species1 : string = None (required) The first species to compare.\n\t- species2 : string = None (required) The second species to compare.\n\t- format : string = None (optional) The format of the result (percentage or fraction). Default is percentage.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"genetics.calculate_similarity\", \"description\": \"Calculates the genetic similarity between two species based on their DNA sequences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species1\": {\"type\": \"string\", \"description\": \"The first species to compare.\"}, \"species2\": {\"type\": \"string\", \"description\": \"The second species to compare.\"}, \"format\": {\"type\": \"string\", \"description\": \"The format of the result (percentage or fraction). Default is percentage.\"}}, \"required\": [\"species1\", \"species2\"]}}"}
{"scope": "simple", "query": "What key signature does C# major have?", "query_for_retrieval": "What key signature does C# major have?", "answer": "music_theory.key_signature", "answer_params": "", "api_description": "def music_theory.key_signature:\n\t\"\"\"\n\tDescription:\n\t\n\tReturn the key signature of a major or minor scale.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The root of the scale, e.g., 'C', 'F#', 'Ab'.\n\t- scale_type : string = None (optional) Type of the scale, either 'major' or 'minor'. Default is 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_theory.key_signature\", \"description\": \"Return the key signature of a major or minor scale.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The root of the scale, e.g., 'C', 'F#', 'Ab'.\"}, \"scale_type\": {\"type\": \"string\", \"enum\": [\"major\", \"minor\"], \"description\": \"Type of the scale, either 'major' or 'minor'. Default is 'major'.\"}}, \"required\": [\"key\"]}}"}
{"scope": "sql", "query": "Can you generate a new table in the database named 'MathScores' with the columns 'StudentID', 'AlgebraScore', 'GeometryScore', 'CalculusScore', and 'StatisticsScore'?", "query_for_retrieval": "Can you generate a new table in the database named 'MathScores' with the columns 'StudentID', 'AlgebraScore', 'GeometryScore', 'CalculusScore', and 'StatisticsScore'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "In Elasticsearch, how can I build a nested query for a search context `mainSearchContext` and update the inner hits context `hitsContext` for a nested path 'user.address', ensuring that unmapped paths are not ignored?", "query_for_retrieval": "In Elasticsearch, how can I build a nested query for a search context `mainSearchContext` and update the inner hits context `hitsContext` for a nested path 'user.address', ensuring that unmapped paths are not ignored?", "answer": "NestedQueryBuilder.doBuild", "answer_params": "", "api_description": "def NestedQueryBuilder.doBuild:\n\t\"\"\"\n\tDescription:\n\t\n\tBuilds the nested query based on the provided search context and updates the inner hits context accordingly. It throws an IOException if the nested path is not mapped and ignoreUnmapped is false.\n\t\n\tArguments:\n\t---------\n\t- parentSearchContext : any = None (required) The search context of the parent query.\n\t- innerHitsContext : any = None (required) The context for inner hits that will be updated by the nested query builder.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"NestedQueryBuilder.doBuild\", \"description\": \"Builds the nested query based on the provided search context and updates the inner hits context accordingly. It throws an IOException if the nested path is not mapped and ignoreUnmapped is false.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"parentSearchContext\": {\"type\": \"any\", \"description\": \"The search context of the parent query.\"}, \"innerHitsContext\": {\"type\": \"any\", \"description\": \"The context for inner hits that will be updated by the nested query builder.\"}}, \"required\": [\"parentSearchContext\", \"innerHitsContext\"]}}"}
{"scope": "multiple_function", "query": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%.", "query_for_retrieval": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%.", "answer": "calc_Compound_Interest", "answer_params": "", "api_description": "def calc_Compound_Interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute compound interest.\n\t\n\tArguments:\n\t---------\n\t- principle_amount : integer = None (required) The principle amount that is invested.\n\t- duration : integer = None (required) Duration of time period in years.\n\t- annual_rate : float = None (required) Interest rate in percentage.\n\t- compound_freq : integer = 1 (optional) The number of times that interest is compounded per unit time.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_Compound_Interest\", \"description\": \"Compute compound interest.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principle_amount\": {\"type\": \"integer\", \"description\": \"The principle amount that is invested.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"Duration of time period in years.\"}, \"annual_rate\": {\"type\": \"float\", \"description\": \"Interest rate in percentage.\"}, \"compound_freq\": {\"type\": \"integer\", \"default\": 1, \"description\": \"The number of times that interest is compounded per unit time.\"}}, \"required\": [\"principle_amount\", \"duration\", \"annual_rate\"]}}"}
{"scope": "parallel_function", "query": "Get the protein sequence of human HbA1c, normal hemoglobin, and rat hemoglobin and their 3D models", "query_for_retrieval": "Get the protein sequence of human HbA1c, normal hemoglobin, and rat hemoglobin and their 3D models", "answer": "protein_info.get_sequence_and_3D", "answer_params": "", "api_description": "def protein_info.get_sequence_and_3D:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrive the sequence and 3D models of proteins.\n\t\n\tArguments:\n\t---------\n\t- protein_name : string = None (required) The name of the protein.\n\t- model_3d : boolean = True (optional) Set true to get 3D model of the protein.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"protein_info.get_sequence_and_3D\", \"description\": \"Retrive the sequence and 3D models of proteins.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"protein_name\": {\"type\": \"string\", \"description\": \"The name of the protein.\"}, \"model_3d\": {\"type\": \"boolean\", \"description\": \"Set true to get 3D model of the protein.\", \"default\": true}}, \"required\": [\"protein_name\"]}}"}
{"scope": "multiple_function", "query": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "query_for_retrieval": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "answer": "restaurant_search.find_closest", "answer_params": "", "api_description": "def restaurant_search.find_closest:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city, for instance Boston, MA\n\t- cuisine : string = None (required) Type of food like Sushi.\n\t- amenities : array = None (optional) Preferred amenities in the restaurant. Default is empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_search.find_closest\", \"description\": \"Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city, for instance Boston, MA\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Type of food like Sushi.\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Patio\", \"Wi-Fi\", \"Happy Hour\", \"Wheelchair Accessible\"]}, \"description\": \"Preferred amenities in the restaurant. Default is empty array.\"}}, \"required\": [\"location\", \"cuisine\"]}}"}
{"scope": "javascript", "query": "How can I ensure that a new line is emitted before the leading comments of a node with position 42 in a TypeScript file, using a lineMap object named 'tsLineMap' and a writer object named 'tsWriter'?", "query_for_retrieval": "How can I ensure that a new line is emitted before the leading comments of a node with position 42 in a TypeScript file, using a lineMap object named 'tsLineMap' and a writer object named 'tsWriter'?", "answer": "emitNewLineBeforeLeadingComments", "answer_params": "", "api_description": "def emitNewLineBeforeLeadingComments:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function ensures that a new line is emitted before the leading comments of a specified node within a TypeScript file.\n\t\n\tArguments:\n\t---------\n\t- lineMap : any = None (required) An object representing the line map of the TypeScript file.\n\t- writer : any = None (required) An object used for writing to the TypeScript file.\n\t- node : integer = None (required) The position of the node..\n\t- leadingComments : any = None (optional) An array of leading comment objects associated with the node. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"emitNewLineBeforeLeadingComments\", \"description\": \"This function ensures that a new line is emitted before the leading comments of a specified node within a TypeScript file.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"lineMap\": {\"type\": \"any\", \"description\": \"An object representing the line map of the TypeScript file.\"}, \"writer\": {\"type\": \"any\", \"description\": \"An object used for writing to the TypeScript file.\"}, \"node\": {\"type\": \"integer\", \"description\": \"The position of the node..\"}, \"leadingComments\": {\"type\": \"any\", \"description\": \"An array of leading comment objects associated with the node. Default empty array\"}}, \"required\": [\"lineMap\", \"writer\", \"node\"]}}"}
{"scope": "relevance", "query": "What color should I use to get a similar color of blue in my painting?", "query_for_retrieval": "What color should I use to get a similar color of blue in my painting?", "answer": "color_complimentary", "answer_params": "", "api_description": "def color_complimentary:\n\t\"\"\"\n\tDescription:\n\t\n\tDetermine the color complimentary to the given one. Complimentary colors provide a strong contrast.\n\t\n\tArguments:\n\t---------\n\t- color : string = None (required) The base color that you want to find the complement of.\n\t- color_format : string = RGB (optional) Format to receive the complimentary color, options are RGB or HEX.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"color_complimentary\", \"description\": \"Determine the color complimentary to the given one. Complimentary colors provide a strong contrast.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color\": {\"type\": \"string\", \"description\": \"The base color that you want to find the complement of.\"}, \"color_format\": {\"type\": \"string\", \"description\": \"Format to receive the complimentary color, options are RGB or HEX.\", \"default\": \"RGB\"}}, \"required\": [\"color\"]}}"}
{"scope": "simple", "query": "Generate a major chord progression in C key with four chords.", "query_for_retrieval": "Generate a major chord progression in C key with four chords.", "answer": "music_generation.create_chord_progression", "answer_params": "", "api_description": "def music_generation.create_chord_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a chord progression in a specific key and number of chords.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key for the chord progression.\n\t- chords : integer = None (required) Number of chords in the progression.\n\t- progression_type : string = None (optional) The type of the chord progression. Optional parameter. Default is 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_generation.create_chord_progression\", \"description\": \"Create a chord progression in a specific key and number of chords.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key for the chord progression.\"}, \"chords\": {\"type\": \"integer\", \"description\": \"Number of chords in the progression.\"}, \"progression_type\": {\"type\": \"string\", \"description\": \"The type of the chord progression. Optional parameter. Default is 'major'.\"}}, \"required\": [\"key\", \"chords\"]}}"}
{"scope": "executable_multiple_function", "query": "I've been planning my financial future and I've decided to make an initial investment of $10,000, followed by an annual contribution of $1,000. My investment plan will run for 5 years, and I'm expecting an annual return of 5%. However, I'm also aware that inflation can impact the value of my investment, so I've projected an inflation rate that changes year over year: 1% for the first year, 2% for the second, and so on, up to 4% for the last two years. I need to calculate the real value of my investment after accounting for these inflation rates. Can you provide me with the adjusted value of my investment over this 5-year period?", "query_for_retrieval": "I've been planning my financial future and I've decided to make an initial investment of $10,000, followed by an annual contribution of $1,000. My investment plan will run for 5 years, and I'm expecting an annual return of 5%. However, I'm also aware that inflation can impact the value of my investment, so I've projected an inflation rate that changes year over year: 1% for the first year, 2% for the second, and so on, up to 4% for the last two years. I need to calculate the real value of my investment after accounting for these inflation rates. Can you provide me with the adjusted value of my investment over this 5-year period?", "answer": "calculate_investment_value", "answer_params": "", "api_description": "def calculate_investment_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the value of an investment over time.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- annual_contribution : integer = None (required) The annual contribution amount.\n\t- years : integer = None (required) The number of years to calculate the investment value for.\n\t- annual_return : float = None (required) The annual return rate, ranging from 0 to 1.\n\t- inflation_rate : array = None (required) The inflation rate for each year in percentage, ranging from 0 to 1.\n\t- adjust_for_inflation : boolean = True (optional) Whether to adjust the investment value for inflation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_investment_value\", \"description\": \"Calculates the value of an investment over time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"annual_contribution\": {\"type\": \"integer\", \"description\": \"The annual contribution amount.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to calculate the investment value for.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate, ranging from 0 to 1.\"}, \"inflation_rate\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The inflation rate for each year in percentage, ranging from 0 to 1.\"}, \"adjust_for_inflation\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Whether to adjust the investment value for inflation.\"}}, \"required\": [\"initial_investment\", \"annual_contribution\", \"years\", \"annual_return\", \"inflation_rate\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me what the weather was like in New York City on 2020-12-25 and 2021-01-01, and also provide the historical weather data for the geographical coordinates (40.7128, -74.0060) on 2021-01-15? Additionally, can you forecast the weather for the same coordinates for the next 10 days?\"", "query_for_retrieval": "\"Can you tell me what the weather was like in New York City on 2020-12-25 and 2021-01-01, and also provide the historical weather data for the geographical coordinates (40.7128, -74.0060) on 2021-01-15? Additionally, can you forecast the weather for the same coordinates for the next 10 days?\"", "answer": "weather.get_forecast_by_coordinates", "answer_params": "", "api_description": "def weather.get_forecast_by_coordinates:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the weather forecast for a specific geographical coordinates.\n\t\n\tArguments:\n\t---------\n\t- coordinates : tuple = None (required) The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude.\n\t- days_ahead : integer = None (optional) Number of days to forecast from current date (optional, default is 7).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather.get_forecast_by_coordinates\", \"description\": \"Get the weather forecast for a specific geographical coordinates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"tuple\", \"items\": {\"type\": \"float\"}, \"description\": \"The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude.\"}, \"days_ahead\": {\"type\": \"integer\", \"description\": \"Number of days to forecast from current date (optional, default is 7).\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "parallel_function", "query": "\"In a game of basketball, a player has a 60% chance of making a successful shot. In a particular match, the player attempts 10 shots. What is the probability that the player makes exactly 6 successful shots? Now, consider a different scenario where the player's success rate drops to 50% but the number of attempts remains the same. What is the probability of making exactly 6 successful shots in this scenario? Finally, consider a third scenario where the player's success rate remains at 50% but the number of attempts increases to 15. What is the probability of making exactly 6 successful shots in this third scenario?\"", "query_for_retrieval": "\"In a game of basketball, a player has a 60% chance of making a successful shot. In a particular match, the player attempts 10 shots. What is the probability that the player makes exactly 6 successful shots? Now, consider a different scenario where the player's success rate drops to 50% but the number of attempts remains the same. What is the probability of making exactly 6 successful shots in this scenario? Finally, consider a third scenario where the player's success rate remains at 50% but the number of attempts increases to 15. What is the probability of making exactly 6 successful shots in this third scenario?\"", "answer": "calc_binomial_prob", "answer_params": "", "api_description": "def calc_binomial_prob:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of an outcome based on the binomial distribution\n\t\n\tArguments:\n\t---------\n\t- num_trials : integer = None (required) Number of independent experiments.\n\t- num_success : integer = None (required) Number of times the event of interest has occurred.\n\t- prob_success : float = None (required) Probability of the event of interest on any single experiment.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_prob\", \"description\": \"Calculates the probability of an outcome based on the binomial distribution\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num_trials\": {\"type\": \"integer\", \"description\": \"Number of independent experiments.\"}, \"num_success\": {\"type\": \"integer\", \"description\": \"Number of times the event of interest has occurred.\"}, \"prob_success\": {\"type\": \"float\", \"description\": \"Probability of the event of interest on any single experiment.\"}}, \"required\": [\"num_trials\", \"num_success\", \"prob_success\"]}}"}
{"scope": "parallel_function", "query": "A physics experiment is being conducted where two objects are dropped from a height, neglecting air resistance. The first object is dropped with an initial speed of 0 m/s and the second object is dropped with an initial speed of 5 m/s. If the first object is in free fall for 10 seconds and the second object is in free fall for 7 seconds, can you calculate the final speed of both objects considering the acceleration due to gravity as -9.81 m/s^2?", "query_for_retrieval": "A physics experiment is being conducted where two objects are dropped from a height, neglecting air resistance. The first object is dropped with an initial speed of 0 m/s and the second object is dropped with an initial speed of 5 m/s. If the first object is in free fall for 10 seconds and the second object is in free fall for 7 seconds, can you calculate the final speed of both objects considering the acceleration due to gravity as -9.81 m/s^2?", "answer": "calculate_final_speed", "answer_params": "", "api_description": "def calculate_final_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\n\t\n\tArguments:\n\t---------\n\t- initial_speed : integer = None (optional) The initial speed of the object in m/s. Default is 0 for an object at rest.\n\t- time : integer = None (required) The time in seconds for which the object is in free fall.\n\t- gravity : float = None (optional) The acceleration due to gravity. Default is -9.81 m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_speed\", \"description\": \"Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"integer\", \"description\": \"The initial speed of the object in m/s. Default is 0 for an object at rest.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time in seconds for which the object is in free fall.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The acceleration due to gravity. Default is -9.81 m/s^2.\"}}, \"required\": [\"time\"]}}"}
