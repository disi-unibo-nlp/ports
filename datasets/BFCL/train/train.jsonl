{"scope": "simple", "query": "Get me data on average precipitation in the Amazon rainforest for the last six months.", "query_for_retrieval": "Get me data on average precipitation in the Amazon rainforest for the last six months.", "answer": "ecology_data.precipitation_stats", "answer_params": "", "api_description": "def ecology_data.precipitation_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve precipitation data for a specified location and time period.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the location, e.g., 'Amazon rainforest'.\n\t- time_frame : string = None (required) The time period for which data is required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ecology_data.precipitation_stats\", \"description\": \"Retrieve precipitation data for a specified location and time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the location, e.g., 'Amazon rainforest'.\"}, \"time_frame\": {\"type\": \"string\", \"enum\": [\"six_months\", \"year\", \"five_years\"], \"description\": \"The time period for which data is required.\"}}, \"required\": [\"location\", \"time_frame\"]}}"}
{"scope": "sql", "query": "Can you provide the list of genes from the \"gene\" table that are associated with the disease \"Cancer\"? Please include only those genes whose names are listed in the columns \"gene_name\", \"disease\" and satisfy the condition where disease is \"Cancer\".", "query_for_retrieval": "Can you provide the list of genes from the \"gene\" table that are associated with the disease \"Cancer\"? Please include only those genes whose names are listed in the columns \"gene_name\", \"disease\" and satisfy the condition where disease is \"Cancer\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are planning a cozy evening at home. You want to play a card game with a deck of cards, but you are not sure if the 'King of Hearts' is in the deck. Can you check if it's there? Later, you plan to cook a recipe that requires 2 cups of sugar, but you only have a tablespoon to measure. How many tablespoons are equivalent to 2 cups? Also, you have 100 Euros in your wallet, and you want to know how much it would be in US dollars. Can you convert it? Finally, you are thinking about adding some new plants to your garden. You live in San Francisco and are interested in nurseries that provide 'Annual' and 'Tree' type plants. Can you find some local nurseries?\"", "query_for_retrieval": "\"Imagine you are planning a cozy evening at home. You want to play a card game with a deck of cards, but you are not sure if the 'King of Hearts' is in the deck. Can you check if it's there? Later, you plan to cook a recipe that requires 2 cups of sugar, but you only have a tablespoon to measure. How many tablespoons are equivalent to 2 cups? Also, you have 100 Euros in your wallet, and you want to know how much it would be in US dollars. Can you convert it? Finally, you are thinking about adding some new plants to your garden. You live in San Francisco and are interested in nurseries that provide 'Annual' and 'Tree' type plants. Can you find some local nurseries?\"", "answer": "find_card_in_deck", "answer_params": "", "api_description": "def find_card_in_deck:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a particular card in a deck based on rank and suit.\n\t\n\tArguments:\n\t---------\n\t- rank : string = None (required) Rank of the card (e.g. Ace, Two, King).\n\t- suit : string = None (required) Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n\t- deck : array = None (optional) Deck of cards. If not provided, the deck will be a default standard 52 card deck\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_card_in_deck\", \"description\": \"Locate a particular card in a deck based on rank and suit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\", \"description\": \"Rank of the card (e.g. Ace, Two, King).\"}, \"suit\": {\"type\": \"string\", \"description\": \"Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\"}, \"deck\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\"}, \"suit\": {\"type\": \"string\"}}}, \"description\": \"Deck of cards. If not provided, the deck will be a default standard 52 card deck\"}}, \"required\": [\"rank\", \"suit\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a travel itinerary that will take me across various time zones, and I need to schedule meetings in different cities around the globe. Could you help me find out the time zones for these specific coordinates? Start with the coordinates at longitude 77.1025 and latitude 28.7041. Following that, I'll need the time zone for another set of coordinates: longitude -73.935242 and latitude 40.730610. Once we have those, let's also figure out the time zones for Sydney with longitude 151.2093 and latitude 33.8688, and then Tokyo, where the coordinates are longitude 139.6917 and latitude 35.6895.", "query_for_retrieval": "I'm working on a travel itinerary that will take me across various time zones, and I need to schedule meetings in different cities around the globe. Could you help me find out the time zones for these specific coordinates? Start with the coordinates at longitude 77.1025 and latitude 28.7041. Following that, I'll need the time zone for another set of coordinates: longitude -73.935242 and latitude 40.730610. Once we have those, let's also figure out the time zones for Sydney with longitude 151.2093 and latitude 33.8688, and then Tokyo, where the coordinates are longitude 139.6917 and latitude 35.6895.", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "relevance", "query": "What is the effect of economic status on happiness levels?", "query_for_retrieval": "What is the effect of economic status on happiness levels?", "answer": "get_happiness_index", "answer_params": "", "api_description": "def get_happiness_index:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the happiness index for a given country or area based on data compiled from global surveys.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which to retrieve the happiness index.\n\t- year : integer = None (required) The year for which to retrieve the happiness index.\n\t- demographic_group : string = total (optional) The demographic group for which to retrieve the happiness index. If not specified, the total for all groups will be returned.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_happiness_index\", \"description\": \"Fetches the happiness index for a given country or area based on data compiled from global surveys.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which to retrieve the happiness index.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which to retrieve the happiness index.\"}, \"demographic_group\": {\"type\": \"string\", \"enum\": [\"total\", \"low income\", \"middle income\", \"high income\"], \"description\": \"The demographic group for which to retrieve the happiness index. If not specified, the total for all groups will be returned.\", \"default\": \"total\"}}, \"required\": [\"country\", \"year\"]}}"}
{"scope": "sql", "query": "In a physics lab, we are conducting an experiment to measure the speed of sound in different mediums. We have a database table named 'SoundSpeedExperiment' where we store our results. The columns in the table are 'Medium', 'Speed', 'Temperature' and 'ExperimentNumber'. In the first experiment, the speed of sound in air at 20 degrees Celsius was measured to be 343 m/s. In the second experiment, the speed of sound in water at the same temperature was found to be 1482 m/s. Can you help us record this data in our database?", "query_for_retrieval": "In a physics lab, we are conducting an experiment to measure the speed of sound in different mediums. We have a database table named 'SoundSpeedExperiment' where we store our results. The columns in the table are 'Medium', 'Speed', 'Temperature' and 'ExperimentNumber'. In the first experiment, the speed of sound in air at 20 degrees Celsius was measured to be 343 m/s. In the second experiment, the speed of sound in water at the same temperature was found to be 1482 m/s. Can you help us record this data in our database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "How much time will it take for the light to reach earth from a star 4 light years away?", "query_for_retrieval": "How much time will it take for the light to reach earth from a star 4 light years away?", "answer": "light_travel_time", "answer_params": "", "api_description": "def light_travel_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the time taken for light to travel from a celestial body to another.\n\t\n\tArguments:\n\t---------\n\t- distance_in_light_years : integer = None (required) The distance between the two celestial bodies in light years.\n\t- speed_of_light : integer = None (optional) The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"light_travel_time\", \"description\": \"Calculate the time taken for light to travel from a celestial body to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance_in_light_years\": {\"type\": \"integer\", \"description\": \"The distance between the two celestial bodies in light years.\"}, \"speed_of_light\": {\"type\": \"integer\", \"description\": \"The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\"}}, \"required\": [\"distance_in_light_years\"]}}"}
{"scope": "simple", "query": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details", "query_for_retrieval": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details", "answer": "sports_ranking.get_team_position", "answer_params": "", "api_description": "def sports_ranking.get_team_position:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a team's position and stats in the basketball league for a given season.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- season : string = None (required) The season for which data should be fetched.\n\t- detailed : boolean = False (optional) Flag to retrieve detailed stats or just the position.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_team_position\", \"description\": \"Retrieve a team's position and stats in the basketball league for a given season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which data should be fetched.\"}, \"detailed\": {\"type\": \"boolean\", \"description\": \"Flag to retrieve detailed stats or just the position.\", \"default\": false}}, \"required\": [\"team\", \"season\"]}}"}
{"scope": "multiple_function", "query": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "query_for_retrieval": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "answer": "random.normalvariate", "answer_params": "", "api_description": "def random.normalvariate:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a random number from a normal distribution given the mean and standard deviation.\n\t\n\tArguments:\n\t---------\n\t- mu : float = None (required) Mean of the normal distribution.\n\t- sigma : float = None (required) Standard deviation of the normal distribution.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"random.normalvariate\", \"description\": \"Generates a random number from a normal distribution given the mean and standard deviation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mu\": {\"type\": \"float\", \"description\": \"Mean of the normal distribution.\"}, \"sigma\": {\"type\": \"float\", \"description\": \"Standard deviation of the normal distribution.\"}}, \"required\": [\"mu\", \"sigma\"]}}"}
{"scope": "parallel_function", "query": "How to save game progress at stage 7 in easy mode and stage 3 in hard mode?", "query_for_retrieval": "How to save game progress at stage 7 in easy mode and stage 3 in hard mode?", "answer": "game.save_progress", "answer_params": "", "api_description": "def game.save_progress:\n\t\"\"\"\n\tDescription:\n\t\n\tSave the current state of a player's game, given the stage, level and game mode.\n\t\n\tArguments:\n\t---------\n\t- stage : integer = None (required) The current stage in the game the player has reached.\n\t- mode : string = None (required) The game mode. Available modes are easy or hard.\n\t- level : string = user (optional) The player's level.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game.save_progress\", \"description\": \"Save the current state of a player's game, given the stage, level and game mode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stage\": {\"type\": \"integer\", \"description\": \"The current stage in the game the player has reached.\"}, \"mode\": {\"type\": \"string\", \"enum\": [\"easy\", \"hard\"], \"description\": \"The game mode. Available modes are easy or hard.\"}, \"level\": {\"type\": \"string\", \"default\": \"user\", \"description\": \"The player's level.\"}}, \"required\": [\"stage\", \"mode\"]}}"}
{"scope": "relevance", "query": "Who are in the cricket matches scheduled for today?", "query_for_retrieval": "Who are in the cricket matches scheduled for today?", "answer": "sports_analyzer.get_schedule", "answer_params": "", "api_description": "def sports_analyzer.get_schedule:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the schedule of cricket matches for a specific date.\n\t\n\tArguments:\n\t---------\n\t- date : string = None (required) The date for which to get the schedule of matches.\n\t- sport : string = None (required) The type of sport. Default is cricket.\n\t- country : string = None (optional) The country for which to get the schedule. If not provided, all countries will be included. Default: 'USA'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_analyzer.get_schedule\", \"description\": \"Retrieve the schedule of cricket matches for a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"date\": {\"type\": \"string\", \"description\": \"The date for which to get the schedule of matches.\"}, \"sport\": {\"type\": \"string\", \"description\": \"The type of sport. Default is cricket.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country for which to get the schedule. If not provided, all countries will be included. Default: 'USA'\"}}, \"required\": [\"date\", \"sport\"]}}"}
{"scope": "parallel_function", "query": "What are the protein sequences encoded by the BRCA1 and BRCA2 genes in Homo sapiens and Pan troglodytes (chimpanzee)?", "query_for_retrieval": "What are the protein sequences encoded by the BRCA1 and BRCA2 genes in Homo sapiens and Pan troglodytes (chimpanzee)?", "answer": "get_protein_sequence", "answer_params": "", "api_description": "def get_protein_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the protein sequence encoded by a human gene.\n\t\n\tArguments:\n\t---------\n\t- gene : string = None (required) The human gene of interest.\n\t- species : string = Homo sapiens (optional) The species for which the gene is to be analyzed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_protein_sequence\", \"description\": \"Retrieve the protein sequence encoded by a human gene.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"gene\": {\"type\": \"string\", \"description\": \"The human gene of interest.\"}, \"species\": {\"type\": \"string\", \"description\": \"The species for which the gene is to be analyzed.\", \"default\": \"Homo sapiens\"}}, \"required\": [\"gene\"]}}"}
{"scope": "relevance", "query": "How many heads can I get after tossing 3 coins?", "query_for_retrieval": "How many heads can I get after tossing 3 coins?", "answer": "probability_calculator", "answer_params": "", "api_description": "def probability_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of an event\n\t\n\tArguments:\n\t---------\n\t- total_outcomes : integer = None (required) The total number of possible outcomes.\n\t- event_outcomes : integer = None (required) The number of outcomes that we are interested in.\n\t- return_decimal : boolean = None (optional) True if the return format should be decimal, False if it should be a percentage. Default is False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability_calculator\", \"description\": \"Calculate the probability of an event\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_outcomes\": {\"type\": \"integer\", \"description\": \"The total number of possible outcomes.\"}, \"event_outcomes\": {\"type\": \"integer\", \"description\": \"The number of outcomes that we are interested in.\"}, \"return_decimal\": {\"type\": \"boolean\", \"description\": \"True if the return format should be decimal, False if it should be a percentage. Default is False.\"}}, \"required\": [\"total_outcomes\", \"event_outcomes\"]}}"}
{"scope": "simple", "query": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "query_for_retrieval": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "answer": "weather.humidity_forecast", "answer_params": "", "api_description": "def weather.humidity_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a humidity forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the humidity for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t- min_humidity : integer = None (optional) Minimum level of humidity (in percentage) to filter the result. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather.humidity_forecast\", \"description\": \"Retrieve a humidity forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the humidity for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}, \"min_humidity\": {\"type\": \"integer\", \"description\": \"Minimum level of humidity (in percentage) to filter the result. Default is 0.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm currently weighing up some investment options, and I'd like to get an idea of their potential growth over time. Could you help me calculate the future value for each of these? Here are the details:\n\n1. For a bond with an initial investment of $5000, an annual interest rate of 5%, and a term of 10 years.\n2. For a mutual fund that starts with $2000, grows at an annual rate of 7%, and will be held for 15 years.\n3. For stocks starting at $1000, with an impressive annual growth rate of 10%, over a 20-year period.\n\nI need to understand the future values to make an informed decision.", "query_for_retrieval": "I'm currently weighing up some investment options, and I'd like to get an idea of their potential growth over time. Could you help me calculate the future value for each of these? Here are the details:\n\n1. For a bond with an initial investment of $5000, an annual interest rate of 5%, and a term of 10 years.\n2. For a mutual fund that starts with $2000, grows at an annual rate of 7%, and will be held for 15 years.\n3. For stocks starting at $1000, with an impressive annual growth rate of 10%, over a 20-year period.\n\nI need to understand the future values to make an informed decision.", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me the name of the scientist who is credited for the discovery of the theory of relativity? Also, I would like to know the predicted forest growth in Amazon rainforest over the next 10 years, considering the impact of human activities. After that, could you also provide the forecast for the same location but this time without considering human impact? Lastly, I'm curious about the scientist who discovered the DNA double helix structure.\"", "query_for_retrieval": "\"Can you tell me the name of the scientist who is credited for the discovery of the theory of relativity? Also, I would like to know the predicted forest growth in Amazon rainforest over the next 10 years, considering the impact of human activities. After that, could you also provide the forecast for the same location but this time without considering human impact? Lastly, I'm curious about the scientist who discovered the DNA double helix structure.\"", "answer": "get_scientist_for_discovery", "answer_params": "", "api_description": "def get_scientist_for_discovery:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the scientist's name who is credited for a specific scientific discovery or theory.\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The scientific discovery or theory.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_scientist_for_discovery\", \"description\": \"Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The scientific discovery or theory.\"}}, \"required\": [\"discovery\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the electric field strength at a distance of 0.5 meters from a point charge of 2 Coulombs located in a vacuum? Then, can you also calculate the electric field strength at a distance of 1 meter and 2 meters from the same point charge? Lastly, can you calculate the electric field strength at a distance of 1 meter from the same point charge but this time located in air?\"", "query_for_retrieval": "\"Can you calculate the electric field strength at a distance of 0.5 meters from a point charge of 2 Coulombs located in a vacuum? Then, can you also calculate the electric field strength at a distance of 1 meter and 2 meters from the same point charge? Lastly, can you calculate the electric field strength at a distance of 1 meter from the same point charge but this time located in air?\"", "answer": "calculate_electric_field_strength", "answer_params": "", "api_description": "def calculate_electric_field_strength:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field strength at a certain distance from a point charge.\n\t\n\tArguments:\n\t---------\n\t- charge : integer = None (required) The charge in Coulombs.\n\t- distance : float = None (required) The distance from the charge in meters.\n\t- medium : string = None (optional) The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_field_strength\", \"description\": \"Calculate the electric field strength at a certain distance from a point charge.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"integer\", \"description\": \"The charge in Coulombs.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance from the charge in meters.\"}, \"medium\": {\"type\": \"string\", \"description\": \"The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\"}}, \"required\": [\"charge\", \"distance\"]}}"}
{"scope": "parallel_function", "query": "Find the factorial of 5,10 and 15.", "query_for_retrieval": "Find the factorial of 5,10 and 15.", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given positive integer.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which factorial needs to be calculated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given positive integer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which factorial needs to be calculated.\"}}, \"required\": [\"number\"]}}"}
{"scope": "relevance", "query": "Who is the top scorer for Los Angeles Lakers?", "query_for_retrieval": "Who is the top scorer for Los Angeles Lakers?", "answer": "get_sport_team_details", "answer_params": "", "api_description": "def get_sport_team_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a sports team including roster, previous results, upcoming matches, etc.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the team.\n\t- details : array = None (required) Specific details about the team you want to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sport_team_details\", \"description\": \"Retrieve information about a sports team including roster, previous results, upcoming matches, etc.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"roster\", \"results\", \"upcoming_matches\"]}, \"description\": \"Specific details about the team you want to retrieve.\"}}, \"required\": [\"team_name\", \"details\"]}}"}
{"scope": "java", "query": "How can I execute the `runIt` method to perform a test that includes creating an object of the tested class, invoking a method with a breakpoint, and logging the output to a `System.out` stream, using the arguments array `testArgs`?", "query_for_retrieval": "How can I execute the `runIt` method to perform a test that includes creating an object of the tested class, invoking a method with a breakpoint, and logging the output to a `System.out` stream, using the arguments array `testArgs`?", "answer": "clear001a.runIt", "answer_params": "", "api_description": "def clear001a.runIt:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a series of operations including creating an object of a tested class, invoking a method with a breakpoint, and logging the results to the provided PrintStream.\n\t\n\tArguments:\n\t---------\n\t- args : Array = None (required) An array of strings representing the arguments for the test.\n\t- out : any = None (required) The PrintStream to which the log messages will be written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"clear001a.runIt\", \"description\": \"Executes a series of operations including creating an object of a tested class, invoking a method with a breakpoint, and logging the results to the provided PrintStream.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"args\": {\"type\": \"Array\", \"description\": \"An array of strings representing the arguments for the test.\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream to which the log messages will be written.\"}}, \"required\": [\"args\", \"out\"]}}"}
{"scope": "simple", "query": "Calculate the odds of rolling a 7 with two dice in the board game Monopoly.", "query_for_retrieval": "Calculate the odds of rolling a 7 with two dice in the board game Monopoly.", "answer": "monopoly_odds_calculator", "answer_params": "", "api_description": "def monopoly_odds_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which the odds are calculated.\n\t- dice_number : integer = None (required) The number of dice involved in the roll.\n\t- dice_faces : integer = None (optional) The number of faces on a single die. Default is 6 for standard six-faced die.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"monopoly_odds_calculator\", \"description\": \"Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which the odds are calculated.\"}, \"dice_number\": {\"type\": \"integer\", \"description\": \"The number of dice involved in the roll.\"}, \"dice_faces\": {\"type\": \"integer\", \"description\": \"The number of faces on a single die. Default is 6 for standard six-faced die.\"}}, \"required\": [\"number\", \"dice_number\"]}}"}
{"scope": "multiple_function", "query": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "query_for_retrieval": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "answer": "restaurant.find_nearby", "answer_params": "", "api_description": "def restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on specific dietary preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Los Angeles, CA\n\t- dietary_preference : array = None (optional) Dietary preference. Default is empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_nearby\", \"description\": \"Locate nearby restaurants based on specific dietary preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Los Angeles, CA\"}, \"dietary_preference\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Vegan\", \"Vegetarian\", \"Gluten-free\", \"Dairy-free\", \"Nut-free\"]}, \"description\": \"Dietary preference. Default is empty array.\"}}, \"required\": [\"location\"]}}"}
{"scope": "multiple_function", "query": "Calculate the Least Common Multiple (LCM) of 18 and 12.", "query_for_retrieval": "Calculate the Least Common Multiple (LCM) of 18 and 12.", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) The first number.\n\t- num2 : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"The first number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "simple", "query": "Calculate the area and circumference of a circle with a radius of 5 units.", "query_for_retrieval": "Calculate the area and circumference of a circle with a radius of 5 units.", "answer": "calculate_circle_dimensions", "answer_params": "", "api_description": "def calculate_circle_dimensions:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area and circumference of a circle based on the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_circle_dimensions\", \"description\": \"Calculate the area and circumference of a circle based on the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "relevance", "query": "Mix the color #FAEBD7 with #00FFFF, what is the new color?", "query_for_retrieval": "Mix the color #FAEBD7 with #00FFFF, what is the new color?", "answer": "get_prophet_details", "answer_params": "", "api_description": "def get_prophet_details:\n\t\"\"\"\n\tDescription:\n\t\n\tGet detailed information about a prophet in a given religion.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) The religion that the prophet is associated with.\n\t- prophet : string = None (required) The name of the prophet.\n\t- historical_context : boolean = None (optional) Whether or not to include information about the historical context in which the prophet lived. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prophet_details\", \"description\": \"Get detailed information about a prophet in a given religion.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"The religion that the prophet is associated with.\"}, \"prophet\": {\"type\": \"string\", \"description\": \"The name of the prophet.\"}, \"historical_context\": {\"type\": \"boolean\", \"description\": \"Whether or not to include information about the historical context in which the prophet lived. Default is false.\"}}, \"required\": [\"religion\", \"prophet\"]}}"}
{"scope": "java", "query": "How can I process a markup text `buildOutput` for a specific build context `jenkinsBuild` to apply console annotations in a Jenkins environment?", "query_for_retrieval": "How can I process a markup text `buildOutput` for a specific build context `jenkinsBuild` to apply console annotations in a Jenkins environment?", "answer": "ConsoleAnnotator.annotate", "answer_params": "", "api_description": "def ConsoleAnnotator.annotate:\n\t\"\"\"\n\tDescription:\n\t\n\tProcesses the given MarkupText for the specified context using a chain of ConsoleAnnotators, updating or removing annotators as necessary.\n\t\n\tArguments:\n\t---------\n\t- context : any = None (required) The context in which the MarkupText is being annotated.\n\t- text : any = None (required) The MarkupText to be annotated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ConsoleAnnotator.annotate\", \"description\": \"Processes the given MarkupText for the specified context using a chain of ConsoleAnnotators, updating or removing annotators as necessary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context\": {\"type\": \"any\", \"description\": \"The context in which the MarkupText is being annotated.\"}, \"text\": {\"type\": \"any\", \"description\": \"The MarkupText to be annotated.\"}}, \"required\": [\"context\", \"text\"]}}"}
{"scope": "sql", "query": "Can you add a new record into the 'Employees' table with the columns 'EmployeeID', 'FirstName', 'LastName', 'Position' and their corresponding values as 'E123', 'John', 'Doe', 'Manager'?", "query_for_retrieval": "Can you add a new record into the 'Employees' table with the columns 'EmployeeID', 'FirstName', 'LastName', 'Position' and their corresponding values as 'E123', 'John', 'Doe', 'Manager'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_function", "query": "I've been conducting experiments on projectile motion and I've collected some data from my latest set of trials. I used a catapult to launch three different objects and recorded their initial velocities and the time they were airborne. Here's what I have: a stone with an initial velocity of 20 m/s, a rubber ball at 30 m/s, and a metal ball at 25 m/s. All objects experienced an acceleration of -9.8 m/s\u00b2 due to gravity and were in motion for a duration of 5 seconds. Could you work out the displacement for each object after those 5 seconds?", "query_for_retrieval": "I've been conducting experiments on projectile motion and I've collected some data from my latest set of trials. I used a catapult to launch three different objects and recorded their initial velocities and the time they were airborne. Here's what I have: a stone with an initial velocity of 20 m/s, a rubber ball at 30 m/s, and a metal ball at 25 m/s. All objects experienced an acceleration of -9.8 m/s\u00b2 due to gravity and were in motion for a duration of 5 seconds. Could you work out the displacement for each object after those 5 seconds?", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object, in meters per second.\n\t- acceleration : float = None (required) The acceleration of the object, in meters per second squared.\n\t- time : float = None (required) The time the object has been moving, in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object, in meters per second.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object, in meters per second squared.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving, in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "simple", "query": "Get directions from Sydney to Melbourne using the fastest route.", "query_for_retrieval": "Get directions from Sydney to Melbourne using the fastest route.", "answer": "get_directions", "answer_params": "", "api_description": "def get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from one location to another.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point of the journey.\n\t- end_location : string = None (required) The destination point of the journey.\n\t- route_type : string = None (optional) Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_directions\", \"description\": \"Retrieve directions from one location to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point of the journey.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination point of the journey.\"}, \"route_type\": {\"type\": \"string\", \"description\": \"Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.\", \"enum\": [\"fastest\", \"scenic\"]}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "simple", "query": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "query_for_retrieval": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the closing stock price for a specific company on a specified date.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) Name of the company.\n\t- date : string = None (required) Date of when to get the stock price. Format: yyyy-mm-dd.\n\t- exchange : string = None (optional) Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Get the closing stock price for a specific company on a specified date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"Name of the company.\"}, \"date\": {\"type\": \"string\", \"description\": \"Date of when to get the stock price. Format: yyyy-mm-dd.\"}, \"exchange\": {\"type\": \"string\", \"description\": \"Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\"}}, \"required\": [\"company_name\", \"date\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I need to calculate the average of the numbers 1, 3, 4, 6, and 8. Once that's done, could you also find me the geographical coordinates for Cupertino, the city where Apple's headquarters are located?", "query_for_retrieval": "I need to calculate the average of the numbers 1, 3, 4, 6, and 8. Once that's done, could you also find me the geographical coordinates for Cupertino, the city where Apple's headquarters are located?", "answer": "calculate_mean", "answer_params": "", "api_description": "def calculate_mean:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the mean of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mean\", \"description\": \"Calculates the mean of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "multiple_function", "query": "Find lawyers specializing in criminal law near me in New York.", "query_for_retrieval": "Find lawyers specializing in criminal law near me in New York.", "answer": "car_rental", "answer_params": "", "api_description": "def car_rental:\n\t\"\"\"\n\tDescription:\n\t\n\tRent a car near you based on your preference.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Your location\n\t- car_type : array = None (required) Type of cars that you want to rent.\n\t- fuel_type : string = None (optional) Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"car_rental\", \"description\": \"Rent a car near you based on your preference.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Your location\"}, \"car_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Type of cars that you want to rent.\"}, \"fuel_type\": {\"type\": \"string\", \"description\": \"Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'\"}}, \"required\": [\"location\", \"car_type\"]}}"}
{"scope": "executable_simple", "query": "I'm currently tweaking a machine learning model and I need to understand the similarity between two objects in my dataset. Their characteristics are expressed in the feature vectors [0.5, 0.7, 0.2, 0.9, 0.1] for the first object and [0.4, 0.6, 0.3, 0.8, 0.2] for the second one. Could you calculate the cosine similarity between these two feature vectors to help me determine how similar these objects are?", "query_for_retrieval": "I'm currently tweaking a machine learning model and I need to understand the similarity between two objects in my dataset. Their characteristics are expressed in the feature vectors [0.5, 0.7, 0.2, 0.9, 0.1] for the first object and [0.4, 0.6, 0.3, 0.8, 0.2] for the second one. Could you calculate the cosine similarity between these two feature vectors to help me determine how similar these objects are?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "sql", "query": "In a database, you have a table named 'Students' with columns 'Name', 'Age', 'Grade'. You want to change the 'Grade' of a student named 'John' to 'A'. How would you perform this operation?", "query_for_retrieval": "In a database, you have a table named 'Students' with columns 'Name', 'Age', 'Grade'. You want to change the 'Grade' of a student named 'John' to 'A'. How would you perform this operation?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a music producer and you are working on a new song. You want to generate a music scale progression in the key of 'D' with a tempo of 120 BPM, where each note lasts for 2 beats. You are considering using a 'minor' scale type for this progression. After creating this, you decide to take a break and solve a math problem. You want to find the highest common factor of the numbers 456 and 123. Can you generate the music scale progression and solve the math problem?\"", "query_for_retrieval": "\"Imagine you are a music producer and you are working on a new song. You want to generate a music scale progression in the key of 'D' with a tempo of 120 BPM, where each note lasts for 2 beats. You are considering using a 'minor' scale type for this progression. After creating this, you decide to take a break and solve a math problem. You want to find the highest common factor of the numbers 456 and 123. Can you generate the music scale progression and solve the math problem?\"", "answer": "music_generator.generate_scale_progression", "answer_params": "", "api_description": "def music_generator.generate_scale_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a music scale progression in a specific key with a given tempo and duration.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key in which to generate the scale progression.\n\t- tempo : integer = None (required) The tempo of the scale progression in BPM.\n\t- duration : integer = None (required) The duration of each note in beats.\n\t- scale_type : string = major (optional) The type of scale to generate. Defaults to 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_generator.generate_scale_progression\", \"description\": \"Generate a music scale progression in a specific key with a given tempo and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key in which to generate the scale progression.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"The tempo of the scale progression in BPM.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of each note in beats.\"}, \"scale_type\": {\"type\": \"string\", \"default\": \"major\", \"description\": \"The type of scale to generate. Defaults to 'major'.\"}}, \"required\": [\"key\", \"tempo\", \"duration\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me calculate the discounted cash flow of a bond? I have a bond with an annual coupon payment of $50, a time frame of 5 years, and a discount rate of 5%. Also, the face value of the bond is $1000. I would like to know the discounted cash flow for this bond. After that, I want to compare it with another bond that has an annual coupon payment of $60, a time frame of 7 years, and a discount rate of 4%, with the same face value of $1000. Can you calculate the discounted cash flow for this second bond as well?\"", "query_for_retrieval": "\"Can you help me calculate the discounted cash flow of a bond? I have a bond with an annual coupon payment of $50, a time frame of 5 years, and a discount rate of 5%. Also, the face value of the bond is $1000. I would like to know the discounted cash flow for this bond. After that, I want to compare it with another bond that has an annual coupon payment of $60, a time frame of 7 years, and a discount rate of 4%, with the same face value of $1000. Can you calculate the discounted cash flow for this second bond as well?\"", "answer": "calculate_discounted_cash_flow", "answer_params": "", "api_description": "def calculate_discounted_cash_flow:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\n\t\n\tArguments:\n\t---------\n\t- coupon_payment : integer = None (required) The annual coupon payment.\n\t- period : integer = None (required) The time frame in years for which coupon payment is made.\n\t- discount_rate : float = None (required) The discount rate.\n\t- face_value : integer = None (optional) The face value of the bond, default is $1000.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_discounted_cash_flow\", \"description\": \"Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coupon_payment\": {\"type\": \"integer\", \"description\": \"The annual coupon payment.\"}, \"period\": {\"type\": \"integer\", \"description\": \"The time frame in years for which coupon payment is made.\"}, \"discount_rate\": {\"type\": \"float\", \"description\": \"The discount rate.\"}, \"face_value\": {\"type\": \"integer\", \"description\": \"The face value of the bond, default is $1000.\"}}, \"required\": [\"coupon_payment\", \"period\", \"discount_rate\"]}}"}
{"scope": "sql", "query": "Can you create a new table named \"Employee\" in the database with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Email\", and \"Phone\"?", "query_for_retrieval": "Can you create a new table named \"Employee\" in the database with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Email\", and \"Phone\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the time it would take for light to travel from Earth to a newly discovered exoplanet that is 4.22 light years away, then to another exoplanet that is 6.1 light years from the first one, and finally back to Earth which is 5.88 light years from the second exoplanet? Assume the speed of light in vacuum is 299792458 m/s.\"", "query_for_retrieval": "\"Can you calculate the time it would take for light to travel from Earth to a newly discovered exoplanet that is 4.22 light years away, then to another exoplanet that is 6.1 light years from the first one, and finally back to Earth which is 5.88 light years from the second exoplanet? Assume the speed of light in vacuum is 299792458 m/s.\"", "answer": "light_travel_time", "answer_params": "", "api_description": "def light_travel_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the time taken for light to travel from a celestial body to another.\n\t\n\tArguments:\n\t---------\n\t- distance_in_light_years : float = None (required) The distance between the two celestial bodies in light years.\n\t- speed_of_light : integer = None (optional) The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"light_travel_time\", \"description\": \"Calculate the time taken for light to travel from a celestial body to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance_in_light_years\": {\"type\": \"float\", \"description\": \"The distance between the two celestial bodies in light years.\"}, \"speed_of_light\": {\"type\": \"integer\", \"description\": \"The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\"}}, \"required\": [\"distance_in_light_years\"]}}"}
{"scope": "parallel_function", "query": "Can you predict the price of a house with an area of 2500 square feet, 3 rooms, constructed in the year 2000, and located in New York, and then compare it with the price of a similar house but with an area of 3000 square feet, constructed in the year 2005, and located in Los Angeles? Finally, predict the price of a third house with an area of 2000 square feet, 2 rooms, constructed in the year 1995, and located in Chicago.", "query_for_retrieval": "Can you predict the price of a house with an area of 2500 square feet, 3 rooms, constructed in the year 2000, and located in New York, and then compare it with the price of a similar house but with an area of 3000 square feet, constructed in the year 2005, and located in Los Angeles? Finally, predict the price of a third house with an area of 2000 square feet, 2 rooms, constructed in the year 1995, and located in Chicago.", "answer": "predict_house_price", "answer_params": "", "api_description": "def predict_house_price:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict house price based on area, number of rooms and year of construction.\n\t\n\tArguments:\n\t---------\n\t- area : integer = None (required) Area of the house in square feet.\n\t- rooms : integer = None (required) Number of rooms in the house.\n\t- year : integer = None (required) Year when the house was constructed.\n\t- location : string = None (required) The location or city of the house.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"predict_house_price\", \"description\": \"Predict house price based on area, number of rooms and year of construction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"area\": {\"type\": \"integer\", \"description\": \"Area of the house in square feet.\"}, \"rooms\": {\"type\": \"integer\", \"description\": \"Number of rooms in the house.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year when the house was constructed.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location or city of the house.\"}}, \"required\": [\"area\", \"rooms\", \"year\", \"location\"]}}"}
{"scope": "simple", "query": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "query_for_retrieval": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "answer": "hotel_booking", "answer_params": "", "api_description": "def hotel_booking:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a hotel room for a specific date range.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The city and state, e.g. New York, NY.\n\t- start_date : string = None (required) The start date of the reservation. Use format 'YYYY-MM-DD'.\n\t- end_date : string = None (required) The end date of the reservation. Use format 'YYYY-MM-DD'.\n\t- rooms : integer = 1 (optional) The number of rooms to reserve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking\", \"description\": \"Books a hotel room for a specific date range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The start date of the reservation. Use format 'YYYY-MM-DD'.\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The end date of the reservation. Use format 'YYYY-MM-DD'.\"}, \"rooms\": {\"type\": \"integer\", \"default\": 1, \"description\": \"The number of rooms to reserve.\"}}, \"required\": [\"hotel_name\", \"location\", \"start_date\", \"end_date\"]}}"}
{"scope": "simple", "query": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "query_for_retrieval": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "answer": "walmart.check_price", "answer_params": "", "api_description": "def walmart.check_price:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate total price for given items and their quantities at Walmart.\n\t\n\tArguments:\n\t---------\n\t- items : array = None (required) List of items to be priced.\n\t- quantities : array = None (required) Quantity of each item corresponding to the items list.\n\t- store_location : string = None (optional) The store location for specific pricing (optional). Default to all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"walmart.check_price\", \"description\": \"Calculate total price for given items and their quantities at Walmart.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items to be priced.\"}, \"quantities\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Quantity of each item corresponding to the items list.\"}, \"store_location\": {\"type\": \"string\", \"description\": \"The store location for specific pricing (optional). Default to all if not specified.\"}}, \"required\": [\"items\", \"quantities\"]}}"}
{"scope": "relevance", "query": "Who has the highest number of hearts in a game of poker?", "query_for_retrieval": "Who has the highest number of hearts in a game of poker?", "answer": "play_poker", "answer_params": "", "api_description": "def play_poker:\n\t\"\"\"\n\tDescription:\n\t\n\tDeal the hand of poker.\n\t\n\tArguments:\n\t---------\n\t- number_of_players : integer = None (required) The number of players.\n\t- cards_per_player : integer = None (required) The number of cards to be dealt to each player.\n\t- game_type : string = None (optional) Type of the poker game. Defaults to 'Texas Holdem'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"play_poker\", \"description\": \"Deal the hand of poker.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number_of_players\": {\"type\": \"integer\", \"description\": \"The number of players.\"}, \"cards_per_player\": {\"type\": \"integer\", \"description\": \"The number of cards to be dealt to each player.\"}, \"game_type\": {\"type\": \"string\", \"description\": \"Type of the poker game. Defaults to 'Texas Holdem'\"}}, \"required\": [\"number_of_players\", \"cards_per_player\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"What was the population of California in 1980 and 1990 according to the 'us_history.population_by_state_year' function, and what was the Real GDP of California in those same years according to the 'us_economy.gdp_by_state_year' function with the adjustment set to 'Real'?\"", "query_for_retrieval": "\"What was the population of California in 1980 and 1990 according to the 'us_history.population_by_state_year' function, and what was the Real GDP of California in those same years according to the 'us_economy.gdp_by_state_year' function with the adjustment set to 'Real'?\"", "answer": "us_history.population_by_state_year", "answer_params": "", "api_description": "def us_history.population_by_state_year:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical population data for a specific U.S. state and year.\n\t\n\tArguments:\n\t---------\n\t- state : string = None (required) The U.S. state for which to retrieve the population.\n\t- year : integer = None (required) The year for which to retrieve the population.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.population_by_state_year\", \"description\": \"Retrieve historical population data for a specific U.S. state and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"The U.S. state for which to retrieve the population.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which to retrieve the population.\"}}, \"required\": [\"state\", \"year\"]}}"}
{"scope": "simple", "query": "What is the FIFA ranking of Germany's men soccer team for the year 2021?", "query_for_retrieval": "What is the FIFA ranking of Germany's men soccer team for the year 2021?", "answer": "get_team_ranking", "answer_params": "", "api_description": "def get_team_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the FIFA ranking of a specific soccer team for a certain year.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the soccer team.\n\t- year : integer = None (required) The year for which the ranking is to be retrieved.\n\t- gender : string = None (optional) The gender of the team. It can be either 'men' or 'women'. Default is 'men'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_team_ranking\", \"description\": \"Retrieve the FIFA ranking of a specific soccer team for a certain year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the soccer team.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which the ranking is to be retrieved.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the team. It can be either 'men' or 'women'. Default is 'men'.\"}}, \"required\": [\"team_name\", \"year\"]}}"}
{"scope": "relevance", "query": "What is the Eiffel Tower's height in feet?", "query_for_retrieval": "What is the Eiffel Tower's height in feet?", "answer": "generate_architecture_plan", "answer_params": "", "api_description": "def generate_architecture_plan:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a custom architecture plan for a building based on given parameters.\n\t\n\tArguments:\n\t---------\n\t- style : string = None (required) The architecture style, e.g. Gothic, Roman.\n\t- building_type : string = None (required) The type of the building e.g. Church, Residential.\n\t- extra_features : array = ['Garage'] (optional) Additional features to be added in the design.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_architecture_plan\", \"description\": \"Generate a custom architecture plan for a building based on given parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"style\": {\"type\": \"string\", \"description\": \"The architecture style, e.g. Gothic, Roman.\"}, \"building_type\": {\"type\": \"string\", \"description\": \"The type of the building e.g. Church, Residential.\"}, \"extra_features\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Pool\", \"Garage\", \"Garden\", \"Elevator\"]}, \"description\": \"Additional features to be added in the design.\", \"default\": [\"Garage\"]}}, \"required\": [\"style\", \"building_type\"]}}"}
{"scope": "simple", "query": "Give me the details of Criminal Law Amendment Act of 2013.", "query_for_retrieval": "Give me the details of Criminal Law Amendment Act of 2013.", "answer": "get_act_details", "answer_params": "", "api_description": "def get_act_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of a particular legal act based on its name and year of amendment if any.\n\t\n\tArguments:\n\t---------\n\t- act_name : string = None (required) The name of the act.\n\t- amendment_year : integer = None (required) Year of amendment if any. If not provided, the latest amendment year will be considered.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_act_details\", \"description\": \"Retrieve the details of a particular legal act based on its name and year of amendment if any.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"act_name\": {\"type\": \"string\", \"description\": \"The name of the act.\"}, \"amendment_year\": {\"type\": \"integer\", \"description\": \"Year of amendment if any. If not provided, the latest amendment year will be considered.\"}}, \"required\": [\"act_name\", \"amendment_year\"]}}"}
{"scope": "multiple_function", "query": "What will be the humidity and temperature for New York City after 7 days?", "query_for_retrieval": "What will be the humidity and temperature for New York City after 7 days?", "answer": "event_search", "answer_params": "", "api_description": "def event_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for events happening in a specific location for a future date.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the event information for.\n\t- days : integer = None (required) Number of future days for which to retrieve the event information.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"event_search\", \"description\": \"Search for events happening in a specific location for a future date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the event information for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of future days for which to retrieve the event information.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "relevance", "query": "Who is the most assist player in Premier League?", "query_for_retrieval": "Who is the most assist player in Premier League?", "answer": "sports_analysis.get_top_scorer", "answer_params": "", "api_description": "def sports_analysis.get_top_scorer:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the player with most goals in a specific football league\n\t\n\tArguments:\n\t---------\n\t- league : string = None (required) The football league name. Eg. Premier League\n\t- season : string = None (required) The season in format yyyy/yyyy. Eg. 2020/2021\n\t- team : string = Liverpool (optional) Optionally the specific team to consider. Eg. Liverpool\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_analysis.get_top_scorer\", \"description\": \"Retrieves the player with most goals in a specific football league\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"league\": {\"type\": \"string\", \"description\": \"The football league name. Eg. Premier League\"}, \"season\": {\"type\": \"string\", \"description\": \"The season in format yyyy/yyyy. Eg. 2020/2021\"}, \"team\": {\"type\": \"string\", \"description\": \"Optionally the specific team to consider. Eg. Liverpool\", \"default\": \"Liverpool\"}}, \"required\": [\"league\", \"season\"]}}"}
{"scope": "parallel_function", "query": "\"Can you compute the derivative of the function 3x^2 + 2x - 1 at the value 5, where the variable present in the function is 'x', and then compute the derivative of the function 4y^3 - 3y^2 + 2y - 1 at the value 3, where the variable present in the function is 'y'?\"", "query_for_retrieval": "\"Can you compute the derivative of the function 3x^2 + 2x - 1 at the value 5, where the variable present in the function is 'x', and then compute the derivative of the function 4y^3 - 3y^2 + 2y - 1 at the value 3, where the variable present in the function is 'y'?\"", "answer": "calculus.derivative", "answer_params": "", "api_description": "def calculus.derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the derivative of a function at a specific value.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- value : integer = None (required) The value where the derivative needs to be calculated at.\n\t- function_variable : string = x (optional) The variable present in the function, for instance x or y, etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculus.derivative\", \"description\": \"Compute the derivative of a function at a specific value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"value\": {\"type\": \"integer\", \"description\": \"The value where the derivative needs to be calculated at.\"}, \"function_variable\": {\"type\": \"string\", \"description\": \"The variable present in the function, for instance x or y, etc.\", \"default\": \"x\"}}, \"required\": [\"function\", \"value\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few tasks? First, I need to calculate the factorial of 7. Then, I'm looking to buy a flute. I prefer the brand 'Yamaha' and I want it to have an 'open hole' and a 'silver headjoint'. Lastly, I'm doing a genetics study and I need to calculate the frequency of the 'AA' genotype in a population where the frequency of the dominant allele is 0.6. Can you assist me with these?\"", "query_for_retrieval": "\"Can you help me with a few tasks? First, I need to calculate the factorial of 7. Then, I'm looking to buy a flute. I prefer the brand 'Yamaha' and I want it to have an 'open hole' and a 'silver headjoint'. Lastly, I'm doing a genetics study and I need to calculate the frequency of the 'AA' genotype in a population where the frequency of the dominant allele is 0.6. Can you assist me with these?\"", "answer": "find_flute", "answer_params": "", "api_description": "def find_flute:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a flute for sale based on specific requirements.\n\t\n\tArguments:\n\t---------\n\t- brand : string = None (required) The brand of the flute. Example, 'Yamaha'\n\t- specs : array = None (required) The specifications of the flute desired.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_flute\", \"description\": \"Locate a flute for sale based on specific requirements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"brand\": {\"type\": \"string\", \"description\": \"The brand of the flute. Example, 'Yamaha'\"}, \"specs\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"open hole\", \"C foot\", \"silver headjoint\"]}, \"description\": \"The specifications of the flute desired.\"}}, \"required\": [\"brand\", \"specs\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on some research for a new material and need to calculate a few things. First off, I have a sample with a mass of 300 grams and its volume is 50 cubic centimeters; I need to determine its density. Once that's done, I'm interested in the Fibonacci sequence up to the 5th number. Lastly, I'm curious about the greatest common divisor between the mass and volume of my sample. Can you crunch these numbers for me?", "query_for_retrieval": "I'm working on some research for a new material and need to calculate a few things. First off, I have a sample with a mass of 300 grams and its volume is 50 cubic centimeters; I need to determine its density. Once that's done, I'm interested in the Fibonacci sequence up to the 5th number. Lastly, I'm curious about the greatest common divisor between the mass and volume of my sample. Can you crunch these numbers for me?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "parallel_function", "query": "What is the results of the factorial of 5, the factorial of 7, and the factorial of 9?", "query_for_retrieval": "What is the results of the factorial of 5, the factorial of 7, and the factorial of 9?", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which factorial needs to be calculated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which factorial needs to be calculated.\"}}, \"required\": [\"number\"]}}"}
{"scope": "executable_multiple_function", "query": "I've been working on some data analysis and I need to fit a linear regression model. I have these data points with x-coordinates as [1, 2, -3] and corresponding y-coordinates as [4, -5, 6]. I want to understand the relationship between these variables and make a prediction for when x is 10. Can you help me with that?", "query_for_retrieval": "I've been working on some data analysis and I need to fit a linear regression model. I have these data points with x-coordinates as [1, 2, -3] and corresponding y-coordinates as [4, -5, 6]. I want to understand the relationship between these variables and make a prediction for when x is 10. Can you help me with that?", "answer": "linear_regression", "answer_params": "", "api_description": "def linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the linear regression of a set of points and evaluates it at a given point.\n\t\n\tArguments:\n\t---------\n\t- x : array = None (required) The x coordinates of the points.\n\t- y : array = None (required) The y coordinates of the points.\n\t- point : integer = None (required) The point to calculate the linear regression at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression\", \"description\": \"Finds the linear regression of a set of points and evaluates it at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"array\", \"description\": \"The x coordinates of the points.\", \"items\": {\"type\": \"integer\"}}, \"y\": {\"type\": \"array\", \"description\": \"The y coordinates of the points.\", \"items\": {\"type\": \"integer\"}}, \"point\": {\"type\": \"integer\", \"description\": \"The point to calculate the linear regression at.\"}}, \"required\": [\"x\", \"y\", \"point\"]}}"}
{"scope": "relevance", "query": "Calculate the sine of 45 degree.", "query_for_retrieval": "Calculate the sine of 45 degree.", "answer": "create_polygon", "answer_params": "", "api_description": "def create_polygon:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a polygon shape with given vertices.\n\t\n\tArguments:\n\t---------\n\t- vertices : array = None (required) List of vertices (x, y) to define the shape.\n\t- is_closed : boolean = None (required) Whether to close the shape or not, i.e., connect the last vertex with the first vertex.\n\t- stroke_width : integer = None (optional) Stroke width of the shape outline. Default: 5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_polygon\", \"description\": \"Create a polygon shape with given vertices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vertices\": {\"type\": \"array\", \"description\": \"List of vertices (x, y) to define the shape.\", \"items\": {\"type\": \"float\"}}, \"is_closed\": {\"type\": \"boolean\", \"description\": \"Whether to close the shape or not, i.e., connect the last vertex with the first vertex.\"}, \"stroke_width\": {\"type\": \"integer\", \"description\": \"Stroke width of the shape outline. Default: 5\"}}, \"required\": [\"vertices\", \"is_closed\"]}}"}
{"scope": "relevance", "query": "What is the meaning of 'Hello' in French?", "query_for_retrieval": "What is the meaning of 'Hello' in French?", "answer": "calculate_svm", "answer_params": "", "api_description": "def calculate_svm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Support Vector Machine(SVM) model\n\t\n\tArguments:\n\t---------\n\t- train_data : string = None (required) The training data for the SVM model. Should include the class labels.\n\t- test_data : string = None (required) The test data for the SVM model. This data will be used to verify the model.\n\t- C : float = None (optional) The Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. Default is 1.0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_svm\", \"description\": \"Calculate the Support Vector Machine(SVM) model\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"train_data\": {\"type\": \"string\", \"description\": \"The training data for the SVM model. Should include the class labels.\"}, \"test_data\": {\"type\": \"string\", \"description\": \"The test data for the SVM model. This data will be used to verify the model.\"}, \"C\": {\"type\": \"float\", \"description\": \"The Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. Default is 1.0.\"}}, \"required\": [\"train_data\", \"test_data\"]}}"}
{"scope": "parallel_function", "query": "Build a decision tree classifier model with gini criterion, maximum depth of 5 and random state of 1, another with entropy criterion, maximum depth of 10 and random state of 1.", "query_for_retrieval": "Build a decision tree classifier model with gini criterion, maximum depth of 5 and random state of 1, another with entropy criterion, maximum depth of 10 and random state of 1.", "answer": "model.DecisionTreeClassifier", "answer_params": "", "api_description": "def model.DecisionTreeClassifier:\n\t\"\"\"\n\tDescription:\n\t\n\tBuild a Decision Tree Classifier model with provided criteria\n\t\n\tArguments:\n\t---------\n\t- criterion : string = None (required) The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain.\n\t- max_depth : integer = None (required) The maximum depth of the tree, specifying how deep the tree can be.\n\t- random_state : integer = None (required) Controls the randomness of the estimator\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"model.DecisionTreeClassifier\", \"description\": \"Build a Decision Tree Classifier model with provided criteria\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"criterion\": {\"type\": \"string\", \"description\": \"The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain.\"}, \"max_depth\": {\"type\": \"integer\", \"description\": \"The maximum depth of the tree, specifying how deep the tree can be.\"}, \"random_state\": {\"type\": \"integer\", \"description\": \"Controls the randomness of the estimator\"}}, \"required\": [\"criterion\", \"max_depth\", \"random_state\"]}}"}
{"scope": "simple", "query": "Calculate the electric field at a point 3 meters away from a charge of 2 coulombs.", "query_for_retrieval": "Calculate the electric field at a point 3 meters away from a charge of 2 coulombs.", "answer": "calculate_electric_field", "answer_params": "", "api_description": "def calculate_electric_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field produced by a charge at a certain distance.\n\t\n\tArguments:\n\t---------\n\t- charge : integer = None (required) Charge in coulombs producing the electric field.\n\t- distance : integer = None (required) Distance from the charge in meters where the field is being measured.\n\t- permitivity : float = None (optional) Permitivity of the space where field is being calculated, default is 8.854e-12.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_field\", \"description\": \"Calculate the electric field produced by a charge at a certain distance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"integer\", \"description\": \"Charge in coulombs producing the electric field.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"Distance from the charge in meters where the field is being measured.\"}, \"permitivity\": {\"type\": \"float\", \"description\": \"Permitivity of the space where field is being calculated, default is 8.854e-12.\"}}, \"required\": [\"charge\", \"distance\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the net profit margin of Company XYZ given that the net income is $20,000 and total revenue is $100,000. Also calculate the debt ratio of the same company if the total liabilities are $10,000 and total assets are $30,000.", "query_for_retrieval": "Calculate the net profit margin of Company XYZ given that the net income is $20,000 and total revenue is $100,000. Also calculate the debt ratio of the same company if the total liabilities are $10,000 and total assets are $30,000.", "answer": "financial_ratio.net_profit_margin", "answer_params": "", "api_description": "def financial_ratio.net_profit_margin:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate net profit margin of a company given the net income and total revenue\n\t\n\tArguments:\n\t---------\n\t- net_income : integer = None (required) The net income of the company.\n\t- total_revenue : integer = None (required) The total revenue of the company.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financial_ratio.net_profit_margin\", \"description\": \"Calculate net profit margin of a company given the net income and total revenue\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"net_income\": {\"type\": \"integer\", \"description\": \"The net income of the company.\"}, \"total_revenue\": {\"type\": \"integer\", \"description\": \"The total revenue of the company.\"}}, \"required\": [\"net_income\", \"total_revenue\"]}}"}
{"scope": "relevance", "query": "Who was the scientist that proposed the special theory of relativity?", "query_for_retrieval": "Who was the scientist that proposed the special theory of relativity?", "answer": "get_element_properties", "answer_params": "", "api_description": "def get_element_properties:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve properties of a given chemical element based on its name or symbol.\n\t\n\tArguments:\n\t---------\n\t- element : string = None (required) The name or symbol of the chemical element.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_element_properties\", \"description\": \"Retrieve properties of a given chemical element based on its name or symbol.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"element\": {\"type\": \"string\", \"description\": \"The name or symbol of the chemical element.\"}}, \"required\": [\"element\"]}}"}
{"scope": "relevance", "query": "What is the quickest way to get to Tokyo from London by plane?", "query_for_retrieval": "What is the quickest way to get to Tokyo from London by plane?", "answer": "get_flight_duration", "answer_params": "", "api_description": "def get_flight_duration:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the quickest flight duration between two cities.\n\t\n\tArguments:\n\t---------\n\t- start_city : string = None (required) The city you are starting your journey from.\n\t- destination_city : string = None (required) The city you wish to travel to.\n\t- flight_type : string = None (required) The type of flight you want to find duration for. Choices include: non-stop, direct, and multi-stop.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_flight_duration\", \"description\": \"Retrieves the quickest flight duration between two cities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_city\": {\"type\": \"string\", \"description\": \"The city you are starting your journey from.\"}, \"destination_city\": {\"type\": \"string\", \"description\": \"The city you wish to travel to.\"}, \"flight_type\": {\"type\": \"string\", \"description\": \"The type of flight you want to find duration for. Choices include: non-stop, direct, and multi-stop.\"}}, \"required\": [\"start_city\", \"destination_city\", \"flight_type\"]}}"}
{"scope": "executable_simple", "query": "In my current research on plant genetics, I'm exploring the genetic diversity within a specific species. It's fascinating work, and I've managed to isolate 30 unique genes. The next step in my study involves figuring out the possible combinations if I were to select 7 of these genes at a time for a more detailed analysis. Could you calculate the number of different permutations for 7 genes out of the total 30?", "query_for_retrieval": "In my current research on plant genetics, I'm exploring the genetic diversity within a specific species. It's fascinating work, and I've managed to isolate 30 unique genes. The next step in my study involves figuring out the possible combinations if I were to select 7 of these genes at a time for a more detailed analysis. Could you calculate the number of different permutations for 7 genes out of the total 30?", "answer": "calculate_permutations", "answer_params": "", "api_description": "def calculate_permutations:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the number of permutations of k elements from a set of n elements.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of elements in the set.\n\t- k : integer = None (required) The number of elements to choose.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_permutations\", \"description\": \"Calculates the number of permutations of k elements from a set of n elements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of elements in the set.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of elements to choose.\"}}, \"required\": [\"n\", \"k\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've invested $5000 at an annual interest rate of 5% and plan to hold it for 10 years. I'd like to calculate the future value of this investment. Once I have that information, I'm considering purchasing a product from Amazon with the ASIN 'B08BHXG144' and would appreciate it if you could find out the current price for me. In addition, I'm looking up some details for a friend who lives in the area with the zip code '10001' and need to know which city this code is associated with. On a different note, for a math project, I'm working with the function f(x) = 3x^2 + 2x - 1 and I need to estimate the derivative at x = 2. Could you help me with these calculations?", "query_for_retrieval": "I've invested $5000 at an annual interest rate of 5% and plan to hold it for 10 years. I'd like to calculate the future value of this investment. Once I have that information, I'm considering purchasing a product from Amazon with the ASIN 'B08BHXG144' and would appreciate it if you could find out the current price for me. In addition, I'm looking up some details for a friend who lives in the area with the zip code '10001' and need to know which city this code is associated with. On a different note, for a math project, I'm working with the function f(x) = 3x^2 + 2x - 1 and I need to estimate the derivative at x = 2. Could you help me with these calculations?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me plan a trip? I want to go to Paris for 7 days with a daily budget of $200, and I prefer exploring urban areas. Also, I'm trying to cook a dish called 'Chicken Alfredo', but I'm not sure if it fits my diet. Could you find a recipe for 'Chicken Alfredo' that has less than 800 calories? Additionally, I have a cooking measurement problem. I have a recipe that calls for 2 cups of flour, but I only have a scale. Can you convert 2 cups of flour into grams for me? Lastly, I'm doing a research project and need to run a linear regression model. The predictor variables are 'age', 'income', and 'education level', and the target variable is 'job satisfaction'. Could you also standardize the predictors for me?\"", "query_for_retrieval": "\"Could you help me plan a trip? I want to go to Paris for 7 days with a daily budget of $200, and I prefer exploring urban areas. Also, I'm trying to cook a dish called 'Chicken Alfredo', but I'm not sure if it fits my diet. Could you find a recipe for 'Chicken Alfredo' that has less than 800 calories? Additionally, I have a cooking measurement problem. I have a recipe that calls for 2 cups of flour, but I only have a scale. Can you convert 2 cups of flour into grams for me? Lastly, I'm doing a research project and need to run a linear regression model. The predictor variables are 'age', 'income', and 'education level', and the target variable is 'job satisfaction'. Could you also standardize the predictors for me?\"", "answer": "run_linear_regression", "answer_params": "", "api_description": "def run_linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tBuild a linear regression model using given predictor variables and a target variable.\n\t\n\tArguments:\n\t---------\n\t- predictors : array = None (required) Array containing the names of predictor variables.\n\t- target : string = None (required) The name of target variable.\n\t- standardize : boolean = None (optional) Option to apply standardization on the predictors. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"run_linear_regression\", \"description\": \"Build a linear regression model using given predictor variables and a target variable.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"predictors\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Array containing the names of predictor variables.\"}, \"target\": {\"type\": \"string\", \"description\": \"The name of target variable.\"}, \"standardize\": {\"type\": \"boolean\", \"description\": \"Option to apply standardization on the predictors. Defaults to False.\"}}, \"required\": [\"predictors\", \"target\"]}}"}
{"scope": "simple", "query": "What is the prime factorization of the number 60? Return them in the form of dictionary", "query_for_retrieval": "What is the prime factorization of the number 60? Return them in the form of dictionary", "answer": "prime_factorize", "answer_params": "", "api_description": "def prime_factorize:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the prime factorization of a given integer.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which to calculate the prime factorization.\n\t- return_type : string = None (optional) Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prime_factorize\", \"description\": \"Calculate the prime factorization of a given integer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which to calculate the prime factorization.\"}, \"return_type\": {\"type\": \"string\", \"description\": \"Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\"}}, \"required\": [\"number\"]}}"}
{"scope": "executable_simple", "query": "I need to analyze Microsoft's stock performance over the past few months without the noise from dividends or stock splits. Can you pull up the weekly historical data for the stock symbol 'MSFT' making sure to exclude splits and dividends in the data set?", "query_for_retrieval": "I need to analyze Microsoft's stock performance over the past few months without the noise from dividends or stock splits. Can you pull up the weekly historical data for the stock symbol 'MSFT' making sure to exclude splits and dividends in the data set?", "answer": "get_stock_history", "answer_params": "", "api_description": "def get_stock_history:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t- interval : string = None (required) The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\n\t- diffandsplits : string = None (optional) The diff and splits of the stock history. Allows one of following : true|false. Default as false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_history\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}, \"interval\": {\"type\": \"string\", \"description\": \"The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\"}, \"diffandsplits\": {\"type\": \"string\", \"description\": \"The diff and splits of the stock history. Allows one of following : true|false. Default as false\"}}, \"required\": [\"stock_name\", \"interval\"]}}"}
{"scope": "java", "query": "In a Java debugging test environment, how can I execute the `runThis` method with a specific set of command-line arguments, such as `['-v', '--no-strict']`, and direct the output to a `PrintStream` object named `debugOutput`?", "query_for_retrieval": "In a Java debugging test environment, how can I execute the `runThis` method with a specific set of command-line arguments, such as `['-v', '--no-strict']`, and direct the output to a `PrintStream` object named `debugOutput`?", "answer": "argumenttypes001.runThis", "answer_params": "", "api_description": "def argumenttypes001.runThis:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes the test logic with the provided command-line arguments and directs the output to the specified PrintStream.\n\t\n\tArguments:\n\t---------\n\t- argv : Array = None (required) An array of command-line arguments to pass to the test logic.\n\t- out : any = None (required) The PrintStream object where the test output will be directed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"argumenttypes001.runThis\", \"description\": \"Executes the test logic with the provided command-line arguments and directs the output to the specified PrintStream.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"argv\": {\"type\": \"Array\", \"description\": \"An array of command-line arguments to pass to the test logic.\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream object where the test output will be directed.\"}}, \"required\": [\"argv\", \"out\"]}}"}
{"scope": "simple", "query": "Find out the current traffic situation from Boston driving to New York.", "query_for_retrieval": "Find out the current traffic situation from Boston driving to New York.", "answer": "get_traffic_info", "answer_params": "", "api_description": "def get_traffic_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve current traffic conditions for a specified route.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point of the route.\n\t- end_location : string = None (required) The destination of the route.\n\t- mode : string = None (optional) Preferred method of transportation, default to 'driving'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_traffic_info\", \"description\": \"Retrieve current traffic conditions for a specified route.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point of the route.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination of the route.\"}, \"mode\": {\"type\": \"string\", \"enum\": [\"driving\", \"walking\", \"bicycling\", \"transit\"], \"description\": \"Preferred method of transportation, default to 'driving'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "multiple_function", "query": "Find me the most recent art sculpture by James Plensa with detailed description.", "query_for_retrieval": "Find me the most recent art sculpture by James Plensa with detailed description.", "answer": "get_zodiac_compatibility", "answer_params": "", "api_description": "def get_zodiac_compatibility:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the compatibility score between two Zodiac signs.\n\t\n\tArguments:\n\t---------\n\t- sign1 : string = None (required) The first Zodiac sign.\n\t- sign2 : string = None (required) The second Zodiac sign.\n\t- scale : string = None (optional) The scale on which compatibility should be shown. Default is 'percentage'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zodiac_compatibility\", \"description\": \"Retrieve the compatibility score between two Zodiac signs.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sign1\": {\"type\": \"string\", \"description\": \"The first Zodiac sign.\"}, \"sign2\": {\"type\": \"string\", \"description\": \"The second Zodiac sign.\"}, \"scale\": {\"type\": \"string\", \"enum\": [\"percentage\", \"0-10 scale\"], \"description\": \"The scale on which compatibility should be shown. Default is 'percentage'.\"}}, \"required\": [\"sign1\", \"sign2\"]}}"}
{"scope": "executable_simple", "query": "I'm deep into my research on the Fibonacci sequence, and I need to analyze the first 20 numbers of the sequence for my study. Could you generate that for me?", "query_for_retrieval": "I'm deep into my research on the Fibonacci sequence, and I need to analyze the first 20 numbers of the sequence for my study. Could you generate that for me?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "simple", "query": "Who was the U.S. president during the Civil War?", "query_for_retrieval": "Who was the U.S. president during the Civil War?", "answer": "US_President_During_Event", "answer_params": "", "api_description": "def US_President_During_Event:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the U.S. president during a specified historical event.\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The historical event.\n\t- country : string = None (optional) The country the president leads (optional parameter, defaults to 'USA' if not specified).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"US_President_During_Event\", \"description\": \"Returns the U.S. president during a specified historical event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The historical event.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country the president leads (optional parameter, defaults to 'USA' if not specified).\"}}, \"required\": [\"event\"]}}"}
{"scope": "simple", "query": "Find the boiling point and melting point of water under the sea level of 5000m.", "query_for_retrieval": "Find the boiling point and melting point of water under the sea level of 5000m.", "answer": "get_boiling_melting_points", "answer_params": "", "api_description": "def get_boiling_melting_points:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the boiling point and melting point of a substance based on its name and the sea level.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The name of the substance.\n\t- sea_level : integer = None (required) The sea level in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_boiling_melting_points\", \"description\": \"Retrieve the boiling point and melting point of a substance based on its name and the sea level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The name of the substance.\"}, \"sea_level\": {\"type\": \"integer\", \"description\": \"The sea level in meters.\"}}, \"required\": [\"substance\", \"sea_level\"]}}"}
{"scope": "java", "query": "What is the probability of a loop condition being true if it has been evaluated as true 150 times and false 50 times?", "query_for_retrieval": "What is the probability of a loop condition being true if it has been evaluated as true 150 times and false 50 times?", "answer": "LoopConditionProfile.calculateProbability", "answer_params": "", "api_description": "def LoopConditionProfile.calculateProbability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of a loop condition being true based on the counts of true and false evaluations.\n\t\n\tArguments:\n\t---------\n\t- trueCountLocal : long = None (required) The count of times the loop condition has been evaluated to true.\n\t- falseCountLocal : integer = None (required) The count of times the loop condition has been evaluated to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"LoopConditionProfile.calculateProbability\", \"description\": \"Calculates the probability of a loop condition being true based on the counts of true and false evaluations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"trueCountLocal\": {\"type\": \"long\", \"description\": \"The count of times the loop condition has been evaluated to true.\"}, \"falseCountLocal\": {\"type\": \"integer\", \"description\": \"The count of times the loop condition has been evaluated to false.\"}}, \"required\": [\"trueCountLocal\", \"falseCountLocal\"]}}"}
{"scope": "parallel_function", "query": "You are given two sets of data, the first set is [12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] and the second set is [32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]. Can you create two histograms using the 'create_histogram' function, one for each data set, with 5 bins each?", "query_for_retrieval": "You are given two sets of data, the first set is [12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] and the second set is [32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]. Can you create two histograms using the 'create_histogram' function, one for each data set, with 5 bins each?", "answer": "create_histogram", "answer_params": "", "api_description": "def create_histogram:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a histogram based on provided data.\n\t\n\tArguments:\n\t---------\n\t- data : array = None (required) The data for which histogram needs to be plotted.\n\t- bins : integer = None (required) The number of equal-width bins in the range. Default is 10.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_histogram\", \"description\": \"Create a histogram based on provided data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The data for which histogram needs to be plotted.\"}, \"bins\": {\"type\": \"integer\", \"description\": \"The number of equal-width bins in the range. Default is 10.\"}}, \"required\": [\"data\", \"bins\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been analyzing some financial algorithms and need to optimize a section where I calculate the GCD for two numbers, specifically 1200 and 21406. Additionally, for my stock portfolio analysis, I require the current stock price of Apple. Could you provide me with the greatest common divisor for those two numbers, and also fetch the latest price for the 'AAPL' stock?", "query_for_retrieval": "I've been analyzing some financial algorithms and need to optimize a section where I calculate the GCD for two numbers, specifically 1200 and 21406. Additionally, for my stock portfolio analysis, I require the current stock price of Apple. Could you provide me with the greatest common divisor for those two numbers, and also fetch the latest price for the 'AAPL' stock?", "answer": "get_stock_price_by_stock_name", "answer_params": "", "api_description": "def get_stock_price_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price_by_stock_name\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "multiple_function", "query": "What is the capital of Brazil?", "query_for_retrieval": "What is the capital of Brazil?", "answer": "country_info.largest_city", "answer_params": "", "api_description": "def country_info.largest_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the largest city of a specified country.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) Name of the country.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"country_info.largest_city\", \"description\": \"Fetch the largest city of a specified country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country.\"}}, \"required\": [\"country\"]}}"}
{"scope": "parallel_function", "query": "What is the angle between the hour and minute hands of a clock at 3:15, rounded to 2 decimal places, and how does this compare to the angle at 8:20 and 11:50, both also rounded to 2 decimal places?", "query_for_retrieval": "What is the angle between the hour and minute hands of a clock at 3:15, rounded to 2 decimal places, and how does this compare to the angle at 8:20 and 11:50, both also rounded to 2 decimal places?", "answer": "calculate_clock_angle", "answer_params": "", "api_description": "def calculate_clock_angle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the angle between the hour and minute hands of a clock at a given time.\n\t\n\tArguments:\n\t---------\n\t- hours : integer = None (required) The hour on the clock face.\n\t- minutes : integer = None (required) The minutes on the clock face.\n\t- round_to : integer = None (optional) The number of decimal places to round the result to, default is 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_clock_angle\", \"description\": \"Calculate the angle between the hour and minute hands of a clock at a given time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hours\": {\"type\": \"integer\", \"description\": \"The hour on the clock face.\"}, \"minutes\": {\"type\": \"integer\", \"description\": \"The minutes on the clock face.\"}, \"round_to\": {\"type\": \"integer\", \"description\": \"The number of decimal places to round the result to, default is 2.\"}}, \"required\": [\"hours\", \"minutes\"]}}"}
{"scope": "multiple_function", "query": "What is the record for the most points scored by a single player in an NBA game?", "query_for_retrieval": "What is the record for the most points scored by a single player in an NBA game?", "answer": "sports_data.basketball.most_points_single_season", "answer_params": "", "api_description": "def sports_data.basketball.most_points_single_season:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.\n\t\n\tArguments:\n\t---------\n\t- league : string = None (required) The specific basketball league for which to fetch the record. In this case, 'NBA'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_data.basketball.most_points_single_season\", \"description\": \"Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"league\": {\"type\": \"string\", \"description\": \"The specific basketball league for which to fetch the record. In this case, 'NBA'.\"}}, \"required\": [\"league\"]}}"}
{"scope": "simple", "query": "Get weather information for New York, USA for the next 3 days with details.", "query_for_retrieval": "Get weather information for New York, USA for the next 3 days with details.", "answer": "weather_forecast_detailed", "answer_params": "", "api_description": "def weather_forecast_detailed:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a detailed weather forecast for a specific city like Boston and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the weather for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t- details : boolean = False (optional) Provide detailed weather information or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_forecast_detailed\", \"description\": \"Retrieve a detailed weather forecast for a specific city like Boston and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the weather for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}, \"details\": {\"type\": \"boolean\", \"description\": \"Provide detailed weather information or not.\", \"default\": false}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "simple", "query": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "query_for_retrieval": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "answer": "poker_game_winner", "answer_params": "", "api_description": "def poker_game_winner:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify the winner in a poker game based on the cards.\n\t\n\tArguments:\n\t---------\n\t- players : array = None (required) Names of the players in a list.\n\t- cards : dict = None (required) An object containing the player name as key and the cards as values in a list.\n\t- type : string = None (optional) Type of poker game. Defaults to 'Texas Holdem'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_game_winner\", \"description\": \"Identify the winner in a poker game based on the cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"players\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Names of the players in a list.\"}, \"cards\": {\"type\": \"dict\", \"description\": \"An object containing the player name as key and the cards as values in a list.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of poker game. Defaults to 'Texas Holdem'\"}}, \"required\": [\"players\", \"cards\"]}}"}
{"scope": "javascript", "query": "How can I determine the value to be used for a property named 'maxItems' in a configuration object, given that the default value is 10 and the object value 12 , but the configuration object does not explicitly define 'maxItems'?", "query_for_retrieval": "How can I determine the value to be used for a property named 'maxItems' in a configuration object, given that the default value is 10 and the object value 12 , but the configuration object does not explicitly define 'maxItems'?", "answer": "assignOwnDefaults", "answer_params": "", "api_description": "def assignOwnDefaults:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function determines the value to be assigned to a property in an object, preferring the object's own value if it exists and is not undefined, otherwise using a source value.\n\t\n\tArguments:\n\t---------\n\t- objectValue : float = None (required) The value of the property in the object.\n\t- sourceValue : float = None (required) The default or source value to use if the object's value is undefined or the object does not have its own property for the key.\n\t- key : String = None (required) The key of the property to check in the object.\n\t- object : dict = None (required) The object to check for the property.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"assignOwnDefaults\", \"description\": \"This function determines the value to be assigned to a property in an object, preferring the object's own value if it exists and is not undefined, otherwise using a source value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"objectValue\": {\"type\": \"float\", \"description\": \"The value of the property in the object.\"}, \"sourceValue\": {\"type\": \"float\", \"description\": \"The default or source value to use if the object's value is undefined or the object does not have its own property for the key.\"}, \"key\": {\"type\": \"String\", \"description\": \"The key of the property to check in the object.\"}, \"object\": {\"type\": \"dict\", \"description\": \"The object to check for the property.\"}}, \"required\": [\"objectValue\", \"sourceValue\", \"key\", \"object\"]}}"}
{"scope": "multiple_function", "query": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "query_for_retrieval": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object in motion given initial velocity, time, and acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object in m/s.\n\t- time : integer = None (required) The time in seconds that the object has been in motion.\n\t- acceleration : float = 0 (optional) The acceleration of the object in m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object in motion given initial velocity, time, and acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in m/s.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time in seconds that the object has been in motion.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2.\", \"default\": 0}}, \"required\": [\"initial_velocity\", \"time\"]}}"}
{"scope": "relevance", "query": "Find the distance in kilometers from San Francisco to Los Angeles.", "query_for_retrieval": "Find the distance in kilometers from San Francisco to Los Angeles.", "answer": "get_date", "answer_params": "", "api_description": "def get_date:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the time difference between two geographical locations.\n\t\n\tArguments:\n\t---------\n\t- location_1 : string = None (required) location for first city.\n\t- location_2 : string = None (required) location for first city.\n\t- unit : string = None (optional) The unit of measure for the distance. Default is miles.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_date\", \"description\": \"Get the time difference between two geographical locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location_1\": {\"type\": \"string\", \"description\": \"location for first city.\"}, \"location_2\": {\"type\": \"string\", \"description\": \"location for first city.\"}, \"unit\": {\"type\": \"string\", \"enum\": [\"miles\", \"kilometers\"], \"description\": \"The unit of measure for the distance. Default is miles.\"}}, \"required\": [\"location_1\", \"location_2\"]}}"}
{"scope": "multiple_function", "query": "Convert 150 Euros to Canadian dollars.", "query_for_retrieval": "Convert 150 Euros to Canadian dollars.", "answer": "currency_conversion.convert", "answer_params": "", "api_description": "def currency_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one currency to another.\n\t\n\tArguments:\n\t---------\n\t- amount : integer = None (required) The amount to be converted.\n\t- from_currency : string = None (required) The currency to convert from.\n\t- to_currency : string = None (required) The currency to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_conversion.convert\", \"description\": \"Convert a value from one currency to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"integer\", \"description\": \"The amount to be converted.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "sql", "query": "Can you add a new record to the database table named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade' where the values to be inserted are 'S101', 'John', 'Doe', '15', and '10'?", "query_for_retrieval": "Can you add a new record to the database table named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade' where the values to be inserted are 'S101', 'John', 'Doe', '15', and '10'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "query_for_retrieval": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "answer": "sports_team.get_schedule", "answer_params": "", "api_description": "def sports_team.get_schedule:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the schedule of the specified sports team for the specified number of games in the given league.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the sports team.\n\t- num_of_games : integer = None (required) Number of games for which to fetch the schedule.\n\t- league : string = None (required) The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.\n\t- location : string = None (optional) Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_team.get_schedule\", \"description\": \"Fetches the schedule of the specified sports team for the specified number of games in the given league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"num_of_games\": {\"type\": \"integer\", \"description\": \"Number of games for which to fetch the schedule.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.\"}, \"location\": {\"type\": \"string\", \"description\": \"Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered.\"}}, \"required\": [\"team_name\", \"num_of_games\", \"league\"]}}"}
{"scope": "relevance", "query": "Calculate how much nurtient a cactus in Arizona needs weekly in the summer.", "query_for_retrieval": "Calculate how much nurtient a cactus in Arizona needs weekly in the summer.", "answer": "calculate_water_needs", "answer_params": "", "api_description": "def calculate_water_needs:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the weekly watering needs of a plant based on its type, location, and time of year.\n\t\n\tArguments:\n\t---------\n\t- plant_type : string = None (required) The type of plant, e.g. 'cactus'\n\t- location : string = None (required) The location where the plant is situated, e.g. 'Arizona'\n\t- season : string = None (optional) The current season. Default: 'winter'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_water_needs\", \"description\": \"Calculate the weekly watering needs of a plant based on its type, location, and time of year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"plant_type\": {\"type\": \"string\", \"description\": \"The type of plant, e.g. 'cactus'\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the plant is situated, e.g. 'Arizona'\"}, \"season\": {\"type\": \"string\", \"enum\": [\"spring\", \"summer\", \"autumn\", \"winter\"], \"description\": \"The current season. Default: 'winter'\"}}, \"required\": [\"plant_type\", \"location\"]}}"}
{"scope": "sql", "query": "Can you retrieve the 'product_name', 'product_id', and 'price' from the 'products' table where the 'price' is less than 20?", "query_for_retrieval": "Can you retrieve the 'product_name', 'product_id', and 'price' from the 'products' table where the 'price' is less than 20?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Find me sculptures near Chicago that were made in the 19th century.", "query_for_retrieval": "Find me sculptures near Chicago that were made in the 19th century.", "answer": "sculpture_search", "answer_params": "", "api_description": "def sculpture_search:\n\t\"\"\"\n\tDescription:\n\t\n\tFind sculptures based on location and a specific time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the sculptures are located.\n\t- time_frame : string = None (required) The time frame during which the sculptures were made.\n\t- material : string = None (optional) Optional material of the sculptures. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture_search\", \"description\": \"Find sculptures based on location and a specific time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the sculptures are located.\"}, \"time_frame\": {\"type\": \"string\", \"description\": \"The time frame during which the sculptures were made.\"}, \"material\": {\"type\": \"string\", \"description\": \"Optional material of the sculptures. Default is 'all'\"}}, \"required\": [\"location\", \"time_frame\"]}}"}
{"scope": "multiple_function", "query": "What is the area of a rectangle with length 12 meters and width 5 meters?", "query_for_retrieval": "What is the area of a rectangle with length 12 meters and width 5 meters?", "answer": "rectangle.area", "answer_params": "", "api_description": "def rectangle.area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a rectangle with given length and width\n\t\n\tArguments:\n\t---------\n\t- length : integer = None (required) Length of the rectangle\n\t- width : integer = None (required) Width of the rectangle\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"rectangle.area\", \"description\": \"Calculate the area of a rectangle with given length and width\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"length\": {\"type\": \"integer\", \"description\": \"Length of the rectangle\"}, \"width\": {\"type\": \"integer\", \"description\": \"Width of the rectangle\"}}, \"required\": [\"length\", \"width\"]}}"}
{"scope": "simple", "query": "Get me the latest exchange rate from British Pounds to Japanese Yen.", "query_for_retrieval": "Get me the latest exchange rate from British Pounds to Japanese Yen.", "answer": "latest_exchange_rate", "answer_params": "", "api_description": "def latest_exchange_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the latest exchange rate between two specified currencies.\n\t\n\tArguments:\n\t---------\n\t- source_currency : string = None (required) The currency you are converting from.\n\t- target_currency : string = None (required) The currency you are converting to.\n\t- amount : float = None (optional) The amount to be converted. If omitted, default to exchange rate of 1 unit source currency\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"latest_exchange_rate\", \"description\": \"Retrieve the latest exchange rate between two specified currencies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"source_currency\": {\"type\": \"string\", \"description\": \"The currency you are converting from.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency you are converting to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount to be converted. If omitted, default to exchange rate of 1 unit source currency\"}}, \"required\": [\"source_currency\", \"target_currency\"]}}"}
{"scope": "java", "query": "How do I send HTTP response headers with a status code of 404 and a content length of 1500 bytes for a non-HEAD request in an HTTP/2 test exchange?", "query_for_retrieval": "How do I send HTTP response headers with a status code of 404 and a content length of 1500 bytes for a non-HEAD request in an HTTP/2 test exchange?", "answer": "Http2TestExchangeImpl.sendResponseHeaders", "answer_params": "", "api_description": "def Http2TestExchangeImpl.sendResponseHeaders:\n\t\"\"\"\n\tDescription:\n\t\n\tSends HTTP response headers with a given status code and response length. It handles special cases for certain status codes and request types.\n\t\n\tArguments:\n\t---------\n\t- rCode : integer = None (required) The HTTP status code for the response.\n\t- responseLength : long = None (required) The length of the response content in bytes. A value of 0 means no content, and a negative value means the content length is unknown.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Http2TestExchangeImpl.sendResponseHeaders\", \"description\": \"Sends HTTP response headers with a given status code and response length. It handles special cases for certain status codes and request types.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"rCode\": {\"type\": \"integer\", \"description\": \"The HTTP status code for the response.\"}, \"responseLength\": {\"type\": \"long\", \"description\": \"The length of the response content in bytes. A value of 0 means no content, and a negative value means the content length is unknown.\"}}, \"required\": [\"rCode\", \"responseLength\"]}}"}
{"scope": "parallel_function", "query": "What's the driving distance between New York and Washington DC, and between Los Angeles and San Francisco with optional parameter shortest route enabled?", "query_for_retrieval": "What's the driving distance between New York and Washington DC, and between Los Angeles and San Francisco with optional parameter shortest route enabled?", "answer": "calc_distance", "answer_params": "", "api_description": "def calc_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- start_loc : string = None (required) Starting location.\n\t- end_loc : string = None (required) Ending location.\n\t- shortest_route : boolean = false (optional) If true, returns the shortest driving route.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_distance\", \"description\": \"Calculate the driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_loc\": {\"type\": \"string\", \"description\": \"Starting location.\"}, \"end_loc\": {\"type\": \"string\", \"description\": \"Ending location.\"}, \"shortest_route\": {\"type\": \"boolean\", \"default\": \"false\", \"description\": \"If true, returns the shortest driving route.\"}}, \"required\": [\"start_loc\", \"end_loc\"]}}"}
{"scope": "multiple_function", "query": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "query_for_retrieval": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given number.\n\t\n\tArguments:\n\t---------\n\t- number : float = None (required) The number for which factorial needs to be calculated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"float\", \"description\": \"The number for which factorial needs to be calculated.\"}}, \"required\": [\"number\"]}}"}
{"scope": "rest", "query": "While I'm working on a dashboard to display real-time COVID-19 statistics for Uganda, including total cases, recoveries, and deaths, I realized I need to use the API Sports COVID-19 API for accurate data. Given that I have my API key as 'YOUR-RAPID-API-KEY' and the host as 'covid-193.p.rapidapi.com', how can I fetch the latest statistics ensuring the request times out if it takes longer than 10 seconds? Also, how can I make sure the response is not streamed?", "query_for_retrieval": "While I'm working on a dashboard to display real-time COVID-19 statistics for Uganda, including total cases, recoveries, and deaths, I realized I need to use the API Sports COVID-19 API for accurate data. Given that I have my API key as 'YOUR-RAPID-API-KEY' and the host as 'covid-193.p.rapidapi.com', how can I fetch the latest statistics ensuring the request times out if it takes longer than 10 seconds? Also, how can I make sure the response is not streamed?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "sql", "query": "Can you create a new table named 'Students' in the database with columns 'ID', 'Name', 'Age', and 'Grade'?", "query_for_retrieval": "Can you create a new table named 'Students' in the database with columns 'ID', 'Name', 'Age', and 'Grade'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "A car is participating in a drag race. In the first round, the car starts from rest and accelerates at a rate of 5 meters/second^2 for 10 seconds. In the second round, the car starts with an initial velocity of 10 meters/second and accelerates at a rate of 7 meters/second^2 for 8 seconds. In the third round, the car starts with an initial velocity of 20 meters/second and accelerates at a rate of 4 meters/second^2 for 12 seconds. What are the final velocities of the car in each round?", "query_for_retrieval": "A car is participating in a drag race. In the first round, the car starts from rest and accelerates at a rate of 5 meters/second^2 for 10 seconds. In the second round, the car starts with an initial velocity of 10 meters/second and accelerates at a rate of 7 meters/second^2 for 8 seconds. In the third round, the car starts with an initial velocity of 20 meters/second and accelerates at a rate of 4 meters/second^2 for 12 seconds. What are the final velocities of the car in each round?", "answer": "final_velocity", "answer_params": "", "api_description": "def final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object given its initial velocity, acceleration, and time.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object in meters/second.\n\t- acceleration : integer = None (required) The acceleration of the object in meters/second^2.\n\t- time : integer = None (required) The time over which the acceleration is applied in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"final_velocity\", \"description\": \"Calculate the final velocity of an object given its initial velocity, acceleration, and time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in meters/second.\"}, \"acceleration\": {\"type\": \"integer\", \"description\": \"The acceleration of the object in meters/second^2.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time over which the acceleration is applied in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a scientist studying the energy production of a certain type of bacteria. You have a sample of this bacteria that has consumed 5 moles of glucose (C6H12O6) and you know that the energy produced from glucose is typically 2800 kJ/mol. You also know that the bacteria's conversion efficiency, or the percentage of energy from glucose that is converted into biomass, is 10%. \n\nFirst, calculate the total energy produced by the bacteria from consuming the glucose. \n\nSecond, calculate the amount of biomass produced by the bacteria given the energy produced and the conversion efficiency. \n\nNow, imagine you are using this bacteria in a bioreactor to power a small machine. The machine needs to move a distance of 2 meters and you want to calculate the work done by the machine. \n\nThird, calculate the work done by the machine given the total energy produced by the bacteria and the distance the machine needs to move.\"", "query_for_retrieval": "\"Imagine you are a scientist studying the energy production of a certain type of bacteria. You have a sample of this bacteria that has consumed 5 moles of glucose (C6H12O6) and you know that the energy produced from glucose is typically 2800 kJ/mol. You also know that the bacteria's conversion efficiency, or the percentage of energy from glucose that is converted into biomass, is 10%. \n\nFirst, calculate the total energy produced by the bacteria from consuming the glucose. \n\nSecond, calculate the amount of biomass produced by the bacteria given the energy produced and the conversion efficiency. \n\nNow, imagine you are using this bacteria in a bioreactor to power a small machine. The machine needs to move a distance of 2 meters and you want to calculate the work done by the machine. \n\nThird, calculate the work done by the machine given the total energy produced by the bacteria and the distance the machine needs to move.\"", "answer": "biological.calc_biomass", "answer_params": "", "api_description": "def biological.calc_biomass:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the biomass from the energy given the energy conversion efficiency.\n\t\n\tArguments:\n\t---------\n\t- energy : float = None (required) The total energy produced.\n\t- efficiency : float = 0.1 (optional) The conversion efficiency, default value is 10%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"biological.calc_biomass\", \"description\": \"Calculate the biomass from the energy given the energy conversion efficiency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"energy\": {\"type\": \"float\", \"description\": \"The total energy produced.\"}, \"efficiency\": {\"type\": \"float\", \"description\": \"The conversion efficiency, default value is 10%.\", \"default\": 0.1}}, \"required\": [\"energy\"]}}"}
{"scope": "rest", "query": "Can you fetch the most recent exchange rates where the Euro (EUR) is set as the base currency using my API key 'YOUR-EXCHANGERATE-API-KEY'?", "query_for_retrieval": "Can you fetch the most recent exchange rates where the Euro (EUR) is set as the base currency using my API key 'YOUR-EXCHANGERATE-API-KEY'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please tell me the selling price of the video game 'The Legend of Zelda: Breath of the Wild' on the Nintendo Switch platform in the United States, and also let me know if the game 'Super Mario Odyssey' is currently on sale on the same platform and region? Additionally, could you fetch the currency used in the United States on the PlayStation platform, and also tell me the selling price of 'God of War' on the PlayStation platform in the United Kingdom?\"", "query_for_retrieval": "\"Could you please tell me the selling price of the video game 'The Legend of Zelda: Breath of the Wild' on the Nintendo Switch platform in the United States, and also let me know if the game 'Super Mario Odyssey' is currently on sale on the same platform and region? Additionally, could you fetch the currency used in the United States on the PlayStation platform, and also tell me the selling price of 'God of War' on the PlayStation platform in the United Kingdom?\"", "answer": "video_games.store_currency", "answer_params": "", "api_description": "def video_games.store_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the currency used in a specific region in a gaming platform store.\n\t\n\tArguments:\n\t---------\n\t- platform : string = None (required) The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\n\t- region : string = None (optional) The region e.g. United States, United Kingdom, Japan. Default United States\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"video_games.store_currency\", \"description\": \"Fetches the currency used in a specific region in a gaming platform store.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"platform\": {\"type\": \"string\", \"description\": \"The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\"}, \"region\": {\"type\": \"string\", \"description\": \"The region e.g. United States, United Kingdom, Japan. Default United States\", \"optional\": \"True\"}}, \"required\": [\"platform\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"John is planning to invest in a mutual fund. He has $5000 to start with and the fund he is interested in has an annual yield rate of 7%. He plans to keep his money in the fund for 10 years. After 10 years, he wants to use part of his investment returns to build a circular garden in his backyard. The radius of the garden will be 5 meters. Can you help him calculate how much money he will have in his mutual fund after 10 years and what will be the area of his circular garden?\"", "query_for_retrieval": "\"John is planning to invest in a mutual fund. He has $5000 to start with and the fund he is interested in has an annual yield rate of 7%. He plans to keep his money in the fund for 10 years. After 10 years, he wants to use part of his investment returns to build a circular garden in his backyard. The radius of the garden will be 5 meters. Can you help him calculate how much money he will have in his mutual fund after 10 years and what will be the area of his circular garden?\"", "answer": "geometry.calculate_area_circle", "answer_params": "", "api_description": "def geometry.calculate_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given its radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- unit : string = None (optional) The measurement unit of the radius (optional parameter, default is 'units').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.calculate_area_circle\", \"description\": \"Calculate the area of a circle given its radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The measurement unit of the radius (optional parameter, default is 'units').\"}}, \"required\": [\"radius\"]}}"}
{"scope": "simple", "query": "Get information about the pop concerts in New York for next month.", "query_for_retrieval": "Get information about the pop concerts in New York for next month.", "answer": "concert_info.get", "answer_params": "", "api_description": "def concert_info.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about concerts based on specific genre, location and date.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the concert will take place.\n\t- date : string = None (required) Time frame to get the concert for.\n\t- genre : string = None (required) Genre of the concert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_info.get\", \"description\": \"Retrieve information about concerts based on specific genre, location and date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the concert will take place.\"}, \"date\": {\"type\": \"string\", \"description\": \"Time frame to get the concert for.\"}, \"genre\": {\"type\": \"string\", \"description\": \"Genre of the concert.\", \"enum\": [\"Pop\", \"Rock\", \"Country\", \"Classical\", \"Electronic\", \"Hip-Hop\"]}}, \"required\": [\"location\", \"date\", \"genre\"]}}"}
{"scope": "parallel_function", "query": "Find the list of TV shows and their ratings on Netflix for 'Friends', and Hulu for 'The Office' and 'Stranger Things' and sort by its rating", "query_for_retrieval": "Find the list of TV shows and their ratings on Netflix for 'Friends', and Hulu for 'The Office' and 'Stranger Things' and sort by its rating", "answer": "streaming_services.shows_list_and_ratings", "answer_params": "", "api_description": "def streaming_services.shows_list_and_ratings:\n\t\"\"\"\n\tDescription:\n\t\n\tGet a list of shows and their ratings on specific streaming services.\n\t\n\tArguments:\n\t---------\n\t- streaming_service : string = None (required) Name of the streaming service. E.g., Netflix, Hulu, etc.\n\t- show_list : array = None (required) List of show names to search for on the platform.\n\t- sort_by_rating : boolean = None (optional) If set to true, returns the list sorted by ratings. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"streaming_services.shows_list_and_ratings\", \"description\": \"Get a list of shows and their ratings on specific streaming services.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"streaming_service\": {\"type\": \"string\", \"description\": \"Name of the streaming service. E.g., Netflix, Hulu, etc.\"}, \"show_list\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of show names to search for on the platform.\"}, \"sort_by_rating\": {\"type\": \"boolean\", \"description\": \"If set to true, returns the list sorted by ratings. Defaults to false.\"}}, \"required\": [\"streaming_service\", \"show_list\"]}}"}
{"scope": "parallel_multiple_function", "query": "'Calculate the energy required to heat 100 grams of water from 25 degrees Celsius to 100 degrees Celsius in joules, and also calculate the energy required to heat the same mass of Aluminium under same conditions in joules", "query_for_retrieval": "'Calculate the energy required to heat 100 grams of water from 25 degrees Celsius to 100 degrees Celsius in joules, and also calculate the energy required to heat the same mass of Aluminium under same conditions in joules", "answer": "temperature_converter.convert", "answer_params": "", "api_description": "def temperature_converter.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a temperature from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- temperature : float = None (required) The temperature to convert.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t- round_to : integer = None (optional) The number of decimal places to round the result to. Defaults to 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"temperature_converter.convert\", \"description\": \"Convert a temperature from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"temperature\": {\"type\": \"float\", \"description\": \"The temperature to convert.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}, \"round_to\": {\"type\": \"integer\", \"description\": \"The number of decimal places to round the result to. Defaults to 2.\"}}, \"required\": [\"temperature\", \"from_unit\", \"to_unit\"]}}"}
{"scope": "multiple_function", "query": "Give me detail information about stocks of Apple Inc.", "query_for_retrieval": "Give me detail information about stocks of Apple Inc.", "answer": "get_current_time", "answer_params": "", "api_description": "def get_current_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current time in a specific time zone.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the city.\n\t- country : string = None (required) The name of the country.\n\t- timezone : string = None (optional) The optional timezone to get current time. Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_time\", \"description\": \"Retrieve the current time in a specific time zone.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the city.\"}, \"country\": {\"type\": \"string\", \"description\": \"The name of the country.\"}, \"timezone\": {\"type\": \"string\", \"description\": \"The optional timezone to get current time. Default ''\"}}, \"required\": [\"location\", \"country\"]}}"}
{"scope": "relevance", "query": "What is the evolutionary history of pandas?", "query_for_retrieval": "What is the evolutionary history of pandas?", "answer": "calculate_biodiversity_index", "answer_params": "", "api_description": "def calculate_biodiversity_index:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the biodiversity index of a specific environment or biome using species richness and species evenness.\n\t\n\tArguments:\n\t---------\n\t- species_richness : integer = None (required) The number of different species in a specific environment.\n\t- species_evenness : integer = None (required) The relative abundance of the different species in an environment.\n\t- region : string = Desert (optional) The specific environment or biome to be measured.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_biodiversity_index\", \"description\": \"Calculate the biodiversity index of a specific environment or biome using species richness and species evenness.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species_richness\": {\"type\": \"integer\", \"description\": \"The number of different species in a specific environment.\"}, \"species_evenness\": {\"type\": \"integer\", \"description\": \"The relative abundance of the different species in an environment.\"}, \"region\": {\"type\": \"string\", \"description\": \"The specific environment or biome to be measured.\", \"enum\": [\"Tropical Rainforest\", \"Desert\", \"Tundra\", \"Grassland\", \"Ocean\"], \"default\": \"Desert\"}}, \"required\": [\"species_richness\", \"species_evenness\"]}}"}
{"scope": "multiple_function", "query": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?", "query_for_retrieval": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- start_point : string = None (required) Starting point of the journey.\n\t- end_point : string = None (required) Ending point of the journey.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_point\": {\"type\": \"string\", \"description\": \"Starting point of the journey.\"}, \"end_point\": {\"type\": \"string\", \"description\": \"Ending point of the journey.\"}}, \"required\": [\"start_point\", \"end_point\"]}}"}
{"scope": "javascript", "query": "How can I validate user input in a form field with the ID 'userInputField' after the user has finished typing?", "query_for_retrieval": "How can I validate user input in a form field with the ID 'userInputField' after the user has finished typing?", "answer": "validateUserInput", "answer_params": "", "api_description": "def validateUserInput:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function is called after a user has finished typing in a form field, to validate the input provided.\n\t\n\tArguments:\n\t---------\n\t- inputField : String = None (required) The form field whose input needs to be validated.\n\t- isComplete : Boolean = None (required) Indicates if the user has finished typing in the input field.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"validateUserInput\", \"description\": \"This function is called after a user has finished typing in a form field, to validate the input provided.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"inputField\": {\"type\": \"String\", \"description\": \"The form field whose input needs to be validated.\"}, \"isComplete\": {\"type\": \"Boolean\", \"description\": \"Indicates if the user has finished typing in the input field.\"}}, \"required\": [\"inputField\", \"isComplete\"]}}"}
{"scope": "sql", "query": "In a database table named \"StudentGrades\", there are columns named \"StudentID\", \"MathGrade\", \"EnglishGrade\", and \"ScienceGrade\". You want to change the \"MathGrade\" of the student with \"StudentID\" 12345 to 95. What operation would you perform to accomplish this, and what would be the new values corresponding to the columns to set and the conditions for this operation?", "query_for_retrieval": "In a database table named \"StudentGrades\", there are columns named \"StudentID\", \"MathGrade\", \"EnglishGrade\", and \"ScienceGrade\". You want to change the \"MathGrade\" of the student with \"StudentID\" 12345 to 95. What operation would you perform to accomplish this, and what would be the new values corresponding to the columns to set and the conditions for this operation?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please generate a sinusoidal sound wave with a frequency of 440 Hz and a duration of 5 seconds, save it to a WAV file named 'test.wav', then generate a square wave sound with a frequency of 880 Hz and a duration of 10 seconds, save it to a file named 'test2.wav', and finally play the 'test.wav' file at a volume level of 0.8 and the 'test2.wav' file at a volume level of 0.6?\"", "query_for_retrieval": "\"Could you please generate a sinusoidal sound wave with a frequency of 440 Hz and a duration of 5 seconds, save it to a WAV file named 'test.wav', then generate a square wave sound with a frequency of 880 Hz and a duration of 10 seconds, save it to a file named 'test2.wav', and finally play the 'test.wav' file at a volume level of 0.8 and the 'test2.wav' file at a volume level of 0.6?\"", "answer": "generate_sound_wave", "answer_params": "", "api_description": "def generate_sound_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.\n\t\n\tArguments:\n\t---------\n\t- frequency : float = None (required) The frequency of the sound wave in Hz.\n\t- duration : integer = None (required) The duration of the sound in seconds.\n\t- wave_type : string = sine (optional) The waveform to be used to generate the sound.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_sound_wave\", \"description\": \"This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"frequency\": {\"type\": \"float\", \"description\": \"The frequency of the sound wave in Hz.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of the sound in seconds.\"}, \"wave_type\": {\"type\": \"string\", \"enum\": [\"sine\", \"square\", \"sawtooth\"], \"description\": \"The waveform to be used to generate the sound.\", \"default\": \"sine\"}}, \"required\": [\"frequency\", \"duration\"]}}"}
{"scope": "relevance", "query": "What will be the energy needed to increase the temperature of 3 kg of water by 4 degrees Celsius?", "query_for_retrieval": "What will be the energy needed to increase the temperature of 3 kg of water by 4 degrees Celsius?", "answer": "calculate_heat", "answer_params": "", "api_description": "def calculate_heat:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the heat required to raise the temperature of a substance using its specific heat.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the substance in kilograms.\n\t- specific_heat : float = None (required) The specific heat of the substance in J/kg.\u00b0C. For water, it is 4.184 J/kg.\u00b0C\n\t- change_in_temp : float = None (required) The change in temperature in degrees Celsius.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_heat\", \"description\": \"Calculate the heat required to raise the temperature of a substance using its specific heat.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the substance in kilograms.\"}, \"specific_heat\": {\"type\": \"float\", \"description\": \"The specific heat of the substance in J/kg.\\u00b0C. For water, it is 4.184 J/kg.\\u00b0C\"}, \"change_in_temp\": {\"type\": \"float\", \"description\": \"The change in temperature in degrees Celsius.\"}}, \"required\": [\"mass\", \"specific_heat\", \"change_in_temp\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a couple of conversions? First, I have 5000 Euros that I want to convert into US Dollars using the latest exchange rate. Then, I have another 3000 Euros that I want to convert into British Pounds, but this time, I want to use the last known exchange rate. After that, I have a distance of 100 kilometers that I want to convert into miles. Lastly, I have a weight of 75 kilograms that I want to convert into pounds. Can you do these conversions for me?\"", "query_for_retrieval": "\"Can you help me with a couple of conversions? First, I have 5000 Euros that I want to convert into US Dollars using the latest exchange rate. Then, I have another 3000 Euros that I want to convert into British Pounds, but this time, I want to use the last known exchange rate. After that, I have a distance of 100 kilometers that I want to convert into miles. Lastly, I have a weight of 75 kilograms that I want to convert into pounds. Can you do these conversions for me?\"", "answer": "unit_conversion.convert", "answer_params": "", "api_description": "def unit_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a value from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- value : integer = None (required) The value to be converted.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"unit_conversion.convert\", \"description\": \"Converts a value from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"integer\", \"description\": \"The value to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}}, \"required\": [\"value\", \"from_unit\", \"to_unit\"]}}"}
{"scope": "relevance", "query": "Who won the FIFA World Cup 2010?", "query_for_retrieval": "Who won the FIFA World Cup 2010?", "answer": "stock_ticker", "answer_params": "", "api_description": "def stock_ticker:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the latest stock ticker information for a specified company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company for which the stock ticker information should be retrieved.\n\t- ticker_symbol : string = symbol (optional) The ticker symbol of the company's stock. This field is optional.\n\t- exchange : string = None (optional) The name of the exchange on which the company's stock is listed. This field is optional. Default: 'AAPL'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_ticker\", \"description\": \"Retrieves the latest stock ticker information for a specified company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company for which the stock ticker information should be retrieved.\"}, \"ticker_symbol\": {\"type\": \"string\", \"description\": \"The ticker symbol of the company's stock. This field is optional.\", \"default\": \"symbol\"}, \"exchange\": {\"type\": \"string\", \"description\": \"The name of the exchange on which the company's stock is listed. This field is optional. Default: 'AAPL'\"}}, \"required\": [\"company_name\"]}}"}
{"scope": "simple", "query": "Give me detail information about stocks of Apple Inc.", "query_for_retrieval": "Give me detail information about stocks of Apple Inc.", "answer": "get_stock_info", "answer_params": "", "api_description": "def get_stock_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves information about a specific stock based on company's name.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- detail_level : string = None (required) Level of detail for stock information. Can be 'summary' or 'detailed'.\n\t- market : string = None (optional) The stock market of interest. Default is 'NASDAQ'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_info\", \"description\": \"Retrieves information about a specific stock based on company's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"detail_level\": {\"type\": \"string\", \"description\": \"Level of detail for stock information. Can be 'summary' or 'detailed'.\"}, \"market\": {\"type\": \"string\", \"description\": \"The stock market of interest. Default is 'NASDAQ'\"}}, \"required\": [\"company_name\", \"detail_level\"]}}"}
{"scope": "simple", "query": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "query_for_retrieval": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "answer": "calculate_electrostatic_potential", "answer_params": "", "api_description": "def calculate_electrostatic_potential:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.\n\t\n\tArguments:\n\t---------\n\t- charge1 : float = None (required) The quantity of charge on the first body.\n\t- charge2 : float = None (required) The quantity of charge on the second body.\n\t- distance : float = None (required) The distance between the two bodies.\n\t- constant : float = None (optional) The value of the electrostatic constant. Default is 8.99e9.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential\", \"description\": \"Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge1\": {\"type\": \"float\", \"description\": \"The quantity of charge on the first body.\"}, \"charge2\": {\"type\": \"float\", \"description\": \"The quantity of charge on the second body.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance between the two bodies.\"}, \"constant\": {\"type\": \"float\", \"description\": \"The value of the electrostatic constant. Default is 8.99e9.\"}}, \"required\": [\"charge1\", \"charge2\", \"distance\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please first use the 'get_current_time' function to find out the current time in Tokyo, Japan, in the 'Asia/Tokyo' timezone? Then, could you use the same function again to find out the current time in New York, United States, in the 'America/New_York' timezone? After that, could you use the 'get_stock_info' function to retrieve a detailed information about the stock of the company 'Microsoft' in the 'NASDAQ' market? Finally, could you use the same function again to retrieve a summary information about the stock of the company 'Apple' in the 'NASDAQ' market?\"", "query_for_retrieval": "\"Could you please first use the 'get_current_time' function to find out the current time in Tokyo, Japan, in the 'Asia/Tokyo' timezone? Then, could you use the same function again to find out the current time in New York, United States, in the 'America/New_York' timezone? After that, could you use the 'get_stock_info' function to retrieve a detailed information about the stock of the company 'Microsoft' in the 'NASDAQ' market? Finally, could you use the same function again to retrieve a summary information about the stock of the company 'Apple' in the 'NASDAQ' market?\"", "answer": "get_stock_info", "answer_params": "", "api_description": "def get_stock_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves information about a specific stock based on company's name.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- detail_level : string = None (required) Level of detail for stock information. Can be 'summary' or 'detailed'.\n\t- market : string = None (optional) The stock market of interest. Default is 'NASDAQ'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_info\", \"description\": \"Retrieves information about a specific stock based on company's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"detail_level\": {\"type\": \"string\", \"description\": \"Level of detail for stock information. Can be 'summary' or 'detailed'.\"}, \"market\": {\"type\": \"string\", \"description\": \"The stock market of interest. Default is 'NASDAQ'\"}}, \"required\": [\"company_name\", \"detail_level\"]}}"}
{"scope": "sql", "query": "Can you remove all records from the 'orders' table where the 'order_status' is 'cancelled'?", "query_for_retrieval": "Can you remove all records from the 'orders' table where the 'order_status' is 'cancelled'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "query_for_retrieval": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "answer": "stats.t_test", "answer_params": "", "api_description": "def stats.t_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform a two-sample t-test for two given arrays.\n\t\n\tArguments:\n\t---------\n\t- array_1 : array = None (required) First array of data.\n\t- array_2 : array = None (required) Second array of data.\n\t- alpha : float = None (required) Significance level for hypothesis testing.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stats.t_test\", \"description\": \"Perform a two-sample t-test for two given arrays.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"array_1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"First array of data.\"}, \"array_2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Second array of data.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for hypothesis testing.\"}}, \"required\": [\"array_1\", \"array_2\", \"alpha\"]}}"}
{"scope": "parallel_function", "query": "Can you generate four different DNA sequences each with a length of 500, where the first sequence has a preference for nucleotide 'A', the second sequence has a preference for nucleotide 'T', the third sequence has a preference for nucleotide 'C', and the fourth sequence has a preference for nucleotide 'G'?", "query_for_retrieval": "Can you generate four different DNA sequences each with a length of 500, where the first sequence has a preference for nucleotide 'A', the second sequence has a preference for nucleotide 'T', the third sequence has a preference for nucleotide 'C', and the fourth sequence has a preference for nucleotide 'G'?", "answer": "generate_DNA_sequence", "answer_params": "", "api_description": "def generate_DNA_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a random DNA sequence with a specific length and nucleotide preference.\n\t\n\tArguments:\n\t---------\n\t- length : integer = None (required) The length of the DNA sequence to be generated.\n\t- preferences : array = None (required) Preferred nucleotides to include more frequently in the DNA sequence.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"generate_DNA_sequence\", \"description\": \"Generate a random DNA sequence with a specific length and nucleotide preference.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"length\": {\"type\": \"integer\", \"description\": \"The length of the DNA sequence to be generated.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"A\", \"T\", \"C\", \"G\"]}, \"description\": \"Preferred nucleotides to include more frequently in the DNA sequence.\"}}, \"required\": [\"length\", \"preferences\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a study about climate change in the Sahara Desert, and part of my research requires analyzing real-time temperature data from specific locations. I need to access the current temperature for a point in the desert with a latitude of 25.00 and a longitude of 13.00. Could we use our weather data retrieval system to get this information from the Open-Meteo API for these coordinates?", "query_for_retrieval": "I'm working on a study about climate change in the Sahara Desert, and part of my research requires analyzing real-time temperature data from specific locations. I need to access the current temperature for a point in the desert with a latitude of 25.00 and a longitude of 13.00. Could we use our weather data retrieval system to get this information from the Open-Meteo API for these coordinates?", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "javascript", "query": "How can I extract the last transaction ID that has a status of 'completed' or 'failed' from a database log located at '/var/log/db.log', using 'utf-8' encoding, and process the information with a processing function?", "query_for_retrieval": "How can I extract the last transaction ID that has a status of 'completed' or 'failed' from a database log located at '/var/log/db.log', using 'utf-8' encoding, and process the information with a processing function?", "answer": "extractLastTransactionId", "answer_params": "", "api_description": "def extractLastTransactionId:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function scans a database log file for lines indicating transaction completion or failure, extracting the last transaction ID that matches the criteria. It uses a processing function `processFunction` to further handle the extracted transaction ID.\n\t\n\tArguments:\n\t---------\n\t- filepath : String = None (required) The path to the database log file to be examined.\n\t- status : array = None (required) An array of statuses to search for within the log file, indicating the end of a transaction.\n\t- encoding : String = None (required) The encoding of the log file.\n\t- processFunction : any = None (required) A function that processes the extracted transaction ID.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"extractLastTransactionId\", \"description\": \"This function scans a database log file for lines indicating transaction completion or failure, extracting the last transaction ID that matches the criteria. It uses a processing function `processFunction` to further handle the extracted transaction ID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"filepath\": {\"type\": \"String\", \"description\": \"The path to the database log file to be examined.\"}, \"status\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"An array of statuses to search for within the log file, indicating the end of a transaction.\"}, \"encoding\": {\"type\": \"String\", \"description\": \"The encoding of the log file.\"}, \"processFunction\": {\"type\": \"any\", \"description\": \"A function that processes the extracted transaction ID.\"}}, \"required\": [\"filepath\", \"status\", \"encoding\", \"processFunction\"]}}"}
{"scope": "simple", "query": "Search for current lawsuits filed against Apple in Santa Clara County.", "query_for_retrieval": "Search for current lawsuits filed against Apple in Santa Clara County.", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve all lawsuits involving a particular entity from specified jurisdiction.\n\t\n\tArguments:\n\t---------\n\t- entity : string = None (required) The entity involved in lawsuits.\n\t- county : string = None (required) The jurisdiction for the lawsuit search for example Alameda county.\n\t- state : string = None (optional) The state for the lawsuit search. Default is California.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Retrieve all lawsuits involving a particular entity from specified jurisdiction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"entity\": {\"type\": \"string\", \"description\": \"The entity involved in lawsuits.\"}, \"county\": {\"type\": \"string\", \"description\": \"The jurisdiction for the lawsuit search for example Alameda county.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state for the lawsuit search. Default is California.\"}}, \"required\": [\"entity\", \"county\"]}}"}
{"scope": "multiple_function", "query": "Compute the Euclidean distance between two points A(3,4) and B(1,2).", "query_for_retrieval": "Compute the Euclidean distance between two points A(3,4) and B(1,2).", "answer": "EuclideanDistance.calculate", "answer_params": "", "api_description": "def EuclideanDistance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Euclidean distance between two points.\n\t\n\tArguments:\n\t---------\n\t- pointA : array = None (required) Coordinates for Point A.\n\t- pointB : array = None (required) Coordinates for Point B.\n\t- rounding : integer = None (optional) Optional: The number of decimals to round off the result. Default 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"EuclideanDistance.calculate\", \"description\": \"Calculate the Euclidean distance between two points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Coordinates for Point A.\"}, \"pointB\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Coordinates for Point B.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"Optional: The number of decimals to round off the result. Default 0\"}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "parallel_function", "query": "What is the current ranking of Barcelona and Manchester United in the UEFA Champions League and La Liga respectively?", "query_for_retrieval": "What is the current ranking of Barcelona and Manchester United in the UEFA Champions League and La Liga respectively?", "answer": "get_team_ranking", "answer_params": "", "api_description": "def get_team_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current ranking of a football team in a specific league.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the football team.\n\t- league : string = None (required) The league the team is competing in. E.g. UEFA Champions League, La Liga.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_team_ranking\", \"description\": \"Retrieve the current ranking of a football team in a specific league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the football team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league the team is competing in. E.g. UEFA Champions League, La Liga.\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me find the roots of two quadratic equations? The first equation is 3x^2 + 4x + 2 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term. The second equation is 5x^2 - 7x + 3 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term.\"", "query_for_retrieval": "\"Can you help me find the roots of two quadratic equations? The first equation is 3x^2 + 4x + 2 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term. The second equation is 5x^2 - 7x + 3 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term.\"", "answer": "algebra.quadratic_roots", "answer_params": "", "api_description": "def algebra.quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the roots of a quadratic equation ax^2 + bx + c = 0.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x^2.\n\t- b : integer = None (required) Coefficient of x.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"algebra.quadratic_roots\", \"description\": \"Find the roots of a quadratic equation ax^2 + bx + c = 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x^2.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "rest", "query": "I'm planning a hiking trip next weekend and would like to know the weather forecast for the upcoming 10 days for the peak of Mount Adams. The coordinates are 46.2028 N, 121.4905 W, and the elevation is around 3743 meters. I'm particularly interested in the daily temperature highs and lows, as well as any precipitation predictions sums. Can you help me fetch this data?", "query_for_retrieval": "I'm planning a hiking trip next weekend and would like to know the weather forecast for the upcoming 10 days for the peak of Mount Adams. The coordinates are 46.2028 N, 121.4905 W, and the elevation is around 3743 meters. I'm particularly interested in the daily temperature highs and lows, as well as any precipitation predictions sums. Can you help me fetch this data?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.", "query_for_retrieval": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.", "answer": "calculate_carbon_footprint", "answer_params": "", "api_description": "def calculate_carbon_footprint:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.\n\t\n\tArguments:\n\t---------\n\t- daily_miles : integer = None (required) The daily driving distance in miles.\n\t- meat_meals_per_week : integer = None (required) The number of meat-based meals consumed per week.\n\t- annual_trash_weight : integer = None (required) The yearly weight of trash production in pounds.\n\t- flights_per_year : integer = None (optional) The number of flights taken per year. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_carbon_footprint\", \"description\": \"Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"daily_miles\": {\"type\": \"integer\", \"description\": \"The daily driving distance in miles.\"}, \"meat_meals_per_week\": {\"type\": \"integer\", \"description\": \"The number of meat-based meals consumed per week.\"}, \"annual_trash_weight\": {\"type\": \"integer\", \"description\": \"The yearly weight of trash production in pounds.\"}, \"flights_per_year\": {\"type\": \"integer\", \"description\": \"The number of flights taken per year. Default is 0.\"}}, \"required\": [\"daily_miles\", \"meat_meals_per_week\", \"annual_trash_weight\"]}}"}
{"scope": "java", "query": "How can I simulate the deletion of documents matching a query in an Elasticsearch test environment, using a `DeleteByQueryRequest` object named `deleteQueryRequest` and an `ActionListener` named `testListener` that listens for `BulkByScrollResponse`?", "query_for_retrieval": "How can I simulate the deletion of documents matching a query in an Elasticsearch test environment, using a `DeleteByQueryRequest` object named `deleteQueryRequest` and an `ActionListener` named `testListener` that listens for `BulkByScrollResponse`?", "answer": "TransformIndexerStateTests.doDeleteByQuery", "answer_params": "", "api_description": "def TransformIndexerStateTests.doDeleteByQuery:\n\t\"\"\"\n\tDescription:\n\t\n\tSimulates the deletion of documents by a query in a test environment by invoking the response listener with a mock `BulkByScrollResponse`.\n\t\n\tArguments:\n\t---------\n\t- deleteByQueryRequest : any = None (required) The request object containing the query for deleting documents.\n\t- responseListener : any = None (required) The listener that handles the response of the delete by query operation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"TransformIndexerStateTests.doDeleteByQuery\", \"description\": \"Simulates the deletion of documents by a query in a test environment by invoking the response listener with a mock `BulkByScrollResponse`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deleteByQueryRequest\": {\"type\": \"any\", \"description\": \"The request object containing the query for deleting documents.\"}, \"responseListener\": {\"type\": \"any\", \"description\": \"The listener that handles the response of the delete by query operation.\"}}, \"required\": [\"deleteByQueryRequest\", \"responseListener\"]}}"}
{"scope": "multiple_function", "query": "What is the air quality index in London 2022/08/16?", "query_for_retrieval": "What is the air quality index in London 2022/08/16?", "answer": "sports_ranking", "answer_params": "", "api_description": "def sports_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the ranking of a specific sports team in a specific league\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- league : string = None (required) The name of the league.\n\t- season : integer = None (optional) Optional parameter to specify the season, default is the current season.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking\", \"description\": \"Fetch the ranking of a specific sports team in a specific league\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the league.\"}, \"season\": {\"type\": \"integer\", \"description\": \"Optional parameter to specify the season, default is the current season.\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the weight of Neutron and Proton in atomic mass unit (amu) ? Also what is the diameter of a Proton and Neutron in femtometers?", "query_for_retrieval": "What is the weight of Neutron and Proton in atomic mass unit (amu) ? Also what is the diameter of a Proton and Neutron in femtometers?", "answer": "scienceFacts.getCharge", "answer_params": "", "api_description": "def scienceFacts.getCharge:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the electric charge of an atomic particle\n\t\n\tArguments:\n\t---------\n\t- particle : string = None (required) The atomic particle. e.g. Electron, Proton\n\t- unit : string = None (required) Unit to retrieve electric charge. For example, 'coulombs' etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"scienceFacts.getCharge\", \"description\": \"Fetch the electric charge of an atomic particle\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"particle\": {\"type\": \"string\", \"description\": \"The atomic particle. e.g. Electron, Proton\"}, \"unit\": {\"type\": \"string\", \"description\": \"Unit to retrieve electric charge. For example, 'coulombs' etc.\"}}, \"required\": [\"particle\", \"unit\"]}}"}
{"scope": "multiple_function", "query": "Find the highest common factor of 36 and 24.", "query_for_retrieval": "Find the highest common factor of 36 and 24.", "answer": "music_generator.generate_scale_progression", "answer_params": "", "api_description": "def music_generator.generate_scale_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a music scale progression in a specific key with a given tempo and duration.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key in which to generate the scale progression.\n\t- tempo : integer = None (required) The tempo of the scale progression in BPM.\n\t- duration : integer = None (required) The duration of each note in beats.\n\t- scale_type : string = major (optional) The type of scale to generate. Defaults to 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_generator.generate_scale_progression\", \"description\": \"Generate a music scale progression in a specific key with a given tempo and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key in which to generate the scale progression.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"The tempo of the scale progression in BPM.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of each note in beats.\"}, \"scale_type\": {\"type\": \"string\", \"default\": \"major\", \"description\": \"The type of scale to generate. Defaults to 'major'.\"}}, \"required\": [\"key\", \"tempo\", \"duration\"]}}"}
{"scope": "executable_simple", "query": "I'm currently compiling a report on the COVID-19 status in various countries, and I need to include the latest figures on active cases in Spain. Can you get me the updated active case count for Spain?", "query_for_retrieval": "I'm currently compiling a report on the COVID-19 status in various countries, and I need to include the latest figures on active cases in Spain. Can you get me the updated active case count for Spain?", "answer": "get_active_covid_case_by_country", "answer_params": "", "api_description": "def get_active_covid_case_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date active cases of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the active cases of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_active_covid_case_by_country\", \"description\": \"Finds the most up to date active cases of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the active cases of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "executable_parallel_function", "query": "I came across some slang terms that the younger folks in my office have been using, and I'm feeling a bit out of the loop. Could you help me understand what they mean? I'd like to know the definitions of 'Lit', 'Savage', and 'YOLO' as they're defined on Urban Dictionary. Can you look these up for me, one at a time? Let's start with 'Lit'.", "query_for_retrieval": "I came across some slang terms that the younger folks in my office have been using, and I'm feeling a bit out of the loop. Could you help me understand what they mean? I'd like to know the definitions of 'Lit', 'Savage', and 'YOLO' as they're defined on Urban Dictionary. Can you look these up for me, one at a time? Let's start with 'Lit'.", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "multiple_function", "query": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?", "query_for_retrieval": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?", "answer": "corporate_finance.product_price", "answer_params": "", "api_description": "def corporate_finance.product_price:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the current selling price of the product.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company that sells the product.\n\t- product : string = None (required) The product whose price we want to fetch.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"corporate_finance.product_price\", \"description\": \"Fetch the current selling price of the product.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company that sells the product.\"}, \"product\": {\"type\": \"string\", \"description\": \"The product whose price we want to fetch.\"}}, \"required\": [\"company\", \"product\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"John has decided to invest his savings. He has $5000 that he wants to invest for a period of 5 years. He is considering two options. The first option is a simple interest scheme that offers an annual interest rate of 4%. The second option is a compound interest scheme that offers an annual interest rate of 3.5% and compounds interest annually. He also came across a third option where he can invest an initial amount of $3000 at an annual interest rate of 5% for 6 years with interest compounded twice a year. Can you help him calculate the returns for each of these options using the calc_Simple_Interest, calc_Compound_Interest, and future_value functions respectively?\"", "query_for_retrieval": "\"John has decided to invest his savings. He has $5000 that he wants to invest for a period of 5 years. He is considering two options. The first option is a simple interest scheme that offers an annual interest rate of 4%. The second option is a compound interest scheme that offers an annual interest rate of 3.5% and compounds interest annually. He also came across a third option where he can invest an initial amount of $3000 at an annual interest rate of 5% for 6 years with interest compounded twice a year. Can you help him calculate the returns for each of these options using the calc_Simple_Interest, calc_Compound_Interest, and future_value functions respectively?\"", "answer": "calc_Simple_Interest", "answer_params": "", "api_description": "def calc_Simple_Interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute simple interest.\n\t\n\tArguments:\n\t---------\n\t- principle_amount : float = None (required) The principle amount that is invested.\n\t- duration : float = None (required) Duration of time period in years.\n\t- annual_rate : float = None (required) Interest rate in percentage.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_Simple_Interest\", \"description\": \"Compute simple interest.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principle_amount\": {\"type\": \"float\", \"description\": \"The principle amount that is invested.\"}, \"duration\": {\"type\": \"float\", \"description\": \"Duration of time period in years.\"}, \"annual_rate\": {\"type\": \"float\", \"description\": \"Interest rate in percentage.\"}}, \"required\": [\"principle_amount\", \"duration\", \"annual_rate\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find all law cases where Charles Dickens is a party and it happened in Boston. Also, get cases where University of California was a party and happened in Los Angeles.", "query_for_retrieval": "Find all law cases where Charles Dickens is a party and it happened in Boston. Also, get cases where University of California was a party and happened in Los Angeles.", "answer": "movie_ratings.get_movie", "answer_params": "", "api_description": "def movie_ratings.get_movie:\n\t\"\"\"\n\tDescription:\n\t\n\tGet a movie by its name.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie to be retrieved\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"movie_ratings.get_movie\", \"description\": \"Get a movie by its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie to be retrieved\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "simple", "query": "Identify the protein sequence of a given human gene 'BRCA1'.", "query_for_retrieval": "Identify the protein sequence of a given human gene 'BRCA1'.", "answer": "get_protein_sequence", "answer_params": "", "api_description": "def get_protein_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the protein sequence encoded by a human gene.\n\t\n\tArguments:\n\t---------\n\t- gene : string = None (required) The human gene of interest.\n\t- species : string = Homo sapiens (optional) The species for which the gene is to be analyzed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_protein_sequence\", \"description\": \"Retrieve the protein sequence encoded by a human gene.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"gene\": {\"type\": \"string\", \"description\": \"The human gene of interest.\"}, \"species\": {\"type\": \"string\", \"description\": \"The species for which the gene is to be analyzed.\", \"default\": \"Homo sapiens\"}}, \"required\": [\"gene\"]}}"}
{"scope": "relevance", "query": "What is the closest integer to 30?", "query_for_retrieval": "What is the closest integer to 30?", "answer": "get_closest_prime", "answer_params": "", "api_description": "def get_closest_prime:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the closest prime number that is lesser than a given number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number which will serve as the upper limit to find the closest prime.\n\t- skip : integer = None (required) Number of closest prime to skip. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_closest_prime\", \"description\": \"Retrieve the closest prime number that is lesser than a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number which will serve as the upper limit to find the closest prime.\"}, \"skip\": {\"type\": \"integer\", \"description\": \"Number of closest prime to skip. Default is 0.\"}}, \"required\": [\"number\", \"skip\"]}}"}
{"scope": "simple", "query": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "query_for_retrieval": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "answer": "social_media_analytics.most_followed", "answer_params": "", "api_description": "def social_media_analytics.most_followed:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the most followed Twitter user related to certain topics.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The main topic of interest.\n\t- sub_topics : array = None (optional) Sub-topics related to main topic. Default is empty.\n\t- region : string = None (optional) Region of interest for twitter search. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"social_media_analytics.most_followed\", \"description\": \"Find the most followed Twitter user related to certain topics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The main topic of interest.\"}, \"sub_topics\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Sub-topics related to main topic. Default is empty.\"}, \"region\": {\"type\": \"string\", \"description\": \"Region of interest for twitter search. Default is 'all'.\"}}, \"required\": [\"topic\"]}}"}
{"scope": "simple", "query": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "query_for_retrieval": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "answer": "calculate_resonant_frequency", "answer_params": "", "api_description": "def calculate_resonant_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the resonant frequency of an LC (inductor-capacitor) circuit.\n\t\n\tArguments:\n\t---------\n\t- inductance : float = None (required) The inductance (L) in henries (H).\n\t- capacitance : float = None (required) The capacitance (C) in farads (F).\n\t- round_off : integer = None (optional) Rounding off the result to a certain decimal places, default is 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_resonant_frequency\", \"description\": \"Calculate the resonant frequency of an LC (inductor-capacitor) circuit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"inductance\": {\"type\": \"float\", \"description\": \"The inductance (L) in henries (H).\"}, \"capacitance\": {\"type\": \"float\", \"description\": \"The capacitance (C) in farads (F).\"}, \"round_off\": {\"type\": \"integer\", \"description\": \"Rounding off the result to a certain decimal places, default is 2.\"}}, \"required\": [\"inductance\", \"capacitance\"]}}"}
{"scope": "relevance", "query": "Find a bakery that sells sourdough bread in Chicago.", "query_for_retrieval": "Find a bakery that sells sourdough bread in Chicago.", "answer": "grocery_shop.find_specific_product", "answer_params": "", "api_description": "def grocery_shop.find_specific_product:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby grocery shops that sell a specific product based on city and product name.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city where the user wants to find the product\n\t- product : string = None (required) The specific product that the user is looking for\n\t- show_closed : boolean = None (optional) Flag to decide if show shops that are currently closed. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_shop.find_specific_product\", \"description\": \"Locate nearby grocery shops that sell a specific product based on city and product name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city where the user wants to find the product\"}, \"product\": {\"type\": \"string\", \"description\": \"The specific product that the user is looking for\"}, \"show_closed\": {\"type\": \"boolean\", \"description\": \"Flag to decide if show shops that are currently closed. Defaults to False.\"}}, \"required\": [\"city\", \"product\"]}}"}
{"scope": "relevance", "query": "What's the lowest score in the Flappy Bird game?", "query_for_retrieval": "What's the lowest score in the Flappy Bird game?", "answer": "game_tracker.high_score", "answer_params": "", "api_description": "def game_tracker.high_score:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the highest score recorded in the specified game.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) The name of the game to get the high score for.\n\t- username : string = None (optional) The username of the player. (optional) Default: 'john'\n\t- platform : string = None (required) The platform where the game was played, i.e PC, Xbox, Playstation, Mobile.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_tracker.high_score\", \"description\": \"Retrieves the highest score recorded in the specified game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"The name of the game to get the high score for.\"}, \"username\": {\"type\": \"string\", \"description\": \"The username of the player. (optional) Default: 'john'\"}, \"platform\": {\"type\": \"string\", \"description\": \"The platform where the game was played, i.e PC, Xbox, Playstation, Mobile.\"}}, \"required\": [\"game_name\", \"platform\"]}}"}
{"scope": "relevance", "query": "Who won the most valuable player in last season's basketball game?", "query_for_retrieval": "Who won the most valuable player in last season's basketball game?", "answer": "sports_ranking.get_team_ranking", "answer_params": "", "api_description": "def sports_ranking.get_team_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the ranking of a specific team in a particular sport league.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the team.\n\t- sport_league : string = None (required) The league that the team is in.\n\t- season : integer = None (optional) The season for which the ranking is requested. If not provided, the most recent season is considered. Default: 1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_team_ranking\", \"description\": \"Retrieve the ranking of a specific team in a particular sport league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"sport_league\": {\"type\": \"string\", \"description\": \"The league that the team is in.\"}, \"season\": {\"type\": \"integer\", \"optional\": \"true\", \"description\": \"The season for which the ranking is requested. If not provided, the most recent season is considered. Default: 1\"}}, \"required\": [\"team_name\", \"sport_league\"]}}"}
{"scope": "multiple_function", "query": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "query_for_retrieval": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "answer": "card_game_probability.calculate", "answer_params": "", "api_description": "def card_game_probability.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of drawing a certain card or suit from a deck of cards.\n\t\n\tArguments:\n\t---------\n\t- total_cards : integer = None (required) Total number of cards in the deck.\n\t- desired_cards : integer = None (required) Number of cards in the deck that satisfy the conditions.\n\t- cards_drawn : integer = 1 (optional) Number of cards drawn from the deck.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"card_game_probability.calculate\", \"description\": \"Calculate the probability of drawing a certain card or suit from a deck of cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_cards\": {\"type\": \"integer\", \"description\": \"Total number of cards in the deck.\"}, \"desired_cards\": {\"type\": \"integer\", \"description\": \"Number of cards in the deck that satisfy the conditions.\"}, \"cards_drawn\": {\"type\": \"integer\", \"default\": 1, \"description\": \"Number of cards drawn from the deck.\"}}, \"required\": [\"total_cards\", \"desired_cards\"]}}"}
{"scope": "javascript", "query": "How can I sort a list of items  myItemList alphabetically and ascendingly, but place items with a status of 'urgent' at the top, assuming the list is an array of objects with 'name' and 'status' properties?", "query_for_retrieval": "How can I sort a list of items  myItemList alphabetically and ascendingly, but place items with a status of 'urgent' at the top, assuming the list is an array of objects with 'name' and 'status' properties?", "answer": "prioritizeAndSort", "answer_params": "", "api_description": "def prioritizeAndSort:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function sorts an array of objects based on their 'name' property, while prioritizing items based on a specified status.\n\t\n\tArguments:\n\t---------\n\t- items : array = None (required) The array of objects to be sorted.\n\t- priorityStatus : String = None (required) The status value that should be given priority in the sorting.\n\t- ascending : Boolean = None (required) A flag indicating whether the sorting should be in ascending (true) or descending (false) order, excluding priority items.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prioritizeAndSort\", \"description\": \"This function sorts an array of objects based on their 'name' property, while prioritizing items based on a specified status.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"items\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The array of objects to be sorted.\"}, \"priorityStatus\": {\"type\": \"String\", \"description\": \"The status value that should be given priority in the sorting.\"}, \"ascending\": {\"type\": \"Boolean\", \"description\": \"A flag indicating whether the sorting should be in ascending (true) or descending (false) order, excluding priority items.\"}}, \"required\": [\"items\", \"priorityStatus\", \"ascending\"]}}"}
{"scope": "relevance", "query": "How do I find the angle of the force for a given momentum?", "query_for_retrieval": "How do I find the angle of the force for a given momentum?", "answer": "calculate_vector_angle", "answer_params": "", "api_description": "def calculate_vector_angle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the angle of a vector based on its X and Y components.\n\t\n\tArguments:\n\t---------\n\t- X_component : float = None (required) The X component of the vector.\n\t- Y_component : float = None (required) The Y component of the vector.\n\t- use_degrees : boolean = None (optional) If true, the result will be in degrees. If false, the result will be in radians. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_vector_angle\", \"description\": \"Calculate the angle of a vector based on its X and Y components.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"X_component\": {\"type\": \"float\", \"description\": \"The X component of the vector.\"}, \"Y_component\": {\"type\": \"float\", \"description\": \"The Y component of the vector.\"}, \"use_degrees\": {\"type\": \"boolean\", \"description\": \"If true, the result will be in degrees. If false, the result will be in radians. Default is false.\"}}, \"required\": [\"X_component\", \"Y_component\"]}}"}
{"scope": "simple", "query": "Calculate the final speed of an object dropped from 100 m without air resistance.", "query_for_retrieval": "Calculate the final speed of an object dropped from 100 m without air resistance.", "answer": "calculate_final_speed", "answer_params": "", "api_description": "def calculate_final_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final speed of an object dropped from a certain height without air resistance.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object.\n\t- height : integer = None (required) The height from which the object is dropped.\n\t- gravity : float = None (optional) The gravitational acceleration. Default is 9.8 m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_speed\", \"description\": \"Calculate the final speed of an object dropped from a certain height without air resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height from which the object is dropped.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The gravitational acceleration. Default is 9.8 m/s^2.\"}}, \"required\": [\"initial_velocity\", \"height\"]}}"}
{"scope": "simple", "query": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm.", "query_for_retrieval": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm.", "answer": "calculate_area", "answer_params": "", "api_description": "def calculate_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a right-angled triangle given the lengths of its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the right-angled triangle.\n\t- height : integer = None (required) The height of the right-angled triangle.\n\t- unit : string = None (optional) The unit of measure used. Defaults to 'cm'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_area\", \"description\": \"Calculate the area of a right-angled triangle given the lengths of its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the right-angled triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the right-angled triangle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measure used. Defaults to 'cm'.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "multiple_function", "query": "How to obtain the detailed case information of the R vs Adams legal case?", "query_for_retrieval": "How to obtain the detailed case information of the R vs Adams legal case?", "answer": "park_information", "answer_params": "", "api_description": "def park_information:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the basic information such as elevation and area of a national park.\n\t\n\tArguments:\n\t---------\n\t- park_name : string = None (required) The name of the national park.\n\t- information : array = None (required) The type of information you want about the park.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"park_information\", \"description\": \"Retrieve the basic information such as elevation and area of a national park.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"park_name\": {\"type\": \"string\", \"description\": \"The name of the national park.\"}, \"information\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Elevation\", \"Area\", \"Location\", \"Established Year\"]}, \"description\": \"The type of information you want about the park.\"}}, \"required\": [\"park_name\", \"information\"]}}"}
{"scope": "java", "query": "How can I create an `InvokePolymorphicNode` for a given instruction data `instructionData` that represents a range invocation in a Java decompiler?", "query_for_retrieval": "How can I create an `InvokePolymorphicNode` for a given instruction data `instructionData` that represents a range invocation in a Java decompiler?", "answer": "InsnDecoder.invokePolymorphic", "answer_params": "", "api_description": "def InsnDecoder.invokePolymorphic:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates an InvokePolymorphicNode based on the given instruction data and whether the invocation is a range or not.\n\t\n\tArguments:\n\t---------\n\t- insn : any = None (required) The instruction data from which to create the InvokePolymorphicNode.\n\t- isRange : boolean = None (required) Indicates whether the invocation is a range invocation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"InsnDecoder.invokePolymorphic\", \"description\": \"Creates an InvokePolymorphicNode based on the given instruction data and whether the invocation is a range or not.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"insn\": {\"type\": \"any\", \"description\": \"The instruction data from which to create the InvokePolymorphicNode.\"}, \"isRange\": {\"type\": \"boolean\", \"description\": \"Indicates whether the invocation is a range invocation.\"}}, \"required\": [\"insn\", \"isRange\"]}}"}
{"scope": "executable_simple", "query": "I'm working on the design for a triangular dam, and I've settled on the dimensions. The base is going to be 700 meters, and the height will be at 450 meters. I need to calculate the total area that the face of this dam will cover. Can you help me figure out what that area would be with these measurements?", "query_for_retrieval": "I'm working on the design for a triangular dam, and I've settled on the dimensions. The base is going to be 700 meters, and the height will be at 450 meters. I need to calculate the total area that the face of this dam will cover. Can you help me figure out what that area would be with these measurements?", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a triangle given its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base of the triangle, in meters.\n\t- height : integer = None (required) The height of the triangle, in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculates the area of a triangle given its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base of the triangle, in meters.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle, in meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "simple", "query": "How many Canadian dollars can I get for 500 US dollars?", "query_for_retrieval": "How many Canadian dollars can I get for 500 US dollars?", "answer": "currency_exchange.convert", "answer_params": "", "api_description": "def currency_exchange.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert an amount from a base currency to a target currency based on the current exchange rate.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The currency to convert from.\n\t- target_currency : string = None (required) The currency to convert to.\n\t- amount : integer = None (required) The amount in base currency to convert\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_exchange.convert\", \"description\": \"Convert an amount from a base currency to a target currency based on the current exchange rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The amount in base currency to convert\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a physics experiment to understand the principles of motion, and part of the experiment involves tracking the speed of different objects. I've got the measurements here, and I need to calculate the final velocities. For the car, it started off at 5 meters per second and picked up speed at a rate of 2 meters per second squared for a total duration of 10 seconds. The bicycle had an initial speed of 2 meters per second, with an acceleration of 1 meter per second squared over a period of 15 seconds. Lastly, the skateboard began at a pace of 1 meter per second and accelerated at 0.5 meters per second squared for 20 seconds. Could you run these numbers and give me the final velocities for the car, bicycle, and skateboard?", "query_for_retrieval": "I'm working on a physics experiment to understand the principles of motion, and part of the experiment involves tracking the speed of different objects. I've got the measurements here, and I need to calculate the final velocities. For the car, it started off at 5 meters per second and picked up speed at a rate of 2 meters per second squared for a total duration of 10 seconds. The bicycle had an initial speed of 2 meters per second, with an acceleration of 1 meter per second squared over a period of 15 seconds. Lastly, the skateboard began at a pace of 1 meter per second and accelerated at 0.5 meters per second squared for 20 seconds. Could you run these numbers and give me the final velocities for the car, bicycle, and skateboard?", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the final velocity of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object.\n\t- acceleration : float = None (required) The acceleration of the object.\n\t- time : float = None (required) The time the object has been moving.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculates the final velocity of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on tracking the geographical locations of certain network requests for a project I'm involved in. Could you start by providing me the latitude and longitude for the IP address '192.168.1.1'? After that, I'll need the same information for '172.16.254.1'. Lastly, let's also find the coordinates for '10.0.0.1' and '192.0.2.1'.", "query_for_retrieval": "I'm working on tracking the geographical locations of certain network requests for a project I'm involved in. Could you start by providing me the latitude and longitude for the IP address '192.168.1.1'? After that, I'll need the same information for '172.16.254.1'. Lastly, let's also find the coordinates for '10.0.0.1' and '192.0.2.1'.", "answer": "get_coordinate_by_ip_address", "answer_params": "", "api_description": "def get_coordinate_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the latitude and longitude of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinate_by_ip_address\", \"description\": \"Finds the latitude and longitude of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "parallel_function", "query": "Calculate the Future Value of an investment of $1000 with an annual interest rate of 5% for 1,5 and 10 years.", "query_for_retrieval": "Calculate the Future Value of an investment of $1000 with an annual interest rate of 5% for 1,5 and 10 years.", "answer": "financials.calculate_future_value", "answer_params": "", "api_description": "def financials.calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment based on a constant interest rate.\n\t\n\tArguments:\n\t---------\n\t- present_value : integer = None (required) The present value or initial amount of the investment.\n\t- annual_interest_rate : float = None (required) The annual interest rate as a decimal.\n\t- number_of_years : integer = None (required) The number of years the money is invested for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financials.calculate_future_value\", \"description\": \"Calculate the future value of an investment based on a constant interest rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"integer\", \"description\": \"The present value or initial amount of the investment.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate as a decimal.\"}, \"number_of_years\": {\"type\": \"integer\", \"description\": \"The number of years the money is invested for.\"}}, \"required\": [\"present_value\", \"annual_interest_rate\", \"number_of_years\"]}}"}
{"scope": "parallel_function", "query": "What are the potential greenhouse gas emissions savings if I switch to solar energy for 12 months and wind energy for 8 months in the Midwest region of the United States?", "query_for_retrieval": "What are the potential greenhouse gas emissions savings if I switch to solar energy for 12 months and wind energy for 8 months in the Midwest region of the United States?", "answer": "calculate_emission_savings", "answer_params": "", "api_description": "def calculate_emission_savings:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n\t\n\tArguments:\n\t---------\n\t- energy_type : string = None (required) Type of the renewable energy source.\n\t- usage_duration : integer = None (required) Usage duration in months.\n\t- region : string = West (optional) The region where you use energy.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_emission_savings\", \"description\": \"Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"energy_type\": {\"type\": \"string\", \"description\": \"Type of the renewable energy source.\"}, \"usage_duration\": {\"type\": \"integer\", \"description\": \"Usage duration in months.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region where you use energy.\", \"default\": \"West\"}}, \"required\": [\"energy_type\", \"usage_duration\"]}}"}
{"scope": "executable_simple", "query": "I have a client planning a trip to Paris, and they're quite keen on details. They want to know the exact latitude and longitude for the city to plan their itinerary with precision. Could you look up the geographical coordinates for Paris for me?", "query_for_retrieval": "I have a client planning a trip to Paris, and they're quite keen on details. They want to know the exact latitude and longitude for the city to plan their itinerary with precision. Could you look up the geographical coordinates for Paris for me?", "answer": "get_coordinates_from_city", "answer_params": "", "api_description": "def get_coordinates_from_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\n\t\n\tArguments:\n\t---------\n\t- city_name : string = None (required) The name of the city, such as 'Rome'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinates_from_city\", \"description\": \"Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city_name\": {\"type\": \"string\", \"description\": \"The name of the city, such as 'Rome'.\"}}, \"required\": [\"city_name\"]}}"}
{"scope": "java", "query": "How can I obtain the third page of role counts with a page size of 20 when using the SysRoleController's method for querying role counts in a system management application?", "query_for_retrieval": "How can I obtain the third page of role counts with a page size of 20 when using the SysRoleController's method for querying role counts in a system management application?", "answer": "SysRoleController.queryPageRoleCount", "answer_params": "", "api_description": "def SysRoleController.queryPageRoleCount:\n\t\"\"\"\n\tDescription:\n\t\n\tThis method queries for a paginated list of role counts, where each role's count represents the number of users associated with that role.\n\t\n\tArguments:\n\t---------\n\t- pageNo : integer = None (required) The number of the page to retrieve (optional, defaults to 1).\n\t- pageSize : integer = None (required) The number of records per page (optional, defaults to 10).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SysRoleController.queryPageRoleCount\", \"description\": \"This method queries for a paginated list of role counts, where each role's count represents the number of users associated with that role.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pageNo\": {\"type\": \"integer\", \"description\": \"The number of the page to retrieve (optional, defaults to 1).\"}, \"pageSize\": {\"type\": \"integer\", \"description\": \"The number of records per page (optional, defaults to 10).\"}}, \"required\": [\"pageNo\", \"pageSize\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working on a project where I'm analyzing population distribution patterns in various cities. Part of the process involves matching zip codes to their corresponding cities. Right now, I need to find out which city the zip code '10001' belongs to. Could you give me the name of the city that matches this zip code?", "query_for_retrieval": "I'm currently working on a project where I'm analyzing population distribution patterns in various cities. Part of the process involves matching zip codes to their corresponding cities. Right now, I need to find out which city the zip code '10001' belongs to. Could you give me the name of the city that matches this zip code?", "answer": "retrieve_city_based_on_zipcode", "answer_params": "", "api_description": "def retrieve_city_based_on_zipcode:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the city of a zipcode.\n\t\n\tArguments:\n\t---------\n\t- zipcode : string = None (required) The zipcode of the city.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_city_based_on_zipcode\", \"description\": \"Finds the city of a zipcode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"zipcode\": {\"type\": \"string\", \"description\": \"The zipcode of the city.\"}}, \"required\": [\"zipcode\"]}}"}
{"scope": "parallel_function", "query": "Predict house price for a house of size 3000 sq ft. in location New York and 4000 sq ft. in Los Angeles using Machine Learning Model.", "query_for_retrieval": "Predict house price for a house of size 3000 sq ft. in location New York and 4000 sq ft. in Los Angeles using Machine Learning Model.", "answer": "ml.predict_house_price", "answer_params": "", "api_description": "def ml.predict_house_price:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict house price using Machine Learning model given the house size and location\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location of the house\n\t- size : integer = None (required) Size of the house in square feet\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ml.predict_house_price\", \"description\": \"Predict house price using Machine Learning model given the house size and location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location of the house\"}, \"size\": {\"type\": \"integer\", \"description\": \"Size of the house in square feet\"}}, \"required\": [\"location\", \"size\"]}}"}
{"scope": "parallel_multiple_function", "query": "Analyze the performance of the L.A Lakers in their last game and give me the field goal percentage and free throw percentage. Also, compare the team's points per game (ppg) average from 2018-2019 and 2019-2020 season.", "query_for_retrieval": "Analyze the performance of the L.A Lakers in their last game and give me the field goal percentage and free throw percentage. Also, compare the team's points per game (ppg) average from 2018-2019 and 2019-2020 season.", "answer": "sport_analysis.last_game_performance", "answer_params": "", "api_description": "def sport_analysis.last_game_performance:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyzes the team's performance in their most recent game.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The sports team that needs to be analyzed.\n\t- details : array = None (required) Key performance indicators that you want for the analysis\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sport_analysis.last_game_performance\", \"description\": \"Analyzes the team's performance in their most recent game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The sports team that needs to be analyzed.\"}, \"details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"field goal %\", \"free throw %\"]}, \"description\": \"Key performance indicators that you want for the analysis\"}}, \"required\": [\"team\", \"details\"]}}"}
{"scope": "relevance", "query": "What are some tips to maintain a piano?", "query_for_retrieval": "What are some tips to maintain a piano?", "answer": "instrument_rental_prices", "answer_params": "", "api_description": "def instrument_rental_prices:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current rental prices for a specific musical instrument in a given city.\n\t\n\tArguments:\n\t---------\n\t- instrument : string = None (required) The musical instrument to retrieve rental prices for.\n\t- city : string = None (required) The city to retrieve rental prices for.\n\t- duration : string = None (optional) The duration for renting. Default is 'Monthly'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"instrument_rental_prices\", \"description\": \"Retrieve the current rental prices for a specific musical instrument in a given city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument\": {\"type\": \"string\", \"description\": \"The musical instrument to retrieve rental prices for.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city to retrieve rental prices for.\"}, \"duration\": {\"type\": \"string\", \"description\": \"The duration for renting. Default is 'Monthly'.\"}}, \"required\": [\"instrument\", \"city\"]}}"}
{"scope": "relevance", "query": "How long will it take to travel from San Francisco to Los Angeles by car?", "query_for_retrieval": "How long will it take to travel from San Francisco to Los Angeles by car?", "answer": "calculate_tip", "answer_params": "", "api_description": "def calculate_tip:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the tip amount for a restaurant bill.\n\t\n\tArguments:\n\t---------\n\t- bill_amount : float = None (required) The total restaurant bill amount.\n\t- tip_percentage : float = None (required) The tip percentage as a decimal.\n\t- split_bill : integer = 1 (optional) The number of people to split the bill with. This parameter is optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_tip\", \"description\": \"Calculate the tip amount for a restaurant bill.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"bill_amount\": {\"type\": \"float\", \"description\": \"The total restaurant bill amount.\"}, \"tip_percentage\": {\"type\": \"float\", \"description\": \"The tip percentage as a decimal.\"}, \"split_bill\": {\"type\": \"integer\", \"description\": \"The number of people to split the bill with. This parameter is optional.\", \"default\": 1}}, \"required\": [\"bill_amount\", \"tip_percentage\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you provide me with the current statistics for the basketball player LeBron James, specifically his points, assists, rebounds, and minutes played? Then, can you also provide the current statistics for the Los Angeles Lakers, including their total points, total assists, total rebounds, and win rate? After that, could you give me the detailed statistical data from the game between the Los Angeles Lakers and the Golden State Warriors that occurred on January 18, 2021, including total points, total assists, total rebounds, and turnovers?\"", "query_for_retrieval": "\"Can you provide me with the current statistics for the basketball player LeBron James, specifically his points, assists, rebounds, and minutes played? Then, can you also provide the current statistics for the Los Angeles Lakers, including their total points, total assists, total rebounds, and win rate? After that, could you give me the detailed statistical data from the game between the Los Angeles Lakers and the Golden State Warriors that occurred on January 18, 2021, including total points, total assists, total rebounds, and turnovers?\"", "answer": "basketball.player_stats.get", "answer_params": "", "api_description": "def basketball.player_stats.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet current statistics for a specified basketball player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the player.\n\t- stats_fields : array = None (required) List of statistical categories to be fetched, including points, assists, rebounds, minutes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"basketball.player_stats.get\", \"description\": \"Get current statistics for a specified basketball player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the player.\"}, \"stats_fields\": {\"type\": \"array\", \"description\": \"List of statistical categories to be fetched, including points, assists, rebounds, minutes.\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"player_name\", \"stats_fields\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me find the greatest common divisor of the following pairs of integers: (45, 60) and (81, 63)? Please use the number_theory.gcd function to compute this.\"", "query_for_retrieval": "\"Can you help me find the greatest common divisor of the following pairs of integers: (45, 60) and (81, 63)? Please use the number_theory.gcd function to compute this.\"", "answer": "number_theory.gcd", "answer_params": "", "api_description": "def number_theory.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the greatest common divisor of two given integers.\n\t\n\tArguments:\n\t---------\n\t- number1 : integer = None (required) The first integer.\n\t- number2 : integer = None (required) The second integer.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"number_theory.gcd\", \"description\": \"Compute the greatest common divisor of two given integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number1\": {\"type\": \"integer\", \"description\": \"The first integer.\"}, \"number2\": {\"type\": \"integer\", \"description\": \"The second integer.\"}}, \"required\": [\"number1\", \"number2\"]}}"}
{"scope": "simple", "query": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "query_for_retrieval": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "answer": "locate_tallest_mountains", "answer_params": "", "api_description": "def locate_tallest_mountains:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the tallest mountains within a specified radius of a location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city from which to calculate distance.\n\t- radius : integer = None (required) The radius within which to find mountains, measured in kilometers.\n\t- amount : integer = None (required) The number of mountains to find, listed from tallest to smallest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"locate_tallest_mountains\", \"description\": \"Find the tallest mountains within a specified radius of a location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city from which to calculate distance.\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The radius within which to find mountains, measured in kilometers.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The number of mountains to find, listed from tallest to smallest.\"}}, \"required\": [\"location\", \"radius\", \"amount\"]}}"}
{"scope": "javascript", "query": "How do I schedule a sequence of events where 'setupStage' uses setupStageFunction precedes 'cleanupStage' using cleanStageFunction, ensuring only 3 events can happen at the same time?", "query_for_retrieval": "How do I schedule a sequence of events where 'setupStage' uses setupStageFunction precedes 'cleanupStage' using cleanStageFunction, ensuring only 3 events can happen at the same time?", "answer": "EventScheduler", "answer_params": "", "api_description": "def EventScheduler:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function schedules a series of events, with each event possibly dependent on the completion of other events. It includes concurrency control to limit the number of simultaneous events.\n\t\n\tArguments:\n\t---------\n\t- events : dict = None (required) An object mapping event names to events or arrays that define an event and its prerequisites.\n\t- concurrencyLimit : float = None (optional) The maximum number of events that can be scheduled concurrently. Optional parameter. Default 0.0\n\t- callback : any = None (optional) A callback function that is invoked after all events have concluded or if an error has occurred. Optional parameter. Default null\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"EventScheduler\", \"description\": \"This function schedules a series of events, with each event possibly dependent on the completion of other events. It includes concurrency control to limit the number of simultaneous events.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"events\": {\"type\": \"dict\", \"description\": \"An object mapping event names to events or arrays that define an event and its prerequisites.\"}, \"concurrencyLimit\": {\"type\": \"float\", \"description\": \"The maximum number of events that can be scheduled concurrently. Optional parameter. Default 0.0\"}, \"callback\": {\"type\": \"any\", \"description\": \"A callback function that is invoked after all events have concluded or if an error has occurred. Optional parameter. Default null\"}}, \"required\": [\"events\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few things? First, I'd like to calculate the return on equity for a company that had a net income of $2 million, total shareholder's equity of $10 million, and paid dividends amounting to $500,000. Then, I'm trying to find the lyrics to the song 'Bohemian Rhapsody' by the artist 'Queen', and I need them in English. After that, I'm interested in finding a historical law case related to 'fraud' that took place between the years 1990 and 2000. Lastly, I'm looking for a public library in 'Boston, MA' that has both a 'Reading Room' and 'Wi-Fi' facilities. Can you assist with these?\"", "query_for_retrieval": "\"Could you help me with a few things? First, I'd like to calculate the return on equity for a company that had a net income of $2 million, total shareholder's equity of $10 million, and paid dividends amounting to $500,000. Then, I'm trying to find the lyrics to the song 'Bohemian Rhapsody' by the artist 'Queen', and I need them in English. After that, I'm interested in finding a historical law case related to 'fraud' that took place between the years 1990 and 2000. Lastly, I'm looking for a public library in 'Boston, MA' that has both a 'Reading Room' and 'Wi-Fi' facilities. Can you assist with these?\"", "answer": "get_song_lyrics", "answer_params": "", "api_description": "def get_song_lyrics:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the lyrics of a song based on the artist's name and song title.\n\t\n\tArguments:\n\t---------\n\t- song_title : string = None (required) The title of the song.\n\t- artist_name : string = None (required) The name of the artist who performed the song.\n\t- lang : string = None (optional) The language of the lyrics. Default is English.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_song_lyrics\", \"description\": \"Retrieve the lyrics of a song based on the artist's name and song title.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"song_title\": {\"type\": \"string\", \"description\": \"The title of the song.\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist who performed the song.\"}, \"lang\": {\"type\": \"string\", \"description\": \"The language of the lyrics. Default is English.\", \"enum\": [\"English\", \"French\", \"Spanish\", \"German\", \"Italian\"]}}, \"required\": [\"song_title\", \"artist_name\"]}}"}
{"scope": "simple", "query": "Find the rating and player count of the board game 'Ticket to Ride'.", "query_for_retrieval": "Find the rating and player count of the board game 'Ticket to Ride'.", "answer": "boardgame.get_info", "answer_params": "", "api_description": "def boardgame.get_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve detailed information of a board game.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) Name of the board game.\n\t- parameters : array = None (required) Game characteristics interested.\n\t- language : string = None (optional) The preferred language for the game information, default is English\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"boardgame.get_info\", \"description\": \"Retrieve detailed information of a board game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"Name of the board game.\"}, \"parameters\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"player count\", \"playing time\", \"age\", \"mechanics\", \"rating\"]}, \"description\": \"Game characteristics interested.\"}, \"language\": {\"type\": \"string\", \"description\": \"The preferred language for the game information, default is English\"}}, \"required\": [\"name\", \"parameters\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a real estate investor. You bought a property 5 years ago for $500,000. The annual depreciation rate for the property is 2%. Can you calculate the current depreciated value of the property? Now, consider you had a sum of $200,000 at the same time you bought the property. If the annual inflation rate has been 3% for the past 5 years, how much would that sum be worth today? Also, suppose you took out a loan of $300,000 with an annual interest rate of 4% to help finance the property purchase. If the loan term was 10 years, what would be your monthly repayment for the loan? Lastly, if you calculate the property depreciation monthly instead of annually, what would be the depreciated value of the property now?\"", "query_for_retrieval": "\"Imagine you are a real estate investor. You bought a property 5 years ago for $500,000. The annual depreciation rate for the property is 2%. Can you calculate the current depreciated value of the property? Now, consider you had a sum of $200,000 at the same time you bought the property. If the annual inflation rate has been 3% for the past 5 years, how much would that sum be worth today? Also, suppose you took out a loan of $300,000 with an annual interest rate of 4% to help finance the property purchase. If the loan term was 10 years, what would be your monthly repayment for the loan? Lastly, if you calculate the property depreciation monthly instead of annually, what would be the depreciated value of the property now?\"", "answer": "finance.loan_repayment", "answer_params": "", "api_description": "def finance.loan_repayment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly repayment for a loan.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount borrowed or loaned.\n\t- interest_rate : float = None (required) The annual interest rate.\n\t- loan_term : integer = None (required) The term of the loan in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.loan_repayment\", \"description\": \"Calculates the monthly repayment for a loan.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount borrowed or loaned.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate.\"}, \"loan_term\": {\"type\": \"integer\", \"description\": \"The term of the loan in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_term\"]}}"}
{"scope": "multiple_function", "query": "What is the energy produced by 5 mol of glucose (C6H12O6)?", "query_for_retrieval": "What is the energy produced by 5 mol of glucose (C6H12O6)?", "answer": "biological.calc_biomass", "answer_params": "", "api_description": "def biological.calc_biomass:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the biomass from the energy given the energy conversion efficiency.\n\t\n\tArguments:\n\t---------\n\t- energy : float = None (required) The total energy produced.\n\t- efficiency : float = 0.1 (optional) The conversion efficiency, default value is 10%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"biological.calc_biomass\", \"description\": \"Calculate the biomass from the energy given the energy conversion efficiency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"energy\": {\"type\": \"float\", \"description\": \"The total energy produced.\"}, \"efficiency\": {\"type\": \"float\", \"description\": \"The conversion efficiency, default value is 10%.\", \"default\": 0.1}}, \"required\": [\"energy\"]}}"}
{"scope": "sql", "query": "Can you change the \"products\" table by adjusting the \"price\" column to \"20\" for all items whose \"category\" is \"Electronics\"?", "query_for_retrieval": "Can you change the \"products\" table by adjusting the \"price\" column to \"20\" for all items whose \"category\" is \"Electronics\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "What was Albert Einstein's contribution to science on March 17, 1915?", "query_for_retrieval": "What was Albert Einstein's contribution to science on March 17, 1915?", "answer": "historical_contrib.get_contrib", "answer_params": "", "api_description": "def historical_contrib.get_contrib:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical contribution made by a scientist on a specific date.\n\t\n\tArguments:\n\t---------\n\t- scientist : string = None (required) The scientist whose contributions need to be searched.\n\t- date : string = None (required) The date when the contribution was made in yyyy-mm-dd format.\n\t- category : string = None (optional) The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historical_contrib.get_contrib\", \"description\": \"Retrieve historical contribution made by a scientist on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"scientist\": {\"type\": \"string\", \"description\": \"The scientist whose contributions need to be searched.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date when the contribution was made in yyyy-mm-dd format.\"}, \"category\": {\"type\": \"string\", \"description\": \"The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'.\"}}, \"required\": [\"scientist\", \"date\"]}}"}
{"scope": "executable_simple", "query": "While listening to the latest hip-hop tracks, I've noticed that the word \"flex\" keeps popping up in the lyrics. It seems to be used in a way that's different from the traditional meaning I'm familiar with. To get a better grasp of the slang, can you look up what \"flex\" means in the context of hip-hop on Urban Dictionary for me?", "query_for_retrieval": "While listening to the latest hip-hop tracks, I've noticed that the word \"flex\" keeps popping up in the lyrics. It seems to be used in a way that's different from the traditional meaning I'm familiar with. To get a better grasp of the slang, can you look up what \"flex\" means in the context of hip-hop on Urban Dictionary for me?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "parallel_function", "query": "Can you fetch the DNA sequence of a molecule with the unique ID 'XYZ123' from the public database, then fetch the same sequence again but this time in 'genbank' format, and finally fetch the sequence once more but now with 500 base pairs included upstream the DNA sequence?", "query_for_retrieval": "Can you fetch the DNA sequence of a molecule with the unique ID 'XYZ123' from the public database, then fetch the same sequence again but this time in 'genbank' format, and finally fetch the sequence once more but now with 500 base pairs included upstream the DNA sequence?", "answer": "fetch_DNA_sequence", "answer_params": "", "api_description": "def fetch_DNA_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the sequence of a DNA molecule with the given id from a public database.\n\t\n\tArguments:\n\t---------\n\t- DNA_id : string = None (required) Unique ID of the DNA molecule in the database.\n\t- format : string = None (optional) Optional parameter to get sequence in specific format (default to 'fasta').\n\t- upstream : integer = None (optional) Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_DNA_sequence\", \"description\": \"Retrieve the sequence of a DNA molecule with the given id from a public database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"DNA_id\": {\"type\": \"string\", \"description\": \"Unique ID of the DNA molecule in the database.\"}, \"format\": {\"type\": \"string\", \"description\": \"Optional parameter to get sequence in specific format (default to 'fasta').\"}, \"upstream\": {\"type\": \"integer\", \"description\": \"Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\"}}, \"required\": [\"DNA_id\"]}}"}
{"scope": "relevance", "query": "What are some recommended exercises for legs?", "query_for_retrieval": "What are some recommended exercises for legs?", "answer": "grocery.get_food_list", "answer_params": "", "api_description": "def grocery.get_food_list:\n\t\"\"\"\n\tDescription:\n\t\n\tGet a list of groceries suitable for a specific dietary goal.\n\t\n\tArguments:\n\t---------\n\t- goal : string = None (required) The dietary goal, e.g. weight loss, muscle gain\n\t- budget : float = None (required) The available budget for grocery shopping.\n\t- preference : array = ['Vegan'] (optional) Food preference or dietary restrictions.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery.get_food_list\", \"description\": \"Get a list of groceries suitable for a specific dietary goal.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"goal\": {\"type\": \"string\", \"description\": \"The dietary goal, e.g. weight loss, muscle gain\"}, \"budget\": {\"type\": \"float\", \"description\": \"The available budget for grocery shopping.\"}, \"preference\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Vegan\", \"Vegetarian\", \"Gluten-Free\"]}, \"description\": \"Food preference or dietary restrictions.\", \"default\": [\"Vegan\"]}}, \"required\": [\"goal\", \"budget\"]}}"}
{"scope": "javascript", "query": "How can I create a mapping that assigns each of the first 4 elements from a given array to the category 'transition' for use in CSS transitions?", "query_for_retrieval": "How can I create a mapping that assigns each of the first 4 elements from a given array to the category 'transition' for use in CSS transitions?", "answer": "mapTransitions", "answer_params": "", "api_description": "def mapTransitions:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function creates a mapping where each key is an element from a given array (up to a specified limit of elements) and each value is set to a predefined category. This is useful for defining categories for CSS transitions.\n\t\n\tArguments:\n\t---------\n\t- category : String = None (required) The category to be assigned to each element in the mapping.\n\t- limit : float = None (required) The number of elements from the array to include in the mapping.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mapTransitions\", \"description\": \"This function creates a mapping where each key is an element from a given array (up to a specified limit of elements) and each value is set to a predefined category. This is useful for defining categories for CSS transitions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"category\": {\"type\": \"String\", \"description\": \"The category to be assigned to each element in the mapping.\"}, \"limit\": {\"type\": \"float\", \"description\": \"The number of elements from the array to include in the mapping.\"}}, \"required\": [\"category\", \"limit\"]}}"}
{"scope": "simple", "query": "Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.", "query_for_retrieval": "Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.", "answer": "calculate_final_temperature", "answer_params": "", "api_description": "def calculate_final_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the final equilibrium temperature after mixing two bodies with different masses and temperatures\n\t\n\tArguments:\n\t---------\n\t- mass1 : integer = None (required) The mass of the first body (kg).\n\t- temperature1 : integer = None (required) The initial temperature of the first body (Celsius).\n\t- mass2 : integer = None (required) The mass of the second body (kg).\n\t- temperature2 : integer = None (required) The initial temperature of the second body (Celsius).\n\t- specific_heat_capacity : float = None (optional) The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_temperature\", \"description\": \"Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass1\": {\"type\": \"integer\", \"description\": \"The mass of the first body (kg).\"}, \"temperature1\": {\"type\": \"integer\", \"description\": \"The initial temperature of the first body (Celsius).\"}, \"mass2\": {\"type\": \"integer\", \"description\": \"The mass of the second body (kg).\"}, \"temperature2\": {\"type\": \"integer\", \"description\": \"The initial temperature of the second body (Celsius).\"}, \"specific_heat_capacity\": {\"type\": \"float\", \"description\": \"The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K.\"}}, \"required\": [\"mass1\", \"temperature1\", \"mass2\", \"temperature2\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on a project that requires me to juggle with numbers from different domains. First, I need to calculate the density of a new material we've been experimenting with. The material has a mass of 50 kilograms and occupies a volume of 10 cubic meters. Could you calculate its density for me? Additionally, I'm contemplating a financial move and would like to know the future value of an investment if I were to invest $5000 at an annual interest rate of 5% for 10 years. What would the investment grow to after that time? Switching gears to the stock market, I'm curious about the current trading price of Apple's stock. What's the latest price per share? Lastly, I've been eyeing this gadget on Amazon, but I'm quite particular about the quality. The ASIN is B08PPDJWC8. Could you check its customer rating for me?", "query_for_retrieval": "I'm working on a project that requires me to juggle with numbers from different domains. First, I need to calculate the density of a new material we've been experimenting with. The material has a mass of 50 kilograms and occupies a volume of 10 cubic meters. Could you calculate its density for me? Additionally, I'm contemplating a financial move and would like to know the future value of an investment if I were to invest $5000 at an annual interest rate of 5% for 10 years. What would the investment grow to after that time? Switching gears to the stock market, I'm curious about the current trading price of Apple's stock. What's the latest price per share? Lastly, I've been eyeing this gadget on Amazon, but I'm quite particular about the quality. The ASIN is B08PPDJWC8. Could you check its customer rating for me?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "simple", "query": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "query_for_retrieval": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "answer": "number_theory.gcd", "answer_params": "", "api_description": "def number_theory.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the greatest common divisor of two given integers.\n\t\n\tArguments:\n\t---------\n\t- number1 : integer = None (required) The first integer.\n\t- number2 : integer = None (required) The second integer.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"number_theory.gcd\", \"description\": \"Compute the greatest common divisor of two given integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number1\": {\"type\": \"integer\", \"description\": \"The first integer.\"}, \"number2\": {\"type\": \"integer\", \"description\": \"The second integer.\"}}, \"required\": [\"number1\", \"number2\"]}}"}
{"scope": "simple", "query": "Draw a rectangle with a width of 20 units and height of 10 units in red.", "query_for_retrieval": "Draw a rectangle with a width of 20 units and height of 10 units in red.", "answer": "draw_rectangle", "answer_params": "", "api_description": "def draw_rectangle:\n\t\"\"\"\n\tDescription:\n\t\n\tDraw a rectangle given its width and height.\n\t\n\tArguments:\n\t---------\n\t- width : integer = None (required) The width of the rectangle.\n\t- height : integer = None (required) The height of the rectangle.\n\t- color : string = None (optional) The color of the rectangle. Default is 'black'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"draw_rectangle\", \"description\": \"Draw a rectangle given its width and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"width\": {\"type\": \"integer\", \"description\": \"The width of the rectangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the rectangle.\"}, \"color\": {\"type\": \"string\", \"description\": \"The color of the rectangle. Default is 'black'.\"}}, \"required\": [\"width\", \"height\"]}}"}
{"scope": "relevance", "query": "Where is a good place for pizza in Boston?", "query_for_retrieval": "Where is a good place for pizza in Boston?", "answer": "restaurant_finder", "answer_params": "", "api_description": "def restaurant_finder:\n\t\"\"\"\n\tDescription:\n\t\n\tFind restaurants based on specified cuisine and location.\n\t\n\tArguments:\n\t---------\n\t- cuisine : string = None (required) The cuisine the user wants to search.\n\t- location : string = None (required) The location in which the user wants to search for restaurants.\n\t- rating : integer = 3 (optional) Minimum acceptable restaurant rating.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_finder\", \"description\": \"Find restaurants based on specified cuisine and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cuisine\": {\"type\": \"string\", \"description\": \"The cuisine the user wants to search.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location in which the user wants to search for restaurants.\"}, \"rating\": {\"type\": \"integer\", \"default\": 3, \"description\": \"Minimum acceptable restaurant rating.\"}}, \"required\": [\"cuisine\", \"location\"]}}"}
{"scope": "simple", "query": "What is the musical scale associated with C sharp major?", "query_for_retrieval": "What is the musical scale associated with C sharp major?", "answer": "musical_scale", "answer_params": "", "api_description": "def musical_scale:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the musical scale of a specific key in music theory.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The musical key for which the scale will be found.\n\t- scale_type : string = major (optional) The type of musical scale.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"musical_scale\", \"description\": \"Get the musical scale of a specific key in music theory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The musical key for which the scale will be found.\"}, \"scale_type\": {\"type\": \"string\", \"default\": \"major\", \"description\": \"The type of musical scale.\"}}, \"required\": [\"key\"]}}"}
{"scope": "parallel_function", "query": "Show me all individuals who were convicted for money laundering from San Francisco in 2019 and ones convicted for the same in Texas in 2018", "query_for_retrieval": "Show me all individuals who were convicted for money laundering from San Francisco in 2019 and ones convicted for the same in Texas in 2018", "answer": "law_crimes.search", "answer_params": "", "api_description": "def law_crimes.search:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate individuals based on their crime conviction and location.\n\t\n\tArguments:\n\t---------\n\t- crime : string = None (required) Type of crime to search.\n\t- location : string = None (required) City or state where the crime was committed.\n\t- year : integer = None (required) The year when the crime was committed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_crimes.search\", \"description\": \"Locate individuals based on their crime conviction and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"crime\": {\"type\": \"string\", \"description\": \"Type of crime to search.\"}, \"location\": {\"type\": \"string\", \"description\": \"City or state where the crime was committed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the crime was committed.\"}}, \"required\": [\"crime\", \"location\", \"year\"]}}"}
{"scope": "executable_simple", "query": "While browsing Amazon, I came across a product that piqued my interest, but I didn't catch its name. The ASIN is 'B07ZPKBL9V'. Can you help me find out the name of this product?", "query_for_retrieval": "While browsing Amazon, I came across a product that piqued my interest, but I didn't catch its name. The ASIN is 'B07ZPKBL9V'. Can you help me find out the name of this product?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "multiple_function", "query": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "query_for_retrieval": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "In my lab today, I'm working on two separate problems. First, I'm dealing with an electrostatics challenge where I have a sphere carrying a charge of 5 coulombs and it's exposed to an electric potential of 10 volts. I need to figure out the electrostatic potential energy for this setup. Also, I have a geometric task where I'm looking at a circle with a 7-unit radius, and I need to calculate its area. Could you provide me with the electrostatic potential energy for the charged sphere and the area of the circle?", "query_for_retrieval": "In my lab today, I'm working on two separate problems. First, I'm dealing with an electrostatics challenge where I have a sphere carrying a charge of 5 coulombs and it's exposed to an electric potential of 10 volts. I need to figure out the electrostatic potential energy for this setup. Also, I have a geometric task where I'm looking at a circle with a 7-unit radius, and I need to calculate its area. Could you provide me with the electrostatic potential energy for the charged sphere and the area of the circle?", "answer": "calculate_electrostatic_potential_energy", "answer_params": "", "api_description": "def calculate_electrostatic_potential_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the electrostatic potential energy.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge of the object, in coulombs.\n\t- voltage : float = None (required) The voltage of the object, in volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential_energy\", \"description\": \"Calculates the electrostatic potential energy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge of the object, in coulombs.\"}, \"voltage\": {\"type\": \"float\", \"description\": \"The voltage of the object, in volts.\"}}, \"required\": [\"charge\", \"voltage\"]}}"}
{"scope": "simple", "query": "Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years.", "query_for_retrieval": "Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years.", "answer": "portfolio_future_value", "answer_params": "", "api_description": "def portfolio_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\n\t\n\tArguments:\n\t---------\n\t- stock : string = None (required) The ticker symbol of the stock.\n\t- invested_amount : integer = None (required) The invested amount in USD.\n\t- expected_annual_return : float = None (required) The expected annual return on investment as a decimal. E.g. 5% = 0.05\n\t- years : integer = None (required) The number of years for which the investment is made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"portfolio_future_value\", \"description\": \"Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock\": {\"type\": \"string\", \"description\": \"The ticker symbol of the stock.\"}, \"invested_amount\": {\"type\": \"integer\", \"description\": \"The invested amount in USD.\"}, \"expected_annual_return\": {\"type\": \"float\", \"description\": \"The expected annual return on investment as a decimal. E.g. 5% = 0.05\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for which the investment is made.\"}}, \"required\": [\"stock\", \"invested_amount\", \"expected_annual_return\", \"years\"]}}"}
{"scope": "simple", "query": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "query_for_retrieval": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "answer": "get_theater_movie_releases", "answer_params": "", "api_description": "def get_theater_movie_releases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location of the theaters.\n\t- timeframe : integer = None (required) The number of days for which releases are required from current date.\n\t- format : string = None (optional) Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_theater_movie_releases\", \"description\": \"Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location of the theaters.\"}, \"timeframe\": {\"type\": \"integer\", \"description\": \"The number of days for which releases are required from current date.\"}, \"format\": {\"type\": \"string\", \"description\": \"Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'\"}}, \"required\": [\"location\", \"timeframe\"]}}"}
{"scope": "parallel_function", "query": "What would be the predicted evolutionary rate for the African Elephant species over a period of 5000 years using the Darwin model, and how would this prediction change if we use the Lamarck model instead?", "query_for_retrieval": "What would be the predicted evolutionary rate for the African Elephant species over a period of 5000 years using the Darwin model, and how would this prediction change if we use the Lamarck model instead?", "answer": "prediction.evolution", "answer_params": "", "api_description": "def prediction.evolution:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the evolutionary rate for a specific species for a given timeframe.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species that the evolution rate will be predicted for.\n\t- years : integer = None (required) Number of years for the prediction.\n\t- model : string = None (optional) The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prediction.evolution\", \"description\": \"Predict the evolutionary rate for a specific species for a given timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species that the evolution rate will be predicted for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years for the prediction.\"}, \"model\": {\"type\": \"string\", \"description\": \"The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\"}}, \"required\": [\"species\", \"years\"]}}"}
{"scope": "multiple_function", "query": "Calculate the capacitance of a parallel plate capacitor where the area of the plate is 10 square meters, the distance between plates is 0.01 meters and the dielectric constant K is 1.0.", "query_for_retrieval": "Calculate the capacitance of a parallel plate capacitor where the area of the plate is 10 square meters, the distance between plates is 0.01 meters and the dielectric constant K is 1.0.", "answer": "resistance_calculator.calculate", "answer_params": "", "api_description": "def resistance_calculator.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the resistance of an electrical circuit based on current and voltage.\n\t\n\tArguments:\n\t---------\n\t- I : float = None (required) The electric current flowing in Amperes.\n\t- V : float = None (required) The voltage difference in Volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"resistance_calculator.calculate\", \"description\": \"Calculate the resistance of an electrical circuit based on current and voltage.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"I\": {\"type\": \"float\", \"description\": \"The electric current flowing in Amperes.\"}, \"V\": {\"type\": \"float\", \"description\": \"The voltage difference in Volts.\"}}, \"required\": [\"I\", \"V\"]}}"}
{"scope": "parallel_function", "query": "What were the stock prices of Apple Inc. listed on NASDAQ and Microsoft Corporation listed on NYSE for the past 10 and 15 days respectively?", "query_for_retrieval": "What were the stock prices of Apple Inc. listed on NASDAQ and Microsoft Corporation listed on NYSE for the past 10 and 15 days respectively?", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the stock price for a specific company and time frame.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The ticker symbol of the company.\n\t- days : integer = None (required) Number of past days for which the stock price is required.\n\t- exchange : string = None (optional) The stock exchange where the company is listed, default is NYSE\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieve the stock price for a specific company and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The ticker symbol of the company.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days for which the stock price is required.\"}, \"exchange\": {\"type\": \"string\", \"description\": \"The stock exchange where the company is listed, default is NYSE\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "sql", "query": "Can you create a new table called \"CellTypes\" in the database, with columns named \"CellID\", \"CellName\", \"Organ\", and \"Function\"?", "query_for_retrieval": "Can you create a new table called \"CellTypes\" in the database, with columns named \"CellID\", \"CellName\", \"Organ\", and \"Function\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Find the final velocity of an object thrown up at 40 m/s after 6 seconds.", "query_for_retrieval": "Find the final velocity of an object thrown up at 40 m/s after 6 seconds.", "answer": "physics.wave_velocity", "answer_params": "", "api_description": "def physics.wave_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the velocity of a wave based on its frequency and wavelength.\n\t\n\tArguments:\n\t---------\n\t- frequency : float = None (required) The frequency of the wave in Hz.\n\t- wavelength : float = None (required) The wavelength of the wave in m.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"physics.wave_velocity\", \"description\": \"Calculate the velocity of a wave based on its frequency and wavelength.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"frequency\": {\"type\": \"float\", \"description\": \"The frequency of the wave in Hz.\"}, \"wavelength\": {\"type\": \"float\", \"description\": \"The wavelength of the wave in m.\"}}, \"required\": [\"frequency\", \"wavelength\"]}}"}
{"scope": "relevance", "query": "What is the magnetic field at a point located at distance 'r' from a wire carrying current 'I'?", "query_for_retrieval": "What is the magnetic field at a point located at distance 'r' from a wire carrying current 'I'?", "answer": "magnetic_field_intensity", "answer_params": "", "api_description": "def magnetic_field_intensity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the magnetic field intensity at a point located at a given distance from a current carrying wire\n\t\n\tArguments:\n\t---------\n\t- current : float = None (required) The current flowing through the wire in Amperes.\n\t- distance : float = None (required) The distance from the wire at which magnetic field intensity is required, in meters.\n\t- permeability : float = None (optional) The permeability of free space, optional, default value is 4*pi*10^-7.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"magnetic_field_intensity\", \"description\": \"Calculates the magnetic field intensity at a point located at a given distance from a current carrying wire\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"float\", \"description\": \"The current flowing through the wire in Amperes.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance from the wire at which magnetic field intensity is required, in meters.\"}, \"permeability\": {\"type\": \"float\", \"description\": \"The permeability of free space, optional, default value is 4*pi*10^-7.\"}}, \"required\": [\"current\", \"distance\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm doing some market research and need to gather a bit of data on two specific products that have caught my attention on Amazon. The first product has the ASIN 'B08PPDJWC8', and the second one is listed under the ASIN 'B08BHXG144'. I'm curious about the customer ratings for both of these products. Could you provide me with their ratings?\n\nAlso, I'm considering an interesting way to visualize their popularity based on the number of reviews. If we imagine that the popularity of each product is a circle with the radius equal to its number of reviews, with the first product having 50 reviews and the second 75 reviews, can you calculate the area for each of these 'popularity circles'?", "query_for_retrieval": "I'm doing some market research and need to gather a bit of data on two specific products that have caught my attention on Amazon. The first product has the ASIN 'B08PPDJWC8', and the second one is listed under the ASIN 'B08BHXG144'. I'm curious about the customer ratings for both of these products. Could you provide me with their ratings?\n\nAlso, I'm considering an interesting way to visualize their popularity based on the number of reviews. If we imagine that the popularity of each product is a circle with the radius equal to its number of reviews, with the first product having 50 reviews and the second 75 reviews, can you calculate the area for each of these 'popularity circles'?", "answer": "get_rating_by_amazon_ASIN", "answer_params": "", "api_description": "def get_rating_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the rating of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_rating_by_amazon_ASIN\", \"description\": \"Finds the rating of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "simple", "query": "Find me the most recent art sculpture by James Plensa with detailed description.", "query_for_retrieval": "Find me the most recent art sculpture by James Plensa with detailed description.", "answer": "get_sculpture_info", "answer_params": "", "api_description": "def get_sculpture_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the most recent artwork by a specified artist with its detailed description.\n\t\n\tArguments:\n\t---------\n\t- artist_name : string = None (required) The name of the artist.\n\t- year : integer = None (optional) Year of the sculpture. This is optional. Default is the most recent year.\n\t- detail : boolean = None (optional) If True, it provides detailed description of the sculpture. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sculpture_info\", \"description\": \"Retrieves the most recent artwork by a specified artist with its detailed description.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the sculpture. This is optional. Default is the most recent year.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"If True, it provides detailed description of the sculpture. Defaults to False.\"}}, \"required\": [\"artist_name\"]}}"}
{"scope": "simple", "query": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "query_for_retrieval": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "answer": "sports.match_schedule", "answer_params": "", "api_description": "def sports.match_schedule:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the match schedule for a specific sports team.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the sports team.\n\t- num_matches : integer = None (required) The number of upcoming matches you want to get.\n\t- league : string = None (optional) The sports league of the team. This is an optional parameter. Default is 'English Premier League'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports.match_schedule\", \"description\": \"Retrieve the match schedule for a specific sports team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"num_matches\": {\"type\": \"integer\", \"description\": \"The number of upcoming matches you want to get.\"}, \"league\": {\"type\": \"string\", \"description\": \"The sports league of the team. This is an optional parameter. Default is 'English Premier League'.\"}}, \"required\": [\"team_name\", \"num_matches\"]}}"}
{"scope": "java", "query": "How can I execute the test that checks for source paths in a debug environment, using the arguments array `['-v', '-p']` and directing the output to a `System.out` stream?", "query_for_retrieval": "How can I execute the test that checks for source paths in a debug environment, using the arguments array `['-v', '-p']` and directing the output to a `System.out` stream?", "answer": "sourcepaths002.runIt", "answer_params": "", "api_description": "def sourcepaths002.runIt:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a test that interacts with a debuggee environment to check for source paths of certain reference types, handling various scenarios and logging the output.\n\t\n\tArguments:\n\t---------\n\t- args : Array = None (required) An array of command-line arguments to configure the test behavior.\n\t- out : any = None (required) The PrintStream to which the test output will be directed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sourcepaths002.runIt\", \"description\": \"Executes a test that interacts with a debuggee environment to check for source paths of certain reference types, handling various scenarios and logging the output.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"args\": {\"type\": \"Array\", \"description\": \"An array of command-line arguments to configure the test behavior.\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream to which the test output will be directed.\"}}, \"required\": [\"args\", \"out\"]}}"}
{"scope": "simple", "query": "What are some gluten-free recipes for dinner?", "query_for_retrieval": "What are some gluten-free recipes for dinner?", "answer": "find_recipes", "answer_params": "", "api_description": "def find_recipes:\n\t\"\"\"\n\tDescription:\n\t\n\tFind recipes based on dietary restrictions, meal type, and preferred ingredients.\n\t\n\tArguments:\n\t---------\n\t- diet : string = None (required) The dietary restrictions, e.g., 'vegan', 'gluten-free'.\n\t- meal_type : string = None (required) The type of meal, e.g., 'dinner', 'breakfast'.\n\t- ingredients : array = None (optional) The preferred ingredients. If left blank, it will default to return general recipes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipes\", \"description\": \"Find recipes based on dietary restrictions, meal type, and preferred ingredients.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"diet\": {\"type\": \"string\", \"description\": \"The dietary restrictions, e.g., 'vegan', 'gluten-free'.\"}, \"meal_type\": {\"type\": \"string\", \"description\": \"The type of meal, e.g., 'dinner', 'breakfast'.\"}, \"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The preferred ingredients. If left blank, it will default to return general recipes.\"}}, \"required\": [\"diet\", \"meal_type\"]}}"}
{"scope": "rest", "query": "I need to check the geolocation of my server and want the response in French. Can you fetch this information for me?", "query_for_retrieval": "I need to check the geolocation of my server and want the response in French. Can you fetch this information for me?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with some information? First, I would like to know the amount of calories in the 'Chicken Alfredo' recipe from the 'AllRecipes' website for dinner. Second, I am interested in the current stock prices of 'Apple', 'Microsoft', and 'Tesla'. Lastly, I want to know the FIFA ranking of the 'Brazil' men's soccer team in 2018.\"", "query_for_retrieval": "\"Could you please help me with some information? First, I would like to know the amount of calories in the 'Chicken Alfredo' recipe from the 'AllRecipes' website for dinner. Second, I am interested in the current stock prices of 'Apple', 'Microsoft', and 'Tesla'. Lastly, I want to know the FIFA ranking of the 'Brazil' men's soccer team in 2018.\"", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current stock price of the specified companies\n\t\n\tArguments:\n\t---------\n\t- company_names : array = None (required) The list of companies for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieves the current stock price of the specified companies\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_names\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of companies for which to retrieve the stock price.\"}}, \"required\": [\"company_names\"]}}"}
{"scope": "parallel_function", "query": "What are the RGB and HEX color values for navy, purple and maroon? ", "query_for_retrieval": "What are the RGB and HEX color values for navy, purple and maroon? ", "answer": "color_converter.get_color_info", "answer_params": "", "api_description": "def color_converter.get_color_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve RGB values and hexadecimal codes of a specific color.\n\t\n\tArguments:\n\t---------\n\t- color_name : string = None (required) The name of the color.\n\t- conversion_type : array = None (required) The conversion type for the color.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"color_converter.get_color_info\", \"description\": \"Retrieve RGB values and hexadecimal codes of a specific color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color_name\": {\"type\": \"string\", \"description\": \"The name of the color.\"}, \"conversion_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"RGB\", \"HEX\"]}, \"description\": \"The conversion type for the color.\"}}, \"required\": [\"color_name\", \"conversion_type\"]}}"}
{"scope": "executable_simple", "query": "I'm considering purchasing a product I found on Amazon, but I want to make sure it's well-received by others before I commit. It has the ASIN 'B07ZPKBL9V'. Can you tell me what the current average customer rating is for this item?", "query_for_retrieval": "I'm considering purchasing a product I found on Amazon, but I want to make sure it's well-received by others before I commit. It has the ASIN 'B07ZPKBL9V'. Can you tell me what the current average customer rating is for this item?", "answer": "get_rating_by_amazon_ASIN", "answer_params": "", "api_description": "def get_rating_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the rating of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_rating_by_amazon_ASIN\", \"description\": \"Finds the rating of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "sql", "query": "Can you eliminate all entries from the 'FinancialStats' table where the 'EconomicIndicator' column is 'Unemployment Rate' and the 'Year' column is '2005'?", "query_for_retrieval": "Can you eliminate all entries from the 'FinancialStats' table where the 'EconomicIndicator' column is 'Unemployment Rate' and the 'Year' column is '2005'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "How many championships did Michael Jordan win in his NBA career?", "query_for_retrieval": "How many championships did Michael Jordan win in his NBA career?", "answer": "get_nba_player_stats", "answer_params": "", "api_description": "def get_nba_player_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves statistics of an NBA player's career, including points, assists, rebounds, steals, blocks and number of championships won.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the NBA player.\n\t- stat_type : string = None (required) Type of statistics to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_nba_player_stats\", \"description\": \"Retrieves statistics of an NBA player's career, including points, assists, rebounds, steals, blocks and number of championships won.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the NBA player.\"}, \"stat_type\": {\"type\": \"string\", \"enum\": [\"points\", \"assists\", \"rebounds\", \"steals\", \"blocks\", \"championships\"], \"description\": \"Type of statistics to retrieve.\"}}, \"required\": [\"player_name\", \"stat_type\"]}}"}
{"scope": "sql", "query": "Can you establish a new database table called 'FinancialTransactions', with the fields 'TransactionID', 'TransactionType', 'TransactionAmount', and 'TransactionDate'?", "query_for_retrieval": "Can you establish a new database table called 'FinancialTransactions', with the fields 'TransactionID', 'TransactionType', 'TransactionAmount', and 'TransactionDate'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What is the largest planet in the universe?", "query_for_retrieval": "What is the largest planet in the universe?", "answer": "space.star_info", "answer_params": "", "api_description": "def space.star_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a particular star in the universe.\n\t\n\tArguments:\n\t---------\n\t- star_name : string = None (required) The name of the star.\n\t- information : string = None (required) The type of information needed about the star.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"space.star_info\", \"description\": \"Retrieve information about a particular star in the universe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"star_name\": {\"type\": \"string\", \"description\": \"The name of the star.\"}, \"information\": {\"type\": \"string\", \"enum\": [\"mass\", \"radius\", \"luminosity\"], \"description\": \"The type of information needed about the star.\"}}, \"required\": [\"star_name\", \"information\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently in the middle of a cybersecurity investigation and have come across a suspicious IP address that we suspect might be the source of a recent cyber attack. The IP address is 192.168.1.1, and I need to track down the physical location it's associated with to proceed with the investigation. To start with, could you find out the zipcode for where this IP address is registered?", "query_for_retrieval": "I'm currently in the middle of a cybersecurity investigation and have come across a suspicious IP address that we suspect might be the source of a recent cyber attack. The IP address is 192.168.1.1, and I need to track down the physical location it's associated with to proceed with the investigation. To start with, could you find out the zipcode for where this IP address is registered?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "java", "query": "How can I update the sort order of a recommended subject with ID 42 to a new sort value 5 using the controller responsible for SMS home recommendations?", "query_for_retrieval": "How can I update the sort order of a recommended subject with ID 42 to a new sort value 5 using the controller responsible for SMS home recommendations?", "answer": "SmsHomeRecommendSubjectController.updateSort", "answer_params": "", "api_description": "def SmsHomeRecommendSubjectController.updateSort:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdates the sort order of a recommended subject by its ID and returns a common result indicating success or failure.\n\t\n\tArguments:\n\t---------\n\t- id : long = None (required) The unique identifier of the recommended subject to update.\n\t- sort : integer = None (required) The new sort order value for the recommended subject.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SmsHomeRecommendSubjectController.updateSort\", \"description\": \"Updates the sort order of a recommended subject by its ID and returns a common result indicating success or failure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"long\", \"description\": \"The unique identifier of the recommended subject to update.\"}, \"sort\": {\"type\": \"integer\", \"description\": \"The new sort order value for the recommended subject.\"}}, \"required\": [\"id\", \"sort\"]}}"}
{"scope": "simple", "query": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "query_for_retrieval": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "answer": "kinematics.final_velocity_from_distance", "answer_params": "", "api_description": "def kinematics.final_velocity_from_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\n\t\n\tArguments:\n\t---------\n\t- acceleration : integer = None (required) Acceleration of the object, m/s^2.\n\t- distance : integer = None (required) Distance traveled by the object, m.\n\t- initial_velocity : float = None (optional) Initial velocity of the object. Default is 0, m/s\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.final_velocity_from_distance\", \"description\": \"Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"acceleration\": {\"type\": \"integer\", \"description\": \"Acceleration of the object, m/s^2.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"Distance traveled by the object, m.\"}, \"initial_velocity\": {\"type\": \"float\", \"description\": \"Initial velocity of the object. Default is 0, m/s\"}}, \"required\": [\"acceleration\", \"distance\"]}}"}
{"scope": "parallel_function", "query": "A group of cyclists are planning a two-day cycling trip. On the first day, they plan to cover a distance of 120 kilometers in 5 hours. On the second day, they plan to cover a distance of 150 kilometers in 6 hours. They want to know their average velocity for each day in km/h. Could you calculate their velocity for each day using the 'calculate_velocity' function?", "query_for_retrieval": "A group of cyclists are planning a two-day cycling trip. On the first day, they plan to cover a distance of 120 kilometers in 5 hours. On the second day, they plan to cover a distance of 150 kilometers in 6 hours. They want to know their average velocity for each day in km/h. Could you calculate their velocity for each day using the 'calculate_velocity' function?", "answer": "calculate_velocity", "answer_params": "", "api_description": "def calculate_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the velocity for a certain distance travelled within a specific duration.\n\t\n\tArguments:\n\t---------\n\t- distance : integer = None (required) The distance travelled by the object, typically in kilometers.\n\t- duration : integer = None (required) The duration of the journey, typically in hours.\n\t- unit : string = None (optional) Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_velocity\", \"description\": \"Calculate the velocity for a certain distance travelled within a specific duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"integer\", \"description\": \"The distance travelled by the object, typically in kilometers.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of the journey, typically in hours.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\"}}, \"required\": [\"distance\", \"duration\"]}}"}
{"scope": "java", "query": "How can I attach generic type information to a constructor invocation instruction `newConstructorInsn` within a method `initMethod` in a Java decompiler analysis tool?", "query_for_retrieval": "How can I attach generic type information to a constructor invocation instruction `newConstructorInsn` within a method `initMethod` in a Java decompiler analysis tool?", "answer": "GenericTypesVisitor.attachGenericTypesInfo", "answer_params": "", "api_description": "def GenericTypesVisitor.attachGenericTypesInfo:\n\t\"\"\"\n\tDescription:\n\t\n\tAttaches generic type information to a constructor invocation instruction if the instruction's result argument has generic types and the class being instantiated has generic type parameters.\n\t\n\tArguments:\n\t---------\n\t- mth : any = None (required) The MethodNode that contains the constructor invocation instruction.\n\t- insn : any = None (required) The ConstructorInsn instance representing the constructor invocation to which generic types info should be attached.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"GenericTypesVisitor.attachGenericTypesInfo\", \"description\": \"Attaches generic type information to a constructor invocation instruction if the instruction's result argument has generic types and the class being instantiated has generic type parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mth\": {\"type\": \"any\", \"description\": \"The MethodNode that contains the constructor invocation instruction.\"}, \"insn\": {\"type\": \"any\", \"description\": \"The ConstructorInsn instance representing the constructor invocation to which generic types info should be attached.\"}}, \"required\": [\"mth\", \"insn\"]}}"}
{"scope": "simple", "query": "How to obtain the detailed case information of the 'R vs Adams' legal case?", "query_for_retrieval": "How to obtain the detailed case information of the 'R vs Adams' legal case?", "answer": "legal_case.fetch", "answer_params": "", "api_description": "def legal_case.fetch:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch detailed legal case information from database.\n\t\n\tArguments:\n\t---------\n\t- case_id : string = None (required) The ID of the legal case.\n\t- details : boolean = None (required) True if need the detail info. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"legal_case.fetch\", \"description\": \"Fetch detailed legal case information from database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_id\": {\"type\": \"string\", \"description\": \"The ID of the legal case.\"}, \"details\": {\"type\": \"boolean\", \"description\": \"True if need the detail info. \"}}, \"required\": [\"case_id\", \"details\"]}}"}
{"scope": "rest", "query": "I'm planning a vacation for 2023 and want to take advantage of long weekends. Can you help me find the dates for long weekends in France using the Date Nager API, so I can start booking my trips accordingly?", "query_for_retrieval": "I'm planning a vacation for 2023 and want to take advantage of long weekends. Can you help me find the dates for long weekends in France using the Date Nager API, so I can start booking my trips accordingly?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode} (required) The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\", \"default\": \"https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"In a park, there is a rectangular playground with a length of 50 meters and a width of 30 meters. Next to it, there is a square sandbox with a side length of 5 meters. A circular fountain with a radius of 3 meters is located at the center of the park. Can you calculate the area and perimeter of the playground, the area and perimeter of the sandbox, and the area and circumference of the fountain?\"", "query_for_retrieval": "\"In a park, there is a rectangular playground with a length of 50 meters and a width of 30 meters. Next to it, there is a square sandbox with a side length of 5 meters. A circular fountain with a radius of 3 meters is located at the center of the park. Can you calculate the area and perimeter of the playground, the area and perimeter of the sandbox, and the area and circumference of the fountain?\"", "answer": "geometry_rectangle.calculate", "answer_params": "", "api_description": "def geometry_rectangle.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area and perimeter of a rectangle given the width and length.\n\t\n\tArguments:\n\t---------\n\t- width : integer = None (required) The width of the rectangle.\n\t- length : integer = None (required) The length of the rectangle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry_rectangle.calculate\", \"description\": \"Calculates the area and perimeter of a rectangle given the width and length.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"width\": {\"type\": \"integer\", \"description\": \"The width of the rectangle.\"}, \"length\": {\"type\": \"integer\", \"description\": \"The length of the rectangle.\"}}, \"required\": [\"width\", \"length\"]}}"}
{"scope": "sql", "query": "Can you establish a new database table called \"ParticleData\" with the columns \"ParticleID\", \"ParticleName\", \"DiscoveredBy\", \"YearDiscovered\", \"Charge\", \"Spin\", \"Mass\" to record the properties of elementary particles discovered in particle physics?", "query_for_retrieval": "Can you establish a new database table called \"ParticleData\" with the columns \"ParticleID\", \"ParticleName\", \"DiscoveredBy\", \"YearDiscovered\", \"Charge\", \"Spin\", \"Mass\" to record the properties of elementary particles discovered in particle physics?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Find all the major achievements of the footballer Lionel Messi.", "query_for_retrieval": "Find all the major achievements of the footballer Lionel Messi.", "answer": "sports_celebrity.get_major_achievements", "answer_params": "", "api_description": "def sports_celebrity.get_major_achievements:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns a list of major achievements of a particular sports celebrity.\n\t\n\tArguments:\n\t---------\n\t- celebrity_name : string = None (required) Name of the sports celebrity.\n\t- sports : string = None (optional) Type of sports the celebrity involved in. Default is Football.\n\t- team : string = None (optional) Optional. Team where celebrity currently plays. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_celebrity.get_major_achievements\", \"description\": \"Returns a list of major achievements of a particular sports celebrity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"celebrity_name\": {\"type\": \"string\", \"description\": \"Name of the sports celebrity.\"}, \"sports\": {\"type\": \"string\", \"description\": \"Type of sports the celebrity involved in. Default is Football.\"}, \"team\": {\"type\": \"string\", \"description\": \"Optional. Team where celebrity currently plays. Default is 'all'\"}}, \"required\": [\"celebrity_name\"]}}"}
{"scope": "simple", "query": "Find me a Rock concert in Chicago with ticket availability under $100.", "query_for_retrieval": "Find me a Rock concert in Chicago with ticket availability under $100.", "answer": "find_concert", "answer_params": "", "api_description": "def find_concert:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a concert in a specified location within a certain budget.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you are looking for a concert. In the format City, State.\n\t- price : integer = None (required) Maximum ticket price.\n\t- genre : string = None (optional) Music genre of the concert. Default to 'Jazz'. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_concert\", \"description\": \"Locate a concert in a specified location within a certain budget.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you are looking for a concert. In the format City, State.\"}, \"price\": {\"type\": \"integer\", \"description\": \"Maximum ticket price.\"}, \"genre\": {\"type\": \"string\", \"description\": \"Music genre of the concert. Default to 'Jazz'. \", \"enum\": [\"Rock\", \"Pop\", \"Country\", \"Jazz\", \"Classical\"]}}, \"required\": [\"location\", \"price\"]}}"}
{"scope": "multiple_function", "query": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego.", "query_for_retrieval": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego.", "answer": "property_valuation.get", "answer_params": "", "api_description": "def property_valuation.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet estimated value of a property based on location, specifications and age\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City and state where the property is located, e.g. San Diego, CA.\n\t- propertyType : string = None (required) Type of property such as villa, condo, apartment, etc.\n\t- bedrooms : integer = None (required) Number of bedrooms required in the property.\n\t- age : integer = None (required) Age of the property in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"property_valuation.get\", \"description\": \"Get estimated value of a property based on location, specifications and age\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City and state where the property is located, e.g. San Diego, CA.\"}, \"propertyType\": {\"type\": \"string\", \"description\": \"Type of property such as villa, condo, apartment, etc.\"}, \"bedrooms\": {\"type\": \"integer\", \"description\": \"Number of bedrooms required in the property.\"}, \"age\": {\"type\": \"integer\", \"description\": \"Age of the property in years.\"}}, \"required\": [\"location\", \"propertyType\", \"bedrooms\", \"age\"]}}"}
{"scope": "multiple_function", "query": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "query_for_retrieval": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "answer": "forest_growth_forecast", "answer_params": "", "api_description": "def forest_growth_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredicts the forest growth over the next N years based on current trends.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where you want to predict forest growth.\n\t- years : integer = None (required) The number of years for the forecast.\n\t- include_human_impact : boolean = None (optional) Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"forest_growth_forecast\", \"description\": \"Predicts the forest growth over the next N years based on current trends.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where you want to predict forest growth.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for the forecast.\"}, \"include_human_impact\": {\"type\": \"boolean\", \"description\": \"Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\"}}, \"required\": [\"location\", \"years\"]}}"}
{"scope": "simple", "query": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "query_for_retrieval": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "answer": "thermo.calculate_energy", "answer_params": "", "api_description": "def thermo.calculate_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) Mass of the substance in grams.\n\t- phase_transition : string = None (required) Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\n\t- substance : string = None (optional) The substance which is undergoing phase change, default is 'water'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"thermo.calculate_energy\", \"description\": \"Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"Mass of the substance in grams.\"}, \"phase_transition\": {\"type\": \"string\", \"description\": \"Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\"}, \"substance\": {\"type\": \"string\", \"description\": \"The substance which is undergoing phase change, default is 'water'\"}}, \"required\": [\"mass\", \"phase_transition\"]}}"}
{"scope": "sql", "query": "What is the new balance of the customer named \"John Doe\" in the \"customers\" table after we add $500 to his current balance of $1000 in the \"balance\" column, given that the operation is successful?", "query_for_retrieval": "What is the new balance of the customer named \"John Doe\" in the \"customers\" table after we add $500 to his current balance of $1000 in the \"balance\" column, given that the operation is successful?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Tell me some of the major airports in the United States.", "query_for_retrieval": "Tell me some of the major airports in the United States.", "answer": "distance.calculate", "answer_params": "", "api_description": "def distance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two geographical points.\n\t\n\tArguments:\n\t---------\n\t- from_lat : float = None (required) The latitude of the start point.\n\t- from_long : float = None (required) The longitude of the start point.\n\t- to_lat : float = None (required) The latitude of the end point.\n\t- to_long : float = None (required) The longitude of the end point.\n\t- unit : string = None (optional) The unit for distance calculation, 'miles' or 'kilometers'. Default is 'miles'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"distance.calculate\", \"description\": \"Calculate the distance between two geographical points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"from_lat\": {\"type\": \"float\", \"description\": \"The latitude of the start point.\"}, \"from_long\": {\"type\": \"float\", \"description\": \"The longitude of the start point.\"}, \"to_lat\": {\"type\": \"float\", \"description\": \"The latitude of the end point.\"}, \"to_long\": {\"type\": \"float\", \"description\": \"The longitude of the end point.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit for distance calculation, 'miles' or 'kilometers'. Default is 'miles'.\"}}, \"required\": [\"from_lat\", \"from_long\", \"to_lat\", \"to_long\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently conducting a physics experiment, and I have this object that weighs 50 kilograms and takes up a space of about 10 cubic meters. Could you help me calculate the density of this object?", "query_for_retrieval": "I'm currently conducting a physics experiment, and I have this object that weighs 50 kilograms and takes up a space of about 10 cubic meters. Could you help me calculate the density of this object?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "simple", "query": "Find air quality index in San Jose for next three days.", "query_for_retrieval": "Find air quality index in San Jose for next three days.", "answer": "environmental_data.air_quality_index", "answer_params": "", "api_description": "def environmental_data.air_quality_index:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves Air Quality Index (AQI) for specified location over a number of days.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Name of the city or town to retrieve air quality index for.\n\t- days : integer = None (optional) Number of days for which to retrieve data. If not provided, default to today.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"environmental_data.air_quality_index\", \"description\": \"Retrieves Air Quality Index (AQI) for specified location over a number of days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Name of the city or town to retrieve air quality index for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for which to retrieve data. If not provided, default to today.\"}}, \"required\": [\"location\"]}}"}
{"scope": "parallel_function", "query": "A scientist is conducting an experiment involving two different substances. The first substance has a mass of 10 kilograms and occupies a volume of 2 cubic meters. The second substance has a mass of 15 kilograms and occupies a volume of 3 cubic meters. The scientist wants to compare the densities of these two substances in kg/m\u00b3. Can you help the scientist calculate the densities of these two substances using the 'calculate_density' function?", "query_for_retrieval": "A scientist is conducting an experiment involving two different substances. The first substance has a mass of 10 kilograms and occupies a volume of 2 cubic meters. The second substance has a mass of 15 kilograms and occupies a volume of 3 cubic meters. The scientist wants to compare the densities of these two substances in kg/m\u00b3. Can you help the scientist calculate the densities of these two substances using the 'calculate_density' function?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the density of a substance based on its mass and volume.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) The mass of the substance in kilograms.\n\t- volume : integer = None (required) The volume of the substance in cubic meters.\n\t- unit : string = None (optional) The unit of density. Default is kg/m\u00b3\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the density of a substance based on its mass and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"The mass of the substance in kilograms.\"}, \"volume\": {\"type\": \"integer\", \"description\": \"The volume of the substance in cubic meters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of density. Default is kg/m\\u00b3\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few tasks? First, I am playing a game where I need to calculate the evolutionary fitness of a creature. The creature has three traits with values 0.7, 0.8, and 0.9, and the contributions of these traits to the overall fitness are 0.3, 0.4, and 0.3 respectively. Could you calculate the fitness for me using the 'calculate_fitness' function? \n\nSecond, I am looking for a lawyer in New York, NY who specializes in Civil and Divorce cases and charges less than $300 per hour. Could you use the 'lawyer.find_nearby' function to find one for me? \n\nThird, I am curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me using the 'chess.rating' function? \n\nLastly, I am planning to go shopping at Walmart. I want to purchase 'Milk', 'Bread', and 'Eggs' from the nearest Walmart in Los Angeles, CA. The pack sizes I am looking for are 1, 2, and 12 respectively. Could you check the availability for me using the 'walmart.purchase' function?\"", "query_for_retrieval": "\"Can you help me with a few tasks? First, I am playing a game where I need to calculate the evolutionary fitness of a creature. The creature has three traits with values 0.7, 0.8, and 0.9, and the contributions of these traits to the overall fitness are 0.3, 0.4, and 0.3 respectively. Could you calculate the fitness for me using the 'calculate_fitness' function? \n\nSecond, I am looking for a lawyer in New York, NY who specializes in Civil and Divorce cases and charges less than $300 per hour. Could you use the 'lawyer.find_nearby' function to find one for me? \n\nThird, I am curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me using the 'chess.rating' function? \n\nLastly, I am planning to go shopping at Walmart. I want to purchase 'Milk', 'Bread', and 'Eggs' from the nearest Walmart in Los Angeles, CA. The pack sizes I am looking for are 1, 2, and 12 respectively. Could you check the availability for me using the 'walmart.purchase' function?\"", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "simple", "query": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "query_for_retrieval": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "answer": "get_best_sushi_places", "answer_params": "", "api_description": "def get_best_sushi_places:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the best sushi places given the city, review_rate and top number.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city in which to look for the sushi places.\n\t- top : integer = None (required) The number of top sushi places to be returned.\n\t- review_rate : float = None (optional) The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_best_sushi_places\", \"description\": \"Returns the best sushi places given the city, review_rate and top number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city in which to look for the sushi places.\"}, \"top\": {\"type\": \"integer\", \"description\": \"The number of top sushi places to be returned.\"}, \"review_rate\": {\"type\": \"float\", \"description\": \"The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00.\"}}, \"required\": [\"city\", \"top\"]}}"}
{"scope": "simple", "query": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "query_for_retrieval": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the density of a substance based on its mass and volume.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) The mass of the substance in kilograms.\n\t- volume : integer = None (required) The volume of the substance in cubic meters.\n\t- unit : string = None (optional) The unit of density. Default is kg/m\u00b3\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the density of a substance based on its mass and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"The mass of the substance in kilograms.\"}, \"volume\": {\"type\": \"integer\", \"description\": \"The volume of the substance in cubic meters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of density. Default is kg/m\\u00b3\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm planning a multi-country trip and need to budget my expenses in different currencies. I have 5000 JPY that I need to convert to USD, EUR, and AUD to understand how much I can spend in each region. Additionally, I have 100 CAD and I'm curious how much it would be in CHF. Can you calculate these conversions for me?", "query_for_retrieval": "I'm planning a multi-country trip and need to budget my expenses in different currencies. I have 5000 JPY that I need to convert to USD, EUR, and AUD to understand how much I can spend in each region. Additionally, I have 100 CAD and I'm curious how much it would be in CHF. Can you calculate these conversions for me?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "multiple_function", "query": "Find the top chess players in New York with a rating above 2300.", "query_for_retrieval": "Find the top chess players in New York with a rating above 2300.", "answer": "board_game.chess.get_top_players", "answer_params": "", "api_description": "def board_game.chess.get_top_players:\n\t\"\"\"\n\tDescription:\n\t\n\tFind top chess players in a location based on rating.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city you want to find the players from.\n\t- minimum_rating : integer = None (required) Minimum rating to filter the players.\n\t- number_of_players : integer = 10 (optional) Number of players you want to retrieve, default value is 10\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game.chess.get_top_players\", \"description\": \"Find top chess players in a location based on rating.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city you want to find the players from.\"}, \"minimum_rating\": {\"type\": \"integer\", \"description\": \"Minimum rating to filter the players.\"}, \"number_of_players\": {\"type\": \"integer\", \"default\": 10, \"description\": \"Number of players you want to retrieve, default value is 10\"}}, \"required\": [\"location\", \"minimum_rating\"]}}"}
{"scope": "relevance", "query": "What defines scientist", "query_for_retrieval": "What defines scientist", "answer": "get_historical_figure_info", "answer_params": "", "api_description": "def get_historical_figure_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve detailed information about a historical figure including their date of birth, death and main achievements.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the historical figure.\n\t- detail : string = None (required) The specific detail wanted about the historical figure.\n\t- region : string = global (optional) The region or country the historical figure is associated with.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_historical_figure_info\", \"description\": \"Retrieve detailed information about a historical figure including their date of birth, death and main achievements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the historical figure.\"}, \"detail\": {\"type\": \"string\", \"enum\": [\"birth\", \"death\", \"achievement\"], \"description\": \"The specific detail wanted about the historical figure.\"}, \"region\": {\"type\": \"string\", \"default\": \"global\", \"description\": \"The region or country the historical figure is associated with.\"}}, \"required\": [\"name\", \"detail\"]}}"}
{"scope": "relevance", "query": "Who won the game of Monopoly last night?", "query_for_retrieval": "Who won the game of Monopoly last night?", "answer": "board_game.possible_moves", "answer_params": "", "api_description": "def board_game.possible_moves:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total possible moves for a specific board game based on the current state of the game.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) Name of the board game.\n\t- current_state : string = None (required) The current state of the board game, including pieces on the board and their positions.\n\t- include_repetitions : boolean = None (optional) Include repetitive moves in the count or not. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game.possible_moves\", \"description\": \"Calculate the total possible moves for a specific board game based on the current state of the game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"Name of the board game.\"}, \"current_state\": {\"type\": \"string\", \"description\": \"The current state of the board game, including pieces on the board and their positions.\"}, \"include_repetitions\": {\"type\": \"boolean\", \"description\": \"Include repetitive moves in the count or not. Default is false.\"}}, \"required\": [\"game_name\", \"current_state\"]}}"}
{"scope": "sql", "query": "Can you add a new data entry to the 'Census' database table with the columns 'Year', 'Population', 'BirthRate', 'DeathRate', and 'NetMigrationRate' where the values to be inserted are '2022', '331002651', '12.4', '8.9', and '2.5'? This will help us update our statistical data on the United States demographics.", "query_for_retrieval": "Can you add a new data entry to the 'Census' database table with the columns 'Year', 'Population', 'BirthRate', 'DeathRate', and 'NetMigrationRate' where the values to be inserted are '2022', '331002651', '12.4', '8.9', and '2.5'? This will help us update our statistical data on the United States demographics.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Calculate the hypotenuse for a right-angled triangle where other sides are 5 and 6", "query_for_retrieval": "Calculate the hypotenuse for a right-angled triangle where other sides are 5 and 6", "answer": "map_coordinates.distance_calculate", "answer_params": "", "api_description": "def map_coordinates.distance_calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the straight-line distance between two points given their longitude and latitude.\n\t\n\tArguments:\n\t---------\n\t- pointA : dict = None (required) No description available.\n\t  - latitude : float = None (required) Latitude of Point A. (Range from -90 to 90)\n\t  - longitude : float = None (required) Longitude of Point A. (Range from -180 to 180)\n\t- pointB : dict = None (required) No description available.\n\t  - latitude : float = None (required) Latitude of Point B. (Range from -90 to 90)\n\t  - longitude : float = None (required) Longitude of Point B. (Range from -180 to 180)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_coordinates.distance_calculate\", \"description\": \"Calculate the straight-line distance between two points given their longitude and latitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"dict\", \"properties\": {\"latitude\": {\"type\": \"float\", \"description\": \"Latitude of Point A. (Range from -90 to 90)\"}, \"longitude\": {\"type\": \"float\", \"description\": \"Longitude of Point A. (Range from -180 to 180)\"}}, \"required\": [\"latitude\", \"longitude\"]}, \"pointB\": {\"type\": \"dict\", \"properties\": {\"latitude\": {\"type\": \"float\", \"description\": \"Latitude of Point B. (Range from -90 to 90)\"}, \"longitude\": {\"type\": \"float\", \"description\": \"Longitude of Point B. (Range from -180 to 180)\"}}, \"required\": [\"latitude\", \"longitude\"]}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "multiple_function", "query": "Calculate the final temperature when 2 moles of gas at 300 K are mixed with 3 moles of the same gas at 400 K.", "query_for_retrieval": "Calculate the final temperature when 2 moles of gas at 300 K are mixed with 3 moles of the same gas at 400 K.", "answer": "calculate_final_temperature", "answer_params": "", "api_description": "def calculate_final_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final temperature when different quantities of the same gas at different temperatures are mixed.\n\t\n\tArguments:\n\t---------\n\t- quantity1 : integer = None (required) The quantity of the first sample of gas.\n\t- temperature1 : integer = None (required) The temperature of the first sample of gas.\n\t- quantity2 : integer = None (required) The quantity of the second sample of gas.\n\t- temperature2 : integer = None (required) The temperature of the second sample of gas.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_temperature\", \"description\": \"Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"quantity1\": {\"type\": \"integer\", \"description\": \"The quantity of the first sample of gas.\"}, \"temperature1\": {\"type\": \"integer\", \"description\": \"The temperature of the first sample of gas.\"}, \"quantity2\": {\"type\": \"integer\", \"description\": \"The quantity of the second sample of gas.\"}, \"temperature2\": {\"type\": \"integer\", \"description\": \"The temperature of the second sample of gas.\"}}, \"required\": [\"quantity1\", \"temperature1\", \"quantity2\", \"temperature2\"]}}"}
{"scope": "relevance", "query": "Who won the chess tournament in 2015?", "query_for_retrieval": "Who won the chess tournament in 2015?", "answer": "game.board_analyser", "answer_params": "", "api_description": "def game.board_analyser:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyse a given board position of the game and suggest the optimal next move\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the game. In this case, chess\n\t- player : string = None (required) The current player whose turn is to move.\n\t- position : string = None (required) The current state of the board in FEN (Forsyth\u2013Edwards Notation) format.\n\t- difficulty : string = medium (optional) The level of difficulty for the suggested move. Options include 'easy', 'medium', 'hard'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game.board_analyser\", \"description\": \"Analyse a given board position of the game and suggest the optimal next move\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the game. In this case, chess\"}, \"player\": {\"type\": \"string\", \"description\": \"The current player whose turn is to move.\"}, \"position\": {\"type\": \"string\", \"description\": \"The current state of the board in FEN (Forsyth\\u2013Edwards Notation) format.\"}, \"difficulty\": {\"type\": \"string\", \"default\": \"medium\", \"description\": \"The level of difficulty for the suggested move. Options include 'easy', 'medium', 'hard'.\"}}, \"required\": [\"game\", \"player\", \"position\"]}}"}
{"scope": "multiple_function", "query": "Find the distance between New York City and Los Angeles.", "query_for_retrieval": "Find the distance between New York City and Los Angeles.", "answer": "timezones.get_difference", "answer_params": "", "api_description": "def timezones.get_difference:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the time difference between two cities.\n\t\n\tArguments:\n\t---------\n\t- city1 : string = None (required) The first city.\n\t- city2 : string = None (required) The second city.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"timezones.get_difference\", \"description\": \"Find the time difference between two cities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city1\": {\"type\": \"string\", \"description\": \"The first city.\"}, \"city2\": {\"type\": \"string\", \"description\": \"The second city.\"}}, \"required\": [\"city1\", \"city2\"]}}"}
{"scope": "parallel_function", "query": "Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking.", "query_for_retrieval": "Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking.", "answer": "concert.find_nearby", "answer_params": "", "api_description": "def concert.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby concerts based on specific criteria like genre and availability of parking.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the user wants to find a concert.\n\t- date : string = None (required) The date on which the user wants to attend a concert.\n\t- genre : string = None (required) The genre of music of the concert.\n\t- amenities : array = ['Parking'] (optional) Amenities preferred at the concert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.find_nearby\", \"description\": \"Locate nearby concerts based on specific criteria like genre and availability of parking.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the user wants to find a concert.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date on which the user wants to attend a concert.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of music of the concert.\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Parking\", \"Food and Beverages\", \"VIP Seating\", \"Disability Access\"]}, \"description\": \"Amenities preferred at the concert.\", \"default\": [\"Parking\"]}}, \"required\": [\"location\", \"date\", \"genre\"]}}"}
{"scope": "multiple_function", "query": "Can I find a historical fiction book at the New York public library?", "query_for_retrieval": "Can I find a historical fiction book at the New York public library?", "answer": "library.search_books", "answer_params": "", "api_description": "def library.search_books:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a book in a given library with optional parameters\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Name or city of library\n\t- genre : string = None (required) Genre of the book\n\t- title : string = None (optional) Title of the book. Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"library.search_books\", \"description\": \"Search for a book in a given library with optional parameters\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Name or city of library\"}, \"genre\": {\"type\": \"string\", \"description\": \"Genre of the book\"}, \"title\": {\"type\": \"string\", \"description\": \"Title of the book. Default ''\"}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "parallel_function", "query": "Can you send an email to my colleague at john.doe@example.com with the subject \"Project Update\" and the body content \"Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex\", then carbon copy the email to my manager at manager@example.com and blind carbon copy it to the HR at hr@example.com? After that, can you send another email to my other colleague at jane.doe@example.com with the subject \"Meeting Reminder\" and the body content \"Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex\", and carbon copy it to my assistant at assistant@example.com and blind carbon copy it to the HR at hr@example.com?", "query_for_retrieval": "Can you send an email to my colleague at john.doe@example.com with the subject \"Project Update\" and the body content \"Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex\", then carbon copy the email to my manager at manager@example.com and blind carbon copy it to the HR at hr@example.com? After that, can you send another email to my other colleague at jane.doe@example.com with the subject \"Meeting Reminder\" and the body content \"Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex\", and carbon copy it to my assistant at assistant@example.com and blind carbon copy it to the HR at hr@example.com?", "answer": "send_email", "answer_params": "", "api_description": "def send_email:\n\t\"\"\"\n\tDescription:\n\t\n\tSend an email to the specified email address.\n\t\n\tArguments:\n\t---------\n\t- to : string = None (required) The email address to send to.\n\t- subject : string = None (required) The subject of the email.\n\t- body : string = None (required) The body content of the email.\n\t- cc : string = None (optional) The email address to carbon copy. default is ''.\n\t- bcc : string = None (optional) The email address to blind carbon copy. the value is set to '' for default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"send_email\", \"description\": \"Send an email to the specified email address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"to\": {\"type\": \"string\", \"description\": \"The email address to send to.\"}, \"subject\": {\"type\": \"string\", \"description\": \"The subject of the email.\"}, \"body\": {\"type\": \"string\", \"description\": \"The body content of the email.\"}, \"cc\": {\"type\": \"string\", \"description\": \"The email address to carbon copy. default is ''.\"}, \"bcc\": {\"type\": \"string\", \"description\": \"The email address to blind carbon copy. the value is set to '' for default.\"}}, \"required\": [\"to\", \"subject\", \"body\"]}}"}
{"scope": "sql", "query": "What is the total quantity of product X sold in the last quarter from the 'sales' table, considering only the columns 'product_name' and 'quantity_sold', where the product name is 'Product X' and the sale date is between '2022-01-01' and '2022-03-31'?", "query_for_retrieval": "What is the total quantity of product X sold in the last quarter from the 'sales' table, considering only the columns 'product_name' and 'quantity_sold', where the product name is 'Product X' and the sale date is between '2022-01-01' and '2022-03-31'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "What year was the law of universal gravitation published by Isaac Newton?", "query_for_retrieval": "What year was the law of universal gravitation published by Isaac Newton?", "answer": "publication_year.find", "answer_params": "", "api_description": "def publication_year.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the year a particular scientific work was published.\n\t\n\tArguments:\n\t---------\n\t- author : string = None (required) Name of the author of the work.\n\t- work_title : string = None (required) Title of the scientific work.\n\t- location : string = None (optional) Place of the publication, if known. Default to 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"publication_year.find\", \"description\": \"Fetches the year a particular scientific work was published.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"author\": {\"type\": \"string\", \"description\": \"Name of the author of the work.\"}, \"work_title\": {\"type\": \"string\", \"description\": \"Title of the scientific work.\"}, \"location\": {\"type\": \"string\", \"description\": \"Place of the publication, if known. Default to 'all'.\"}}, \"required\": [\"author\", \"work_title\"]}}"}
{"scope": "relevance", "query": "Who won the World Cup 2022?", "query_for_retrieval": "Who won the World Cup 2022?", "answer": "calculate_battle_outcome", "answer_params": "", "api_description": "def calculate_battle_outcome:\n\t\"\"\"\n\tDescription:\n\t\n\tPredicts the outcome of a historical battle based on the strategies, army size and other influencing factors.\n\t\n\tArguments:\n\t---------\n\t- battle_name : string = None (required) The name of the historical battle.\n\t- strategy_type : string = None (required) The strategy employed in the battle.\n\t- weather_condition : string = snowing (optional) Weather condition during the battle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_battle_outcome\", \"description\": \"Predicts the outcome of a historical battle based on the strategies, army size and other influencing factors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"battle_name\": {\"type\": \"string\", \"description\": \"The name of the historical battle.\"}, \"strategy_type\": {\"type\": \"string\", \"description\": \"The strategy employed in the battle.\"}, \"weather_condition\": {\"type\": \"string\", \"description\": \"Weather condition during the battle.\", \"default\": \"snowing\"}}, \"required\": [\"battle_name\", \"strategy_type\"]}}"}
{"scope": "multiple_function", "query": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?", "query_for_retrieval": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?", "answer": "electromagnetism.ampere_law", "answer_params": "", "api_description": "def electromagnetism.ampere_law:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. \n\t\n\tArguments:\n\t---------\n\t- enclosed_current : float = None (required) The total current enclosed by the loop. In Amperes.\n\t- radius : float = None (required) The radius of the circle or the distance from the center of the circular path. In meters.\n\t- mu0 : float = None (optional) Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"electromagnetism.ampere_law\", \"description\": \"Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. \", \"parameters\": {\"type\": \"dict\", \"properties\": {\"enclosed_current\": {\"type\": \"float\", \"description\": \"The total current enclosed by the loop. In Amperes.\"}, \"radius\": {\"type\": \"float\", \"description\": \"The radius of the circle or the distance from the center of the circular path. In meters.\"}, \"mu0\": {\"type\": \"float\", \"description\": \"Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional\"}}, \"required\": [\"enclosed_current\", \"radius\"]}}"}
{"scope": "simple", "query": "Get historical GDP data for United States from 1960 to 2000.", "query_for_retrieval": "Get historical GDP data for United States from 1960 to 2000.", "answer": "get_historical_GDP", "answer_params": "", "api_description": "def get_historical_GDP:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical GDP data for a specific country and time range.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which the historical GDP data is required.\n\t- start_year : integer = None (required) Starting year of the period for which GDP data is required.\n\t- end_year : integer = None (required) Ending year of the period for which GDP data is required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_historical_GDP\", \"description\": \"Retrieve historical GDP data for a specific country and time range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which the historical GDP data is required.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"Starting year of the period for which GDP data is required.\"}, \"end_year\": {\"type\": \"integer\", \"description\": \"Ending year of the period for which GDP data is required.\"}}, \"required\": [\"country\", \"start_year\", \"end_year\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me calculate the quarterly dividend per share for my company? We have just paid out a total of $5,000,000 in dividends and currently have 2,000,000 outstanding shares. Also, I am considering a scenario where we might increase our total payout to $6,000,000 while keeping the same number of outstanding shares. What would be the quarterly dividend per share in that case? And what if we also increase our outstanding shares to 2,500,000 while keeping the total payout at $6,000,000?\"", "query_for_retrieval": "\"Can you help me calculate the quarterly dividend per share for my company? We have just paid out a total of $5,000,000 in dividends and currently have 2,000,000 outstanding shares. Also, I am considering a scenario where we might increase our total payout to $6,000,000 while keeping the same number of outstanding shares. What would be the quarterly dividend per share in that case? And what if we also increase our outstanding shares to 2,500,000 while keeping the total payout at $6,000,000?\"", "answer": "finance.calculate_quarterly_dividend_per_share", "answer_params": "", "api_description": "def finance.calculate_quarterly_dividend_per_share:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate quarterly dividend per share for a company given total dividend payout and outstanding shares\n\t\n\tArguments:\n\t---------\n\t- total_payout : integer = None (required) The total amount of dividends paid out in USD\n\t- outstanding_shares : integer = None (required) Total number of outstanding shares\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.calculate_quarterly_dividend_per_share\", \"description\": \"Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_payout\": {\"type\": \"integer\", \"description\": \"The total amount of dividends paid out in USD\"}, \"outstanding_shares\": {\"type\": \"integer\", \"description\": \"Total number of outstanding shares\"}}, \"required\": [\"total_payout\", \"outstanding_shares\"], \"optional\": []}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me the function of the molecule ATP in the organelle mitochondria with a specific function, then calculate the shortest driving distance from New York to Los Angeles in miles, after that, can you tell me who is credited for the discovery of the theory of relativity, and finally, can you tell me the current retail price of a Fender Stratocaster in sunburst finish?\"", "query_for_retrieval": "\"Can you tell me the function of the molecule ATP in the organelle mitochondria with a specific function, then calculate the shortest driving distance from New York to Los Angeles in miles, after that, can you tell me who is credited for the discovery of the theory of relativity, and finally, can you tell me the current retail price of a Fender Stratocaster in sunburst finish?\"", "answer": "get_shortest_driving_distance", "answer_params": "", "api_description": "def get_shortest_driving_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the shortest driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- origin : string = None (required) Starting point of the journey.\n\t- destination : string = None (required) End point of the journey.\n\t- unit : string = None (optional) Preferred unit of distance (optional, default is kilometers).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_shortest_driving_distance\", \"description\": \"Calculate the shortest driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"string\", \"description\": \"Starting point of the journey.\"}, \"destination\": {\"type\": \"string\", \"description\": \"End point of the journey.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Preferred unit of distance (optional, default is kilometers).\"}}, \"required\": [\"origin\", \"destination\"]}}"}
{"scope": "simple", "query": "Find the working hours and ticket price of The British Museum for this weekend.", "query_for_retrieval": "Find the working hours and ticket price of The British Museum for this weekend.", "answer": "museum_info", "answer_params": "", "api_description": "def museum_info:\n\t\"\"\"\n\tDescription:\n\t\n\tGet information about a museum including its opening hours and ticket prices for a specific date range.\n\t\n\tArguments:\n\t---------\n\t- museum : string = None (required) The name of the museum.\n\t- date : string = None (required) The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'.\n\t- information : array = all (optional) The type of information needed from the museum. This is optional and defaults to 'all' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum_info\", \"description\": \"Get information about a museum including its opening hours and ticket prices for a specific date range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"date\": {\"type\": \"string\", \"description\": \"The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'.\"}, \"information\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"opening_hours\", \"ticket_price\", \"address\"]}, \"description\": \"The type of information needed from the museum. This is optional and defaults to 'all' if not specified.\", \"default\": \"all\"}}, \"required\": [\"museum\", \"date\"]}}"}
{"scope": "simple", "query": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "query_for_retrieval": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "answer": "find_restaurants", "answer_params": "", "api_description": "def find_restaurants:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on location and food preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The specific location or area. The location should be in the format of District, City.\n\t- food_type : string = None (required) The type of food preferred.\n\t- number : integer = None (required) Number of results to return.\n\t- dietary_requirements : array = None (optional) Special dietary requirements, e.g. vegan, gluten-free. Default is empty list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_restaurants\", \"description\": \"Locate nearby restaurants based on location and food preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The specific location or area. The location should be in the format of District, City.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"The type of food preferred.\"}, \"number\": {\"type\": \"integer\", \"description\": \"Number of results to return.\"}, \"dietary_requirements\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Special dietary requirements, e.g. vegan, gluten-free. Default is empty list.\"}}, \"required\": [\"location\", \"food_type\", \"number\"]}}"}
{"scope": "parallel_function", "query": "Can you provide a brief about the movie \"Inception\" and then retrieve additional information like Director, Cast, Awards etc. for the same movie \"Inception\" and also for the movie \"The Dark Knight\"?", "query_for_retrieval": "Can you provide a brief about the movie \"Inception\" and then retrieve additional information like Director, Cast, Awards etc. for the same movie \"Inception\" and also for the movie \"The Dark Knight\"?", "answer": "movie_details.brief", "answer_params": "", "api_description": "def movie_details.brief:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function retrieves a brief about a specified movie.\n\t\n\tArguments:\n\t---------\n\t- title : string = None (required) Title of the movie\n\t- extra_info : boolean = false (optional) Option to get additional information like Director, Cast, Awards etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"movie_details.brief\", \"description\": \"This function retrieves a brief about a specified movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"Title of the movie\"}, \"extra_info\": {\"type\": \"boolean\", \"description\": \"Option to get additional information like Director, Cast, Awards etc.\", \"default\": \"false\"}}, \"required\": [\"title\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are planning your finances and you want to calculate the future value of your investments. You have an initial investment of $5000, an annual rate of return of 7%, and you plan to invest for 10 years. Additionally, you will be making regular contributions of $200. After calculating the future value, you want to visualize your annual returns over the past 10 years. The returns are as follows: [7, 8, 9, 6, 7, 8, 10, 9, 8, 7] and you want to create a histogram with 5 bins to better understand the distribution of returns. Later, you decide to take a break and engage in some art. You want to mix two primary paint colors, blue and yellow, and adjust the resulting color's lightness level to 70%. Can you calculate the future value of your investment, create the histogram, and mix the paint colors accordingly?\"", "query_for_retrieval": "\"Imagine you are planning your finances and you want to calculate the future value of your investments. You have an initial investment of $5000, an annual rate of return of 7%, and you plan to invest for 10 years. Additionally, you will be making regular contributions of $200. After calculating the future value, you want to visualize your annual returns over the past 10 years. The returns are as follows: [7, 8, 9, 6, 7, 8, 10, 9, 8, 7] and you want to create a histogram with 5 bins to better understand the distribution of returns. Later, you decide to take a break and engage in some art. You want to mix two primary paint colors, blue and yellow, and adjust the resulting color's lightness level to 70%. Can you calculate the future value of your investment, create the histogram, and mix the paint colors accordingly?\"", "answer": "create_histogram", "answer_params": "", "api_description": "def create_histogram:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a histogram based on provided data.\n\t\n\tArguments:\n\t---------\n\t- data : array = None (required) The data for which histogram needs to be plotted.\n\t- bins : integer = None (required) The number of equal-width bins in the range. Default is 10.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_histogram\", \"description\": \"Create a histogram based on provided data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The data for which histogram needs to be plotted.\"}, \"bins\": {\"type\": \"integer\", \"description\": \"The number of equal-width bins in the range. Default is 10.\"}}, \"required\": [\"data\", \"bins\"]}}"}
{"scope": "executable_simple", "query": "I'm an epidemiologist tracking the impact of COVID-19, and right now, I'm focused on the situation in India. I need the latest figures on the death toll there. Can you get me the updated total number of deaths from COVID in India?", "query_for_retrieval": "I'm an epidemiologist tracking the impact of COVID-19, and right now, I'm focused on the situation in India. I need the latest figures on the death toll there. Can you get me the updated total number of deaths from COVID in India?", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "multiple_function", "query": "Who was the full name of the president of the United States in 1861?", "query_for_retrieval": "Who was the full name of the president of the United States in 1861?", "answer": "US_president.in_year", "answer_params": "", "api_description": "def US_president.in_year:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the name of the U.S. president in a given year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year in question.\n\t- full_name : boolean = True (optional) Option to return full name with middle initial, if applicable.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"US_president.in_year\", \"description\": \"Retrieve the name of the U.S. president in a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year in question.\"}, \"full_name\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Option to return full name with middle initial, if applicable.\"}}, \"required\": [\"year\"]}}"}
{"scope": "multiple_function", "query": "Who discovered the neutron? Give me detail information.", "query_for_retrieval": "Who discovered the neutron? Give me detail information.", "answer": "get_discoverer", "answer_params": "", "api_description": "def get_discoverer:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the person or team who made a particular scientific discovery\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The discovery for which the discoverer's information is needed.\n\t- detail : boolean = None (required) Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_discoverer\", \"description\": \"Get the person or team who made a particular scientific discovery\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The discovery for which the discoverer's information is needed.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\"}}, \"required\": [\"discovery\", \"detail\"]}}"}
{"scope": "simple", "query": "Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2.", "query_for_retrieval": "Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2.", "answer": "calculate_return_on_investment", "answer_params": "", "api_description": "def calculate_return_on_investment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\n\t\n\tArguments:\n\t---------\n\t- purchase_price : integer = None (required) The price the stock was bought at.\n\t- sale_price : integer = None (required) The price the stock was sold at.\n\t- dividend : integer = 0 (optional) Any dividends received from the stock.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_return_on_investment\", \"description\": \"Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"purchase_price\": {\"type\": \"integer\", \"description\": \"The price the stock was bought at.\"}, \"sale_price\": {\"type\": \"integer\", \"description\": \"The price the stock was sold at.\"}, \"dividend\": {\"type\": \"integer\", \"description\": \"Any dividends received from the stock.\", \"default\": 0}}, \"required\": [\"purchase_price\", \"sale_price\"]}}"}
{"scope": "multiple_function", "query": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York.", "query_for_retrieval": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York.", "answer": "restaurant_info", "answer_params": "", "api_description": "def restaurant_info:\n\t\"\"\"\n\tDescription:\n\t\n\tGet restaurant information for a specific area.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location for which to find restaurants.\n\t- food_type : string = None (optional) Type of cuisine for which to find restaurants. Default 'any'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_info\", \"description\": \"Get restaurant information for a specific area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location for which to find restaurants.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"Type of cuisine for which to find restaurants. Default 'any'\", \"enum\": [\"Italian\", \"Chinese\", \"Mexican\", \"American\"]}}, \"required\": [\"location\"]}}"}
{"scope": "java", "query": "How can I execute the master operation to gather the usage statistics of the Cross-Cluster Replication (CCR) feature in Elasticsearch, including the number of follower indices and auto-follow patterns, using a given `usageRequest` and a `clusterState`, and handle the results using an `actionListener`?", "query_for_retrieval": "How can I execute the master operation to gather the usage statistics of the Cross-Cluster Replication (CCR) feature in Elasticsearch, including the number of follower indices and auto-follow patterns, using a given `usageRequest` and a `clusterState`, and handle the results using an `actionListener`?", "answer": "CCRUsageTransportAction.masterOperation", "answer_params": "", "api_description": "def CCRUsageTransportAction.masterOperation:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function gathers usage statistics of the CCR feature in Elasticsearch and sends the results to the provided ActionListener.\n\t\n\tArguments:\n\t---------\n\t- task : any = None (required) The task associated with the request.\n\t- request : any = None (required) The XPackUsageRequest object containing the request details.\n\t- state : any = None (required) The current cluster state.\n\t- listener : any = None (required) The ActionListener that handles the response containing the usage statistics.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CCRUsageTransportAction.masterOperation\", \"description\": \"This function gathers usage statistics of the CCR feature in Elasticsearch and sends the results to the provided ActionListener.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"task\": {\"type\": \"any\", \"description\": \"The task associated with the request.\"}, \"request\": {\"type\": \"any\", \"description\": \"The XPackUsageRequest object containing the request details.\"}, \"state\": {\"type\": \"any\", \"description\": \"The current cluster state.\"}, \"listener\": {\"type\": \"any\", \"description\": \"The ActionListener that handles the response containing the usage statistics.\"}}, \"required\": [\"task\", \"request\", \"state\", \"listener\"]}}"}
{"scope": "simple", "query": "Find a recipe for pasta carbonara which contains only less than 500 calories.", "query_for_retrieval": "Find a recipe for pasta carbonara which contains only less than 500 calories.", "answer": "find_recipe", "answer_params": "", "api_description": "def find_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a recipe based on name and its calorie content\n\t\n\tArguments:\n\t---------\n\t- recipeName : string = None (required) The recipe's name.\n\t- maxCalories : integer = 1000 (optional) The maximum calorie content of the recipe.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipe\", \"description\": \"Locate a recipe based on name and its calorie content\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"recipeName\": {\"type\": \"string\", \"description\": \"The recipe's name.\"}, \"maxCalories\": {\"type\": \"integer\", \"description\": \"The maximum calorie content of the recipe.\", \"default\": 1000}}, \"required\": [\"recipeName\"]}}"}
{"scope": "parallel_function", "query": "What is the temperature right now and for the next three hours in Seattle and Los Angeles?", "query_for_retrieval": "What is the temperature right now and for the next three hours in Seattle and Los Angeles?", "answer": "get_current_and_future_temperature", "answer_params": "", "api_description": "def get_current_and_future_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides the current temperature and forecasts the temperature for the next few hours at a particular location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the temperature for.\n\t- hours : integer = None (required) Number of hours for the temperature forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_and_future_temperature\", \"description\": \"Provides the current temperature and forecasts the temperature for the next few hours at a particular location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the temperature for.\"}, \"hours\": {\"type\": \"integer\", \"description\": \"Number of hours for the temperature forecast.\"}}, \"required\": [\"location\", \"hours\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm developing an encryption algorithm and it involves creating permutations from the English alphabet. I need to know the number of different ways I can arrange 5 letters from the total 26. Could you calculate that for me?", "query_for_retrieval": "I'm developing an encryption algorithm and it involves creating permutations from the English alphabet. I need to know the number of different ways I can arrange 5 letters from the total 26. Could you calculate that for me?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a recipe that uses chicken as the main ingredient and doesn't require more than 5 ingredients? After that, could you also find a restaurant that serves Italian cuisine and falls within a mid-range price? And finally, could you find another recipe that uses beef as the main ingredient and requires no more than 7 ingredients?\"", "query_for_retrieval": "\"Can you help me find a recipe that uses chicken as the main ingredient and doesn't require more than 5 ingredients? After that, could you also find a restaurant that serves Italian cuisine and falls within a mid-range price? And finally, could you find another recipe that uses beef as the main ingredient and requires no more than 7 ingredients?\"", "answer": "restaurant.find", "answer_params": "", "api_description": "def restaurant.find:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate restaurants based on specific criteria such as cuisine and price range\n\t\n\tArguments:\n\t---------\n\t- cuisine : string = None (required) The type of cuisine preferred.\n\t- price : array = None (optional) Price range of the restaurant in format ['low', 'mid', 'high']. Default is 'mid' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find\", \"description\": \"Locate restaurants based on specific criteria such as cuisine and price range\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cuisine\": {\"type\": \"string\", \"description\": \"The type of cuisine preferred.\"}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Price range of the restaurant in format ['low', 'mid', 'high']. Default is 'mid' if not specified.\"}}, \"required\": [\"cuisine\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the resonant frequency of an LC circuit with an inductance of 0.005 henries and a capacitance of 0.0000001 farads, and then round off the result to 3 decimal places? After that, can you calculate it again with an inductance of 0.007 henries and a capacitance of 0.0000002 farads, rounding off the result to 4 decimal places?\"", "query_for_retrieval": "\"Can you calculate the resonant frequency of an LC circuit with an inductance of 0.005 henries and a capacitance of 0.0000001 farads, and then round off the result to 3 decimal places? After that, can you calculate it again with an inductance of 0.007 henries and a capacitance of 0.0000002 farads, rounding off the result to 4 decimal places?\"", "answer": "calculate_resonant_frequency", "answer_params": "", "api_description": "def calculate_resonant_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the resonant frequency of an LC (inductor-capacitor) circuit.\n\t\n\tArguments:\n\t---------\n\t- inductance : float = None (required) The inductance (L) in henries (H).\n\t- capacitance : float = None (required) The capacitance (C) in farads (F).\n\t- round_off : integer = None (optional) Rounding off the result to a certain decimal places, default is 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_resonant_frequency\", \"description\": \"Calculate the resonant frequency of an LC (inductor-capacitor) circuit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"inductance\": {\"type\": \"float\", \"description\": \"The inductance (L) in henries (H).\"}, \"capacitance\": {\"type\": \"float\", \"description\": \"The capacitance (C) in farads (F).\"}, \"round_off\": {\"type\": \"integer\", \"description\": \"Rounding off the result to a certain decimal places, default is 2.\"}}, \"required\": [\"inductance\", \"capacitance\"]}}"}
{"scope": "rest", "query": "I'm planning a series of business trips for the next year and would prefer to extend my stays over long weekends where possible. Could you help me find information on long weekends in Japan for 2023?", "query_for_retrieval": "I'm planning a series of business trips for the next year and would prefer to extend my stays over long weekends where possible. Could you help me find information on long weekends in Japan for 2023?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode} (required) The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\", \"default\": \"https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'.", "query_for_retrieval": "Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'.", "answer": "analyze_dna_sequence", "answer_params": "", "api_description": "def analyze_dna_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyzes the DNA sequence based on a reference sequence and return any potential mutations.\n\t\n\tArguments:\n\t---------\n\t- sequence : string = None (required) The DNA sequence to be analyzed.\n\t- reference_sequence : string = None (required) The reference DNA sequence.\n\t- mutation_type : string = None (optional) Type of the mutation to be looked for in the sequence. Default to 'substitution'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"analyze_dna_sequence\", \"description\": \"Analyzes the DNA sequence based on a reference sequence and return any potential mutations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sequence\": {\"type\": \"string\", \"description\": \"The DNA sequence to be analyzed.\"}, \"reference_sequence\": {\"type\": \"string\", \"description\": \"The reference DNA sequence.\"}, \"mutation_type\": {\"type\": \"string\", \"enum\": [\"insertion\", \"deletion\", \"substitution\"], \"description\": \"Type of the mutation to be looked for in the sequence. Default to 'substitution'.\"}}, \"required\": [\"sequence\", \"reference_sequence\"]}}"}
{"scope": "executable_simple", "query": "I'd like to reserve a king room for a customer with the ID 123. The booking is from December 11, 2023, to August 15, 2024. The price we're looking at is $10,000. No discount codes will be applied for this reservation. Can you process this booking for me?", "query_for_retrieval": "I'd like to reserve a king room for a customer with the ID 123. The booking is from December 11, 2023, to August 15, 2024. The price we're looking at is $10,000. No discount codes will be applied for this reservation. Can you process this booking for me?", "answer": "book_room", "answer_params": "", "api_description": "def book_room:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a room for a customer.\n\t\n\tArguments:\n\t---------\n\t- room_type : string = None (required) The room type to book.\n\t- price : float = None (optional) The max price of the room. Default 0.0\n\t- check_in_date : string = None (required) The check-in date in format of MM-DD-YYYY. \n\t- check_out_date : string = None (required) The check-out date in format of MM-DD-YYYY.\n\t- customer_id : string = None (required) The customer ID.\n\t- discount_code : string = None (optional) The discount code (if any).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_room\", \"description\": \"Books a room for a customer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"room_type\": {\"type\": \"string\", \"description\": \"The room type to book.\"}, \"price\": {\"type\": \"float\", \"description\": \"The max price of the room. Default 0.0\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in format of MM-DD-YYYY. \"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in format of MM-DD-YYYY.\"}, \"customer_id\": {\"type\": \"string\", \"description\": \"The customer ID.\"}, \"discount_code\": {\"type\": \"string\", \"description\": \"The discount code (if any).\", \"default\": null}}, \"required\": [\"room_type\", \"check_in_date\", \"check_out_date\", \"customer_id\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm conducting an experiment with four objects of different materials, and I need to calculate their densities. I have all their masses and volumes measured. The metal cube weighs 500 grams and takes up 100 cc, the plastic sphere is 200 grams and 50 cc, the wooden block is 300 grams and has a volume of 75 cc, and finally, the glass cylinder is 400 grams with an 80 cc volume. I'd like to determine the density for each one.", "query_for_retrieval": "I'm conducting an experiment with four objects of different materials, and I need to calculate their densities. I have all their masses and volumes measured. The metal cube weighs 500 grams and takes up 100 cc, the plastic sphere is 200 grams and 50 cc, the wooden block is 300 grams and has a volume of 75 cc, and finally, the glass cylinder is 400 grams with an 80 cc volume. I'd like to determine the density for each one.", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "relevance", "query": "What is the best way to reduce CO2 emissions?", "query_for_retrieval": "What is the best way to reduce CO2 emissions?", "answer": "emission_estimator", "answer_params": "", "api_description": "def emission_estimator:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the potential CO2 emissions reduction based on various factors.\n\t\n\tArguments:\n\t---------\n\t- current_emissions : float = None (required) Current amount of CO2 emissions in tons.\n\t- action : string = None (required) The action proposed to reduce emissions, e.g., 'plant trees', 'solar power installation', 'switch to electric cars'.\n\t- scale : string = individual (optional) The scale at which the action will be taken.\n\t- duration : integer = None (required) The duration over which the action will be sustained, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"emission_estimator\", \"description\": \"Estimate the potential CO2 emissions reduction based on various factors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current_emissions\": {\"type\": \"float\", \"description\": \"Current amount of CO2 emissions in tons.\"}, \"action\": {\"type\": \"string\", \"description\": \"The action proposed to reduce emissions, e.g., 'plant trees', 'solar power installation', 'switch to electric cars'.\"}, \"scale\": {\"type\": \"string\", \"description\": \"The scale at which the action will be taken.\", \"default\": \"individual\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration over which the action will be sustained, in years.\"}}, \"required\": [\"current_emissions\", \"action\", \"duration\"]}}"}
{"scope": "multiple_function", "query": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance.", "query_for_retrieval": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance.", "answer": "route_planner.calculate_route", "answer_params": "", "api_description": "def route_planner.calculate_route:\n\t\"\"\"\n\tDescription:\n\t\n\tDetermines the best route between two points.\n\t\n\tArguments:\n\t---------\n\t- start : string = None (required) The starting point of the journey.\n\t- destination : string = None (required) The destination of the journey.\n\t- method : string = fastest (optional) The method to use when calculating the route (default is 'fastest').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"route_planner.calculate_route\", \"description\": \"Determines the best route between two points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"string\", \"description\": \"The starting point of the journey.\"}, \"destination\": {\"type\": \"string\", \"description\": \"The destination of the journey.\"}, \"method\": {\"type\": \"string\", \"enum\": [\"fastest\", \"shortest\", \"balanced\"], \"description\": \"The method to use when calculating the route (default is 'fastest').\", \"default\": \"fastest\"}}, \"required\": [\"start\", \"destination\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my day? I want to start from my home in New York and go to a chess club named 'Knight Gambit' located in Boston. I want to take the fastest route. After that, I want to go to another chess club named 'Rook Corner' in Philadelphia, again taking the fastest route. Finally, I want to return home, but this time I want to take the shortest route. Can you also provide me with the details of the events hosted by both chess clubs?\"", "query_for_retrieval": "\"Can you help me plan my day? I want to start from my home in New York and go to a chess club named 'Knight Gambit' located in Boston. I want to take the fastest route. After that, I want to go to another chess club named 'Rook Corner' in Philadelphia, again taking the fastest route. Finally, I want to return home, but this time I want to take the shortest route. Can you also provide me with the details of the events hosted by both chess clubs?\"", "answer": "chess_club_details.find", "answer_params": "", "api_description": "def chess_club_details.find:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides details about a chess club, including location.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the chess club.\n\t- city : string = None (required) The city in which the chess club is located.\n\t- event : string = null (optional) The event hosted by the club.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess_club_details.find\", \"description\": \"Provides details about a chess club, including location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the chess club.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city in which the chess club is located.\"}, \"event\": {\"type\": \"string\", \"description\": \"The event hosted by the club.\", \"default\": \"null\"}}, \"required\": [\"name\", \"city\"]}}"}
{"scope": "relevance", "query": "Find me an ice cream store", "query_for_retrieval": "Find me an ice cream store", "answer": "game_guide", "answer_params": "", "api_description": "def game_guide:\n\t\"\"\"\n\tDescription:\n\t\n\tA video game guide which provides guidance and tips for completing levels, solving puzzles or defeating bosses.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) The name of the game.\n\t- level : integer = None (required) The level number of the game.\n\t- type : string = None (optional) The type of help you're seeking. Defaults to all types.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_guide\", \"description\": \"A video game guide which provides guidance and tips for completing levels, solving puzzles or defeating bosses.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"level\": {\"type\": \"integer\", \"description\": \"The level number of the game.\"}, \"type\": {\"type\": \"string\", \"enum\": [\"puzzle\", \"boss\", \"traps\", \"missions\"], \"description\": \"The type of help you're seeking. Defaults to all types.\"}}, \"required\": [\"game_name\", \"level\"]}}"}
{"scope": "parallel_multiple_function", "query": "In game Battle Reign, change the armor level to 5 and find me a game guide for how to win in snowy weather conditions. Also find me any strategy guides available for game Shadow Fall.", "query_for_retrieval": "In game Battle Reign, change the armor level to 5 and find me a game guide for how to win in snowy weather conditions. Also find me any strategy guides available for game Shadow Fall.", "answer": "BattleReignGameAPI.update_player_equipment", "answer_params": "", "api_description": "def BattleReignGameAPI.update_player_equipment:\n\t\"\"\"\n\tDescription:\n\t\n\tModify the player's equipment level for specified attributes\n\t\n\tArguments:\n\t---------\n\t- attribute : string = None (required) The attribute of the equipment to modify.\n\t- level : integer = None (required) The level to modify the attribute to.\n\t- playerID : integer = 123 (optional) Player ID of the player. Default to 123\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"BattleReignGameAPI.update_player_equipment\", \"description\": \"Modify the player's equipment level for specified attributes\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"attribute\": {\"type\": \"string\", \"description\": \"The attribute of the equipment to modify.\"}, \"level\": {\"type\": \"integer\", \"description\": \"The level to modify the attribute to.\"}, \"playerID\": {\"type\": \"integer\", \"description\": \"Player ID of the player. Default to 123\", \"default\": 123}}, \"required\": [\"attribute\", \"level\"]}}"}
{"scope": "relevance", "query": "Who won the basketball game between Lakers and Celtics yesterday?", "query_for_retrieval": "Who won the basketball game between Lakers and Celtics yesterday?", "answer": "get_stock_data", "answer_params": "", "api_description": "def get_stock_data:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current stock price for a specific company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The company for which to retrieve the stock price.\n\t- date : string = None (required) The date for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_data\", \"description\": \"Retrieve the current stock price for a specific company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The company for which to retrieve the stock price.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date for which to retrieve the stock price.\"}}, \"required\": [\"company_name\", \"date\"]}}"}
{"scope": "simple", "query": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "query_for_retrieval": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "answer": "calc_heat_capacity", "answer_params": "", "api_description": "def calc_heat_capacity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the heat capacity at constant pressure of air using its temperature and volume.\n\t\n\tArguments:\n\t---------\n\t- temp : integer = None (required) The temperature of the gas in Kelvin.\n\t- volume : integer = None (required) The volume of the gas in m^3.\n\t- gas : string = None (optional) Type of gas, with 'air' as default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_heat_capacity\", \"description\": \"Calculate the heat capacity at constant pressure of air using its temperature and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"temp\": {\"type\": \"integer\", \"description\": \"The temperature of the gas in Kelvin.\"}, \"volume\": {\"type\": \"integer\", \"description\": \"The volume of the gas in m^3.\"}, \"gas\": {\"type\": \"string\", \"description\": \"Type of gas, with 'air' as default.\"}}, \"required\": [\"temp\", \"volume\"]}}"}
{"scope": "simple", "query": "Find me the record of Tom Brady in the 2020 NFL season.", "query_for_retrieval": "Find me the record of Tom Brady in the 2020 NFL season.", "answer": "nfl_data.player_record", "answer_params": "", "api_description": "def nfl_data.player_record:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the record of an NFL player in a specified season.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the NFL player.\n\t- season_year : integer = None (required) The year of the NFL season.\n\t- team : string = None (optional) The NFL team that the player played for in that season. Default is all teams if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"nfl_data.player_record\", \"description\": \"Retrieve the record of an NFL player in a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the NFL player.\"}, \"season_year\": {\"type\": \"integer\", \"description\": \"The year of the NFL season.\"}, \"team\": {\"type\": \"string\", \"description\": \"The NFL team that the player played for in that season. Default is all teams if not specified.\"}}, \"required\": [\"player_name\", \"season_year\"]}}"}
{"scope": "simple", "query": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "query_for_retrieval": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "answer": "find_card_in_deck", "answer_params": "", "api_description": "def find_card_in_deck:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a particular card in a deck based on rank and suit.\n\t\n\tArguments:\n\t---------\n\t- rank : string = None (required) Rank of the card (e.g. Ace, Two, King).\n\t- suit : string = None (required) Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n\t- deck : array = None (optional) Deck of cards. If not provided, the deck will be a standard 52 card deck\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_card_in_deck\", \"description\": \"Locate a particular card in a deck based on rank and suit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\", \"description\": \"Rank of the card (e.g. Ace, Two, King).\"}, \"suit\": {\"type\": \"string\", \"description\": \"Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\"}, \"deck\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"string\"}, \"suit\": {\"type\": \"string\"}}}, \"description\": \"Deck of cards. If not provided, the deck will be a standard 52 card deck\"}}, \"required\": [\"rank\", \"suit\"]}}"}
{"scope": "simple", "query": "Who was the full name of the president of the United States in 1861?", "query_for_retrieval": "Who was the full name of the president of the United States in 1861?", "answer": "US_president.in_year", "answer_params": "", "api_description": "def US_president.in_year:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the name of the U.S. president in a given year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year in question.\n\t- full_name : boolean = True (optional) Option to return full name with middle initial, if applicable.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"US_president.in_year\", \"description\": \"Retrieve the name of the U.S. president in a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year in question.\"}, \"full_name\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Option to return full name with middle initial, if applicable.\"}}, \"required\": [\"year\"]}}"}
{"scope": "multiple_function", "query": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "query_for_retrieval": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "answer": "geo_distance.calculate", "answer_params": "", "api_description": "def geo_distance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the geographic distance between two given locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the distance calculation.\n\t- end_location : string = None (required) The destination location for the distance calculation.\n\t- units : string = None (optional) Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geo_distance.calculate\", \"description\": \"Calculate the geographic distance between two given locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the distance calculation.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the distance calculation.\"}, \"units\": {\"type\": \"string\", \"description\": \"Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me analyze the financial performance of a company named 'Tech Innovators'? I would like to understand their year over year (YOY) growth rate from 2018 to 2019. In 2018, their revenue was $500,000 and in 2019, it increased to $750,000. Additionally, I would like to know their return on equity (ROE) for the year 2019, where their net income was $100,000 and the average shareholder equity was $200,000. Lastly, I am also interested in their return on assets (ROA) for the same year, given that their total average assets were $1,000,000.\"", "query_for_retrieval": "\"Can you help me analyze the financial performance of a company named 'Tech Innovators'? I would like to understand their year over year (YOY) growth rate from 2018 to 2019. In 2018, their revenue was $500,000 and in 2019, it increased to $750,000. Additionally, I would like to know their return on equity (ROE) for the year 2019, where their net income was $100,000 and the average shareholder equity was $200,000. Lastly, I am also interested in their return on assets (ROA) for the same year, given that their total average assets were $1,000,000.\"", "answer": "financial_ratios.calculate_ROA", "answer_params": "", "api_description": "def financial_ratios.calculate_ROA:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on assets (ROA) for a company.\n\t\n\tArguments:\n\t---------\n\t- net_income : float = None (required) Net income for the period.\n\t- total_assets : float = None (required) Total average assets for the period.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financial_ratios.calculate_ROA\", \"description\": \"Calculate the return on assets (ROA) for a company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"net_income\": {\"type\": \"float\", \"description\": \"Net income for the period.\"}, \"total_assets\": {\"type\": \"float\", \"description\": \"Total average assets for the period.\"}}, \"required\": [\"net_income\", \"total_assets\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm currently working on a financial report and I need to crunch some numbers. First, could you calculate the standard deviation for the data set [23, 436, 1231, 123]? Also, I'm helping a friend figure out potential housing costs; they're looking at a 30-year mortgage on a $350,000 loan with a 3.5% interest rate. What would their monthly payment be? Lastly, I'm planning a trip to San Francisco and I need the GPS coordinates for navigation purposes. Can you provide me with the latitude and longitude of San Francisco?", "query_for_retrieval": "I'm currently working on a financial report and I need to crunch some numbers. First, could you calculate the standard deviation for the data set [23, 436, 1231, 123]? Also, I'm helping a friend figure out potential housing costs; they're looking at a 30-year mortgage on a $350,000 loan with a 3.5% interest rate. What would their monthly payment be? Lastly, I'm planning a trip to San Francisco and I need the GPS coordinates for navigation purposes. Can you provide me with the latitude and longitude of San Francisco?", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me understand the ecological impact of the African Elephant in the Serengeti ecosystem over the last 5 years and also assess the population growth of the same species in the same location over the last 10 years? After that, I would also like to know the ecological impact of the Bengal Tiger in the Sundarbans ecosystem over the last 3 years and assess the population growth of the same species in the same location over the last 7 years.\"", "query_for_retrieval": "\"Can you help me understand the ecological impact of the African Elephant in the Serengeti ecosystem over the last 5 years and also assess the population growth of the same species in the same location over the last 10 years? After that, I would also like to know the ecological impact of the Bengal Tiger in the Sundarbans ecosystem over the last 3 years and assess the population growth of the same species in the same location over the last 7 years.\"", "answer": "wildlife_population.assess_growth", "answer_params": "", "api_description": "def wildlife_population.assess_growth:\n\t\"\"\"\n\tDescription:\n\t\n\tAssesses the population growth of a specific species in a specified location over a period.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species for which the growth is to be calculated.\n\t- location : string = None (required) The area where the species is present.\n\t- duration : integer = None (required) The time period for which the population growth should be calculated in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"wildlife_population.assess_growth\", \"description\": \"Assesses the population growth of a specific species in a specified location over a period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species for which the growth is to be calculated.\"}, \"location\": {\"type\": \"string\", \"description\": \"The area where the species is present.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The time period for which the population growth should be calculated in years.\"}}, \"required\": [\"species\", \"location\", \"duration\"]}}"}
{"scope": "simple", "query": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "query_for_retrieval": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "answer": "calculate_slope_gradient", "answer_params": "", "api_description": "def calculate_slope_gradient:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the slope gradient between two geographical coordinates.\n\t\n\tArguments:\n\t---------\n\t- point1 : array = None (required) The geographic coordinates for the first point [Latitude, Longitude].\n\t- point2 : array = None (required) The geographic coordinates for the second point [Latitude, Longitude].\n\t- unit : string = None (optional) The unit for the slope gradient. Default is 'degree'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_slope_gradient\", \"description\": \"Calculate the slope gradient between two geographical coordinates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"point1\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The geographic coordinates for the first point [Latitude, Longitude].\"}, \"point2\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The geographic coordinates for the second point [Latitude, Longitude].\"}, \"unit\": {\"type\": \"string\", \"enum\": [\"degree\", \"percent\", \"ratio\"], \"description\": \"The unit for the slope gradient. Default is 'degree'.\"}}, \"required\": [\"point1\", \"point2\"]}}"}
{"scope": "parallel_function", "query": "Can you find me upcoming jazz events in Los Angeles, CA for the next 14 days and then find the same for rock events in Chicago, IL for the next 10 days and finally find upcoming classical music events in Boston, MA for the next 7 days?", "query_for_retrieval": "Can you find me upcoming jazz events in Los Angeles, CA for the next 14 days and then find the same for rock events in Chicago, IL for the next 10 days and finally find upcoming classical music events in Boston, MA for the next 7 days?", "answer": "event_finder.find_upcoming", "answer_params": "", "api_description": "def event_finder.find_upcoming:\n\t\"\"\"\n\tDescription:\n\t\n\tFind upcoming events of a specific genre in a given location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state where the search will take place, e.g. New York, NY.\n\t- genre : string = None (required) The genre of events.\n\t- days_ahead : integer = 7 (optional) The number of days from now to include in the search.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"event_finder.find_upcoming\", \"description\": \"Find upcoming events of a specific genre in a given location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state where the search will take place, e.g. New York, NY.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of events.\"}, \"days_ahead\": {\"type\": \"integer\", \"description\": \"The number of days from now to include in the search.\", \"default\": 7}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the Greatest Common Divisor (GCD) of 96 and 128, and the least common multiple (LCM) of 15 and 25.", "query_for_retrieval": "Calculate the Greatest Common Divisor (GCD) of 96 and 128, and the least common multiple (LCM) of 15 and 25.", "answer": "primeFactors", "answer_params": "", "api_description": "def primeFactors:\n\t\"\"\"\n\tDescription:\n\t\n\tFind all prime factors of an integer.\n\t\n\tArguments:\n\t---------\n\t- num : integer = None (required) The integer.\n\t- withMultiplicity : boolean = false (optional) If true, includes the multiplicity of each factor.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"primeFactors\", \"description\": \"Find all prime factors of an integer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num\": {\"type\": \"integer\", \"description\": \"The integer.\"}, \"withMultiplicity\": {\"type\": \"boolean\", \"description\": \"If true, includes the multiplicity of each factor.\", \"default\": \"false\"}}, \"required\": [\"num\"]}}"}
{"scope": "simple", "query": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "query_for_retrieval": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "answer": "diabetes_prediction", "answer_params": "", "api_description": "def diabetes_prediction:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the likelihood of diabetes type 2 based on a person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in lbs.\n\t- height : integer = None (required) Height of the person in inches.\n\t- activity_level : string = None (required) Physical activity level of the person.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"diabetes_prediction\", \"description\": \"Predict the likelihood of diabetes type 2 based on a person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in lbs.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in inches.\"}, \"activity_level\": {\"type\": \"string\", \"enum\": [\"sedentary\", \"lightly active\", \"moderately active\", \"very active\", \"extra active\"], \"description\": \"Physical activity level of the person.\"}}, \"required\": [\"weight\", \"height\", \"activity_level\"]}}"}
{"scope": "multiple_function", "query": "Find the latest update or patch for the game 'Cyberpunk 2077' on Xbox platform.", "query_for_retrieval": "Find the latest update or patch for the game 'Cyberpunk 2077' on Xbox platform.", "answer": "games.reviews.find", "answer_params": "", "api_description": "def games.reviews.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind reviews for a specific game.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the game.\n\t- region : string = None (optional) The region where the reviews are coming from (optional, default is 'global')\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"games.reviews.find\", \"description\": \"Find reviews for a specific game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region where the reviews are coming from (optional, default is 'global')\"}}, \"required\": [\"game\"]}}"}
{"scope": "relevance", "query": "What is the best way to boil an egg?", "query_for_retrieval": "What is the best way to boil an egg?", "answer": "get_cooking_time", "answer_params": "", "api_description": "def get_cooking_time:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the optimal boiling time for a recipe ingredient based on its type and size.\n\t\n\tArguments:\n\t---------\n\t- ingredient_type : string = None (required) The type of ingredient to be cooked.\n\t- ingredient_size : string = None (required) The size of the ingredient.\n\t- cooking_method : string = boiling (optional) The method of cooking to be used.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_cooking_time\", \"description\": \"Calculate the optimal boiling time for a recipe ingredient based on its type and size.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredient_type\": {\"type\": \"string\", \"description\": \"The type of ingredient to be cooked.\"}, \"ingredient_size\": {\"type\": \"string\", \"description\": \"The size of the ingredient.\"}, \"cooking_method\": {\"type\": \"string\", \"description\": \"The method of cooking to be used.\", \"enum\": [\"boiling\", \"steaming\", \"roasting\", \"grilling\"], \"default\": \"boiling\"}}, \"required\": [\"ingredient_type\", \"ingredient_size\"]}}"}
{"scope": "relevance", "query": "What are the top five flower species for pollination in South America?", "query_for_retrieval": "What are the top five flower species for pollination in South America?", "answer": "plot_elevation", "answer_params": "", "api_description": "def plot_elevation:\n\t\"\"\"\n\tDescription:\n\t\n\tPlots the elevation profile along a route.\n\t\n\tArguments:\n\t---------\n\t- start_point : string = None (required) The start point of the route.\n\t- end_point : string = None (required) The end point of the route.\n\t- resolution : string = None (optional) The resolution of the elevation data, 'High', 'Medium', or 'Low'. Default is 'Medium'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plot_elevation\", \"description\": \"Plots the elevation profile along a route.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_point\": {\"type\": \"string\", \"description\": \"The start point of the route.\"}, \"end_point\": {\"type\": \"string\", \"description\": \"The end point of the route.\"}, \"resolution\": {\"type\": \"string\", \"description\": \"The resolution of the elevation data, 'High', 'Medium', or 'Low'. Default is 'Medium'.\"}}, \"required\": [\"start_point\", \"end_point\"]}}"}
{"scope": "executable_parallel_function", "query": "I've been keeping track of a few different statistics and I need to calculate some averages to analyze the trends. First, there's a basketball player who has scored 35, 40, 45, 50, and 55 points in his last five games. I'm curious about his average performance. Next, I've recorded the temperatures over the past week: 72, 75, 78, 80, 82, and 85 degrees Fahrenheit. I need the average weekly temperature. Lastly, I've noticed the price of a dozen eggs fluctuating this month. The prices were $1.50, $1.55, $1.60, $1.65, and $1.70. Could you calculate the mean price for me?", "query_for_retrieval": "I've been keeping track of a few different statistics and I need to calculate some averages to analyze the trends. First, there's a basketball player who has scored 35, 40, 45, 50, and 55 points in his last five games. I'm curious about his average performance. Next, I've recorded the temperatures over the past week: 72, 75, 78, 80, 82, and 85 degrees Fahrenheit. I need the average weekly temperature. Lastly, I've noticed the price of a dozen eggs fluctuating this month. The prices were $1.50, $1.55, $1.60, $1.65, and $1.70. Could you calculate the mean price for me?", "answer": "calculate_mean", "answer_params": "", "api_description": "def calculate_mean:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the mean of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mean\", \"description\": \"Calculates the mean of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm currently tracking several stocks and I need to update my records with their latest prices. Could you provide me with the current trading prices for 'GOOG', 'META', 'NFLX', and 'BABA'? These are the stock names for Google, Meta Platforms, Netflix, and Alibaba Group Holding Limited, respectively.", "query_for_retrieval": "I'm currently tracking several stocks and I need to update my records with their latest prices. Could you provide me with the current trading prices for 'GOOG', 'META', 'NFLX', and 'BABA'? These are the stock names for Google, Meta Platforms, Netflix, and Alibaba Group Holding Limited, respectively.", "answer": "get_stock_price_by_stock_name", "answer_params": "", "api_description": "def get_stock_price_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price_by_stock_name\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "multiple_function", "query": "Can you calculate the displacement of a car moving at an initial speed of 20 m/s and then accelerates at 10 m/s^2 for 5 seconds? (assuming a straight line motion)", "query_for_retrieval": "Can you calculate the displacement of a car moving at an initial speed of 20 m/s and then accelerates at 10 m/s^2 for 5 seconds? (assuming a straight line motion)", "answer": "kinematics.calculate_displacement", "answer_params": "", "api_description": "def kinematics.calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.\n\t\n\tArguments:\n\t---------\n\t- initial_speed : integer = None (required) The initial speed of the moving object in m/s.\n\t- acceleration : integer = None (required) The rate of change of speed, m/s^2.\n\t- time : integer = None (required) The time interval during which the acceleration is applied, in seconds.\n\t- rounding : integer = 2 (optional) The number of decimals to round off the result (optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.calculate_displacement\", \"description\": \"Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"integer\", \"description\": \"The initial speed of the moving object in m/s.\"}, \"acceleration\": {\"type\": \"integer\", \"description\": \"The rate of change of speed, m/s^2.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time interval during which the acceleration is applied, in seconds.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"The number of decimals to round off the result (optional).\", \"default\": 2}}, \"required\": [\"initial_speed\", \"acceleration\", \"time\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm overseeing a new project where we're monitoring competitor pricing on Amazon to stay competitive. There's this particular product we've been keeping an eye on, and I need the latest price for it. The ASIN for the product is 'B08PPDJWC8'. Could you fetch the current price for this ASIN from Amazon for me?", "query_for_retrieval": "I'm overseeing a new project where we're monitoring competitor pricing on Amazon to stay competitive. There's this particular product we've been keeping an eye on, and I need the latest price for it. The ASIN for the product is 'B08PPDJWC8'. Could you fetch the current price for this ASIN from Amazon for me?", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "simple", "query": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.", "query_for_retrieval": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.", "answer": "math.hypot", "answer_params": "", "api_description": "def math.hypot:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n\t\n\tArguments:\n\t---------\n\t- x : integer = None (required) The x-coordinate value.\n\t- y : integer = None (required) The y-coordinate value.\n\t- z : integer = None (optional) Optional. The z-coordinate value. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.hypot\", \"description\": \"Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"integer\", \"description\": \"The x-coordinate value.\"}, \"y\": {\"type\": \"integer\", \"description\": \"The y-coordinate value.\"}, \"z\": {\"type\": \"integer\", \"description\": \"Optional. The z-coordinate value. Default is 0.\"}}, \"required\": [\"x\", \"y\"]}}"}
{"scope": "simple", "query": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "query_for_retrieval": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "answer": "send_email", "answer_params": "", "api_description": "def send_email:\n\t\"\"\"\n\tDescription:\n\t\n\tSend an email to the specified email address.\n\t\n\tArguments:\n\t---------\n\t- to : string = None (required) The email address to send to.\n\t- subject : string = None (required) The subject of the email.\n\t- body : string = None (required) The body content of the email.\n\t- cc : string = None (optional) The email address to carbon copy. Default is empty if not specified.\n\t- bcc : string = None (optional) The email address to blind carbon copy. Default is empty if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"send_email\", \"description\": \"Send an email to the specified email address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"to\": {\"type\": \"string\", \"description\": \"The email address to send to.\"}, \"subject\": {\"type\": \"string\", \"description\": \"The subject of the email.\"}, \"body\": {\"type\": \"string\", \"description\": \"The body content of the email.\"}, \"cc\": {\"type\": \"string\", \"description\": \"The email address to carbon copy. Default is empty if not specified.\"}, \"bcc\": {\"type\": \"string\", \"description\": \"The email address to blind carbon copy. Default is empty if not specified.\"}}, \"required\": [\"to\", \"subject\", \"body\"]}}"}
{"scope": "rest", "query": "I need to convert the address '5331 Rexford Court, Montgomery AL 36116' to coordinates for a mapping project I'm working on. Can you fetch the latitude and longitude using the Geocoding API? My API key is 'YOUR-GEOCODE-API-KEY'. I would prefer the response in 'geojson' format.", "query_for_retrieval": "I need to convert the address '5331 Rexford Court, Montgomery AL 36116' to coordinates for a mapping project I'm working on. Can you fetch the latitude and longitude using the Geocoding API? My API key is 'YOUR-GEOCODE-API-KEY'. I would prefer the response in 'geojson' format.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/search (required) Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - q : string = None (required) user query string to a particular address\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\", \"default\": \"https://geocode.maps.co/search\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"q\": {\"type\": \"string\", \"description\": \"user query string to a particular address\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"q\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department.", "query_for_retrieval": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department.", "answer": "hospital.locate", "answer_params": "", "api_description": "def hospital.locate:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby hospitals based on location and radius. Options to include specific departments are available.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Denver, CO\n\t- radius : integer = None (required) The radius within which you want to find the hospital in kms.\n\t- department : string = None (optional) Specific department within the hospital. Default is 'General Medicine'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hospital.locate\", \"description\": \"Locate nearby hospitals based on location and radius. Options to include specific departments are available.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Denver, CO\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The radius within which you want to find the hospital in kms.\"}, \"department\": {\"type\": \"string\", \"description\": \"Specific department within the hospital. Default is 'General Medicine'.\", \"enum\": [\"General Medicine\", \"Emergency\", \"Pediatrics\", \"Cardiology\", \"Orthopedics\"]}}, \"required\": [\"location\", \"radius\"]}}"}
{"scope": "multiple_function", "query": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "query_for_retrieval": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "answer": "calculate_BMI", "answer_params": "", "api_description": "def calculate_BMI:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) given a person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight_kg : integer = None (required) The weight of the person in kilograms.\n\t- height_m : float = None (required) The height of the person in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_BMI\", \"description\": \"Calculate the Body Mass Index (BMI) given a person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight_kg\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height_m\": {\"type\": \"float\", \"description\": \"The height of the person in meters.\"}}, \"required\": [\"weight_kg\", \"height_m\"]}}"}
{"scope": "simple", "query": "Can you give me the height and width of Empire State building in feet?", "query_for_retrieval": "Can you give me the height and width of Empire State building in feet?", "answer": "building.get_dimensions", "answer_params": "", "api_description": "def building.get_dimensions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dimensions of a specific building based on its name.\n\t\n\tArguments:\n\t---------\n\t- building_name : string = None (required) The name of the building.\n\t- unit : string = None (required) The unit in which you want the dimensions. Default is meter.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"building.get_dimensions\", \"description\": \"Retrieve the dimensions of a specific building based on its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_name\": {\"type\": \"string\", \"description\": \"The name of the building.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit in which you want the dimensions. Default is meter.\", \"enum\": [\"meter\", \"feet\"]}}, \"required\": [\"building_name\", \"unit\"]}}"}
{"scope": "javascript", "query": "What is the best way to extract the unique elements from an array and return them sorted in ascending order? For a list of numbers 3 1 2 1 4 3", "query_for_retrieval": "What is the best way to extract the unique elements from an array and return them sorted in ascending order? For a list of numbers 3 1 2 1 4 3", "answer": "getUniqueSorted", "answer_params": "", "api_description": "def getUniqueSorted:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function takes an array of elements and returns a new array of unique elements sorted in ascending order. It does not require any additional parameters for sorting.\n\t\n\tArguments:\n\t---------\n\t- array : array = None (required) The array from which to extract unique elements and sort them.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"getUniqueSorted\", \"description\": \"This function takes an array of elements and returns a new array of unique elements sorted in ascending order. It does not require any additional parameters for sorting.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"array\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The array from which to extract unique elements and sort them.\"}}, \"required\": [\"array\"]}}"}
{"scope": "java", "query": "How can I validate that the private, package-private, and public inner fields of a `RedefClass` instance `myRedefClass` all have the value 100, and log a complaint if they do not?", "query_for_retrieval": "How can I validate that the private, package-private, and public inner fields of a `RedefClass` instance `myRedefClass` all have the value 100, and log a complaint if they do not?", "answer": "checkInnerFields", "answer_params": "", "api_description": "def checkInnerFields:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks if the inner fields of the given RedefClass instance have the expected value. If not, it sets the test status to failed and logs a complaint.\n\t\n\tArguments:\n\t---------\n\t- redefCls : any = None (required) The instance of RedefClass to be checked.\n\t- expValue : integer = None (required) The expected value for the inner fields.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"checkInnerFields\", \"description\": \"Checks if the inner fields of the given RedefClass instance have the expected value. If not, it sets the test status to failed and logs a complaint.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"redefCls\": {\"type\": \"any\", \"description\": \"The instance of RedefClass to be checked.\"}, \"expValue\": {\"type\": \"integer\", \"description\": \"The expected value for the inner fields.\"}}, \"required\": [\"redefCls\", \"expValue\"]}}"}
{"scope": "simple", "query": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "query_for_retrieval": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "answer": "db_fetch_records", "answer_params": "", "api_description": "def db_fetch_records:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch records from a specified database table based on certain conditions.\n\t\n\tArguments:\n\t---------\n\t- database_name : string = None (required) The name of the database.\n\t- table_name : string = None (required) The name of the table from which records need to be fetched.\n\t- conditions : dict = None (required) The conditions based on which records are to be fetched.\n\t  - department : string = None (optional) The name of the department of students.\n\t  - school : string = None (optional) The name of the school students are enrolled in.\n\t- fetch_limit : integer = None (optional) Limits the number of records to be fetched. Default is 0, which means no limit.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"db_fetch_records\", \"description\": \"Fetch records from a specified database table based on certain conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"database_name\": {\"type\": \"string\", \"description\": \"The name of the database.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the table from which records need to be fetched.\"}, \"conditions\": {\"type\": \"dict\", \"properties\": {\"department\": {\"type\": \"string\", \"description\": \"The name of the department of students.\"}, \"school\": {\"type\": \"string\", \"description\": \"The name of the school students are enrolled in.\"}}, \"description\": \"The conditions based on which records are to be fetched.\"}, \"fetch_limit\": {\"type\": \"integer\", \"description\": \"Limits the number of records to be fetched. Default is 0, which means no limit.\"}}, \"required\": [\"database_name\", \"table_name\", \"conditions\"]}}"}
{"scope": "relevance", "query": "Calculate the area of a triangle given the base is 10 meters and height is 5 meters.", "query_for_retrieval": "Calculate the area of a triangle given the base is 10 meters and height is 5 meters.", "answer": "determine_body_mass_index", "answer_params": "", "api_description": "def determine_body_mass_index:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate body mass index given weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) Weight of the individual in kilograms.\n\t- height : float = None (required) Height of the individual in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"determine_body_mass_index\", \"description\": \"Calculate body mass index given weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"Weight of the individual in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"Height of the individual in meters.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "multiple_function", "query": "Solve a quadratic equation where a=2, b=6, and c=5", "query_for_retrieval": "Solve a quadratic equation where a=2, b=6, and c=5", "answer": "get_stock_info", "answer_params": "", "api_description": "def get_stock_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves information about a specific stock based on company's name.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- detail_level : string = None (required) Level of detail for stock information. Can be 'summary' or 'detailed'.\n\t- market : string = None (optional) The stock market of interest. Default is 'NASDAQ'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_info\", \"description\": \"Retrieves information about a specific stock based on company's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"detail_level\": {\"type\": \"string\", \"description\": \"Level of detail for stock information. Can be 'summary' or 'detailed'.\"}, \"market\": {\"type\": \"string\", \"description\": \"The stock market of interest. Default is 'NASDAQ'\"}}, \"required\": [\"company_name\", \"detail_level\"]}}"}
{"scope": "simple", "query": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days.", "query_for_retrieval": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days.", "answer": "detailed_weather_forecast", "answer_params": "", "api_description": "def detailed_weather_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the weather for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t- details : array = None (required) Specific weather details required in the forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"detailed_weather_forecast\", \"description\": \"Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the weather for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}, \"details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"high_low_temperature\", \"humidity\", \"precipitation\"]}, \"description\": \"Specific weather details required in the forecast.\"}}, \"required\": [\"location\", \"days\", \"details\"]}}"}
{"scope": "relevance", "query": "Who won the world series game?", "query_for_retrieval": "Who won the world series game?", "answer": "game_score.calculate", "answer_params": "", "api_description": "def game_score.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final game score based on the total points earned by each team.\n\t\n\tArguments:\n\t---------\n\t- team1_points : integer = None (required) The total points earned by team 1.\n\t- team2_points : integer = None (required) The total points earned by team 2.\n\t- game_rounds : integer = 3 (optional) The total game rounds. Defaults to 3 if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_score.calculate\", \"description\": \"Calculate the final game score based on the total points earned by each team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team1_points\": {\"type\": \"integer\", \"description\": \"The total points earned by team 1.\"}, \"team2_points\": {\"type\": \"integer\", \"description\": \"The total points earned by team 2.\"}, \"game_rounds\": {\"type\": \"integer\", \"default\": \"3\", \"description\": \"The total game rounds. Defaults to 3 if not provided.\"}}, \"required\": [\"team1_points\", \"team2_points\"]}}"}
{"scope": "rest", "query": "I am planning a hiking trip next weekend and I need to prepare for the weather conditions. Can you fetch me a 7-day forecast including temperature_2m_max, temperature_2m_min, 10 minute max wind speed, and sum of daily precipitation for the coordinates 35.6895 N, 139.6917 E? Please ensure the temperature is in Fahrenheit.", "query_for_retrieval": "I am planning a hiking trip next weekend and I need to prepare for the weather conditions. Can you fetch me a 7-day forecast including temperature_2m_max, temperature_2m_min, 10 minute max wind speed, and sum of daily precipitation for the coordinates 35.6895 N, 139.6917 E? Please ensure the temperature is in Fahrenheit.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "How many calories are in a tomato?", "query_for_retrieval": "How many calories are in a tomato?", "answer": "grocery_store.item_details", "answer_params": "", "api_description": "def grocery_store.item_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve detailed information about a specific grocery item.\n\t\n\tArguments:\n\t---------\n\t- item_name : string = None (required) The name of the grocery item.\n\t- store_location : string = None (required) The city or area where the grocery store is located.\n\t- details_level : string = simple (optional) Level of details required, 'simple' gives basic details, while 'detailed' provides comprehensive info about the item.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.item_details\", \"description\": \"Retrieve detailed information about a specific grocery item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item_name\": {\"type\": \"string\", \"description\": \"The name of the grocery item.\"}, \"store_location\": {\"type\": \"string\", \"description\": \"The city or area where the grocery store is located.\"}, \"details_level\": {\"type\": \"string\", \"enum\": [\"simple\", \"detailed\"], \"description\": \"Level of details required, 'simple' gives basic details, while 'detailed' provides comprehensive info about the item.\", \"default\": \"simple\"}}, \"required\": [\"item_name\", \"store_location\"]}}"}
{"scope": "javascript", "query": "When analyzing JSON data structures, how can I extract all key-value pairs that follow a specific key within a data analysis context object named 'dataAnalysisContext' that initially has a key of 'userId'?", "query_for_retrieval": "When analyzing JSON data structures, how can I extract all key-value pairs that follow a specific key within a data analysis context object named 'dataAnalysisContext' that initially has a key of 'userId'?", "answer": "getNextKeyValues", "answer_params": "", "api_description": "def getNextKeyValues:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function extracts all key-value pairs in a JSON object that follow a specified key until it encounters a new nested object or array. It is intended for use within a specific data analysis context that keeps track of the current position within the JSON structure.\n\t\n\tArguments:\n\t---------\n\t- ctx : any = None (required) The data analysis context object which contains the current position and functions to navigate through the JSON structure.\n\t- currentKey : String = None (required) The current key from which to start extracting the following key-value pairs.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"getNextKeyValues\", \"description\": \"This function extracts all key-value pairs in a JSON object that follow a specified key until it encounters a new nested object or array. It is intended for use within a specific data analysis context that keeps track of the current position within the JSON structure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ctx\": {\"type\": \"any\", \"description\": \"The data analysis context object which contains the current position and functions to navigate through the JSON structure.\"}, \"currentKey\": {\"type\": \"String\", \"description\": \"The current key from which to start extracting the following key-value pairs.\"}}, \"required\": [\"ctx\", \"currentKey\"]}}"}
{"scope": "rest", "query": "I'm currently building a financial dashboard and I need to display the latest exchange rates. My base currency is the Euro (EUR). Can you show me how to fetch the latest exchange rates from the Exchange Rate API using my personal API key 'YOUR-EXCHANGERATE-API-KEY'?", "query_for_retrieval": "I'm currently building a financial dashboard and I need to display the latest exchange rates. My base currency is the Euro (EUR). Can you show me how to fetch the latest exchange rates from the Exchange Rate API using my personal API key 'YOUR-EXCHANGERATE-API-KEY'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "query_for_retrieval": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "answer": "calculate_magnetic_field", "answer_params": "", "api_description": "def calculate_magnetic_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the magnetic field produced at the center of a circular loop carrying current.\n\t\n\tArguments:\n\t---------\n\t- current : integer = None (required) The current through the circular loop in Amperes.\n\t- radius : integer = None (required) The radius of the circular loop in meters.\n\t- permeability : float = None (optional) The magnetic permeability. Default is 12.57e10 (Vacuum Permeability).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_magnetic_field\", \"description\": \"Calculate the magnetic field produced at the center of a circular loop carrying current.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"integer\", \"description\": \"The current through the circular loop in Amperes.\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circular loop in meters.\"}, \"permeability\": {\"type\": \"float\", \"description\": \"The magnetic permeability. Default is 12.57e10 (Vacuum Permeability).\"}}, \"required\": [\"current\", \"radius\"]}}"}
{"scope": "simple", "query": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "query_for_retrieval": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "answer": "get_criminal_records", "answer_params": "", "api_description": "def get_criminal_records:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the criminal records of a specific person in a specific area during a certain time period.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the person.\n\t- location : string = None (required) The city and state, e.g. New York, NY\n\t- from_year : integer = None (required) The start year of the time frame.\n\t- to_year : integer = None (required) The end year of the time frame.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_criminal_records\", \"description\": \"Retrieve the criminal records of a specific person in a specific area during a certain time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the person.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY\"}, \"from_year\": {\"type\": \"integer\", \"description\": \"The start year of the time frame.\"}, \"to_year\": {\"type\": \"integer\", \"description\": \"The end year of the time frame.\"}}, \"required\": [\"name\", \"location\", \"from_year\", \"to_year\"]}}"}
{"scope": "parallel_function", "query": "What is the greatest common divisor (GCD) of the two pairs of numbers (45, 60) and (81, 27)?", "query_for_retrieval": "What is the greatest common divisor (GCD) of the two pairs of numbers (45, 60) and (81, 27)?", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the greatest common divisor of two numbers\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) The first number.\n\t- num2 : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Compute the greatest common divisor of two numbers\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"The first number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "parallel_multiple_function", "query": "Design a house with 3 bedrooms, 2 bathrooms and a garden. Also, design an office with 5 rooms and a large meeting room", "query_for_retrieval": "Design a house with 3 bedrooms, 2 bathrooms and a garden. Also, design an office with 5 rooms and a large meeting room", "answer": "office_designer.design", "answer_params": "", "api_description": "def office_designer.design:\n\t\"\"\"\n\tDescription:\n\t\n\tDesign an office space based on specific requirements\n\t\n\tArguments:\n\t---------\n\t- rooms : integer = None (required) Number of rooms in the office.\n\t- meeting_room : string = None (required) Size of the meeting room\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"office_designer.design\", \"description\": \"Design an office space based on specific requirements\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"rooms\": {\"type\": \"integer\", \"description\": \"Number of rooms in the office.\"}, \"meeting_room\": {\"type\": \"string\", \"enum\": [\"small\", \"medium\", \"large\"], \"description\": \"Size of the meeting room\"}}, \"required\": [\"rooms\", \"meeting_room\"]}}"}
{"scope": "simple", "query": "Convert 150 Euros to Canadian dollars.", "query_for_retrieval": "Convert 150 Euros to Canadian dollars.", "answer": "currency_conversion.convert", "answer_params": "", "api_description": "def currency_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one currency to another.\n\t\n\tArguments:\n\t---------\n\t- amount : integer = None (required) The amount to be converted.\n\t- from_currency : string = None (required) The currency to convert from.\n\t- to_currency : string = None (required) The currency to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_conversion.convert\", \"description\": \"Convert a value from one currency to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"integer\", \"description\": \"The amount to be converted.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "multiple_function", "query": "Translate Hello, how are you? from English to French.", "query_for_retrieval": "Translate Hello, how are you? from English to French.", "answer": "translate", "answer_params": "", "api_description": "def translate:\n\t\"\"\"\n\tDescription:\n\t\n\tTranslate text from a specified source language to a specified target language.\n\t\n\tArguments:\n\t---------\n\t- text : string = None (required) The text to be translated.\n\t- source_language : string = None (required) The language the text is currently in.\n\t- target_language : string = None (required) The language the text will be translated to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"translate\", \"description\": \"Translate text from a specified source language to a specified target language.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text to be translated.\"}, \"source_language\": {\"type\": \"string\", \"description\": \"The language the text is currently in.\"}, \"target_language\": {\"type\": \"string\", \"description\": \"The language the text will be translated to.\"}}, \"required\": [\"text\", \"source_language\", \"target_language\"]}}"}
{"scope": "relevance", "query": "What is the final price of a product after a 25% discount and 10% sales tax has been applied?", "query_for_retrieval": "What is the final price of a product after a 25% discount and 10% sales tax has been applied?", "answer": "calculateFinalPrice", "answer_params": "", "api_description": "def calculateFinalPrice:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final price of a product after a certain discount has been applied and then sales tax added. Price should be positive and the rates can range from 0-1\n\t\n\tArguments:\n\t---------\n\t- price : float = None (required) Original price of the product.\n\t- discount_rate : float = None (required) The discount rate in percentage, must be from 0 to 1.\n\t- sales_tax : float = None (required) The sales tax in percentage, must be from 0 to 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculateFinalPrice\", \"description\": \"Calculate the final price of a product after a certain discount has been applied and then sales tax added. Price should be positive and the rates can range from 0-1\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"price\": {\"type\": \"float\", \"description\": \"Original price of the product.\"}, \"discount_rate\": {\"type\": \"float\", \"description\": \"The discount rate in percentage, must be from 0 to 1.\"}, \"sales_tax\": {\"type\": \"float\", \"description\": \"The sales tax in percentage, must be from 0 to 1.\"}}, \"required\": [\"price\", \"discount_rate\", \"sales_tax\"]}}"}
{"scope": "multiple_function", "query": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "query_for_retrieval": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "answer": "get_collectables_in_season", "answer_params": "", "api_description": "def get_collectables_in_season:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a list of collectable items in a specific game during a specified season.\n\t\n\tArguments:\n\t---------\n\t- game_name : string = None (required) Name of the game.\n\t- season : string = None (required) The season for which to retrieve the collectable items.\n\t- item_type : string = None (optional) The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_collectables_in_season\", \"description\": \"Retrieve a list of collectable items in a specific game during a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_name\": {\"type\": \"string\", \"description\": \"Name of the game.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which to retrieve the collectable items.\"}, \"item_type\": {\"type\": \"string\", \"description\": \"The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\"}}, \"required\": [\"game_name\", \"season\"]}}"}
{"scope": "javascript", "query": "How can I check if two TypeScript declaration objects, one representing a parameter parameterObject and the other a variable declaration variableDeclarationObject, have identical declaration flags considering their optionality, privacy, protection level, asynchronicity, abstractness, readonly status, and static nature?", "query_for_retrieval": "How can I check if two TypeScript declaration objects, one representing a parameter parameterObject and the other a variable declaration variableDeclarationObject, have identical declaration flags considering their optionality, privacy, protection level, asynchronicity, abstractness, readonly status, and static nature?", "answer": "areDeclarationFlagsIdentical", "answer_params": "", "api_description": "def areDeclarationFlagsIdentical:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function compares two TypeScript declaration objects to determine if they have identical declaration flags, taking into account specific allowances for differences in optionality between parameters and variable declarations.\n\t\n\tArguments:\n\t---------\n\t- left : any = None (required) The first TypeScript declaration object to compare.\n\t- right : any = None (required) The second TypeScript declaration object to compare.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"areDeclarationFlagsIdentical\", \"description\": \"This function compares two TypeScript declaration objects to determine if they have identical declaration flags, taking into account specific allowances for differences in optionality between parameters and variable declarations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"left\": {\"type\": \"any\", \"description\": \"The first TypeScript declaration object to compare.\"}, \"right\": {\"type\": \"any\", \"description\": \"The second TypeScript declaration object to compare.\"}}, \"required\": [\"left\", \"right\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please analyze my personality based on the five-factor model and the Myers-Briggs Type Indicator (MBTI)? For the five-factor model, consider that I am quite talkative, I don't get nervous easily, I have many artistic interests, I am not lazy, and I am quite forgiving. For the MBTI, my preferences are more towards feeling than thinking, I am more extroverted than introverted, I lean more towards perceiving than judging, and I prefer intuition over sensing.\"", "query_for_retrieval": "\"Could you please analyze my personality based on the five-factor model and the Myers-Briggs Type Indicator (MBTI)? For the five-factor model, consider that I am quite talkative, I don't get nervous easily, I have many artistic interests, I am not lazy, and I am quite forgiving. For the MBTI, my preferences are more towards feeling than thinking, I am more extroverted than introverted, I lean more towards perceiving than judging, and I prefer intuition over sensing.\"", "answer": "MBTI.analyse", "answer_params": "", "api_description": "def MBTI.analyse:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.\n\t\n\tArguments:\n\t---------\n\t- thinking_vs_feeling : string = None (required) Preference of user between thinking and feeling.\n\t- introverted_vs_extroverted : string = None (required) Preference of user between introverted and extroverted.\n\t- judging_vs_perceiving : string = None (required) Preference of user between judging and perceiving.\n\t- sensing_vs_intuition : string = None (required) Preference of user between sensing and intuition.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"MBTI.analyse\", \"description\": \"Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"thinking_vs_feeling\": {\"type\": \"string\", \"description\": \"Preference of user between thinking and feeling.\"}, \"introverted_vs_extroverted\": {\"type\": \"string\", \"description\": \"Preference of user between introverted and extroverted.\"}, \"judging_vs_perceiving\": {\"type\": \"string\", \"description\": \"Preference of user between judging and perceiving.\"}, \"sensing_vs_intuition\": {\"type\": \"string\", \"description\": \"Preference of user between sensing and intuition.\"}}, \"required\": [\"thinking_vs_feeling\", \"introverted_vs_extroverted\", \"judging_vs_perceiving\", \"sensing_vs_intuition\"]}}"}
{"scope": "sql", "query": "In a database table named \"MathScores\", can you erase the records of students who scored less than 50 in their final exam? The columns involved in this operation are \"StudentID\", \"StudentName\", and \"FinalScore\".", "query_for_retrieval": "In a database table named \"MathScores\", can you erase the records of students who scored less than 50 in their final exam? The columns involved in this operation are \"StudentID\", \"StudentName\", and \"FinalScore\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "I need to fetch the latest currency exchange rates where my base currency is Euro (EUR), and I have an API key 'YOUR-EXCHANGERATE-API-KEY'. What would be the Python requests.get call for this operation?", "query_for_retrieval": "I need to fetch the latest currency exchange rates where my base currency is Euro (EUR), and I have an API key 'YOUR-EXCHANGERATE-API-KEY'. What would be the Python requests.get call for this operation?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale.", "query_for_retrieval": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale.", "answer": "find_flute", "answer_params": "", "api_description": "def find_flute:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a flute for sale based on specific requirements.\n\t\n\tArguments:\n\t---------\n\t- brand : string = None (required) The brand of the flute. Example, 'Yamaha'\n\t- specs : array = None (required) The specifications of the flute desired.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_flute\", \"description\": \"Locate a flute for sale based on specific requirements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"brand\": {\"type\": \"string\", \"description\": \"The brand of the flute. Example, 'Yamaha'\"}, \"specs\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"open hole\", \"C foot\", \"silver headjoint\"]}, \"description\": \"The specifications of the flute desired.\"}}, \"required\": [\"brand\", \"specs\"]}}"}
{"scope": "multiple_function", "query": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "query_for_retrieval": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "answer": "mix_paint_color", "answer_params": "", "api_description": "def mix_paint_color:\n\t\"\"\"\n\tDescription:\n\t\n\tCombine two primary paint colors and adjust the resulting color's lightness level.\n\t\n\tArguments:\n\t---------\n\t- color1 : string = None (required) The first primary color to be mixed.\n\t- color2 : string = None (required) The second primary color to be mixed.\n\t- lightness : integer = None (optional) The desired lightness level of the resulting color in percentage. The default level is set to 50%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mix_paint_color\", \"description\": \"Combine two primary paint colors and adjust the resulting color's lightness level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color1\": {\"type\": \"string\", \"description\": \"The first primary color to be mixed.\"}, \"color2\": {\"type\": \"string\", \"description\": \"The second primary color to be mixed.\"}, \"lightness\": {\"type\": \"integer\", \"description\": \"The desired lightness level of the resulting color in percentage. The default level is set to 50%.\"}}, \"required\": [\"color1\", \"color2\"]}}"}
{"scope": "simple", "query": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "query_for_retrieval": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "answer": "sentiment_analysis", "answer_params": "", "api_description": "def sentiment_analysis:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform sentiment analysis on a given piece of text.\n\t\n\tArguments:\n\t---------\n\t- text : string = None (required) The text on which to perform sentiment analysis.\n\t- language : string = None (required) The language in which the text is written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sentiment_analysis\", \"description\": \"Perform sentiment analysis on a given piece of text.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text on which to perform sentiment analysis.\"}, \"language\": {\"type\": \"string\", \"description\": \"The language in which the text is written.\"}}, \"required\": [\"text\", \"language\"]}}"}
{"scope": "rest", "query": "While updating a public health website with interactive maps showcasing COVID-19 statistics by country, I need to fetch the latest data for India using the API-Sports endpoint. My credentials include an API key 'YOUR-RAPID-API-KEY' and host 'covid-193.p.rapidapi.com'. How can I retrieve the data, and is there specific formatting I should apply to the request for optimal data representation?", "query_for_retrieval": "While updating a public health website with interactive maps showcasing COVID-19 statistics by country, I need to fetch the latest data for India using the API-Sports endpoint. My credentials include an API key 'YOUR-RAPID-API-KEY' and host 'covid-193.p.rapidapi.com'. How can I retrieve the data, and is there specific formatting I should apply to the request for optimal data representation?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "sql", "query": "Can you add a new entry to the 'GlobalEconomy' table, where the columns are 'Region', 'Trade_Deficit', 'Interest_Rate', and 'Population', with the respective values being 'Europe', '2.1 trillion', '0.5%', and '741.4 million'?", "query_for_retrieval": "Can you add a new entry to the 'GlobalEconomy' table, where the columns are 'Region', 'Trade_Deficit', 'Interest_Rate', and 'Population', with the respective values being 'Europe', '2.1 trillion', '0.5%', and '741.4 million'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Give me the MTBI of my friend.", "query_for_retrieval": "Give me the MTBI of my friend.", "answer": "personality_assessment.evaluate", "answer_params": "", "api_description": "def personality_assessment.evaluate:\n\t\"\"\"\n\tDescription:\n\t\n\tEvaluate and categorize a user's personality type based on a given array of personality trait percentages.\n\t\n\tArguments:\n\t---------\n\t- traits : array = None (required) No description available.\n\t- detailed_output : boolean = True (optional) Determines whether the output should include a detailed explanation of the personality type. This is optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"personality_assessment.evaluate\", \"description\": \"Evaluate and categorize a user's personality type based on a given array of personality trait percentages.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"traits\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"trait\": {\"type\": \"string\", \"description\": \"The personality trait being evaluated.\"}, \"percentage\": {\"type\": \"integer\", \"description\": \"The percentage representation of the trait in the user's personality.\"}}, \"required\": [\"trait\", \"percentage\"]}}, \"detailed_output\": {\"type\": \"boolean\", \"description\": \"Determines whether the output should include a detailed explanation of the personality type. This is optional.\", \"default\": \"True\"}}, \"required\": [\"traits\"]}}"}
{"scope": "executable_simple", "query": "For my computer science project, I need to generate the Fibonacci sequence. Specifically, the assignment requires the first 50 numbers. Could you calculate that for me?", "query_for_retrieval": "For my computer science project, I need to generate the Fibonacci sequence. Specifically, the assignment requires the first 50 numbers. Could you calculate that for me?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "rest", "query": "As I'm drafting a report on the impact of COVID-19 in UK, using dynamic data visualizations, I need to fetch the latest statistics using my RapidAPI credentials ('YOUR-RAPID-API-KEY' as the API key and 'covid-193.p.rapidapi.com' as the host). How can I ensure the request has a timeout of 10 seconds, and how do I ensure the response is efficiently handled without being streamed?", "query_for_retrieval": "As I'm drafting a report on the impact of COVID-19 in UK, using dynamic data visualizations, I need to fetch the latest statistics using my RapidAPI credentials ('YOUR-RAPID-API-KEY' as the API key and 'covid-193.p.rapidapi.com' as the host). How can I ensure the request has a timeout of 10 seconds, and how do I ensure the response is efficiently handled without being streamed?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "java", "query": "How can I create a query to find documents in an Elasticsearch index where the 'age' field values are within the range of 30 to 40, inclusive of 30 but exclusive of 40?", "query_for_retrieval": "How can I create a query to find documents in an Elasticsearch index where the 'age' field values are within the range of 30 to 40, inclusive of 30 but exclusive of 40?", "answer": "withinQuery", "answer_params": "", "api_description": "def withinQuery:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a query for a range field where the values are within the specified range, with options to include or exclude the lower and upper bounds.\n\t\n\tArguments:\n\t---------\n\t- field : String = None (required) The name of the field to query.\n\t- from : integer = None (required) The lower bound of the range query.\n\t- to : integer = None (required) The upper bound of the range query.\n\t- includeFrom : boolean = None (required) Whether to include the 'from' value in the range.\n\t- includeTo : boolean = None (required) Whether to include the 'to' value in the range.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"withinQuery\", \"description\": \"Creates a query for a range field where the values are within the specified range, with options to include or exclude the lower and upper bounds.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"field\": {\"type\": \"String\", \"description\": \"The name of the field to query.\"}, \"from\": {\"type\": \"integer\", \"description\": \"The lower bound of the range query.\"}, \"to\": {\"type\": \"integer\", \"description\": \"The upper bound of the range query.\"}, \"includeFrom\": {\"type\": \"boolean\", \"description\": \"Whether to include the 'from' value in the range.\"}, \"includeTo\": {\"type\": \"boolean\", \"description\": \"Whether to include the 'to' value in the range.\"}}, \"required\": [\"field\", \"from\", \"to\", \"includeFrom\", \"includeTo\"]}}"}
{"scope": "rest", "query": "I'm looking to get the latest tickers for Tesla stocks. Could you please make a GET request to the appropriate financial data API with my RapidAPI key 'YOUR-RAPID-API-KEY' and the host 'yahoo-finance15.p.rapidapi.com'? Also, include the search query 'Tesla'.", "query_for_retrieval": "I'm looking to get the latest tickers for Tesla stocks. Could you please make a GET request to the appropriate financial data API with my RapidAPI key 'YOUR-RAPID-API-KEY' and the host 'yahoo-finance15.p.rapidapi.com'? Also, include the search query 'Tesla'.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm planning to host a dinner party tonight and thought of serving some delicious dumplings and rice bowls. I need to order 101 dumplings at $0.1 each and 20 rice bowls at $10 per bowl. Can you calculate the total price for this order for me?", "query_for_retrieval": "I'm planning to host a dinner party tonight and thought of serving some delicious dumplings and rice bowls. I need to order 101 dumplings at $0.1 each and 20 rice bowls at $10 per bowl. Can you calculate the total price for this order for me?", "answer": "order_food", "answer_params": "", "api_description": "def order_food:\n\t\"\"\"\n\tDescription:\n\t\n\tOrders food for a customer. Return the total price.\n\t\n\tArguments:\n\t---------\n\t- item : array = None (required) the name of the product.\n\t- quantity : array = None (required) the number of the product purchased.\n\t- price : array = None (required) the price of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"order_food\", \"description\": \"Orders food for a customer. Return the total price.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"the name of the product.\"}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"the number of the product purchased.\"}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"the price of the product.\"}}, \"required\": [\"item\", \"quantity\", \"price\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find the operational hours for Louvre Museum and the waiting time, then tell me how long it will take to travel from my current location to the museum.", "query_for_retrieval": "Find the operational hours for Louvre Museum and the waiting time, then tell me how long it will take to travel from my current location to the museum.", "answer": "museum.get_hours", "answer_params": "", "api_description": "def museum.get_hours:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the operational hours of a specified museum.\n\t\n\tArguments:\n\t---------\n\t- museum_name : string = None (required) The name of the museum.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum.get_hours\", \"description\": \"Retrieve the operational hours of a specified museum.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}}, \"required\": [\"museum_name\"]}}"}
{"scope": "parallel_function", "query": "\"Could you please calculate the future value of my investments? I have invested $5000 in Apple Inc. (AAPL) and expect an annual return of 7% over the next 5 years. I have also invested $8000 in Microsoft Corporation (MSFT) with an expected annual return of 6% for the next 7 years. Lastly, I have invested $10000 in Amazon.com, Inc. (AMZN) expecting an annual return of 8% for the next 10 years.\"", "query_for_retrieval": "\"Could you please calculate the future value of my investments? I have invested $5000 in Apple Inc. (AAPL) and expect an annual return of 7% over the next 5 years. I have also invested $8000 in Microsoft Corporation (MSFT) with an expected annual return of 6% for the next 7 years. Lastly, I have invested $10000 in Amazon.com, Inc. (AMZN) expecting an annual return of 8% for the next 10 years.\"", "answer": "portfolio_future_value", "answer_params": "", "api_description": "def portfolio_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\n\t\n\tArguments:\n\t---------\n\t- stock : string = None (required) The ticker symbol of the stock.\n\t- invested_amount : integer = None (required) The invested amount in USD.\n\t- expected_annual_return : float = None (required) The expected annual return on investment as a decimal. E.g. 5% = 0.05\n\t- years : integer = None (required) The number of years for which the investment is made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"portfolio_future_value\", \"description\": \"Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock\": {\"type\": \"string\", \"description\": \"The ticker symbol of the stock.\"}, \"invested_amount\": {\"type\": \"integer\", \"description\": \"The invested amount in USD.\"}, \"expected_annual_return\": {\"type\": \"float\", \"description\": \"The expected annual return on investment as a decimal. E.g. 5% = 0.05\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for which the investment is made.\"}}, \"required\": [\"stock\", \"invested_amount\", \"expected_annual_return\", \"years\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"John is a lawyer who is working on a case with docket number '12345' in the 'Supreme Court'. He needs to retrieve the details of the 'accused' from this case. After his work, he plans to help his son with his homework. His son is learning about triangles and he needs to calculate the area of a triangle with a base of 10 units and a height of 5 units. The unit of measure is 'square meters'. Later, John has to go back to his work and retrieve the 'verdict' details of another case with docket number '67890' in the 'High Court'. Can you assist John with these tasks?\"", "query_for_retrieval": "\"John is a lawyer who is working on a case with docket number '12345' in the 'Supreme Court'. He needs to retrieve the details of the 'accused' from this case. After his work, he plans to help his son with his homework. His son is learning about triangles and he needs to calculate the area of a triangle with a base of 10 units and a height of 5 units. The unit of measure is 'square meters'. Later, John has to go back to his work and retrieve the 'verdict' details of another case with docket number '67890' in the 'High Court'. Can you assist John with these tasks?\"", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle given its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base of the triangle.\n\t- height : integer = None (required) The height of the triangle.\n\t- unit : string = None (optional) The unit of measure (defaults to 'units' if not specified)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculate the area of a triangle given its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measure (defaults to 'units' if not specified)\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a physics experiment where we're tracking the movement of a special object. It starts off at 15 m/s, and we're accelerating it at a rate of 9.8 m/s\u00b2. I need to calculate how far it will have traveled after 10 seconds. Can you crunch those numbers for me?", "query_for_retrieval": "I'm working on a physics experiment where we're tracking the movement of a special object. It starts off at 15 m/s, and we're accelerating it at a rate of 9.8 m/s\u00b2. I need to calculate how far it will have traveled after 10 seconds. Can you crunch those numbers for me?", "answer": "retrieve_holiday_by_year", "answer_params": "", "api_description": "def retrieve_holiday_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the holidays of a year.\n\t\n\tArguments:\n\t---------\n\t- year : string = None (required) The year of the holidays.\n\t- country : string = None (required) The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_holiday_by_year\", \"description\": \"Finds the holidays of a year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"string\", \"description\": \"The year of the holidays.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\"}}, \"required\": [\"year\", \"country\"]}}"}
{"scope": "parallel_function", "query": "What is the coefficient of determination (R squared) of a regression model if we use the dataset located at \"/user/home/datasets/finance.csv\", with 'income', 'age' and 'education' as the independent variables and 'credit_score' as the dependent variable, and then repeat the same process with 'income', 'age' and 'credit_score' as the independent variables and 'education' as the dependent variable?", "query_for_retrieval": "What is the coefficient of determination (R squared) of a regression model if we use the dataset located at \"/user/home/datasets/finance.csv\", with 'income', 'age' and 'education' as the independent variables and 'credit_score' as the dependent variable, and then repeat the same process with 'income', 'age' and 'credit_score' as the independent variables and 'education' as the dependent variable?", "answer": "linear_regression.get_r_squared", "answer_params": "", "api_description": "def linear_regression.get_r_squared:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the coefficient of determination of a regression model.\n\t\n\tArguments:\n\t---------\n\t- dataset_path : string = None (required) Path to the CSV dataset file.\n\t- independent_variables : array = None (required) The independent variables to use in the regression model.\n\t- dependent_variable : string = None (required) The dependent variable to predict in the regression model.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression.get_r_squared\", \"description\": \"Calculate the coefficient of determination of a regression model.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset_path\": {\"type\": \"string\", \"description\": \"Path to the CSV dataset file.\"}, \"independent_variables\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The independent variables to use in the regression model.\"}, \"dependent_variable\": {\"type\": \"string\", \"description\": \"The dependent variable to predict in the regression model.\"}}, \"required\": [\"dataset_path\", \"independent_variables\", \"dependent_variable\"]}}"}
{"scope": "multiple_function", "query": "Find a local guitar shop that also offers violin lessons in Nashville.", "query_for_retrieval": "Find a local guitar shop that also offers violin lessons in Nashville.", "answer": "music_shop.find_nearby", "answer_params": "", "api_description": "def music_shop.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby music shops based on specific criteria like instrument lessons availability.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Nashville, TN\n\t- services : array = None (optional) Types of instrument lessons offered in the shop. Default empty array\n\t- instruments : array = None (optional) Types of instruments sold in the shop. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_shop.find_nearby\", \"description\": \"Locate nearby music shops based on specific criteria like instrument lessons availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Nashville, TN\"}, \"services\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Guitar Lessons\", \"Violin Lessons\", \"Piano Lessons\", \"Ukulele Lessons\"]}, \"description\": \"Types of instrument lessons offered in the shop. Default empty array\"}, \"instruments\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Guitars\", \"Violins\", \"Pianos\", \"Drums\"]}, \"description\": \"Types of instruments sold in the shop. Default empty array\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Find the air quality index in San Diego at 12pm.", "query_for_retrieval": "Find the air quality index in San Diego at 12pm.", "answer": "get_air_quality_index", "answer_params": "", "api_description": "def get_air_quality_index:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the air quality index at a specified location and time.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location to get the air quality index for.\n\t- time : string = None (required) The specific time to check the air quality. Default is the current time.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_air_quality_index\", \"description\": \"Retrieve the air quality index at a specified location and time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location to get the air quality index for.\"}, \"time\": {\"type\": \"string\", \"description\": \"The specific time to check the air quality. Default is the current time.\"}}, \"required\": [\"location\", \"time\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the current time in Beijing and Tokyo and what's the time difference between two cities?", "query_for_retrieval": "What is the current time in Beijing and Tokyo and what's the time difference between two cities?", "answer": "time_zones.get_current_time", "answer_params": "", "api_description": "def time_zones.get_current_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve current time for the specified location\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the current time for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"time_zones.get_current_time\", \"description\": \"Retrieve current time for the specified location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the current time for.\"}}, \"required\": [\"location\"]}}"}
{"scope": "rest", "query": "I'm interested in finding the latest tickers for Tesla stocks. Could you fetch that for me from the finance market API if I provide you with my RapidAPI key 'YOUR-RAPID-API-KEY' and the host 'yahoo-finance15.p.rapidapi.com'?", "query_for_retrieval": "I'm interested in finding the latest tickers for Tesla stocks. Could you fetch that for me from the finance market API if I provide you with my RapidAPI key 'YOUR-RAPID-API-KEY' and the host 'yahoo-finance15.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "Tell me a famous quote about life.", "query_for_retrieval": "Tell me a famous quote about life.", "answer": "sentiment_analysis", "answer_params": "", "api_description": "def sentiment_analysis:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform sentiment analysis on a given text.\n\t\n\tArguments:\n\t---------\n\t- text : string = None (required) The text to be analyzed.\n\t- model : string = None (required) The model to be used for sentiment analysis.\n\t- language : string = None (optional) The language of the text. Default is English.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sentiment_analysis\", \"description\": \"Perform sentiment analysis on a given text.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text to be analyzed.\"}, \"model\": {\"type\": \"string\", \"description\": \"The model to be used for sentiment analysis.\"}, \"language\": {\"type\": \"string\", \"description\": \"The language of the text. Default is English.\"}}, \"required\": [\"text\", \"model\"]}}"}
{"scope": "sql", "query": "Can you create a new table named 'Investments' in the database, with the columns 'InvestorName', 'InvestmentType', 'InvestmentAmount', and 'InvestmentDate'?", "query_for_retrieval": "Can you create a new table named 'Investments' in the database, with the columns 'InvestorName', 'InvestmentType', 'InvestmentAmount', and 'InvestmentDate'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "query_for_retrieval": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "answer": "calculate_entropy_change", "answer_params": "", "api_description": "def calculate_entropy_change:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the entropy change for an isothermal and reversible process.\n\t\n\tArguments:\n\t---------\n\t- initial_temp : integer = None (required) The initial temperature in Kelvin.\n\t- final_temp : integer = None (required) The final temperature in Kelvin.\n\t- heat_capacity : integer = None (required) The heat capacity in J/K.\n\t- isothermal : boolean = None (optional) Whether the process is isothermal. Default is True.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_entropy_change\", \"description\": \"Calculate the entropy change for an isothermal and reversible process.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_temp\": {\"type\": \"integer\", \"description\": \"The initial temperature in Kelvin.\"}, \"final_temp\": {\"type\": \"integer\", \"description\": \"The final temperature in Kelvin.\"}, \"heat_capacity\": {\"type\": \"integer\", \"description\": \"The heat capacity in J/K.\"}, \"isothermal\": {\"type\": \"boolean\", \"description\": \"Whether the process is isothermal. Default is True.\"}}, \"required\": [\"initial_temp\", \"final_temp\", \"heat_capacity\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm planning a series of business trips to various international cities and need to prepare for the weather conditions I'll encounter. First, I'll be heading to Los Angeles, so could you provide me with the current weather there? The coordinates are 34.0522 latitude and -118.2437 longitude. Once I have that, I'd also like to know the weather in London at 51.5074 latitude and -0.1278 longitude, followed by Cape Town at -33.9249 latitude and 18.4241 longitude, and finally, Paris at 48.8566 latitude and 2.3522 longitude.", "query_for_retrieval": "I'm planning a series of business trips to various international cities and need to prepare for the weather conditions I'll encounter. First, I'll be heading to Los Angeles, so could you provide me with the current weather there? The coordinates are 34.0522 latitude and -118.2437 longitude. Once I have that, I'd also like to know the weather in London at 51.5074 latitude and -0.1278 longitude, followed by Cape Town at -33.9249 latitude and 18.4241 longitude, and finally, Paris at 48.8566 latitude and 2.3522 longitude.", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "executable_simple", "query": "I'm working on the design for a client's circular garden and I need to figure out how much sod to order. The garden's radius is 20 feet. Can you calculate the area for me?", "query_for_retrieval": "I'm working on the design for a client's circular garden and I need to figure out how much sod to order. The garden's radius is 20 feet. Can you calculate the area for me?", "answer": "geometry_area_circle", "answer_params": "", "api_description": "def geometry_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a circle.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle, in feet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry_area_circle\", \"description\": \"Calculates the area of a circle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle, in feet.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm trying to understand my chances in a game where I have a 30% chance of winning each round. Can you calculate the probability of winning exactly 3 out of 10 rounds? Also, I'm curious about the odds of winning 5 out of 15 rounds, and 7 out of 20 rounds.", "query_for_retrieval": "I'm trying to understand my chances in a game where I have a 30% chance of winning each round. Can you calculate the probability of winning exactly 3 out of 10 rounds? Also, I'm curious about the odds of winning 5 out of 15 rounds, and 7 out of 20 rounds.", "answer": "calc_binomial_probability", "answer_params": "", "api_description": "def calc_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of getting k successes in n trials.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of trials.\n\t- k : integer = None (required) The number of successes.\n\t- p : float = None (required) The probability of success.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_probability\", \"description\": \"Calculates the probability of getting k successes in n trials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of trials.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of successes.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success.\"}}, \"required\": [\"n\", \"k\", \"p\"]}}"}
{"scope": "java", "query": "How can I resolve a tablespace reference named 'USERSPACE1' in a DB2 database using a data source object `db2DataSource` and a progress monitor `dbMonitor`?", "query_for_retrieval": "How can I resolve a tablespace reference named 'USERSPACE1' in a DB2 database using a data source object `db2DataSource` and a progress monitor `dbMonitor`?", "answer": "DB2Tablespace.resolveTablespaceReference", "answer_params": "", "api_description": "def DB2Tablespace.resolveTablespaceReference:\n\t\"\"\"\n\tDescription:\n\t\n\tResolves a tablespace reference, which can be a name or a direct reference, to a DB2Tablespace object using the provided data source.\n\t\n\tArguments:\n\t---------\n\t- monitor : any = None (required) The progress monitor to track the operation progress.\n\t- dataSource : any = None (required) The DB2DataSource object used to access the database.\n\t- reference : any = None (required) The tablespace reference, which can be a name (String) or a direct DB2Tablespace reference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DB2Tablespace.resolveTablespaceReference\", \"description\": \"Resolves a tablespace reference, which can be a name or a direct reference, to a DB2Tablespace object using the provided data source.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"monitor\": {\"type\": \"any\", \"description\": \"The progress monitor to track the operation progress.\"}, \"dataSource\": {\"type\": \"any\", \"description\": \"The DB2DataSource object used to access the database.\"}, \"reference\": {\"type\": \"any\", \"description\": \"The tablespace reference, which can be a name (String) or a direct DB2Tablespace reference.\"}}, \"required\": [\"monitor\", \"dataSource\", \"reference\"]}}"}
{"scope": "simple", "query": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?", "query_for_retrieval": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?", "answer": "get_neuron_coordinates", "answer_params": "", "api_description": "def get_neuron_coordinates:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the coordinates of the specified neuron in the rat's brain.\n\t\n\tArguments:\n\t---------\n\t- neuron_type : string = None (required) Type of neuron to find. For instance, GABA, Glutamate, etc.\n\t- brain_region : string = All (required) The region of the brain to consider.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_neuron_coordinates\", \"description\": \"Retrieve the coordinates of the specified neuron in the rat's brain.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"neuron_type\": {\"type\": \"string\", \"description\": \"Type of neuron to find. For instance, GABA, Glutamate, etc.\"}, \"brain_region\": {\"type\": \"string\", \"description\": \"The region of the brain to consider.\", \"default\": \"All\"}}, \"required\": [\"neuron_type\", \"brain_region\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few calculations? First, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Second, I have a quadratic equation that I'm struggling with, it's 2x\u00b2 - 3x + 1 = 0, could you find the roots for me? Lastly, I made an investment 5 years ago. The initial value was $5000 and now it's worth $8000. Could you calculate the Compound Annual Growth Rate (CAGR) for me?\"", "query_for_retrieval": "\"Can you help me with a few calculations? First, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Second, I have a quadratic equation that I'm struggling with, it's 2x\u00b2 - 3x + 1 = 0, could you find the roots for me? Lastly, I made an investment 5 years ago. The initial value was $5000 and now it's worth $8000. Could you calculate the Compound Annual Growth Rate (CAGR) for me?\"", "answer": "calculate_cagr", "answer_params": "", "api_description": "def calculate_cagr:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n\t\n\tArguments:\n\t---------\n\t- initial_value : integer = None (required) The initial investment value.\n\t- final_value : integer = None (required) The final investment value.\n\t- period_in_years : integer = None (required) The period of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cagr\", \"description\": \"Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_value\": {\"type\": \"integer\", \"description\": \"The initial investment value.\"}, \"final_value\": {\"type\": \"integer\", \"description\": \"The final investment value.\"}, \"period_in_years\": {\"type\": \"integer\", \"description\": \"The period of the investment in years.\"}}, \"required\": [\"initial_value\", \"final_value\", \"period_in_years\"]}}"}
{"scope": "executable_simple", "query": "While working on my physics assignment, I've been examining the motion of a particle on a linear trajectory. The equation f(x) = 3t^2 + 2t + 1 represents the particle's position over time. To grasp the particle's behavior better, I need to figure out its velocity at precisely 5 seconds. Could you help me calculate the derivative of the position function to find the velocity at that moment?", "query_for_retrieval": "While working on my physics assignment, I've been examining the motion of a particle on a linear trajectory. The equation f(x) = 3t^2 + 2t + 1 represents the particle's position over time. To grasp the particle's behavior better, I need to figure out its velocity at precisely 5 seconds. Could you help me calculate the derivative of the position function to find the velocity at that moment?", "answer": "estimate_derivative", "answer_params": "", "api_description": "def estimate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the derivative of a function at a given point.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of. This should be in the format of python lambda function.\n\t- x : integer = None (required) The point to calculate the derivative at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_derivative\", \"description\": \"Estimate the derivative of a function at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of. This should be in the format of python lambda function.\"}, \"x\": {\"type\": \"integer\", \"description\": \"The point to calculate the derivative at.\"}}, \"required\": [\"function\", \"x\"]}}"}
{"scope": "parallel_multiple_function", "query": "Can you find information on Michael Jordan's highest scoring game and the total championships he won?", "query_for_retrieval": "Can you find information on Michael Jordan's highest scoring game and the total championships he won?", "answer": "get_team_info", "answer_params": "", "api_description": "def get_team_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information for a specific team, such as championships won.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- info : string = None (required) The information sought. E.g., 'championships_won'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_team_info\", \"description\": \"Retrieve information for a specific team, such as championships won.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"info\": {\"type\": \"string\", \"description\": \"The information sought. E.g., 'championships_won'.\"}}, \"required\": [\"team\", \"info\"]}}"}
{"scope": "relevance", "query": "Compute the derivative of the function '2x' within the at 1.", "query_for_retrieval": "Compute the derivative of the function '2x' within the at 1.", "answer": "calculus.compute_definite_integral", "answer_params": "", "api_description": "def calculus.compute_definite_integral:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the definite integral of a function within a given interval.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to be integrated.\n\t- interval : array = None (required) The interval within which the definite integral needs to be computed.\n\t- num_of_partitions : integer = None (optional) The number of partitions for approximation. Default is 1000.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculus.compute_definite_integral\", \"description\": \"Compute the definite integral of a function within a given interval.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to be integrated.\"}, \"interval\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The interval within which the definite integral needs to be computed.\"}, \"num_of_partitions\": {\"type\": \"integer\", \"description\": \"The number of partitions for approximation. Default is 1000.\"}}, \"required\": [\"function\", \"interval\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find the area of a rectangle with length 7 and breadth 3. Also, calculate the area of a circle with radius 5.", "query_for_retrieval": "Find the area of a rectangle with length 7 and breadth 3. Also, calculate the area of a circle with radius 5.", "answer": "volume_cylinder.calculate", "answer_params": "", "api_description": "def volume_cylinder.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the volume of a cylinder given the radius and the height.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) The radius of the cylinder.\n\t- height : float = None (required) The height of the cylinder.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"volume_cylinder.calculate\", \"description\": \"Calculate the volume of a cylinder given the radius and the height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"The radius of the cylinder.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the cylinder.\"}}, \"required\": [\"radius\", \"height\"]}}"}
{"scope": "java", "query": "How can I execute the step method to update the graphics of an intro animation with a width of 800 pixels and a height of 600 pixels?", "query_for_retrieval": "How can I execute the step method to update the graphics of an intro animation with a width of 800 pixels and a height of 600 pixels?", "answer": "Intro.step", "answer_params": "", "api_description": "def Intro.step:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdates the graphics of an intro animation based on the specified width and height.\n\t\n\tArguments:\n\t---------\n\t- w : integer = None (required) The width of the area to update.\n\t- h : integer = None (required) The height of the area to update.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Intro.step\", \"description\": \"Updates the graphics of an intro animation based on the specified width and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"w\": {\"type\": \"integer\", \"description\": \"The width of the area to update.\"}, \"h\": {\"type\": \"integer\", \"description\": \"The height of the area to update.\"}}, \"required\": [\"w\", \"h\"]}}"}
{"scope": "parallel_function", "query": "Search for a Chicken Noodle Soup recipe and a Vegan Salad recipe.", "query_for_retrieval": "Search for a Chicken Noodle Soup recipe and a Vegan Salad recipe.", "answer": "recipe_search.find", "answer_params": "", "api_description": "def recipe_search.find:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate recipes based on the type of dish.\n\t\n\tArguments:\n\t---------\n\t- dish : string = None (required) The name of the dish to search for.\n\t- diet : string = Keto (optional) Dietary preference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_search.find\", \"description\": \"Locate recipes based on the type of dish.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dish\": {\"type\": \"string\", \"description\": \"The name of the dish to search for.\"}, \"diet\": {\"type\": \"string\", \"enum\": [\"Vegan\", \"Vegetarian\", \"Paleo\", \"Keto\"], \"description\": \"Dietary preference.\", \"default\": \"Keto\"}}, \"required\": [\"dish\"]}}"}
{"scope": "executable_simple", "query": "I'm deep into this demographic analysis project and I've got a pile of zip codes to work through. Right now, I'm focused on 90210, and I need to match it with its city. Could you provide me with the city name for zip code 90210?", "query_for_retrieval": "I'm deep into this demographic analysis project and I've got a pile of zip codes to work through. Right now, I'm focused on 90210, and I need to match it with its city. Could you provide me with the city name for zip code 90210?", "answer": "retrieve_city_based_on_zipcode", "answer_params": "", "api_description": "def retrieve_city_based_on_zipcode:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the city of a zipcode.\n\t\n\tArguments:\n\t---------\n\t- zipcode : string = None (required) The zipcode of the city.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_city_based_on_zipcode\", \"description\": \"Finds the city of a zipcode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"zipcode\": {\"type\": \"string\", \"description\": \"The zipcode of the city.\"}}, \"required\": [\"zipcode\"]}}"}
{"scope": "sql", "query": "Can you establish a new database table called \"Inventory\" with the fields \"ProductID\", \"ProductName\", \"SupplierID\", \"CategoryID\", \"QuantityPerUnit\", and \"UnitPrice\"?", "query_for_retrieval": "Can you establish a new database table called \"Inventory\" with the fields \"ProductID\", \"ProductName\", \"SupplierID\", \"CategoryID\", \"QuantityPerUnit\", and \"UnitPrice\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "Can you help me get the geolocation data for a specific IP address using the IP-API service, but I only want to receive the Country City and Timezone information in French?", "query_for_retrieval": "Can you help me get the geolocation data for a specific IP address using the IP-API service, but I only want to receive the Country City and Timezone information in French?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me calculate the total area of three different triangles? The first triangle has a base of 15 meters and a height of 20 meters. The second triangle has a base of 25 feet and a height of 30 feet. And the third triangle has a base of 35 inches and a height of 40 inches. I would like the area of each triangle in their respective units.\"", "query_for_retrieval": "\"Can you help me calculate the total area of three different triangles? The first triangle has a base of 15 meters and a height of 20 meters. The second triangle has a base of 25 feet and a height of 30 feet. And the third triangle has a base of 35 inches and a height of 40 inches. I would like the area of each triangle in their respective units.\"", "answer": "geometry.area_triangle", "answer_params": "", "api_description": "def geometry.area_triangle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle.\n\t- height : integer = None (required) The height of the triangle from the base.\n\t- unit : string = None (optional) The measurement unit for the area. Defaults to square meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_triangle\", \"description\": \"Calculate the area of a triangle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle from the base.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The measurement unit for the area. Defaults to square meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "simple", "query": "What are the odds of drawing a heart card from a deck without joker?", "query_for_retrieval": "What are the odds of drawing a heart card from a deck without joker?", "answer": "deck_of_cards.odds", "answer_params": "", "api_description": "def deck_of_cards.odds:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the probability of drawing a specific suit from a given deck of cards.\n\t\n\tArguments:\n\t---------\n\t- suit : string = None (required) The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'.\n\t- deck_type : string = normal (required) Type of deck, normal deck includes joker, and without_joker deck excludes joker.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"deck_of_cards.odds\", \"description\": \"Compute the probability of drawing a specific suit from a given deck of cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"suit\": {\"type\": \"string\", \"description\": \"The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'.\"}, \"deck_type\": {\"type\": \"string\", \"description\": \"Type of deck, normal deck includes joker, and without_joker deck excludes joker.\", \"default\": \"normal\"}}, \"required\": [\"suit\", \"deck_type\"]}}"}
{"scope": "multiple_function", "query": "Calculate the average grade for student John who has these scores {'math':90, 'science':75, 'history':82, 'music':89} across different subjects.", "query_for_retrieval": "Calculate the average grade for student John who has these scores {'math':90, 'science':75, 'history':82, 'music':89} across different subjects.", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function calculates the standard deviation across different scores for a specific student.\n\t\n\tArguments:\n\t---------\n\t- gradeDict : dict = None (required) A dictionary where keys represent subjects and values represent scores\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"This function calculates the standard deviation across different scores for a specific student.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"gradeDict\": {\"type\": \"dict\", \"description\": \"A dictionary where keys represent subjects and values represent scores\"}}, \"required\": [\"gradeDict\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a financial analysis for a company, trying to understand the intricacies of their revenue growth. The revenue function over time can be described by a mathematical function, specifically f(x) = 4x^3 + 3x^2 + 2x + 1. My current task is to determine the rate at which the company's revenue is changing at the 7-year mark. Can you calculate the derivative of the revenue function for me?", "query_for_retrieval": "I'm working on a financial analysis for a company, trying to understand the intricacies of their revenue growth. The revenue function over time can be described by a mathematical function, specifically f(x) = 4x^3 + 3x^2 + 2x + 1. My current task is to determine the rate at which the company's revenue is changing at the 7-year mark. Can you calculate the derivative of the revenue function for me?", "answer": "estimate_derivative", "answer_params": "", "api_description": "def estimate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the derivative of a function at a given point.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.This should be in the format of python lambda function.\n\t- x : integer = None (required) The point to calculate the derivative at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_derivative\", \"description\": \"Estimate the derivative of a function at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.This should be in the format of python lambda function.\"}, \"x\": {\"type\": \"integer\", \"description\": \"The point to calculate the derivative at.\"}}, \"required\": [\"function\", \"x\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a data analysis project and need to model the relationship between two variables. I have a set of data points with x-coordinates as [1, 2, -3] and corresponding y-coordinates as [4, -5, 6]. I need to establish a linear regression model based on these points. Once the model is in place, I'd like to predict the y-value when x is 10. Can you do that for me?", "query_for_retrieval": "I'm working on a data analysis project and need to model the relationship between two variables. I have a set of data points with x-coordinates as [1, 2, -3] and corresponding y-coordinates as [4, -5, 6]. I need to establish a linear regression model based on these points. Once the model is in place, I'd like to predict the y-value when x is 10. Can you do that for me?", "answer": "linear_regression", "answer_params": "", "api_description": "def linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the linear regression of a set of points and evaluates it at a given point.\n\t\n\tArguments:\n\t---------\n\t- x : array = None (required) The x coordinates of the points.\n\t- y : array = None (required) The y coordinates of the points.\n\t- point : integer = None (required) The point to calculate the linear regression at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression\", \"description\": \"Finds the linear regression of a set of points and evaluates it at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The x coordinates of the points.\"}, \"y\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The y coordinates of the points.\"}, \"point\": {\"type\": \"integer\", \"description\": \"The point to calculate the linear regression at.\"}}, \"required\": [\"x\", \"y\", \"point\"]}}"}
{"scope": "multiple_function", "query": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "query_for_retrieval": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "answer": "get_crime_rate", "answer_params": "", "api_description": "def get_crime_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the official crime rate of a city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The name of the city.\n\t- state : string = None (required) The state where the city is located.\n\t- type : string = None (optional) Optional. The type of crime. Default ''\n\t- year : integer = None (optional) Optional. The year for the crime rate data. Defaults to 2024.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_crime_rate\", \"description\": \"Retrieve the official crime rate of a city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The name of the city.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state where the city is located.\"}, \"type\": {\"type\": \"string\", \"description\": \"Optional. The type of crime. Default ''\"}, \"year\": {\"type\": \"integer\", \"description\": \"Optional. The year for the crime rate data. Defaults to 2024.\"}}, \"required\": [\"city\", \"state\"]}}"}
{"scope": "multiple_function", "query": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "query_for_retrieval": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "answer": "create_player_profile", "answer_params": "", "api_description": "def create_player_profile:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a new player profile with character name, class and starting level.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The desired name of the player.\n\t- class : string = None (required) The character class for the player\n\t- starting_level : integer = 1 (optional) The starting level for the player\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_player_profile\", \"description\": \"Create a new player profile with character name, class and starting level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The desired name of the player.\"}, \"class\": {\"type\": \"string\", \"description\": \"The character class for the player\"}, \"starting_level\": {\"type\": \"integer\", \"description\": \"The starting level for the player\", \"default\": 1}}, \"required\": [\"player_name\", \"class\"]}}"}
{"scope": "sql", "query": "In a school database, there is a table named 'MathScores' with columns 'StudentID', 'Name', 'TestScore', 'TestDate'. You have just graded a math test for a student named 'Emily Watson' with ID 'EW123'. Emily scored '95' on the test which was conducted on '2022-03-01'. How would you record Emily's test score into the database?", "query_for_retrieval": "In a school database, there is a table named 'MathScores' with columns 'StudentID', 'Name', 'TestScore', 'TestDate'. You have just graded a math test for a student named 'Emily Watson' with ID 'EW123'. Emily scored '95' on the test which was conducted on '2022-03-01'. How would you record Emily's test score into the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? First, I need to convert 5000 Euros to US dollars. After that, I would like to know the population of turtles in Galapagos Islands in the year 2018, and also include the species information. Then, I need to plan a trip from New York to Los Angeles, but I want to avoid tolls and ferries. Finally, I need to convert 3000 British Pounds to Japanese Yen.\"", "query_for_retrieval": "\"Could you help me with a few tasks? First, I need to convert 5000 Euros to US dollars. After that, I would like to know the population of turtles in Galapagos Islands in the year 2018, and also include the species information. Then, I need to plan a trip from New York to Los Angeles, but I want to avoid tolls and ferries. Finally, I need to convert 3000 British Pounds to Japanese Yen.\"", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts an amount from a particular currency to another currency.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency in which the original amount is present.\n\t- target_currency : string = None (required) The currency to which you want to convert.\n\t- amount : integer = None (required) The amount you want to convert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts an amount from a particular currency to another currency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency in which the original amount is present.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to which you want to convert.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The amount you want to convert.\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "simple", "query": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm.", "query_for_retrieval": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm.", "answer": "music.calculate_note_duration", "answer_params": "", "api_description": "def music.calculate_note_duration:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the duration between two notes based on their frequencies and harmonic rhythm.\n\t\n\tArguments:\n\t---------\n\t- first_note_frequency : integer = None (required) The frequency of the first note in Hz.\n\t- second_note_frequency : integer = None (required) The frequency of the second note in Hz.\n\t- tempo : integer = None (optional) The tempo of the music in beats per minute. Defaults to 120 beats per minute.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music.calculate_note_duration\", \"description\": \"Calculate the duration between two notes based on their frequencies and harmonic rhythm.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"first_note_frequency\": {\"type\": \"integer\", \"description\": \"The frequency of the first note in Hz.\"}, \"second_note_frequency\": {\"type\": \"integer\", \"description\": \"The frequency of the second note in Hz.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"The tempo of the music in beats per minute. Defaults to 120 beats per minute.\"}}, \"required\": [\"first_note_frequency\", \"second_note_frequency\"]}}"}
{"scope": "simple", "query": "Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721.", "query_for_retrieval": "Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721.", "answer": "get_instrument_info", "answer_params": "", "api_description": "def get_instrument_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the instrument.\n\t- maker : string = None (required) The name of the maker who created the instrument.\n\t- year : integer = None (required) The year the instrument was made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_instrument_info\", \"description\": \"Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the instrument.\"}, \"maker\": {\"type\": \"string\", \"description\": \"The name of the maker who created the instrument.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year the instrument was made.\"}}, \"required\": [\"name\", \"maker\", \"year\"]}}"}
{"scope": "simple", "query": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.", "query_for_retrieval": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.", "answer": "city_distance.find_shortest", "answer_params": "", "api_description": "def city_distance.find_shortest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the shortest distance between two cities via available public transportation.\n\t\n\tArguments:\n\t---------\n\t- start_city : string = None (required) The city you are starting from. The parameter is in the format of city name.\n\t- end_city : string = None (required) The city you are heading to.The parameter is in the format of city name.\n\t- transportation : string = None (optional) Preferred mode of public transportation. Default is 'bus'.\n\t- allow_transfer : boolean = None (optional) Allows transfer between different transportation if true. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"city_distance.find_shortest\", \"description\": \"Calculates the shortest distance between two cities via available public transportation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_city\": {\"type\": \"string\", \"description\": \"The city you are starting from. The parameter is in the format of city name.\"}, \"end_city\": {\"type\": \"string\", \"description\": \"The city you are heading to.The parameter is in the format of city name.\"}, \"transportation\": {\"type\": \"string\", \"description\": \"Preferred mode of public transportation. Default is 'bus'.\"}, \"allow_transfer\": {\"type\": \"boolean\", \"description\": \"Allows transfer between different transportation if true. Default is false.\"}}, \"required\": [\"start_city\", \"end_city\"]}}"}
{"scope": "relevance", "query": "Who is the Vice President of United States?", "query_for_retrieval": "Who is the Vice President of United States?", "answer": "us_president_in_year", "answer_params": "", "api_description": "def us_president_in_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFind out who was the president of United States in a given year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year to lookup for.\n\t- state : string = None (optional) Optional. State to lookup for governor. Default is all US.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_president_in_year\", \"description\": \"Find out who was the president of United States in a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year to lookup for.\"}, \"state\": {\"type\": \"string\", \"description\": \"Optional. State to lookup for governor. Default is all US.\"}}, \"required\": [\"year\"]}}"}
{"scope": "parallel_function", "query": "You are an investor who recently sold some stocks. You bought one stock at $150, another at $200, and another at $250. You sold them at $180, $210, and $300 respectively. You also received dividends of $20, $30, and $40 for each stock. Can you calculate the return on investment for each of these stocks using the 'calculate_return_on_investment' function?", "query_for_retrieval": "You are an investor who recently sold some stocks. You bought one stock at $150, another at $200, and another at $250. You sold them at $180, $210, and $300 respectively. You also received dividends of $20, $30, and $40 for each stock. Can you calculate the return on investment for each of these stocks using the 'calculate_return_on_investment' function?", "answer": "calculate_return_on_investment", "answer_params": "", "api_description": "def calculate_return_on_investment:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\n\t\n\tArguments:\n\t---------\n\t- purchase_price : integer = None (required) The price the stock was bought at.\n\t- sale_price : integer = None (required) The price the stock was sold at.\n\t- dividend : integer = 0 (optional) Any dividends received from the stock.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_return_on_investment\", \"description\": \"Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"purchase_price\": {\"type\": \"integer\", \"description\": \"The price the stock was bought at.\"}, \"sale_price\": {\"type\": \"integer\", \"description\": \"The price the stock was sold at.\"}, \"dividend\": {\"type\": \"integer\", \"description\": \"Any dividends received from the stock.\", \"default\": 0}}, \"required\": [\"purchase_price\", \"sale_price\"]}}"}
{"scope": "simple", "query": "Get the latest game score and statistics for Los Angeles Lakers in NBA.", "query_for_retrieval": "Get the latest game score and statistics for Los Angeles Lakers in NBA.", "answer": "get_team_score", "answer_params": "", "api_description": "def get_team_score:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the latest game score, individual player stats, and team stats for a specified sports team.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the sports team.\n\t- league : string = None (required) The league that the team is part of.\n\t- include_player_stats : boolean = False (optional) Indicates if individual player statistics should be included in the result. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_team_score\", \"description\": \"Retrieves the latest game score, individual player stats, and team stats for a specified sports team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league that the team is part of.\"}, \"include_player_stats\": {\"type\": \"boolean\", \"default\": false, \"description\": \"Indicates if individual player statistics should be included in the result. Default is false.\"}}, \"required\": [\"team_name\", \"league\"]}}"}
{"scope": "executable_simple", "query": "I'm prepping for tomorrow's algebra class about quadratic equations, and I want to show the students how to calculate the roots using an example. Let's use the equation 3x^2 + 7x - 10 = 0. I need to find the roots for this, with coefficients 3 for a, 7 for b, and -10 for c. Can we run this through the calculation process to get the roots?", "query_for_retrieval": "I'm prepping for tomorrow's algebra class about quadratic equations, and I want to show the students how to calculate the roots using an example. Let's use the equation 3x^2 + 7x - 10 = 0. I need to find the roots for this, with coefficients 3 for a, 7 for b, and -10 for c. Can we run this through the calculation process to get the roots?", "answer": "quadratic_roots", "answer_params": "", "api_description": "def quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the roots of a quadratic equation.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first coefficient.\n\t- b : integer = None (required) The second coefficient.\n\t- c : integer = None (required) The third coefficient.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"quadratic_roots\", \"description\": \"Calculates the roots of a quadratic equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first coefficient.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second coefficient.\"}, \"c\": {\"type\": \"integer\", \"description\": \"The third coefficient.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "simple", "query": "Find the highest score achieved by any player in the online game 'Overwatch' on PC globally.", "query_for_retrieval": "Find the highest score achieved by any player in the online game 'Overwatch' on PC globally.", "answer": "game_score.highest", "answer_params": "", "api_description": "def game_score.highest:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the highest score achieved by any player in a specific game.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the online game.\n\t- platform : string = None (required) The platform where the game is played, e.g. PC, Xbox, Playstation\n\t- region : string = None (optional) The geographic region of the player. Defaults to 'Global'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_score.highest\", \"description\": \"Retrieve the highest score achieved by any player in a specific game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the online game.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The platform where the game is played, e.g. PC, Xbox, Playstation\"}, \"region\": {\"type\": \"string\", \"description\": \"The geographic region of the player. Defaults to 'Global'\"}}, \"required\": [\"game\", \"platform\"]}}"}
{"scope": "executable_simple", "query": "I'm expanding my investment portfolio and I've been closely following a few tech stocks. 'GOOGL' has shown promising trends, and I'm thinking about investing in it. However, I want to be thorough with my research. Could you provide me with the name of the company that 'GOOGL' represents?", "query_for_retrieval": "I'm expanding my investment portfolio and I've been closely following a few tech stocks. 'GOOGL' has shown promising trends, and I'm thinking about investing in it. However, I want to be thorough with my research. Could you provide me with the name of the company that 'GOOGL' represents?", "answer": "get_company_name_by_stock_name", "answer_params": "", "api_description": "def get_company_name_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the company name of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_company_name_by_stock_name\", \"description\": \"Finds the company name of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "javascript", "query": "How can I validate an object named 'serviceProvider' to ensure it complies with React's prop-type constraints for a component, specifically by checking that it is not an instance of a Promise, nor contains any methods that could lead to side effects, when passed as a prop to the component 'UserProfile'?", "query_for_retrieval": "How can I validate an object named 'serviceProvider' to ensure it complies with React's prop-type constraints for a component, specifically by checking that it is not an instance of a Promise, nor contains any methods that could lead to side effects, when passed as a prop to the component 'UserProfile'?", "answer": "validateReactProp", "answer_params": "", "api_description": "def validateReactProp:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function validates an object to ensure it is safe to pass as a prop in a React component by checking that it is not a Promise and does not contain methods that could lead to side effects, raising a warning if the validation fails.\n\t\n\tArguments:\n\t---------\n\t- obj : any = None (required) The object to validate for safe usage as a React prop.\n\t- componentName : String = None (required) The name of the React component to which the object is passed as a prop.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"validateReactProp\", \"description\": \"This function validates an object to ensure it is safe to pass as a prop in a React component by checking that it is not a Promise and does not contain methods that could lead to side effects, raising a warning if the validation fails.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"obj\": {\"type\": \"any\", \"description\": \"The object to validate for safe usage as a React prop.\"}, \"componentName\": {\"type\": \"String\", \"description\": \"The name of the React component to which the object is passed as a prop.\"}}, \"required\": [\"obj\", \"componentName\"]}}"}
{"scope": "relevance", "query": "Find the best character to use against a dragon in DragonSlayer game.", "query_for_retrieval": "Find the best character to use against a dragon in DragonSlayer game.", "answer": "game.find_best_weapon", "answer_params": "", "api_description": "def game.find_best_weapon:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the best weapon in the inventory to use against a particular enemy type based on the player's level and the enemy's strength and weaknesses.\n\t\n\tArguments:\n\t---------\n\t- player_level : integer = None (required) The player's current level.\n\t- enemy_type : string = None (required) The type of enemy the player is facing.\n\t- inventory : array = ['knife'] (optional) List of weapons currently in player's inventory.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game.find_best_weapon\", \"description\": \"Finds the best weapon in the inventory to use against a particular enemy type based on the player's level and the enemy's strength and weaknesses.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_level\": {\"type\": \"integer\", \"description\": \"The player's current level.\"}, \"enemy_type\": {\"type\": \"string\", \"description\": \"The type of enemy the player is facing.\"}, \"inventory\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of weapons currently in player's inventory.\", \"default\": [\"knife\"]}}, \"required\": [\"player_level\", \"enemy_type\"]}}"}
{"scope": "relevance", "query": "Who is the laywer for the Doe vs. Smith law case?", "query_for_retrieval": "Who is the laywer for the Doe vs. Smith law case?", "answer": "case_review.retrieve_case_outcome", "answer_params": "", "api_description": "def case_review.retrieve_case_outcome:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the outcome of a specific law case.\n\t\n\tArguments:\n\t---------\n\t- case_name : string = None (required) The full case name (including vs.).\n\t- case_year : integer = None (required) The year the case was tried.\n\t- location : string = CA (optional) The location (City, State) of where the case was tried.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"case_review.retrieve_case_outcome\", \"description\": \"Retrieve the outcome of a specific law case.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_name\": {\"type\": \"string\", \"description\": \"The full case name (including vs.).\"}, \"case_year\": {\"type\": \"integer\", \"description\": \"The year the case was tried.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location (City, State) of where the case was tried.\", \"optional\": \"true\", \"default\": \"CA\"}}, \"required\": [\"case_name\", \"case_year\"]}}"}
{"scope": "multiple_function", "query": "How many goals has Lionel Messi scored for Barcelona till date?", "query_for_retrieval": "How many goals has Lionel Messi scored for Barcelona till date?", "answer": "team_stats.get_top_scorer", "answer_params": "", "api_description": "def team_stats.get_top_scorer:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the top scorer of a specified football team.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the football team.\n\t- competition : string = None (optional) Competition for which to fetch stats (optional). Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"team_stats.get_top_scorer\", \"description\": \"Fetch the top scorer of a specified football team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the football team.\"}, \"competition\": {\"type\": \"string\", \"description\": \"Competition for which to fetch stats (optional). Default ''\"}}, \"required\": [\"team_name\"]}}"}
{"scope": "multiple_function", "query": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "query_for_retrieval": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "answer": "public_library.find_nearby", "answer_params": "", "api_description": "def public_library.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Boston, MA\n\t- facilities : array = None (required) Facilities and sections in public library.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"public_library.find_nearby\", \"description\": \"Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Boston, MA\"}, \"facilities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Wi-Fi\", \"Reading Room\", \"Fiction\", \"Children Section\", \"Cafe\"]}, \"description\": \"Facilities and sections in public library.\"}}, \"required\": [\"location\", \"facilities\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently investigating a security alert that flagged some unusual activity in our network. The IP address '192.168.1.1' was identified in the logs, and I suspect it could be related to the breach. To understand the origin of this potential threat, I need to pinpoint the geographical coordinates of this IP. Could you provide me with the latitude and longitude for the IP address '192.168.1.1'?", "query_for_retrieval": "I'm currently investigating a security alert that flagged some unusual activity in our network. The IP address '192.168.1.1' was identified in the logs, and I suspect it could be related to the breach. To understand the origin of this potential threat, I need to pinpoint the geographical coordinates of this IP. Could you provide me with the latitude and longitude for the IP address '192.168.1.1'?", "answer": "get_coordinate_by_ip_address", "answer_params": "", "api_description": "def get_coordinate_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the latitude and longitude of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinate_by_ip_address\", \"description\": \"Finds the latitude and longitude of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Generate a random number from a normal distribution with mean 0 and standard deviation 1.", "query_for_retrieval": "Generate a random number from a normal distribution with mean 0 and standard deviation 1.", "answer": "random.normalvariate", "answer_params": "", "api_description": "def random.normalvariate:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a random number from a normal distribution given the mean and standard deviation.\n\t\n\tArguments:\n\t---------\n\t- mu : integer = None (required) Mean of the normal distribution.\n\t- sigma : integer = None (required) Standard deviation of the normal distribution.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"random.normalvariate\", \"description\": \"Generates a random number from a normal distribution given the mean and standard deviation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mu\": {\"type\": \"integer\", \"description\": \"Mean of the normal distribution.\"}, \"sigma\": {\"type\": \"integer\", \"description\": \"Standard deviation of the normal distribution.\"}}, \"required\": [\"mu\", \"sigma\"]}}"}
{"scope": "executable_multiple_function", "query": "During a simulation of a high-speed pursuit, I'm trying to calculate the velocity a suspect's car would reach from a standstill after accelerating continuously for 12 seconds at a rate of 9.8 meters per second squared. Could you compute the final velocity for me based on these figures?", "query_for_retrieval": "During a simulation of a high-speed pursuit, I'm trying to calculate the velocity a suspect's car would reach from a standstill after accelerating continuously for 12 seconds at a rate of 9.8 meters per second squared. Could you compute the final velocity for me based on these figures?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "multiple_function", "query": "Find the integral of the function f(x) = 3x^2 from 1 to 2.", "query_for_retrieval": "Find the integral of the function f(x) = 3x^2 from 1 to 2.", "answer": "calculate_derivative", "answer_params": "", "api_description": "def calculate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the derivative of a single-variable function.\n\t\n\tArguments:\n\t---------\n\t- func : string = None (required) The function to be differentiated.\n\t- x_value : integer = None (required) The x-value at which the derivative should be calculated.\n\t- order : integer = 1 (optional) The order of the derivative (optional). Default is 1st order.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_derivative\", \"description\": \"Calculate the derivative of a single-variable function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"func\": {\"type\": \"string\", \"description\": \"The function to be differentiated.\"}, \"x_value\": {\"type\": \"integer\", \"description\": \"The x-value at which the derivative should be calculated.\"}, \"order\": {\"type\": \"integer\", \"description\": \"The order of the derivative (optional). Default is 1st order.\", \"default\": 1}}, \"required\": [\"func\", \"x_value\"]}}"}
{"scope": "simple", "query": "Find the prime factors of the number 123456.", "query_for_retrieval": "Find the prime factors of the number 123456.", "answer": "number_analysis.prime_factors", "answer_params": "", "api_description": "def number_analysis.prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to be factored.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"number_analysis.prime_factors\", \"description\": \"Compute the prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to be factored.\"}}, \"required\": [\"number\"]}}"}
{"scope": "java", "query": "How can I asynchronously attempt to acquire a permit from a Redisson expirable semaphore with a wait time of 5 seconds, a lease time of 2 minutes, and using the TimeUnit of SECONDS?", "query_for_retrieval": "How can I asynchronously attempt to acquire a permit from a Redisson expirable semaphore with a wait time of 5 seconds, a lease time of 2 minutes, and using the TimeUnit of SECONDS?", "answer": "RedissonPermitExpirableSemaphore.tryAcquireAsync", "answer_params": "", "api_description": "def RedissonPermitExpirableSemaphore.tryAcquireAsync:\n\t\"\"\"\n\tDescription:\n\t\n\tAttempts to acquire a permit from the semaphore asynchronously, with the ability to specify the wait time, lease time, and time unit. Returns a future that will be completed with the permit ID if acquired.\n\t\n\tArguments:\n\t---------\n\t- waitTime : long = None (required) The maximum time to wait for a permit to become available.\n\t- leaseTime : long = None (required) The time to lease the permit once acquired.\n\t- unit : String = None (required) The time unit for both waitTime and leaseTime.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RedissonPermitExpirableSemaphore.tryAcquireAsync\", \"description\": \"Attempts to acquire a permit from the semaphore asynchronously, with the ability to specify the wait time, lease time, and time unit. Returns a future that will be completed with the permit ID if acquired.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"waitTime\": {\"type\": \"long\", \"description\": \"The maximum time to wait for a permit to become available.\"}, \"leaseTime\": {\"type\": \"long\", \"description\": \"The time to lease the permit once acquired.\"}, \"unit\": {\"type\": \"String\", \"description\": \"The time unit for both waitTime and leaseTime.\"}}, \"required\": [\"waitTime\", \"leaseTime\", \"unit\"]}}"}
{"scope": "executable_multiple_function", "query": "While doing some financial analysis, I've been looking into the details of certain stocks, and 'AAPL' caught my attention. I'd like to know which company it represents. Could you help me find out the company name associated with the stock symbol 'AAPL'?", "query_for_retrieval": "While doing some financial analysis, I've been looking into the details of certain stocks, and 'AAPL' caught my attention. I'd like to know which company it represents. Could you help me find out the company name associated with the stock symbol 'AAPL'?", "answer": "get_stock_price_by_stock_name", "answer_params": "", "api_description": "def get_stock_price_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price_by_stock_name\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "simple", "query": "What are the statistics of Ronaldo's matches in 2021?", "query_for_retrieval": "What are the statistics of Ronaldo's matches in 2021?", "answer": "player_statistic", "answer_params": "", "api_description": "def player_statistic:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves detailed player's statistics for a specific year.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The player's name.\n\t- year : integer = None (required) Year for which the statistics will be displayed.\n\t- team_name : string = None (optional) The name of the team(optional). Default to not use it if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"player_statistic\", \"description\": \"Retrieves detailed player's statistics for a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The player's name.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year for which the statistics will be displayed.\"}, \"team_name\": {\"type\": \"string\", \"description\": \"The name of the team(optional). Default to not use it if not specified.\"}}, \"required\": [\"player_name\", \"year\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me find the roots of two different quadratic equations? The first equation is 3x^2 + 7x + 2 = 0, where 'a' is the coefficient of x^2 (3), 'b' is the coefficient of x (7), and 'c' is the constant term (2). The second equation is 5x^2 - 4x + 1 = 0, where 'a' is the coefficient of x^2 (5), 'b' is the coefficient of x (-4), and 'c' is the constant term (1).\"", "query_for_retrieval": "\"Can you help me find the roots of two different quadratic equations? The first equation is 3x^2 + 7x + 2 = 0, where 'a' is the coefficient of x^2 (3), 'b' is the coefficient of x (7), and 'c' is the constant term (2). The second equation is 5x^2 - 4x + 1 = 0, where 'a' is the coefficient of x^2 (5), 'b' is the coefficient of x (-4), and 'c' is the constant term (1).\"", "answer": "algebra.quadratic_roots", "answer_params": "", "api_description": "def algebra.quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the roots of a quadratic equation ax^2 + bx + c = 0.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x^2.\n\t- b : integer = None (required) Coefficient of x.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"algebra.quadratic_roots\", \"description\": \"Find the roots of a quadratic equation ax^2 + bx + c = 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x^2.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "sql", "query": "Can you remove all records from the 'employees' table where the 'job_title' is 'Data Analyst'?", "query_for_retrieval": "Can you remove all records from the 'employees' table where the 'job_title' is 'Data Analyst'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Calculate the fibonacci of number 20.", "query_for_retrieval": "Calculate the fibonacci of number 20.", "answer": "cryptocurrency_price", "answer_params": "", "api_description": "def cryptocurrency_price:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the current price of a specific cryptocurrency.\n\t\n\tArguments:\n\t---------\n\t- currency : string = None (required) The symbol of the cryptocurrency.\n\t- vs_currency : string = None (required) The target currency to represent the price.\n\t- include_market_cap : boolean = false (optional) Optional field to include market capitalization.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cryptocurrency_price\", \"description\": \"Get the current price of a specific cryptocurrency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"currency\": {\"type\": \"string\", \"description\": \"The symbol of the cryptocurrency.\"}, \"vs_currency\": {\"type\": \"string\", \"description\": \"The target currency to represent the price.\"}, \"include_market_cap\": {\"type\": \"boolean\", \"default\": \"false\", \"description\": \"Optional field to include market capitalization.\"}}, \"required\": [\"currency\", \"vs_currency\"]}}"}
{"scope": "simple", "query": "What is the probability of drawing a heart card from a deck of 52 cards?", "query_for_retrieval": "What is the probability of drawing a heart card from a deck of 52 cards?", "answer": "card_game_probability.calculate", "answer_params": "", "api_description": "def card_game_probability.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of drawing a certain card or suit from a deck of cards.\n\t\n\tArguments:\n\t---------\n\t- total_cards : integer = None (required) Total number of cards in the deck.\n\t- desired_cards : integer = None (required) Number of cards in the deck that satisfy the conditions.\n\t- cards_drawn : integer = 1 (optional) Number of cards drawn from the deck.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"card_game_probability.calculate\", \"description\": \"Calculate the probability of drawing a certain card or suit from a deck of cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_cards\": {\"type\": \"integer\", \"description\": \"Total number of cards in the deck.\"}, \"desired_cards\": {\"type\": \"integer\", \"description\": \"Number of cards in the deck that satisfy the conditions.\"}, \"cards_drawn\": {\"type\": \"integer\", \"default\": 1, \"description\": \"Number of cards drawn from the deck.\"}}, \"required\": [\"total_cards\", \"desired_cards\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with my calculus homework? I have two problems that I'm stuck on. The first one is to calculate the definite integral of the function 3x^2 - 2x + 1 from x = 1 to x = 4. The second problem is to calculate the derivative of the function 2x^3 - 3x^2 + 4x - 5 at x = 2. And for extra credit, I need to find the second order derivative of the same function at x = 2. Can you solve these for me?\"", "query_for_retrieval": "\"Can you help me with my calculus homework? I have two problems that I'm stuck on. The first one is to calculate the definite integral of the function 3x^2 - 2x + 1 from x = 1 to x = 4. The second problem is to calculate the derivative of the function 2x^3 - 3x^2 + 4x - 5 at x = 2. And for extra credit, I need to find the second order derivative of the same function at x = 2. Can you solve these for me?\"", "answer": "calculate_integral", "answer_params": "", "api_description": "def calculate_integral:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the definite integral of a single-variable function.\n\t\n\tArguments:\n\t---------\n\t- func : string = None (required) The function to be integrated.\n\t- a : integer = None (required) The lower bound of the integration.\n\t- b : integer = None (required) The upper bound of the integration.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_integral\", \"description\": \"Calculate the definite integral of a single-variable function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"func\": {\"type\": \"string\", \"description\": \"The function to be integrated.\"}, \"a\": {\"type\": \"integer\", \"description\": \"The lower bound of the integration.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The upper bound of the integration.\"}}, \"required\": [\"func\", \"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are considering to buy a house in San Francisco, California. The house was built in 1985, has an area of 2000 square feet and contains 4 rooms. You want to predict the price of this house. After buying the house, you also want to know about any lawsuits involving the previous owner, Mr. John Doe, in the county of San Francisco. Additionally, you are curious about the probability of winning a lottery where the total number of possible outcomes is 1000 and the number of favorable outcomes is 5. You want the result to be rounded to 3 decimal places. Can you provide the predicted house price, the lawsuits involving Mr. John Doe in San Francisco county, and the probability of winning the lottery?\"", "query_for_retrieval": "\"Imagine you are considering to buy a house in San Francisco, California. The house was built in 1985, has an area of 2000 square feet and contains 4 rooms. You want to predict the price of this house. After buying the house, you also want to know about any lawsuits involving the previous owner, Mr. John Doe, in the county of San Francisco. Additionally, you are curious about the probability of winning a lottery where the total number of possible outcomes is 1000 and the number of favorable outcomes is 5. You want the result to be rounded to 3 decimal places. Can you provide the predicted house price, the lawsuits involving Mr. John Doe in San Francisco county, and the probability of winning the lottery?\"", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve all lawsuits involving a particular entity from specified jurisdiction.\n\t\n\tArguments:\n\t---------\n\t- entity : string = None (required) The entity involved in lawsuits.\n\t- county : string = None (required) The jurisdiction for the lawsuit search.\n\t- state : string = None (optional) The state for the lawsuit search. Default is California.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Retrieve all lawsuits involving a particular entity from specified jurisdiction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"entity\": {\"type\": \"string\", \"description\": \"The entity involved in lawsuits.\"}, \"county\": {\"type\": \"string\", \"description\": \"The jurisdiction for the lawsuit search.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state for the lawsuit search. Default is California.\"}}, \"required\": [\"entity\", \"county\"]}}"}
{"scope": "java", "query": "How can I create a range query for a field named 'temperature' that fetches records with values from 20.5 to 30.0 degrees, including the lower bound but excluding the upper bound, using the query type 'FLOAT'?", "query_for_retrieval": "How can I create a range query for a field named 'temperature' that fetches records with values from 20.5 to 30.0 degrees, including the lower bound but excluding the upper bound, using the query type 'FLOAT'?", "answer": "dvRangeQuery", "answer_params": "", "api_description": "def dvRangeQuery:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a range query for binary doc values using the specified field, query type, range, and inclusion flags.\n\t\n\tArguments:\n\t---------\n\t- field : String = None (required) The field to query.\n\t- queryType : any = None (required) The type of query to perform, such as 'FLOAT' for floating-point ranges.\n\t- from : any = None (required) The lower bound of the range.\n\t- to : any = None (required) The upper bound of the range.\n\t- includeFrom : boolean = None (required) Whether to include the 'from' value in the range.\n\t- includeTo : boolean = None (required) Whether to include the 'to' value in the range.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"dvRangeQuery\", \"description\": \"Creates a range query for binary doc values using the specified field, query type, range, and inclusion flags.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"field\": {\"type\": \"String\", \"description\": \"The field to query.\"}, \"queryType\": {\"type\": \"any\", \"description\": \"The type of query to perform, such as 'FLOAT' for floating-point ranges.\"}, \"from\": {\"type\": \"any\", \"description\": \"The lower bound of the range.\"}, \"to\": {\"type\": \"any\", \"description\": \"The upper bound of the range.\"}, \"includeFrom\": {\"type\": \"boolean\", \"description\": \"Whether to include the 'from' value in the range.\"}, \"includeTo\": {\"type\": \"boolean\", \"description\": \"Whether to include the 'to' value in the range.\"}}, \"required\": [\"field\", \"queryType\", \"from\", \"to\", \"includeFrom\", \"includeTo\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the result of the following mathematical operation: first, raise the number 3 to the power of 5, then raise the number 2 to the power of 3.\"", "query_for_retrieval": "\"Can you calculate the result of the following mathematical operation: first, raise the number 3 to the power of 5, then raise the number 2 to the power of 3.\"", "answer": "math.power", "answer_params": "", "api_description": "def math.power:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the power of one number raised to another.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base number.\n\t- exponent : integer = None (required) The exponent.\n\t- mod : float = None (optional) The modulus. Default is None. Calculates pow(base, exponent) % mod when provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.power\", \"description\": \"Calculate the power of one number raised to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base number.\"}, \"exponent\": {\"type\": \"integer\", \"description\": \"The exponent.\"}, \"mod\": {\"type\": \"float\", \"description\": \"The modulus. Default is None. Calculates pow(base, exponent) % mod when provided.\"}}, \"required\": [\"base\", \"exponent\"]}}"}
{"scope": "rest", "query": "I'm trying to find the age rating for 'The Social Network', which was released in 2010. Could you show me how to make a GET request to OMDB API to fetch this data using my API key 'YOUR-OMDB-API-KEY'?", "query_for_retrieval": "I'm trying to find the age rating for 'The Social Network', which was released in 2010. Could you show me how to make a GET request to OMDB API to fetch this data using my API key 'YOUR-OMDB-API-KEY'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "Who is playing basketball game  at Madison Square Garden tonight?", "query_for_retrieval": "Who is playing basketball game  at Madison Square Garden tonight?", "answer": "concert_search.find_concerts", "answer_params": "", "api_description": "def concert_search.find_concerts:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate concerts at a specific venue on a specific date.\n\t\n\tArguments:\n\t---------\n\t- venue : string = None (required) The name of the concert venue.\n\t- date : string = None (required) The date of the concert in YYYY-MM-DD format.\n\t- artist : string = None (optional) The name of the artist or band, if looking for a specific performer. This parameter is optional. Default: 'chris nolan'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_search.find_concerts\", \"description\": \"Locate concerts at a specific venue on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"venue\": {\"type\": \"string\", \"description\": \"The name of the concert venue.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the concert in YYYY-MM-DD format.\"}, \"artist\": {\"type\": \"string\", \"description\": \"The name of the artist or band, if looking for a specific performer. This parameter is optional. Default: 'chris nolan'\", \"optional\": \"yes\"}}, \"required\": [\"venue\", \"date\"]}}"}
{"scope": "multiple_function", "query": "What is the area and perimeter of a rectangle with width of 7 units and length of 10 units?", "query_for_retrieval": "What is the area and perimeter of a rectangle with width of 7 units and length of 10 units?", "answer": "geometry_square.calculate", "answer_params": "", "api_description": "def geometry_square.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area and perimeter of a square given the side length.\n\t\n\tArguments:\n\t---------\n\t- side : integer = None (required) The length of a side of the square.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry_square.calculate\", \"description\": \"Calculates the area and perimeter of a square given the side length.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"side\": {\"type\": \"integer\", \"description\": \"The length of a side of the square.\"}}, \"required\": [\"side\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a chemist working in a lab. You have two samples of the same gas. The first sample has a quantity of 5 moles and is at a temperature of 300 Kelvin. The second sample has a quantity of 3 moles and is at a temperature of 500 Kelvin. You decide to mix these two samples together. What would be the final temperature of the mixture? \n\nLater, you obtain another gas sample with a quantity of 4 moles. You know that the molar mass of this gas is 16 g/mol. Can you calculate the mass of this gas sample?\"", "query_for_retrieval": "\"Imagine you are a chemist working in a lab. You have two samples of the same gas. The first sample has a quantity of 5 moles and is at a temperature of 300 Kelvin. The second sample has a quantity of 3 moles and is at a temperature of 500 Kelvin. You decide to mix these two samples together. What would be the final temperature of the mixture? \n\nLater, you obtain another gas sample with a quantity of 4 moles. You know that the molar mass of this gas is 16 g/mol. Can you calculate the mass of this gas sample?\"", "answer": "calculate_final_temperature", "answer_params": "", "api_description": "def calculate_final_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final temperature when different quantities of the same gas at different temperatures are mixed.\n\t\n\tArguments:\n\t---------\n\t- quantity1 : float = None (required) The quantity of the first sample of gas.\n\t- temperature1 : float = None (required) The temperature of the first sample of gas.\n\t- quantity2 : float = None (required) The quantity of the second sample of gas.\n\t- temperature2 : float = None (required) The temperature of the second sample of gas.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_temperature\", \"description\": \"Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"quantity1\": {\"type\": \"float\", \"description\": \"The quantity of the first sample of gas.\"}, \"temperature1\": {\"type\": \"float\", \"description\": \"The temperature of the first sample of gas.\"}, \"quantity2\": {\"type\": \"float\", \"description\": \"The quantity of the second sample of gas.\"}, \"temperature2\": {\"type\": \"float\", \"description\": \"The temperature of the second sample of gas.\"}}, \"required\": [\"quantity1\", \"temperature1\", \"quantity2\", \"temperature2\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you first fetch the top 10 popular artworks at the Metropolitan Museum of Art sorted by popularity and then fetch the top 5 artworks sorted chronologically? After that, could you search for ongoing lawsuits related to Google that were filed in California starting from January 1, 2020? Lastly, could you also find any settled lawsuits related to Microsoft that were filed in New York starting from January 1, 2018?\"", "query_for_retrieval": "\"Could you first fetch the top 10 popular artworks at the Metropolitan Museum of Art sorted by popularity and then fetch the top 5 artworks sorted chronologically? After that, could you search for ongoing lawsuits related to Google that were filed in California starting from January 1, 2020? Lastly, could you also find any settled lawsuits related to Microsoft that were filed in New York starting from January 1, 2018?\"", "answer": "metropolitan_museum.get_top_artworks", "answer_params": "", "api_description": "def metropolitan_museum.get_top_artworks:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number of artworks to fetch\n\t- sort_by : string = None (optional) The criteria to sort the results on. Default is 'popularity'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"metropolitan_museum.get_top_artworks\", \"description\": \"Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number of artworks to fetch\"}, \"sort_by\": {\"type\": \"string\", \"description\": \"The criteria to sort the results on. Default is 'popularity'.\", \"enum\": [\"popularity\", \"chronological\", \"alphabetical\"]}}, \"required\": [\"number\"]}}"}
{"scope": "parallel_multiple_function", "query": "Buy me a ticket to the Mamma Mia musical for next Friday, also get me a train ticket from New York to Chicago for the same day.", "query_for_retrieval": "Buy me a ticket to the Mamma Mia musical for next Friday, also get me a train ticket from New York to Chicago for the same day.", "answer": "train_ticket.buy", "answer_params": "", "api_description": "def train_ticket.buy:\n\t\"\"\"\n\tDescription:\n\t\n\tBuy a train ticket for a specific date and route.\n\t\n\tArguments:\n\t---------\n\t- origin : string = None (required) The departure full name of the city.\n\t- destination : string = None (required) The destination city.\n\t- date : string = None (required) The date when the journey should be.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"train_ticket.buy\", \"description\": \"Buy a train ticket for a specific date and route.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"string\", \"description\": \"The departure full name of the city.\"}, \"destination\": {\"type\": \"string\", \"description\": \"The destination city.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date when the journey should be.\"}}, \"required\": [\"origin\", \"destination\", \"date\"]}}"}
{"scope": "parallel_function", "query": "\"In a population of butterflies, the frequency of the dominant allele for wing color is 0.7. Can you calculate the frequency of the homozygous dominant genotype (AA), heterozygous genotype (Aa), and homozygous recessive genotype (aa) using the Hardy Weinberg Principle?\"", "query_for_retrieval": "\"In a population of butterflies, the frequency of the dominant allele for wing color is 0.7. Can you calculate the frequency of the homozygous dominant genotype (AA), heterozygous genotype (Aa), and homozygous recessive genotype (aa) using the Hardy Weinberg Principle?\"", "answer": "calculate_genotype_frequency", "answer_params": "", "api_description": "def calculate_genotype_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n\t\n\tArguments:\n\t---------\n\t- allele_frequency : float = None (required) The frequency of the dominant allele in the population.\n\t- genotype : string = None (required) The genotype which frequency is needed, default is homozygous dominant. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_genotype_frequency\", \"description\": \"Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"allele_frequency\": {\"type\": \"float\", \"description\": \"The frequency of the dominant allele in the population.\"}, \"genotype\": {\"type\": \"string\", \"description\": \"The genotype which frequency is needed, default is homozygous dominant. \", \"enum\": [\"AA\", \"Aa\", \"aa\"]}}, \"required\": [\"allele_frequency\", \"genotype\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working on a detailed city map, and I've got two key locations that I need to measure the distance between. The first location is at coordinates (45.76, 4.85), and the second one is at (48.85, 2.35). Could you help me figure out how far apart these two points are?", "query_for_retrieval": "I'm currently working on a detailed city map, and I've got two key locations that I need to measure the distance between. The first location is at coordinates (45.76, 4.85), and the second one is at (48.85, 2.35). Could you help me figure out how far apart these two points are?", "answer": "get_distance", "answer_params": "", "api_description": "def get_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the distance between two 2D points.\n\t\n\tArguments:\n\t---------\n\t- pointA : tuple = None (required) The first point.\n\t- pointB : tuple = None (required) The second point.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_distance\", \"description\": \"Calculates the distance between two 2D points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"tuple\", \"description\": \"The first point.\", \"items\": {\"type\": \"float\"}}, \"pointB\": {\"type\": \"tuple\", \"description\": \"The second point.\", \"items\": {\"type\": \"float\"}}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find overview about the Battle of Waterloo and the signing of the Treaty of Tordesillas.", "query_for_retrieval": "Find overview about the Battle of Waterloo and the signing of the Treaty of Tordesillas.", "answer": "euro_history.treaty_info", "answer_params": "", "api_description": "def euro_history.treaty_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve specific information about a signed European treaty.\n\t\n\tArguments:\n\t---------\n\t- treaty_name : string = None (required) The name of the treaty.\n\t- info_requested : array = None (required) Specific aspects of the treaty for which to return information.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"euro_history.treaty_info\", \"description\": \"Retrieve specific information about a signed European treaty.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"treaty_name\": {\"type\": \"string\", \"description\": \"The name of the treaty.\"}, \"info_requested\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"signatories\", \"ratification date\", \"clauses\", \"overview\"]}, \"description\": \"Specific aspects of the treaty for which to return information.\"}}, \"required\": [\"treaty_name\", \"info_requested\"]}}"}
{"scope": "sql", "query": "Can you add a new product to the 'Products' table with the columns 'ProductID', 'ProductName', 'Category', 'Price' and their corresponding values as 'P789', 'Apple iPhone 13', 'Electronics', '999'?", "query_for_retrieval": "Can you add a new product to the 'Products' table with the columns 'ProductID', 'ProductName', 'Category', 'Price' and their corresponding values as 'P789', 'Apple iPhone 13', 'Electronics', '999'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "How can I initiate a shard operation on a searchable snapshot for a specific request `snapshotRequest`, shard routing `shardRouteInfo`, and task `snapshotTask`, and handle the result asynchronously using the listener `operationListener`?", "query_for_retrieval": "How can I initiate a shard operation on a searchable snapshot for a specific request `snapshotRequest`, shard routing `shardRouteInfo`, and task `snapshotTask`, and handle the result asynchronously using the listener `operationListener`?", "answer": "AbstractTransportSearchableSnapshotsAction.shardOperation", "answer_params": "", "api_description": "def AbstractTransportSearchableSnapshotsAction.shardOperation:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a shard-level operation on a searchable snapshot, ensuring the license is valid and the directory is correctly unwrapped before performing the operation.\n\t\n\tArguments:\n\t---------\n\t- request : any = None (required) The request to perform the shard operation.\n\t- shardRouting : any = None (required) The ShardRouting information for the shard on which to perform the operation.\n\t- task : any = None (required) The task associated with the shard operation.\n\t- listener : any = None (required) The ActionListener that will handle the ShardOperationResult asynchronously.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"AbstractTransportSearchableSnapshotsAction.shardOperation\", \"description\": \"Executes a shard-level operation on a searchable snapshot, ensuring the license is valid and the directory is correctly unwrapped before performing the operation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"request\": {\"type\": \"any\", \"description\": \"The request to perform the shard operation.\"}, \"shardRouting\": {\"type\": \"any\", \"description\": \"The ShardRouting information for the shard on which to perform the operation.\"}, \"task\": {\"type\": \"any\", \"description\": \"The task associated with the shard operation.\"}, \"listener\": {\"type\": \"any\", \"description\": \"The ActionListener that will handle the ShardOperationResult asynchronously.\"}}, \"required\": [\"request\", \"shardRouting\", \"task\", \"listener\"]}}"}
{"scope": "rest", "query": "I'm trying to find information on Apple stocks, can you help me fetch the tickers using my RapidAPI credentials? My key is 'YOUR-RAPID-API-KEY' and the host is 'yahoo-finance15.p.rapidapi.com'.", "query_for_retrieval": "I'm trying to find information on Apple stocks, can you help me fetch the tickers using my RapidAPI credentials? My key is 'YOUR-RAPID-API-KEY' and the host is 'yahoo-finance15.p.rapidapi.com'.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to calculate the greatest common divisors for a set of number pairs for a math assignment. Can you help me find the GCD for these pairs: 45 and 60, 81 and 27, 144 and 96, and also for 100 and 80? I'm looking to solve these step by step.", "query_for_retrieval": "I need to calculate the greatest common divisors for a set of number pairs for a math assignment. Can you help me find the GCD for these pairs: 45 and 60, 81 and 27, 144 and 96, and also for 100 and 80? I'm looking to solve these step by step.", "answer": "math_gcd", "answer_params": "", "api_description": "def math_gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with the following tasks? First, I need to know the travel distance and estimated travel time from my home in New York to my office in Boston, considering the current traffic conditions. Second, I am interested in finding out the top 5 chess players in San Francisco with a minimum rating of 2500. Lastly, I am working on a project and need to retrieve the historical GDP data for Japan from the year 2000 to 2020. Can you assist me with these?\"", "query_for_retrieval": "\"Could you please help me with the following tasks? First, I need to know the travel distance and estimated travel time from my home in New York to my office in Boston, considering the current traffic conditions. Second, I am interested in finding out the top 5 chess players in San Francisco with a minimum rating of 2500. Lastly, I am working on a project and need to retrieve the historical GDP data for Japan from the year 2000 to 2020. Can you assist me with these?\"", "answer": "board_game.chess.get_top_players", "answer_params": "", "api_description": "def board_game.chess.get_top_players:\n\t\"\"\"\n\tDescription:\n\t\n\tFind top chess players in a location based on rating.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city you want to find the players from.\n\t- minimum_rating : integer = None (required) Minimum rating to filter the players.\n\t- number_of_players : integer = 10 (optional) Number of players you want to retrieve, default value is 10\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game.chess.get_top_players\", \"description\": \"Find top chess players in a location based on rating.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city you want to find the players from.\"}, \"minimum_rating\": {\"type\": \"integer\", \"description\": \"Minimum rating to filter the players.\"}, \"number_of_players\": {\"type\": \"integer\", \"default\": 10, \"description\": \"Number of players you want to retrieve, default value is 10\"}}, \"required\": [\"location\", \"minimum_rating\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a dinner? I am looking for a vegan main course recipe that can be prepared within 45 minutes. After dinner, we are planning to play a poker game, could you tell me the probability of getting a full house with a deck of 52 cards and a hand size of 5? Also, I am new to Denver, CO and would like to know the nearby hospitals within a radius of 10 kms, specifically those with an Emergency department.\"", "query_for_retrieval": "\"Can you help me plan a dinner? I am looking for a vegan main course recipe that can be prepared within 45 minutes. After dinner, we are planning to play a poker game, could you tell me the probability of getting a full house with a deck of 52 cards and a hand size of 5? Also, I am new to Denver, CO and would like to know the nearby hospitals within a radius of 10 kms, specifically those with an Emergency department.\"", "answer": "find_recipe", "answer_params": "", "api_description": "def find_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a recipe based on the dietary restrictions, recipe type, and time constraints.\n\t\n\tArguments:\n\t---------\n\t- dietary_restrictions : string = None (required) Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n\t- recipe_type : string = None (required) Type of the recipe. E.g. dessert, main course, breakfast.\n\t- time : integer = None (required) Time limit in minutes to prep the meal.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipe\", \"description\": \"Find a recipe based on the dietary restrictions, recipe type, and time constraints.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restrictions\": {\"type\": \"string\", \"description\": \"Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\"}, \"recipe_type\": {\"type\": \"string\", \"description\": \"Type of the recipe. E.g. dessert, main course, breakfast.\"}, \"time\": {\"type\": \"integer\", \"description\": \"Time limit in minutes to prep the meal.\"}}, \"required\": [\"dietary_restrictions\", \"recipe_type\", \"time\"]}}"}
{"scope": "simple", "query": "Find the lawsuits filed against the company Google in California in the year 2020.", "query_for_retrieval": "Find the lawsuits filed against the company Google in California in the year 2020.", "answer": "lawsuits_search", "answer_params": "", "api_description": "def lawsuits_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits against a specific company within a specific time and location.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- location : string = None (required) The location where the lawsuit was filed.\n\t- year : integer = None (required) The year when the lawsuit was filed.\n\t- case_type : string = None (optional) The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuits_search\", \"description\": \"Search for lawsuits against a specific company within a specific time and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the lawsuit was filed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the lawsuit was filed.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'.\"}}, \"required\": [\"company_name\", \"location\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find the area and perimeter of a circle with a radius of 5 and also find the circumference of a circle with diameter of 10.", "query_for_retrieval": "Find the area and perimeter of a circle with a radius of 5 and also find the circumference of a circle with diameter of 10.", "answer": "circle.calculate_circumference", "answer_params": "", "api_description": "def circle.calculate_circumference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the circumference of a circle based on the diameter.\n\t\n\tArguments:\n\t---------\n\t- diameter : integer = None (required) The diameter of the circle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"circle.calculate_circumference\", \"description\": \"Calculate the circumference of a circle based on the diameter.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"diameter\": {\"type\": \"integer\", \"description\": \"The diameter of the circle.\"}}, \"required\": [\"diameter\"]}}"}
{"scope": "relevance", "query": "What type of instrument is a cello?", "query_for_retrieval": "What type of instrument is a cello?", "answer": "get_instrument_info", "answer_params": "", "api_description": "def get_instrument_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the details of a specific musical instrument including its type and origin.\n\t\n\tArguments:\n\t---------\n\t- instrument_name : string = None (required) The name of the instrument.\n\t- detail : string = type (optional) The specific information requested about the instrument.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_instrument_info\", \"description\": \"Retrieves the details of a specific musical instrument including its type and origin.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument_name\": {\"type\": \"string\", \"description\": \"The name of the instrument.\"}, \"detail\": {\"type\": \"string\", \"enum\": [\"type\", \"origin\", \"range\", \"family\"], \"description\": \"The specific information requested about the instrument.\", \"default\": \"type\"}}, \"required\": [\"instrument_name\"]}}"}
{"scope": "multiple_function", "query": "Convert time 3pm from New York time zone to London time zone.", "query_for_retrieval": "Convert time 3pm from New York time zone to London time zone.", "answer": "calculate_emission_savings", "answer_params": "", "api_description": "def calculate_emission_savings:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n\t\n\tArguments:\n\t---------\n\t- energy_type : string = None (required) Type of the renewable energy source.\n\t- usage_duration : integer = None (required) Usage duration in months.\n\t- region : string = None (optional) The region where you use energy. Default is 'USA'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_emission_savings\", \"description\": \"Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"energy_type\": {\"type\": \"string\", \"description\": \"Type of the renewable energy source.\"}, \"usage_duration\": {\"type\": \"integer\", \"description\": \"Usage duration in months.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region where you use energy. Default is 'USA'\"}}, \"required\": [\"energy_type\", \"usage_duration\"]}}"}
{"scope": "multiple_function", "query": "What is the shortest path from Paris, France to Rome, Italy by using a public transportation?", "query_for_retrieval": "What is the shortest path from Paris, France to Rome, Italy by using a public transportation?", "answer": "maps.route_times", "answer_params": "", "api_description": "def maps.route_times:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimates the time it will take to travel from one location to another by a specific mode of transportation.\n\t\n\tArguments:\n\t---------\n\t- route : string = None (required) The string representation of the route.\n\t- mode : string = walk (optional) The mode of transportation (walk, bike, transit, drive).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maps.route_times\", \"description\": \"Estimates the time it will take to travel from one location to another by a specific mode of transportation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"route\": {\"type\": \"string\", \"description\": \"The string representation of the route.\"}, \"mode\": {\"type\": \"string\", \"description\": \"The mode of transportation (walk, bike, transit, drive).\", \"default\": \"walk\"}}, \"required\": [\"route\"]}}"}
{"scope": "simple", "query": "Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds.", "query_for_retrieval": "Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds.", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object.\n\t- acceleration : float = None (required) The acceleration of the object.\n\t- time : integer = None (required) The time of acceleration.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time of acceleration.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "executable_simple", "query": "I've been working on an algorithm that's supposed to identify the largest subset of points that align on a single straight line. I've plotted out a few points: [[1,1], [2,3], [4,6], [5,5]]. I need to determine the maximum number of points from this set that fall on the same line. Can you help me with that?", "query_for_retrieval": "I've been working on an algorithm that's supposed to identify the largest subset of points that align on a single straight line. I've plotted out a few points: [[1,1], [2,3], [4,6], [5,5]]. I need to determine the maximum number of points from this set that fall on the same line. Can you help me with that?", "answer": "maxPoints", "answer_params": "", "api_description": "def maxPoints:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the maximum number of points on a line.\n\t\n\tArguments:\n\t---------\n\t- points : array = None (required) The list of points. Points are 2 element lists.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maxPoints\", \"description\": \"Finds the maximum number of points on a line.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"points\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A point represented by a 2 element list [x, y].\"}, \"description\": \"The list of points. Points are 2 element lists.\"}}, \"required\": [\"points\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"I'm planning a game night and I need some board game recommendations. I have a group of 5 friends coming over, so we'll be 6 players in total. We all enjoy strategy games but we're all beginners, so nothing too complex. Can you recommend some games from BoardGameGeek that fit this criteria? Also, I have another group of 4 friends who love party games. We're not beginners but we're not advanced players either, so something in the middle would be great. Can you recommend some games from BoardGameGeek for this group as well? Lastly, I'm also considering buying some games from Amazon Game Store. I have a budget of $20-$30. Can you recommend some strategy games for 6 players and party games for 4 players within this price range?\"", "query_for_retrieval": "\"I'm planning a game night and I need some board game recommendations. I have a group of 5 friends coming over, so we'll be 6 players in total. We all enjoy strategy games but we're all beginners, so nothing too complex. Can you recommend some games from BoardGameGeek that fit this criteria? Also, I have another group of 4 friends who love party games. We're not beginners but we're not advanced players either, so something in the middle would be great. Can you recommend some games from BoardGameGeek for this group as well? Lastly, I'm also considering buying some games from Amazon Game Store. I have a budget of $20-$30. Can you recommend some strategy games for 6 players and party games for 4 players within this price range?\"", "answer": "AmazonGameStore.recommend", "answer_params": "", "api_description": "def AmazonGameStore.recommend:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate game recommendation from Amazon Game Store based on number of players and category.\n\t\n\tArguments:\n\t---------\n\t- numOfPlayers : integer = None (required) The number of players who will play the game.\n\t- category : string = None (required) The preferred category of board game. E.g. strategy, family, party etc.\n\t- priceRange : string = None (optional) The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default to '$10-$20' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"AmazonGameStore.recommend\", \"description\": \"Generate game recommendation from Amazon Game Store based on number of players and category.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numOfPlayers\": {\"type\": \"integer\", \"description\": \"The number of players who will play the game.\"}, \"category\": {\"type\": \"string\", \"description\": \"The preferred category of board game. E.g. strategy, family, party etc.\"}, \"priceRange\": {\"type\": \"string\", \"description\": \"The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default to '$10-$20' if not specified.\"}}, \"required\": [\"numOfPlayers\", \"category\"]}}"}
{"scope": "relevance", "query": "Find a hotel in New York that provides breakfast and has a fitness centre.", "query_for_retrieval": "Find a hotel in New York that provides breakfast and has a fitness centre.", "answer": "hotel_search.find_hotels", "answer_params": "", "api_description": "def hotel_search.find_hotels:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for hotels based on location and amenities.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York, NY.\n\t- amenities : array = None (required) Preferred amenities in the hotel.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_search.find_hotels\", \"description\": \"Search for hotels based on location and amenities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY.\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Breakfast\", \"Fitness Centre\", \"Free Wi-Fi\", \"Parking\"]}, \"description\": \"Preferred amenities in the hotel.\"}}, \"required\": [\"location\", \"amenities\"]}}"}
{"scope": "multiple_function", "query": "What was Albert Einstein's contribution to science on March 17, 1915?", "query_for_retrieval": "What was Albert Einstein's contribution to science on March 17, 1915?", "answer": "historical_contrib.get_contrib", "answer_params": "", "api_description": "def historical_contrib.get_contrib:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical contribution made by a scientist on a specific date.\n\t\n\tArguments:\n\t---------\n\t- scientist : string = None (required) The scientist whose contributions need to be searched.\n\t- date : string = None (required) The date when the contribution was made in yyyy-mm-dd format.\n\t- category : string = None (optional) The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historical_contrib.get_contrib\", \"description\": \"Retrieve historical contribution made by a scientist on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"scientist\": {\"type\": \"string\", \"description\": \"The scientist whose contributions need to be searched.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date when the contribution was made in yyyy-mm-dd format.\"}, \"category\": {\"type\": \"string\", \"description\": \"The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields.\"}}, \"required\": [\"scientist\", \"date\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with two things? First, I am currently in New York and it's 2pm here. I have a meeting scheduled with a client in London and another one in Tokyo. I need to know what time it will be in both these cities when it's 2pm in New York. Second, I am considering switching to solar energy for my home in California and I want to understand the potential greenhouse gas emissions I could save. I plan to use it for 12 months. Can you calculate the emission savings for me?\"", "query_for_retrieval": "\"Can you help me with two things? First, I am currently in New York and it's 2pm here. I have a meeting scheduled with a client in London and another one in Tokyo. I need to know what time it will be in both these cities when it's 2pm in New York. Second, I am considering switching to solar energy for my home in California and I want to understand the potential greenhouse gas emissions I could save. I plan to use it for 12 months. Can you calculate the emission savings for me?\"", "answer": "timezone.convert", "answer_params": "", "api_description": "def timezone.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert time from one time zone to another.\n\t\n\tArguments:\n\t---------\n\t- time : string = None (required) The local time you want to convert, e.g. 3pm\n\t- from_timezone : string = None (required) The time zone you want to convert from.\n\t- to_timezone : string = None (required) The time zone you want to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"timezone.convert\", \"description\": \"Convert time from one time zone to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"time\": {\"type\": \"string\", \"description\": \"The local time you want to convert, e.g. 3pm\"}, \"from_timezone\": {\"type\": \"string\", \"description\": \"The time zone you want to convert from.\"}, \"to_timezone\": {\"type\": \"string\", \"description\": \"The time zone you want to convert to.\"}}, \"required\": [\"time\", \"from_timezone\", \"to_timezone\"]}}"}
{"scope": "parallel_function", "query": "Find the winning percentage of Lakers and Bulls in NBA seasons 2018 and 2020.", "query_for_retrieval": "Find the winning percentage of Lakers and Bulls in NBA seasons 2018 and 2020.", "answer": "calculate_winning_percentage", "answer_params": "", "api_description": "def calculate_winning_percentage:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the winning percentage for a particular basketball team in a given season.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the basketball team.\n\t- season : integer = None (required) The season (year) you want to find winning percentage for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_winning_percentage\", \"description\": \"Calculate the winning percentage for a particular basketball team in a given season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the basketball team.\"}, \"season\": {\"type\": \"integer\", \"description\": \"The season (year) you want to find winning percentage for.\"}}, \"required\": [\"team\", \"season\"]}}"}
{"scope": "simple", "query": "How many teaspoons are in 2 tablespoons for measurement in my recipe?", "query_for_retrieval": "How many teaspoons are in 2 tablespoons for measurement in my recipe?", "answer": "recipe.unit_conversion", "answer_params": "", "api_description": "def recipe.unit_conversion:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one kitchen unit to another for cooking purposes.\n\t\n\tArguments:\n\t---------\n\t- value : integer = None (required) The value to be converted.\n\t- from_unit : string = None (required) The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n\t- to_unit : string = None (required) The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n\t- precision : integer = None (optional) The precision to round the output to, in case of a non-integer result. Optional, default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe.unit_conversion\", \"description\": \"Convert a value from one kitchen unit to another for cooking purposes.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"integer\", \"description\": \"The value to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc.\"}, \"precision\": {\"type\": \"integer\", \"description\": \"The precision to round the output to, in case of a non-integer result. Optional, default is 1.\"}}, \"required\": [\"value\", \"from_unit\", \"to_unit\"]}}"}
{"scope": "parallel_function", "query": "Find out how much waste a family of four generates in Los Angeles, assuming two children and two adults. Also, calculate waste production for a bachelor in New York.", "query_for_retrieval": "Find out how much waste a family of four generates in Los Angeles, assuming two children and two adults. Also, calculate waste production for a bachelor in New York.", "answer": "waste_calculation.calculate", "answer_params": "", "api_description": "def waste_calculation.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the estimated waste generated by different population sizes in a specific location.\n\t\n\tArguments:\n\t---------\n\t- population : dict = None (required) The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.\n\t- location : string = None (required) The city where the population resides.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"waste_calculation.calculate\", \"description\": \"Calculates the estimated waste generated by different population sizes in a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"population\": {\"type\": \"dict\", \"description\": \"The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.\", \"required\": [\"adults\", \"children\", \"singles\"]}, \"location\": {\"type\": \"string\", \"description\": \"The city where the population resides.\"}}, \"required\": [\"population\", \"location\"]}}"}
{"scope": "rest", "query": "I'm planning a series of long weekend getaways for the upcoming year and I need to know when they'll occur in my country. Could you fetch me the list of long weekends for Canada in the year 2023? I'd like to integrate this information into my holiday planning app.", "query_for_retrieval": "I'm planning a series of long weekend getaways for the upcoming year and I need to know when they'll occur in my country. Could you fetch me the list of long weekends for Canada in the year 2023? I'd like to integrate this information into my holiday planning app.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode} (required) The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\", \"default\": \"https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "Can you find me parks in New York, USA that have a Tennis Court and a Picnic Area, then find parks in Los Angeles, USA that have a Playground and Running Track, and finally find parks in Chicago, USA that have a Tennis Court and a Playground?", "query_for_retrieval": "Can you find me parks in New York, USA that have a Tennis Court and a Picnic Area, then find parks in Los Angeles, USA that have a Playground and Running Track, and finally find parks in Chicago, USA that have a Tennis Court and a Playground?", "answer": "parks.find_nearby", "answer_params": "", "api_description": "def parks.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby parks based on specific criteria like tennis court availability.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. London, UK\n\t- amenities : array = ['Playground'] (optional) Preferred amenities in park.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"parks.find_nearby\", \"description\": \"Locate nearby parks based on specific criteria like tennis court availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. London, UK\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Tennis Court\", \"Picnic Area\", \"Playground\", \"Running Track\"]}, \"description\": \"Preferred amenities in park.\", \"default\": [\"Playground\"]}}, \"required\": [\"location\"]}}"}
{"scope": "multiple_function", "query": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "query_for_retrieval": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "answer": "find_instrument", "answer_params": "", "api_description": "def find_instrument:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a musical instrument within specified budget and of specific type.\n\t\n\tArguments:\n\t---------\n\t- budget : float = None (required) Your budget for the instrument.\n\t- type : string = None (required) Type of the instrument\n\t- make : string = None (optional) Maker of the instrument, Optional parameter. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_instrument\", \"description\": \"Search for a musical instrument within specified budget and of specific type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"budget\": {\"type\": \"float\", \"description\": \"Your budget for the instrument.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of the instrument\"}, \"make\": {\"type\": \"string\", \"description\": \"Maker of the instrument, Optional parameter. Default is 'all'\"}}, \"required\": [\"budget\", \"type\"]}}"}
{"scope": "simple", "query": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "query_for_retrieval": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "answer": "sports_stats.get_performance", "answer_params": "", "api_description": "def sports_stats.get_performance:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the performance score of a soccer player given his game stats for a specific tournament in a season.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) Name of the player.\n\t- tournament : string = None (required) Name of the soccer tournament.\n\t- season : string = None (required) Specific season in format 'YYYY-YYYY'.\n\t- performance_indicator : array = None (optional) Array of performance indicators. Use as much as possible. Default to use all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_stats.get_performance\", \"description\": \"Compute the performance score of a soccer player given his game stats for a specific tournament in a season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"Name of the player.\"}, \"tournament\": {\"type\": \"string\", \"description\": \"Name of the soccer tournament.\"}, \"season\": {\"type\": \"string\", \"description\": \"Specific season in format 'YYYY-YYYY'.\"}, \"performance_indicator\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Goals Scored\", \"Assists Made\", \"Saves Made\", \"Cards Received\"]}, \"description\": \"Array of performance indicators. Use as much as possible. Default to use all if not specified.\"}}, \"required\": [\"player_name\", \"tournament\", \"season\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me the scores for the Manchester United soccer team in the English Premier League for the last 5 rounds and also the scores for the Los Angeles Lakers basketball team in the NBA for the last 7 rounds?\"", "query_for_retrieval": "\"Can you tell me the scores for the Manchester United soccer team in the English Premier League for the last 5 rounds and also the scores for the Los Angeles Lakers basketball team in the NBA for the last 7 rounds?\"", "answer": "basketball_scores.get_scores", "answer_params": "", "api_description": "def basketball_scores.get_scores:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve basketball scores for a specific team and league within a certain range of rounds.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The basketball team whose scores are to be retrieved.\n\t- league : string = None (required) The league in which the team competes.\n\t- rounds : integer = None (required) Number of past rounds for which to retrieve the scores.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"basketball_scores.get_scores\", \"description\": \"Retrieve basketball scores for a specific team and league within a certain range of rounds.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The basketball team whose scores are to be retrieved.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league in which the team competes.\"}, \"rounds\": {\"type\": \"integer\", \"description\": \"Number of past rounds for which to retrieve the scores.\"}}, \"required\": [\"team\", \"league\", \"rounds\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a new track and I've got these two drum loops that I'm trying to synchronize. The first loop repeats every 18 beats, while the second one comes back around every 24 beats. I need them to align perfectly so that the patterns create a seamless rhythm in the song. Could you calculate the least common multiple for 18 and 24 beats to find out after how many beats they'll sync up?", "query_for_retrieval": "I'm working on a new track and I've got these two drum loops that I'm trying to synchronize. The first loop repeats every 18 beats, while the second one comes back around every 24 beats. I need them to align perfectly so that the patterns create a seamless rhythm in the song. Could you calculate the least common multiple for 18 and 24 beats to find out after how many beats they'll sync up?", "answer": "math_lcm", "answer_params": "", "api_description": "def math_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the least common multiple of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_lcm\", \"description\": \"Calculates the least common multiple of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "java", "query": "How can I create a new searchable snapshot directory for a shard with ID 5 in the 'daily-snapshots' repository, using the index settings for the 'logs' index with variable `indexSettingsForLogs`, given that the shard path is '/data/nodes/0/indices/logs/5', the current time in nanoseconds is provided by a supplier 'currentTimeNanos', and the necessary services like 'repositoriesService', 'cacheService', 'threadPool', 'blobStoreCacheService', and 'sharedBlobCacheService' are already initialized?", "query_for_retrieval": "How can I create a new searchable snapshot directory for a shard with ID 5 in the 'daily-snapshots' repository, using the index settings for the 'logs' index with variable `indexSettingsForLogs`, given that the shard path is '/data/nodes/0/indices/logs/5', the current time in nanoseconds is provided by a supplier 'currentTimeNanos', and the necessary services like 'repositoriesService', 'cacheService', 'threadPool', 'blobStoreCacheService', and 'sharedBlobCacheService' are already initialized?", "answer": "SearchableSnapshotDirectory.create", "answer_params": "", "api_description": "def SearchableSnapshotDirectory.create:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a new instance of a searchable snapshot directory for a shard in a repository with the provided settings and services.\n\t\n\tArguments:\n\t---------\n\t- repositories : any = None (required) The service that provides access to the repositories.\n\t- cache : any = None (required) The cache service.\n\t- indexSettings : any = None (required) The settings for the index that the shard belongs to.\n\t- shardPath : String = None (required) The path to the shard data.\n\t- currentTimeNanosSupplier : any = None (required) A supplier that provides the current time in nanoseconds.\n\t- threadPool : any = None (required) The thread pool for executing tasks.\n\t- blobStoreCacheService : any = None (required) The service for caching blobs.\n\t- sharedBlobCacheService : any = None (required) The service for caching blobs shared across multiple shards.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SearchableSnapshotDirectory.create\", \"description\": \"Creates a new instance of a searchable snapshot directory for a shard in a repository with the provided settings and services.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"repositories\": {\"type\": \"any\", \"description\": \"The service that provides access to the repositories.\"}, \"cache\": {\"type\": \"any\", \"description\": \"The cache service.\"}, \"indexSettings\": {\"type\": \"any\", \"description\": \"The settings for the index that the shard belongs to.\"}, \"shardPath\": {\"type\": \"String\", \"description\": \"The path to the shard data.\"}, \"currentTimeNanosSupplier\": {\"type\": \"any\", \"description\": \"A supplier that provides the current time in nanoseconds.\"}, \"threadPool\": {\"type\": \"any\", \"description\": \"The thread pool for executing tasks.\"}, \"blobStoreCacheService\": {\"type\": \"any\", \"description\": \"The service for caching blobs.\"}, \"sharedBlobCacheService\": {\"type\": \"any\", \"description\": \"The service for caching blobs shared across multiple shards.\"}}, \"required\": [\"repositories\", \"cache\", \"indexSettings\", \"shardPath\", \"currentTimeNanosSupplier\", \"threadPool\", \"blobStoreCacheService\", \"sharedBlobCacheService\"]}}"}
{"scope": "multiple_function", "query": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "query_for_retrieval": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "answer": "get_song_lyrics", "answer_params": "", "api_description": "def get_song_lyrics:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the lyrics of a song based on the artist's name and song title.\n\t\n\tArguments:\n\t---------\n\t- song_title : string = None (required) The title of the song.\n\t- artist_name : string = None (required) The name of the artist who performed the song.\n\t- lang : string = None (optional) The language of the lyrics. Default is English.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_song_lyrics\", \"description\": \"Retrieve the lyrics of a song based on the artist's name and song title.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"song_title\": {\"type\": \"string\", \"description\": \"The title of the song.\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist who performed the song.\"}, \"lang\": {\"type\": \"string\", \"description\": \"The language of the lyrics. Default is English.\", \"enum\": [\"English\", \"French\", \"Spanish\", \"German\", \"Italian\"]}}, \"required\": [\"song_title\", \"artist_name\"]}}"}
{"scope": "multiple_function", "query": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']", "query_for_retrieval": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']", "answer": "filter_list", "answer_params": "", "api_description": "def filter_list:\n\t\"\"\"\n\tDescription:\n\t\n\tFilters elements of a list based on a given condition\n\t\n\tArguments:\n\t---------\n\t- elements : array = None (required) The list of elements to filter.\n\t- condition : string = None (required) The condition to filter the elements on.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"filter_list\", \"description\": \"Filters elements of a list based on a given condition\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"elements\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of elements to filter.\"}, \"condition\": {\"type\": \"string\", \"description\": \"The condition to filter the elements on.\"}}, \"required\": [\"elements\", \"condition\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"A car is initially at rest and then starts moving with a constant acceleration of 3 m/s^2. After 5 seconds, what is its final velocity? Now, imagine a wave with a frequency of 50 Hz and a wavelength of 3 meters. What is the velocity of this wave? Going back to the car, if it continues to move with the same acceleration for another 7 seconds, what is the total distance it has traveled from the start?\"", "query_for_retrieval": "\"A car is initially at rest and then starts moving with a constant acceleration of 3 m/s^2. After 5 seconds, what is its final velocity? Now, imagine a wave with a frequency of 50 Hz and a wavelength of 3 meters. What is the velocity of this wave? Going back to the car, if it continues to move with the same acceleration for another 7 seconds, what is the total distance it has traveled from the start?\"", "answer": "kinematics.distance", "answer_params": "", "api_description": "def kinematics.distance:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the distance traveled by an object moving under constant acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object in m/s.\n\t- time : float = None (required) The time in seconds the object has been moving.\n\t- acceleration : float = None (optional) The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.distance\", \"description\": \"Find the distance traveled by an object moving under constant acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object in m/s.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time in seconds the object has been moving.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)\"}}, \"required\": [\"initial_velocity\", \"time\"]}}"}
{"scope": "simple", "query": "Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%", "query_for_retrieval": "Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment based on the present value, interest rate, and time period.\n\t\n\tArguments:\n\t---------\n\t- present_value : integer = None (required) The present value or principal amount.\n\t- annual_interest_rate : float = None (required) The annual interest rate in decimal form. Example, 5% is 0.05.\n\t- years : integer = None (required) The time period in years for which the investment is made.\n\t- compounds_per_year : integer = None (optional) The number of times the interest is compounded per year. Default is 1 (annual compounding).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment based on the present value, interest rate, and time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"integer\", \"description\": \"The present value or principal amount.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate in decimal form. Example, 5% is 0.05.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time period in years for which the investment is made.\"}, \"compounds_per_year\": {\"type\": \"integer\", \"description\": \"The number of times the interest is compounded per year. Default is 1 (annual compounding).\"}}, \"required\": [\"present_value\", \"annual_interest_rate\", \"years\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me find the roots of two quadratic equations? The first equation has coefficients of x squared, x, and the constant term as 5, 6, and 1 respectively. The second equation has coefficients of x squared, x, and the constant term as 3, 2, and 1 respectively. Can you solve these equations using the 'solve_quadratic_equation' function?\"", "query_for_retrieval": "\"Can you help me find the roots of two quadratic equations? The first equation has coefficients of x squared, x, and the constant term as 5, 6, and 1 respectively. The second equation has coefficients of x squared, x, and the constant term as 3, 2, and 1 respectively. Can you solve these equations using the 'solve_quadratic_equation' function?\"", "answer": "solve_quadratic_equation", "answer_params": "", "api_description": "def solve_quadratic_equation:\n\t\"\"\"\n\tDescription:\n\t\n\tFunction solves the quadratic equation and returns its roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x squared\n\t- b : integer = None (required) Coefficient of x\n\t- c : integer = None (required) Constant term in the quadratic equation\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic_equation\", \"description\": \"Function solves the quadratic equation and returns its roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x squared\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term in the quadratic equation\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few things? First, I'm planning a trip and I'm interested in mountains. I'm currently in Tokyo and I want to find the 5 tallest mountains within a 200 kilometer radius of my location. Second, I'm working on a physics problem and I need to calculate the entropy change for an isothermal and reversible process. The initial temperature is 300 Kelvin, the final temperature is 350 Kelvin, and the heat capacity is 1.5 J/K. Lastly, I'm curious about a historical event. Can you tell me the date of the 'Battle of Waterloo'? I believe it took place in Belgium.\"", "query_for_retrieval": "\"Can you help me with a few things? First, I'm planning a trip and I'm interested in mountains. I'm currently in Tokyo and I want to find the 5 tallest mountains within a 200 kilometer radius of my location. Second, I'm working on a physics problem and I need to calculate the entropy change for an isothermal and reversible process. The initial temperature is 300 Kelvin, the final temperature is 350 Kelvin, and the heat capacity is 1.5 J/K. Lastly, I'm curious about a historical event. Can you tell me the date of the 'Battle of Waterloo'? I believe it took place in Belgium.\"", "answer": "locate_tallest_mountains", "answer_params": "", "api_description": "def locate_tallest_mountains:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the tallest mountains within a specified radius of a location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city from which to calculate distance.\n\t- radius : integer = None (required) The radius within which to find mountains, measured in kilometers.\n\t- amount : integer = None (required) The number of mountains to find, listed from tallest to smallest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"locate_tallest_mountains\", \"description\": \"Find the tallest mountains within a specified radius of a location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city from which to calculate distance.\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The radius within which to find mountains, measured in kilometers.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The number of mountains to find, listed from tallest to smallest.\"}}, \"required\": [\"location\", \"radius\", \"amount\"]}}"}
{"scope": "simple", "query": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "query_for_retrieval": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "answer": "game_stats.fetch_player_statistics", "answer_params": "", "api_description": "def game_stats.fetch_player_statistics:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch player statistics for a specific video game for a given user.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the video game.\n\t- username : string = None (required) The username of the player.\n\t- platform : string = PC (optional) The platform user is playing on.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_stats.fetch_player_statistics\", \"description\": \"Fetch player statistics for a specific video game for a given user.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the video game.\"}, \"username\": {\"type\": \"string\", \"description\": \"The username of the player.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The platform user is playing on.\", \"default\": \"PC\"}}, \"required\": [\"game\", \"username\"]}}"}
{"scope": "simple", "query": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "query_for_retrieval": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "answer": "whole_foods.check_price", "answer_params": "", "api_description": "def whole_foods.check_price:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck the price of items at a specific Whole Foods location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location of the Whole Foods store.\n\t- items : array = None (required) List of items for which the price needs to be checked.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"whole_foods.check_price\", \"description\": \"Check the price of items at a specific Whole Foods location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location of the Whole Foods store.\"}, \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items for which the price needs to be checked.\"}}, \"required\": [\"location\", \"items\"]}}"}
{"scope": "executable_multiple_function", "query": "While browsing Amazon, I stumbled upon a product that really piqued my interest. However, I'm quite particular about the quality and general consensus on items before I consider adding them to my cart. The product has an ASIN of 'B07ZPKBL9V', and I would like to know what its average customer rating is. Could you find that information for me?", "query_for_retrieval": "While browsing Amazon, I stumbled upon a product that really piqued my interest. However, I'm quite particular about the quality and general consensus on items before I consider adding them to my cart. The product has an ASIN of 'B07ZPKBL9V', and I would like to know what its average customer rating is. Could you find that information for me?", "answer": "get_rating_by_amazon_ASIN", "answer_params": "", "api_description": "def get_rating_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the rating of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_rating_by_amazon_ASIN\", \"description\": \"Finds the rating of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "multiple_function", "query": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "query_for_retrieval": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "answer": "map_service.get_directions", "answer_params": "", "api_description": "def map_service.get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from a starting location to an ending location, including options for route preferences.\n\t\n\tArguments:\n\t---------\n\t- start : string = None (required) Starting location for the route.\n\t- end : string = None (required) Ending location for the route.\n\t- avoid : array = None (optional) Route features to avoid. Default is an empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_service.get_directions\", \"description\": \"Retrieve directions from a starting location to an ending location, including options for route preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"string\", \"description\": \"Starting location for the route.\"}, \"end\": {\"type\": \"string\", \"description\": \"Ending location for the route.\"}, \"avoid\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"tolls\", \"highways\", \"ferries\"]}, \"description\": \"Route features to avoid. Default is an empty array.\"}}, \"required\": [\"start\", \"end\"]}}"}
{"scope": "executable_simple", "query": "To better understand the volatility and risk associated with this particular stock, I need to calculate the standard deviation of its daily closing prices over the past 10 trading days. Here are the figures I've gathered: 1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, and 30000. Can you provide me with the standard deviation for these closing prices?", "query_for_retrieval": "To better understand the volatility and risk associated with this particular stock, I need to calculate the standard deviation of its daily closing prices over the past 10 trading days. Here are the figures I've gathered: 1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, and 30000. Can you provide me with the standard deviation for these closing prices?", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "simple", "query": "What is the ranking of Manchester United in Premier League?", "query_for_retrieval": "What is the ranking of Manchester United in Premier League?", "answer": "sports_ranking", "answer_params": "", "api_description": "def sports_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the ranking of a specific sports team in a specific league\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- league : string = None (required) The name of the league.\n\t- season : integer = None (optional) Optional parameter to specify the season, default is the current season if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking\", \"description\": \"Fetch the ranking of a specific sports team in a specific league\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the league.\"}, \"season\": {\"type\": \"integer\", \"description\": \"Optional parameter to specify the season, default is the current season if not specified.\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "multiple_function", "query": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "query_for_retrieval": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "answer": "calculate_genotype_frequency", "answer_params": "", "api_description": "def calculate_genotype_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n\t\n\tArguments:\n\t---------\n\t- allele_frequency : float = None (required) The frequency of the dominant allele in the population.\n\t- genotype : string = None (required) The genotype which frequency is needed, default is homozygous dominant. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_genotype_frequency\", \"description\": \"Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"allele_frequency\": {\"type\": \"float\", \"description\": \"The frequency of the dominant allele in the population.\"}, \"genotype\": {\"type\": \"string\", \"description\": \"The genotype which frequency is needed, default is homozygous dominant. \", \"enum\": [\"AA\", \"Aa\", \"aa\"]}}, \"required\": [\"allele_frequency\", \"genotype\"]}}"}
{"scope": "java", "query": "How can I create a predicate that determines if a `Join` object represents a full master node with a state older than the local node's accepted term of 42 and accepted version of 7?", "query_for_retrieval": "How can I create a predicate that determines if a `Join` object represents a full master node with a state older than the local node's accepted term of 42 and accepted version of 7?", "answer": "VotingOnlyNodePlugin.fullMasterWithOlderState", "answer_params": "", "api_description": "def VotingOnlyNodePlugin.fullMasterWithOlderState:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates a predicate that checks if a Join object represents a full master node with a state that is older than the provided local accepted term and version.\n\t\n\tArguments:\n\t---------\n\t- localAcceptedTerm : integer = None (required) The local node's accepted term.\n\t- localAcceptedVersion : integer = None (required) The local node's accepted version.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"VotingOnlyNodePlugin.fullMasterWithOlderState\", \"description\": \"Generates a predicate that checks if a Join object represents a full master node with a state that is older than the provided local accepted term and version.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"localAcceptedTerm\": {\"type\": \"integer\", \"description\": \"The local node's accepted term.\"}, \"localAcceptedVersion\": {\"type\": \"integer\", \"description\": \"The local node's accepted version.\"}}, \"required\": [\"localAcceptedTerm\", \"localAcceptedVersion\"]}}"}
{"scope": "parallel_function", "query": "You are planning to build three triangular gardens in your backyard. The first garden has a base of 10 meters and a height of 5 meters, the second garden has a base of 15 meters and a height of 7 meters, and the third garden has a base of 20 meters and a height of 10 meters. What is the total area of the three gardens?", "query_for_retrieval": "You are planning to build three triangular gardens in your backyard. The first garden has a base of 10 meters and a height of 5 meters, the second garden has a base of 15 meters and a height of 7 meters, and the third garden has a base of 20 meters and a height of 10 meters. What is the total area of the three gardens?", "answer": "calc_area_triangle", "answer_params": "", "api_description": "def calc_area_triangle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle with the formula area = 0.5 * base * height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle in meters.\n\t- height : integer = None (required) The perpendicular height of the triangle from the base to the opposite vertex in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_area_triangle\", \"description\": \"Calculate the area of a triangle with the formula area = 0.5 * base * height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle in meters.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The perpendicular height of the triangle from the base to the opposite vertex in meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "parallel_function", "query": "Calculate the Present Value of an investment paying $1000 per year, with an interest rate of 5%, for 10, 20 and 30 years.", "query_for_retrieval": "Calculate the Present Value of an investment paying $1000 per year, with an interest rate of 5%, for 10, 20 and 30 years.", "answer": "calculate_present_value", "answer_params": "", "api_description": "def calculate_present_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the present value of a future cash flows stream.\n\t\n\tArguments:\n\t---------\n\t- payment_per_year : integer = None (required) The payment received per year.\n\t- interest_rate : float = None (required) The interest rate applied per period.\n\t- years : integer = None (required) The total number of years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_present_value\", \"description\": \"Calculate the present value of a future cash flows stream.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"payment_per_year\": {\"type\": \"integer\", \"description\": \"The payment received per year.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate applied per period.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The total number of years.\"}}, \"required\": [\"payment_per_year\", \"interest_rate\", \"years\"]}}"}
{"scope": "parallel_function", "query": "Can you check my loan eligibility for a home loan of amount $500,000 from HSBC with annual income $100,000 and for Wells Fargo for a amount of $700,000 with annual income of $120,000?", "query_for_retrieval": "Can you check my loan eligibility for a home loan of amount $500,000 from HSBC with annual income $100,000 and for Wells Fargo for a amount of $700,000 with annual income of $120,000?", "answer": "loan_eligibility_check", "answer_params": "", "api_description": "def loan_eligibility_check:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck for eligibility for a loan given income and loan amount\n\t\n\tArguments:\n\t---------\n\t- financial_institution : string = None (required) The name of the financial institution e.g. HSBC\n\t- loan_amount : integer = None (required) The loan amount that is requested\n\t- annual_income : integer = None (required) Annual income of the applicant\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"loan_eligibility_check\", \"description\": \"Check for eligibility for a loan given income and loan amount\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"financial_institution\": {\"type\": \"string\", \"description\": \"The name of the financial institution e.g. HSBC\"}, \"loan_amount\": {\"type\": \"integer\", \"description\": \"The loan amount that is requested\"}, \"annual_income\": {\"type\": \"integer\", \"description\": \"Annual income of the applicant\"}}, \"required\": [\"financial_institution\", \"loan_amount\", \"annual_income\"]}}"}
{"scope": "relevance", "query": "Find a pet store near Los Angeles, CA", "query_for_retrieval": "Find a pet store near Los Angeles, CA", "answer": "grocery_store.locate_nearby", "answer_params": "", "api_description": "def grocery_store.locate_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tFind grocery stores nearby a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g., Los Angeles, CA\n\t- store_type : array = ['Supermarket'] (optional) Type of the grocery store.\n\t- is_24_hours : boolean = True (optional) Whether the grocery store is open 24 hours.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.locate_nearby\", \"description\": \"Find grocery stores nearby a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g., Los Angeles, CA\"}, \"store_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Supermarket\", \"Convenience Store\", \"Discount Store\"]}, \"description\": \"Type of the grocery store.\", \"default\": [\"Supermarket\"]}, \"is_24_hours\": {\"type\": \"boolean\", \"description\": \"Whether the grocery store is open 24 hours.\", \"default\": \"True\"}}, \"required\": [\"location\"]}}"}
{"scope": "java", "query": "What is the value of the 'EnableExtensions' property in the Windows registry `WinReg` object under the HKEY_LOCAL_MACHINE root when checking the system policies for the DBeaver application?", "query_for_retrieval": "What is the value of the 'EnableExtensions' property in the Windows registry `WinReg` object under the HKEY_LOCAL_MACHINE root when checking the system policies for the DBeaver application?", "answer": "BasePolicyDataProvider.getRegistryPolicyValue", "answer_params": "", "api_description": "def BasePolicyDataProvider.getRegistryPolicyValue:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the value of a specified property from the DBeaver registry policy node if it exists, specifically for Windows systems.\n\t\n\tArguments:\n\t---------\n\t- root : any = None (required) The root key in the Windows registry (e.g., HKEY_LOCAL_MACHINE).\n\t- property : String = None (required) The name of the property to retrieve the value for from the registry.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"BasePolicyDataProvider.getRegistryPolicyValue\", \"description\": \"Retrieves the value of a specified property from the DBeaver registry policy node if it exists, specifically for Windows systems.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"root\": {\"type\": \"any\", \"description\": \"The root key in the Windows registry (e.g., HKEY_LOCAL_MACHINE).\"}, \"property\": {\"type\": \"String\", \"description\": \"The name of the property to retrieve the value for from the registry.\"}}, \"required\": [\"root\", \"property\"]}}"}
{"scope": "executable_multiple_function", "query": "I've been tracking the closing prices of a specific stock over the last 10 trading days for a report on market volatility. The figures I've recorded are 1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, and 30000. To get a better understanding of the price fluctuation and the risk associated with this stock, I need to calculate the standard deviation of these closing prices. Could you provide me with that statistic?", "query_for_retrieval": "I've been tracking the closing prices of a specific stock over the last 10 trading days for a report on market volatility. The figures I've recorded are 1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, and 30000. To get a better understanding of the price fluctuation and the risk associated with this stock, I need to calculate the standard deviation of these closing prices. Could you provide me with that statistic?", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "simple", "query": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "query_for_retrieval": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "answer": "map_service.get_directions", "answer_params": "", "api_description": "def map_service.get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from a starting location to an ending location, including options for route preferences.\n\t\n\tArguments:\n\t---------\n\t- start : string = None (required) Starting location for the route.\n\t- end : string = None (required) Ending location for the route.\n\t- avoid : array = None (optional) Route features to avoid. Default is ['highways', 'ferries']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_service.get_directions\", \"description\": \"Retrieve directions from a starting location to an ending location, including options for route preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"string\", \"description\": \"Starting location for the route.\"}, \"end\": {\"type\": \"string\", \"description\": \"Ending location for the route.\"}, \"avoid\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"tolls\", \"highways\", \"ferries\"]}, \"description\": \"Route features to avoid. Default is ['highways', 'ferries']\"}}, \"required\": [\"start\", \"end\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my upcoming trip? I need to know the estimated traffic from my home in San Francisco to my office in Palo Alto on a typical weekday. Also, I'm curious about the distance between these two locations. Furthermore, I'm planning a weekend getaway to Los Angeles, so I'd like to know the traffic estimate from Palo Alto to Los Angeles for the coming weekend. Lastly, could you provide me with a 5-day weather forecast for Los Angeles?\"", "query_for_retrieval": "\"Can you help me plan my upcoming trip? I need to know the estimated traffic from my home in San Francisco to my office in Palo Alto on a typical weekday. Also, I'm curious about the distance between these two locations. Furthermore, I'm planning a weekend getaway to Los Angeles, so I'd like to know the traffic estimate from Palo Alto to Los Angeles for the coming weekend. Lastly, could you provide me with a 5-day weather forecast for Los Angeles?\"", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- start_point : string = None (required) Starting point of the journey.\n\t- end_point : string = None (required) Ending point of the journey.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_point\": {\"type\": \"string\", \"description\": \"Starting point of the journey.\"}, \"end_point\": {\"type\": \"string\", \"description\": \"Ending point of the journey.\"}}, \"required\": [\"start_point\", \"end_point\"]}}"}
{"scope": "executable_simple", "query": "I was discussing movies with my friend last night, and we started talking about \"Avatar.\" I realized I don't remember who directed it. Can you find out the director's name for me?", "query_for_retrieval": "I was discussing movies with my friend last night, and we started talking about \"Avatar.\" I realized I don't remember who directed it. Can you find out the director's name for me?", "answer": "get_movie_director", "answer_params": "", "api_description": "def get_movie_director:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the director of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_director\", \"description\": \"Fetches the director of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "simple", "query": "Get start date on the American Civil War.", "query_for_retrieval": "Get start date on the American Civil War.", "answer": "us_history.get_event_info", "answer_params": "", "api_description": "def us_history.get_event_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve detailed information about a significant event in U.S. history.\n\t\n\tArguments:\n\t---------\n\t- event_name : string = None (required) The name of the event.\n\t- specific_info : string = None (required) Specific aspect of information related to event.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.get_event_info\", \"description\": \"Retrieve detailed information about a significant event in U.S. history.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event_name\": {\"type\": \"string\", \"description\": \"The name of the event.\"}, \"specific_info\": {\"type\": \"string\", \"description\": \"Specific aspect of information related to event.\", \"enum\": [\"Start Date\", \"End Date\", \"Participants\", \"Result\", \"Notable Figures\", \"Importance in History\"]}}, \"required\": [\"event_name\", \"specific_info\"]}}"}
{"scope": "simple", "query": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'.", "query_for_retrieval": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'.", "answer": "patient.get_mri_report", "answer_params": "", "api_description": "def patient.get_mri_report:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the brain MRI report of the patient for a given status.\n\t\n\tArguments:\n\t---------\n\t- patient_id : string = None (required) The patient identifier.\n\t- mri_type : string = None (optional) Type of the MRI. Default to be 'brain'.\n\t- status : string = None (required) Status of the report, could be 'in progress', 'concluded' or 'draft'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"patient.get_mri_report\", \"description\": \"Fetch the brain MRI report of the patient for a given status.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"patient_id\": {\"type\": \"string\", \"description\": \"The patient identifier.\"}, \"mri_type\": {\"type\": \"string\", \"description\": \"Type of the MRI. Default to be 'brain'.\", \"enum\": [\"brain\", \"spinal\", \"chest\", \"abdominal\"]}, \"status\": {\"type\": \"string\", \"description\": \"Status of the report, could be 'in progress', 'concluded' or 'draft'.\", \"enum\": [\"in progress\", \"concluded\", \"draft\"]}}, \"required\": [\"patient_id\", \"status\"]}}"}
{"scope": "javascript", "query": "How can I analyze a JSON payload `responseData` to verify if it contains a specific key for API response validation, and trigger the corresponding processing logic? You should set keyToCheck to `expectedKey` and `processKeyFunction` as processingCallBack variable", "query_for_retrieval": "How can I analyze a JSON payload `responseData` to verify if it contains a specific key for API response validation, and trigger the corresponding processing logic? You should set keyToCheck to `expectedKey` and `processKeyFunction` as processingCallBack variable", "answer": "validateApiResponse", "answer_params": "", "api_description": "def validateApiResponse:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function analyzes a JSON payload to determine if it contains a specific key, indicating successful API response, and triggers the corresponding processing logic for that key.\n\t\n\tArguments:\n\t---------\n\t- jsonPayload : dict = None (required) The JSON object representing the API response to be validated.\n\t- keyToCheck : String = None (required) The specific key to look for in the JSON payload.\n\t- processingCallback : any = None (required) The callback function to be executed if the key is present in the JSON payload.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"validateApiResponse\", \"description\": \"This function analyzes a JSON payload to determine if it contains a specific key, indicating successful API response, and triggers the corresponding processing logic for that key.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"jsonPayload\": {\"type\": \"dict\", \"description\": \"The JSON object representing the API response to be validated.\"}, \"keyToCheck\": {\"type\": \"String\", \"description\": \"The specific key to look for in the JSON payload.\"}, \"processingCallback\": {\"type\": \"any\", \"description\": \"The callback function to be executed if the key is present in the JSON payload.\"}}, \"required\": [\"jsonPayload\", \"keyToCheck\", \"processingCallback\"]}}"}
{"scope": "rest", "query": "Can you find the address for the coordinates 40.748817, -73.985428 using the Geocoding API, and ensure the response is in geojson format? I'll be using my key 'YOUR-GEOCODE-API-KEY' for this request.", "query_for_retrieval": "Can you find the address for the coordinates 40.748817, -73.985428 using the Geocoding API, and ensure the response is in geojson format? I'll be using my key 'YOUR-GEOCODE-API-KEY' for this request.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/reverse (required) Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the location to reverse geocode.\n\t  - lon : float = None (required) Longitude of the location to reverse geocode.\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\", \"default\": \"https://geocode.maps.co/reverse\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the location to reverse geocode.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the location to reverse geocode.\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I've put $5000 into a fixed deposit offering a 5% annual interest rate, and I'm planning to let it grow for 10 years. Could you calculate the future value of this investment for me?", "query_for_retrieval": "I've put $5000 into a fixed deposit offering a 5% annual interest rate, and I'm planning to let it grow for 10 years. Could you calculate the future value of this investment for me?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me the name of the scientist who is credited for the discovery of 'Relativity Theory'? After that, I want to book a direct flight from 'Los Angeles' to 'New York' on the date '2022-12-25' at '10:00 AM'. Also, I am interested in knowing the player statistics for the video game 'Call of Duty' for the username 'gamer123' on the 'PlayStation' platform. Lastly, can you find me upcoming 'rock' genre events in 'San Francisco, CA' for the next 14 days?\"", "query_for_retrieval": "\"Can you tell me the name of the scientist who is credited for the discovery of 'Relativity Theory'? After that, I want to book a direct flight from 'Los Angeles' to 'New York' on the date '2022-12-25' at '10:00 AM'. Also, I am interested in knowing the player statistics for the video game 'Call of Duty' for the username 'gamer123' on the 'PlayStation' platform. Lastly, can you find me upcoming 'rock' genre events in 'San Francisco, CA' for the next 14 days?\"", "answer": "get_scientist_for_discovery", "answer_params": "", "api_description": "def get_scientist_for_discovery:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the scientist's name who is credited for a specific scientific discovery or theory.\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The scientific discovery or theory.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_scientist_for_discovery\", \"description\": \"Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The scientific discovery or theory.\"}}, \"required\": [\"discovery\"]}}"}
{"scope": "rest", "query": "I'm planning a camping trip and I need to know the weather forecast. Can you fetch me the weather data for the campsite located at latitude 35.68 and longitude -121.34 for the next 10 days including daily temperature maximums and precipitation forecasts? Also, I prefer the temperature 2 minute max in Fahrenheit and sum of precipitation in inches.", "query_for_retrieval": "I'm planning a camping trip and I need to know the weather forecast. Can you fetch me the weather data for the campsite located at latitude 35.68 and longitude -121.34 for the next 10 days including daily temperature maximums and precipitation forecasts? Also, I prefer the temperature 2 minute max in Fahrenheit and sum of precipitation in inches.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm planning a movie night for my family this weekend, and I want to make sure the film is appropriate for all ages. We've settled on the idea of watching \"Avatar\", but I need to confirm its age rating before we proceed. Could you find out the age rating for the movie \"Avatar\"?", "query_for_retrieval": "I'm planning a movie night for my family this weekend, and I want to make sure the film is appropriate for all ages. We've settled on the idea of watching \"Avatar\", but I need to confirm its age rating before we proceed. Could you find out the age rating for the movie \"Avatar\"?", "answer": "get_movie_rating", "answer_params": "", "api_description": "def get_movie_rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the age rating of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_rating\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "sql", "query": "Can you generate a new database table named \"SurveyResults\" that includes the columns \"RespondentID\", \"Age\", \"Gender\", \"Income\", and \"SatisfactionScore\" to store the data collected from a customer satisfaction survey?", "query_for_retrieval": "Can you generate a new database table named \"SurveyResults\" that includes the columns \"RespondentID\", \"Age\", \"Gender\", \"Income\", and \"SatisfactionScore\" to store the data collected from a customer satisfaction survey?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Get the biography and main contributions of Pope Innocent III.", "query_for_retrieval": "Get the biography and main contributions of Pope Innocent III.", "answer": "publication_year.find", "answer_params": "", "api_description": "def publication_year.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the year a particular scientific work was published.\n\t\n\tArguments:\n\t---------\n\t- author : string = None (required) Name of the author of the work.\n\t- work_title : string = None (required) Title of the scientific work.\n\t- location : string = None (optional) Place of the publication, if known. Default is 'global'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"publication_year.find\", \"description\": \"Fetches the year a particular scientific work was published.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"author\": {\"type\": \"string\", \"description\": \"Name of the author of the work.\"}, \"work_title\": {\"type\": \"string\", \"description\": \"Title of the scientific work.\"}, \"location\": {\"type\": \"string\", \"description\": \"Place of the publication, if known. Default is 'global'.\"}}, \"required\": [\"author\", \"work_title\"]}}"}
{"scope": "relevance", "query": "How to build a new PC?", "query_for_retrieval": "How to build a new PC?", "answer": "fetch_recipe", "answer_params": "", "api_description": "def fetch_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a specific cooking recipe based on user query.\n\t\n\tArguments:\n\t---------\n\t- query : string = None (required) The user's query for a recipe.\n\t- numberOfResults : integer = None (required) Number of recipes the user wants to retrieve. Default is 1.\n\t- includeIngredients : array = ['flour'] (optional) An array of ingredients to include in the search. Optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_recipe\", \"description\": \"Retrieve a specific cooking recipe based on user query.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"The user's query for a recipe.\"}, \"numberOfResults\": {\"type\": \"integer\", \"description\": \"Number of recipes the user wants to retrieve. Default is 1.\"}, \"includeIngredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"An array of ingredients to include in the search. Optional.\", \"default\": [\"flour\"]}}, \"required\": [\"query\", \"numberOfResults\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've got coordinates for a place I'm doing some research on, specifically longitude 12.4924 and latitude 41.8902. I need to know what time zone it falls under. Also, I'm planning a trip to the UK next year, and I'm trying to avoid the busy holiday seasons. Could you tell me what the official holidays are for the UK in 2022?", "query_for_retrieval": "I've got coordinates for a place I'm doing some research on, specifically longitude 12.4924 and latitude 41.8902. I need to know what time zone it falls under. Also, I'm planning a trip to the UK next year, and I'm trying to avoid the busy holiday seasons. Could you tell me what the official holidays are for the UK in 2022?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "sql", "query": "Can you create a new table in the database named \"ChemicalElements\" with the columns \"ElementName\", \"AtomicNumber\", \"Symbol\", and \"AtomicWeight\"?", "query_for_retrieval": "Can you create a new table in the database named \"ChemicalElements\" with the columns \"ElementName\", \"AtomicNumber\", \"Symbol\", and \"AtomicWeight\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Which online bookstore sells 'To Kill a Mockingbird'?", "query_for_retrieval": "Which online bookstore sells 'To Kill a Mockingbird'?", "answer": "add_product_to_cart", "answer_params": "", "api_description": "def add_product_to_cart:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function allows users to add a product to their cart.\n\t\n\tArguments:\n\t---------\n\t- product_id : integer = None (required) The ID of the product\n\t- quantity : integer = None (required) The number of this product to add to the cart\n\t- cart_id : integer = 0 (optional) The ID of the cart, if no ID is given a new cart is created\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_product_to_cart\", \"description\": \"This function allows users to add a product to their cart.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"product_id\": {\"type\": \"integer\", \"description\": \"The ID of the product\"}, \"quantity\": {\"type\": \"integer\", \"description\": \"The number of this product to add to the cart\"}, \"cart_id\": {\"type\": \"integer\", \"description\": \"The ID of the cart, if no ID is given a new cart is created\", \"default\": \"0\"}}, \"required\": [\"product_id\", \"quantity\"]}}"}
{"scope": "parallel_multiple_function", "query": "Use the data from dataset.csv file and fit a linear regression model to predict future sales by setting x=data['sales'] and y=data['future_sales']. Additionally, calculate and return the residuals.", "query_for_retrieval": "Use the data from dataset.csv file and fit a linear regression model to predict future sales by setting x=data['sales'] and y=data['future_sales']. Additionally, calculate and return the residuals.", "answer": "linear_regression_fit", "answer_params": "", "api_description": "def linear_regression_fit:\n\t\"\"\"\n\tDescription:\n\t\n\tFit a linear regression model to data.\n\t\n\tArguments:\n\t---------\n\t- x : array = None (required) Array of the predictor variable.\n\t- y : array = None (required) Array of the dependent variable.\n\t- return_residuals : boolean = false (optional) Flag indicating whether to return the residuals (the difference between the observed and predicted values). Optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression_fit\", \"description\": \"Fit a linear regression model to data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Array of the predictor variable.\"}, \"y\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Array of the dependent variable.\"}, \"return_residuals\": {\"type\": \"boolean\", \"description\": \"Flag indicating whether to return the residuals (the difference between the observed and predicted values). Optional.\", \"default\": \"false\"}}, \"required\": [\"x\", \"y\"]}}"}
{"scope": "relevance", "query": "How many servings of vegetables should I consume in a day?", "query_for_retrieval": "How many servings of vegetables should I consume in a day?", "answer": "personality_assessment.calculate_score", "answer_params": "", "api_description": "def personality_assessment.calculate_score:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the overall score based on a user's response to a personality test\n\t\n\tArguments:\n\t---------\n\t- user_responses : array = None (required) No description available.\n\t- weighted_score : boolean = None (optional) Whether the score should be weighted according to question's importance. Default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"personality_assessment.calculate_score\", \"description\": \"Calculate the overall score based on a user's response to a personality test\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_responses\": {\"type\": \"array\", \"items\": {\"type\": \"integer\", \"description\": \"Each integer represents the user's response to a question on a scale of 1-5\", \"minItems\": 5, \"maxItems\": 100}}, \"weighted_score\": {\"type\": \"boolean\", \"description\": \"Whether the score should be weighted according to question's importance. Default is False\"}}, \"required\": [\"user_responses\"]}}"}
{"scope": "relevance", "query": "Find out about traffic laws in Texas.", "query_for_retrieval": "Find out about traffic laws in Texas.", "answer": "lawsuit_search", "answer_params": "", "api_description": "def lawsuit_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits related to a particular subject matter in a certain location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location to perform the search in.\n\t- subject : string = None (required) The subject matter of the lawsuits.\n\t- year : integer = None (optional) Optional. The year in which the lawsuit was filed. Default: 2024\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_search\", \"description\": \"Search for lawsuits related to a particular subject matter in a certain location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location to perform the search in.\"}, \"subject\": {\"type\": \"string\", \"description\": \"The subject matter of the lawsuits.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Optional. The year in which the lawsuit was filed. Default: 2024\"}}, \"required\": [\"location\", \"subject\"]}}"}
{"scope": "executable_simple", "query": "I'm currently compiling a report on various key players in the tech industry, and I'm looking into the origins and ownerships of some of the most traded stocks. Apple's stock, 'AAPL', has been on my radar, and it's vital for my analysis to confirm the exact name of the company trading under this stock symbol. Could you provide me with the company name for 'AAPL'?", "query_for_retrieval": "I'm currently compiling a report on various key players in the tech industry, and I'm looking into the origins and ownerships of some of the most traded stocks. Apple's stock, 'AAPL', has been on my radar, and it's vital for my analysis to confirm the exact name of the company trading under this stock symbol. Could you provide me with the company name for 'AAPL'?", "answer": "get_company_name_by_stock_name", "answer_params": "", "api_description": "def get_company_name_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the company name of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_company_name_by_stock_name\", \"description\": \"Finds the company name of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "multiple_function", "query": "Search for divorce law specialists in Los Angeles", "query_for_retrieval": "Search for divorce law specialists in Los Angeles", "answer": "doctor.search", "answer_params": "", "api_description": "def doctor.search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a doctor based on area of expertise and location\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Los Angeles, CA\n\t- specialization : string = None (required) Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"doctor.search\", \"description\": \"Search for a doctor based on area of expertise and location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Los Angeles, CA\"}, \"specialization\": {\"type\": \"string\", \"description\": \"Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'.\"}}, \"required\": [\"location\", \"specialization\"]}}"}
{"scope": "executable_simple", "query": "In the studio working on a new track, I've got these two drum loops that I'm trying to synchronize. One loop repeats every 18 beats and the other every 24 beats. I need to figure out after how many beats they'll both line up perfectly so the rhythm stays consistent throughout the song. Could you calculate the least common multiple for these two numbers for me?", "query_for_retrieval": "In the studio working on a new track, I've got these two drum loops that I'm trying to synchronize. One loop repeats every 18 beats and the other every 24 beats. I need to figure out after how many beats they'll both line up perfectly so the rhythm stays consistent throughout the song. Could you calculate the least common multiple for these two numbers for me?", "answer": "math_lcm", "answer_params": "", "api_description": "def math_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the least common multiple of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_lcm\", \"description\": \"Calculates the least common multiple of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "sql", "query": "Can you add a new record to the 'Transactions' table in our database, where the columns are 'TransactionID', 'Date', 'Amount', 'Type' and 'AccountID', and the values to be inserted are 'TXN12345', '2022-03-01', '5000', 'Deposit', and 'ACC789'?", "query_for_retrieval": "Can you add a new record to the 'Transactions' table in our database, where the columns are 'TransactionID', 'Date', 'Amount', 'Type' and 'AccountID', and the values to be inserted are 'TXN12345', '2022-03-01', '5000', 'Deposit', and 'ACC789'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "How can I display the personal information page for a user in a web application, if I have a model object `webModel` and an HTTP request `userRequest` with the parameter 'username' set to 'john_doe'?", "query_for_retrieval": "How can I display the personal information page for a user in a web application, if I have a model object `webModel` and an HTTP request `userRequest` with the parameter 'username' set to 'john_doe'?", "answer": "PersonController.personal", "answer_params": "", "api_description": "def PersonController.personal:\n\t\"\"\"\n\tDescription:\n\t\n\tThis method retrieves personal information for a logged-in user and adds it to the model before returning the view name for the personal information page.\n\t\n\tArguments:\n\t---------\n\t- model : any = None (required) The Model object to which user information attributes are added.\n\t- request : any = None (required) The HttpServletRequest object containing the request parameters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"PersonController.personal\", \"description\": \"This method retrieves personal information for a logged-in user and adds it to the model before returning the view name for the personal information page.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"model\": {\"type\": \"any\", \"description\": \"The Model object to which user information attributes are added.\"}, \"request\": {\"type\": \"any\", \"description\": \"The HttpServletRequest object containing the request parameters.\"}}, \"required\": [\"model\", \"request\"]}}"}
{"scope": "javascript", "query": "How can I execute a custom callback function named 'processNode' on a specific node named 'currentNode' with a state object 'nodeState' during a tree traversal?", "query_for_retrieval": "How can I execute a custom callback function named 'processNode' on a specific node named 'currentNode' with a state object 'nodeState' during a tree traversal?", "answer": "skipThrough", "answer_params": "", "api_description": "def skipThrough:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function allows for a custom operation to be performed on a node during a tree traversal by executing a callback function with the node and a state object as arguments.\n\t\n\tArguments:\n\t---------\n\t- node : any = None (required) The current node being processed in the tree traversal.\n\t- st : any = None (required) The state object associated with the current node.\n\t- c : any = None (required) The callback function to be executed on the current node and state object.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"skipThrough\", \"description\": \"This function allows for a custom operation to be performed on a node during a tree traversal by executing a callback function with the node and a state object as arguments.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"node\": {\"type\": \"any\", \"description\": \"The current node being processed in the tree traversal.\"}, \"st\": {\"type\": \"any\", \"description\": \"The state object associated with the current node.\"}, \"c\": {\"type\": \"any\", \"description\": \"The callback function to be executed on the current node and state object.\"}}, \"required\": [\"node\", \"st\", \"c\"]}}"}
{"scope": "simple", "query": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "query_for_retrieval": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "answer": "european_history.get_event_date", "answer_params": "", "api_description": "def european_history.get_event_date:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the date of a specific event in European history.\n\t\n\tArguments:\n\t---------\n\t- event_name : string = None (required) The name of the event.\n\t- format : string = None (optional) Optional format of the returned date. Default is 'MM-DD-YYYY'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"european_history.get_event_date\", \"description\": \"Retrieve the date of a specific event in European history.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event_name\": {\"type\": \"string\", \"description\": \"The name of the event.\"}, \"format\": {\"type\": \"string\", \"description\": \"Optional format of the returned date. Default is 'MM-DD-YYYY'.\"}}, \"required\": [\"event_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "What are the length and the width of a rectangle which has a perimeter of 14 and area of 15.", "query_for_retrieval": "What are the length and the width of a rectangle which has a perimeter of 14 and area of 15.", "answer": "integral", "answer_params": "", "api_description": "def integral:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the definite integral of a function over an interval [a, b].\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to integrate.\n\t- a : float = None (required) The lower bound of the interval.\n\t- b : float = None (required) The upper bound of the interval.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"integral\", \"description\": \"Calculate the definite integral of a function over an interval [a, b].\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to integrate.\"}, \"a\": {\"type\": \"float\", \"description\": \"The lower bound of the interval.\"}, \"b\": {\"type\": \"float\", \"description\": \"The upper bound of the interval.\"}}, \"required\": [\"function\", \"a\", \"b\"]}}"}
{"scope": "javascript", "query": "How can I generate a new ChartSeries with initial settings including axis labels `axisLabelsArray`, data points `dataPointsArray`, and a default color scheme `defaultColor`, and then integrate it into a specific chart layout `chartLayoutObject`?", "query_for_retrieval": "How can I generate a new ChartSeries with initial settings including axis labels `axisLabelsArray`, data points `dataPointsArray`, and a default color scheme `defaultColor`, and then integrate it into a specific chart layout `chartLayoutObject`?", "answer": "ChartSeriesGenerator", "answer_params": "", "api_description": "def ChartSeriesGenerator:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function creates a new ChartSeries with customizable settings for axis labels, data points, and color schemes, and attaches it to a given chart layout.\n\t\n\tArguments:\n\t---------\n\t- labels : array = None (required) The labels for the chart's axis.\n\t- data : array = None (required) The data points for the series.\n\t- color : String = None (optional) The default color for the series. Optional parameter.\n\t- chartLayout : dict = None (required) The layout object of the chart where the series will be added.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ChartSeriesGenerator\", \"description\": \"This function creates a new ChartSeries with customizable settings for axis labels, data points, and color schemes, and attaches it to a given chart layout.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"labels\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The labels for the chart's axis.\"}, \"data\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The data points for the series.\"}, \"color\": {\"type\": \"String\", \"description\": \"The default color for the series. Optional parameter.\"}, \"chartLayout\": {\"type\": \"dict\", \"description\": \"The layout object of the chart where the series will be added.\"}}, \"required\": [\"labels\", \"data\", \"chartLayout\"]}}"}
{"scope": "rest", "query": "I need to update my financial models with the latest exchange rates. Can you help me fetch the latest rates using my Exchange Rate API key 'YOUR-EXCHANGERATE-API-KEY' for the base currency 'EUR'?", "query_for_retrieval": "I need to update my financial models with the latest exchange rates. Can you help me fetch the latest rates using my Exchange Rate API key 'YOUR-EXCHANGERATE-API-KEY' for the base currency 'EUR'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "What are the different properties of Hydrogen?", "query_for_retrieval": "What are the different properties of Hydrogen?", "answer": "look_up_scientific_contributions", "answer_params": "", "api_description": "def look_up_scientific_contributions:\n\t\"\"\"\n\tDescription:\n\t\n\tLook up major contributions of a particular scientist, based on their name.\n\t\n\tArguments:\n\t---------\n\t- scientist_name : string = None (required) The name of the scientist.\n\t- contributions : integer = None (required) The number of major contributions to return, defaults to 3 if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"look_up_scientific_contributions\", \"description\": \"Look up major contributions of a particular scientist, based on their name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"scientist_name\": {\"type\": \"string\", \"description\": \"The name of the scientist.\"}, \"contributions\": {\"type\": \"integer\", \"description\": \"The number of major contributions to return, defaults to 3 if not provided.\"}}, \"required\": [\"scientist_name\", \"contributions\"]}}"}
{"scope": "java", "query": "In the SmartRefreshLayout library, how can I trigger the finish event for a 'FunGame' header with a `gameLayout` object, indicating that the refresh was successful?", "query_for_retrieval": "In the SmartRefreshLayout library, how can I trigger the finish event for a 'FunGame' header with a `gameLayout` object, indicating that the refresh was successful?", "answer": "FunGameBase.onFinish", "answer_params": "", "api_description": "def FunGameBase.onFinish:\n\t\"\"\"\n\tDescription:\n\t\n\tHandles the finish event of the FunGame refresh header, updating the last finish status and handling manual operations if necessary.\n\t\n\tArguments:\n\t---------\n\t- layout : any = None (required) The RefreshLayout instance associated with the FunGame refresh header.\n\t- success : boolean = None (required) Indicates whether the refresh operation was successful.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"FunGameBase.onFinish\", \"description\": \"Handles the finish event of the FunGame refresh header, updating the last finish status and handling manual operations if necessary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"layout\": {\"type\": \"any\", \"description\": \"The RefreshLayout instance associated with the FunGame refresh header.\"}, \"success\": {\"type\": \"boolean\", \"description\": \"Indicates whether the refresh operation was successful.\"}}, \"required\": [\"layout\", \"success\"]}}"}
{"scope": "parallel_function", "query": "What is the distance in miles between the celestial bodies Mars and Venus, and then between Mars and Jupiter, given that the function 'calculate_distance' requires the names of the two celestial bodies and the unit of measurement?", "query_for_retrieval": "What is the distance in miles between the celestial bodies Mars and Venus, and then between Mars and Jupiter, given that the function 'calculate_distance' requires the names of the two celestial bodies and the unit of measurement?", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two celestial bodies.\n\t\n\tArguments:\n\t---------\n\t- body1 : string = None (required) The first celestial body.\n\t- body2 : string = None (required) The second celestial body.\n\t- unit : string = None (optional) The unit of measurement, default is 'kilometers'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate the distance between two celestial bodies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"body1\": {\"type\": \"string\", \"description\": \"The first celestial body.\"}, \"body2\": {\"type\": \"string\", \"description\": \"The second celestial body.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement, default is 'kilometers'.\"}}, \"required\": [\"body1\", \"body2\"]}}"}
{"scope": "java", "query": "How can I generate introspection information for a class `NodeClass` representing a node in a Truffle DSL processor, and specify that the introspection is not inlined?", "query_for_retrieval": "How can I generate introspection information for a class `NodeClass` representing a node in a Truffle DSL processor, and specify that the introspection is not inlined?", "answer": "FlatNodeGenFactory.generateIntrospectionInfo", "answer_params": "", "api_description": "def FlatNodeGenFactory.generateIntrospectionInfo:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates introspection information for a given class representing a node in the Truffle DSL processor.\n\t\n\tArguments:\n\t---------\n\t- clazz : any = None (required) The class element representing the node for which introspection information is to be generated.\n\t- inlined : boolean = None (required) Indicates whether the introspection is inlined.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"FlatNodeGenFactory.generateIntrospectionInfo\", \"description\": \"Generates introspection information for a given class representing a node in the Truffle DSL processor.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"clazz\": {\"type\": \"any\", \"description\": \"The class element representing the node for which introspection information is to be generated.\"}, \"inlined\": {\"type\": \"boolean\", \"description\": \"Indicates whether the introspection is inlined.\"}}, \"required\": [\"clazz\", \"inlined\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you're a musician who also loves to play poker with friends. One day, you decided to host a poker game at your house. You invited three friends named John, Sarah, and Mike. In the game of Texas Holdem, John had the cards 2 of hearts, 3 of diamonds, 4 of spades, 5 of clubs, and 6 of diamonds. Sarah had the cards 3 of hearts, 4 of diamonds, 5 of spades, 6 of clubs, and 7 of diamonds. Mike had the cards 4 of hearts, 5 of diamonds, 6 of spades, 7 of clubs, and 8 of diamonds. Who won the game? \n\nAfter the game, you all decided to play some music. You picked up your guitar and started to play a song in the key of C. However, you forgot the notes in the C major scale. Could you tell me what they are? \n\nLater, you decided to do a physics experiment. You launched a small object with an initial velocity of 10 m/s. After 5 seconds, you noticed that the object had stopped accelerating. How far did the object travel during this time?\"", "query_for_retrieval": "\"Imagine you're a musician who also loves to play poker with friends. One day, you decided to host a poker game at your house. You invited three friends named John, Sarah, and Mike. In the game of Texas Holdem, John had the cards 2 of hearts, 3 of diamonds, 4 of spades, 5 of clubs, and 6 of diamonds. Sarah had the cards 3 of hearts, 4 of diamonds, 5 of spades, 6 of clubs, and 7 of diamonds. Mike had the cards 4 of hearts, 5 of diamonds, 6 of spades, 7 of clubs, and 8 of diamonds. Who won the game? \n\nAfter the game, you all decided to play some music. You picked up your guitar and started to play a song in the key of C. However, you forgot the notes in the C major scale. Could you tell me what they are? \n\nLater, you decided to do a physics experiment. You launched a small object with an initial velocity of 10 m/s. After 5 seconds, you noticed that the object had stopped accelerating. How far did the object travel during this time?\"", "answer": "poker_game_winner", "answer_params": "", "api_description": "def poker_game_winner:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify the winner in a poker game based on the cards.\n\t\n\tArguments:\n\t---------\n\t- players : array = None (required) Names of the players in a list.\n\t- cards : dict = None (required) An object containing the player name as key and the cards as string values in a list, for example '7 of diamonds'.\n\t- type : string = None (optional) Type of poker game. Defaults to 'Texas Holdem'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_game_winner\", \"description\": \"Identify the winner in a poker game based on the cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"players\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Names of the players in a list.\"}, \"cards\": {\"type\": \"dict\", \"description\": \"An object containing the player name as key and the cards as string values in a list, for example '7 of diamonds'.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of poker game. Defaults to 'Texas Holdem'\"}}, \"required\": [\"players\", \"cards\"]}}"}
{"scope": "relevance", "query": "Calculate the power of 2 raise to 5.", "query_for_retrieval": "Calculate the power of 2 raise to 5.", "answer": "linear_equation_solver", "answer_params": "", "api_description": "def linear_equation_solver:\n\t\"\"\"\n\tDescription:\n\t\n\tSolve a linear equation.\n\t\n\tArguments:\n\t---------\n\t- equation : string = None (required) The linear equation to solve.\n\t- variable : string = None (required) The variable to solve for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_equation_solver\", \"description\": \"Solve a linear equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"equation\": {\"type\": \"string\", \"description\": \"The linear equation to solve.\"}, \"variable\": {\"type\": \"string\", \"description\": \"The variable to solve for.\"}}, \"required\": [\"equation\", \"variable\"]}}"}
{"scope": "executable_simple", "query": "I need to identify the straight line that contains the most points from a set of coordinates I have. The coordinates I'm looking at are [[1,1], [2,2], [3,4], [5,5]]. Could you determine the maximum number of points that align on a single line from this dataset?", "query_for_retrieval": "I need to identify the straight line that contains the most points from a set of coordinates I have. The coordinates I'm looking at are [[1,1], [2,2], [3,4], [5,5]]. Could you determine the maximum number of points that align on a single line from this dataset?", "answer": "maxPoints", "answer_params": "", "api_description": "def maxPoints:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the maximum number of points on a line.\n\t\n\tArguments:\n\t---------\n\t- points : array = None (required) The list of points. Points are 2 element lists.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maxPoints\", \"description\": \"Finds the maximum number of points on a line.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"points\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A point represented by a 2 element list [x, y].\"}, \"description\": \"The list of points. Points are 2 element lists.\"}}, \"required\": [\"points\"]}}"}
{"scope": "relevance", "query": "What is the mating process of Lions?", "query_for_retrieval": "What is the mating process of Lions?", "answer": "get_genetic_traits", "answer_params": "", "api_description": "def get_genetic_traits:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dominant and recessive genetic traits for a given species.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species to retrieve the genetic traits for.\n\t- dominant_trait : string = None (required) The dominant trait for the species.\n\t- recessive_trait : string = None (required) The recessive trait for the species.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_genetic_traits\", \"description\": \"Retrieve the dominant and recessive genetic traits for a given species.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species to retrieve the genetic traits for.\"}, \"dominant_trait\": {\"type\": \"string\", \"description\": \"The dominant trait for the species.\"}, \"recessive_trait\": {\"type\": \"string\", \"description\": \"The recessive trait for the species.\"}}, \"required\": [\"species\", \"dominant_trait\", \"recessive_trait\"]}}"}
{"scope": "executable_multiple_function", "query": "I have a client who's planning a trip to Paris and they're looking for some detailed travel plans. Could we find out the exact latitude and longitude of Paris for this purpose? They're really into the specifics and would appreciate having the coordinates for their personal itinerary.", "query_for_retrieval": "I have a client who's planning a trip to Paris and they're looking for some detailed travel plans. Could we find out the exact latitude and longitude of Paris for this purpose? They're really into the specifics and would appreciate having the coordinates for their personal itinerary.", "answer": "calculate_mean", "answer_params": "", "api_description": "def calculate_mean:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the mean of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mean\", \"description\": \"Calculates the mean of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "simple", "query": "Retrieve the sequence of DNA molecule with id `DNA123`.", "query_for_retrieval": "Retrieve the sequence of DNA molecule with id `DNA123`.", "answer": "fetch_DNA_sequence", "answer_params": "", "api_description": "def fetch_DNA_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the sequence of a DNA molecule with the given id from a public database.\n\t\n\tArguments:\n\t---------\n\t- DNA_id : string = None (required) Unique ID of the DNA molecule in the database.\n\t- format : string = None (optional) Optional parameter to get sequence in specific format (default to 'fasta').\n\t- upstream : integer = None (optional) Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_DNA_sequence\", \"description\": \"Retrieve the sequence of a DNA molecule with the given id from a public database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"DNA_id\": {\"type\": \"string\", \"description\": \"Unique ID of the DNA molecule in the database.\"}, \"format\": {\"type\": \"string\", \"description\": \"Optional parameter to get sequence in specific format (default to 'fasta').\"}, \"upstream\": {\"type\": \"integer\", \"description\": \"Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\"}}, \"required\": [\"DNA_id\"]}}"}
{"scope": "simple", "query": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "query_for_retrieval": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "answer": "integrate", "answer_params": "", "api_description": "def integrate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area under a curve for a specified function between two x values.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to integrate, represented as a string. For example, 'x^3'\n\t- start_x : integer = None (required) The starting x-value to integrate over.\n\t- end_x : integer = None (required) The ending x-value to integrate over.\n\t- method : string = None (optional) The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"integrate\", \"description\": \"Calculate the area under a curve for a specified function between two x values.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to integrate, represented as a string. For example, 'x^3'\"}, \"start_x\": {\"type\": \"integer\", \"description\": \"The starting x-value to integrate over.\"}, \"end_x\": {\"type\": \"integer\", \"description\": \"The ending x-value to integrate over.\"}, \"method\": {\"type\": \"string\", \"description\": \"The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\"}}, \"required\": [\"function\", \"start_x\", \"end_x\"]}}"}
{"scope": "simple", "query": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.", "query_for_retrieval": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.", "answer": "route.estimate_time", "answer_params": "", "api_description": "def route.estimate_time:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the travel time for a specific route with optional stops.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point for the journey. It should be format as city name such as Boston.\n\t- end_location : string = None (required) The destination for the journey. It should be format as city name such as Boston.\n\t- stops : array = None (optional) Additional cities or points of interest to stop at during the journey. Default is an empty list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"route.estimate_time\", \"description\": \"Estimate the travel time for a specific route with optional stops.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point for the journey. It should be format as city name such as Boston.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination for the journey. It should be format as city name such as Boston.\"}, \"stops\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Additional cities or points of interest to stop at during the journey. Default is an empty list.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "executable_multiple_function", "query": "I need to prepare a report for a client who is planning to conduct a business transaction in Japan. They're looking to convert 5,000 Euros into Japanese Yen. To ensure the report is accurate, I need the converted amount in Yen using the current exchange rates. The currency codes I'll be working with are 'EUR' for Euros and 'JPY' for Yen. Can you provide me with the equivalent sum in Yen?", "query_for_retrieval": "I need to prepare a report for a client who is planning to conduct a business transaction in Japan. They're looking to convert 5,000 Euros into Japanese Yen. To ensure the report is accurate, I need the converted amount in Yen using the current exchange rates. The currency codes I'll be working with are 'EUR' for Euros and 'JPY' for Yen. Can you provide me with the equivalent sum in Yen?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "Could you calculate the average of these numbers: 5, 10, 15, 20, and 25? Also, I need to know the timezone for the location at longitude 120.97388 and latitude 14.6042.", "query_for_retrieval": "Could you calculate the average of these numbers: 5, 10, 15, 20, and 25? Also, I need to know the timezone for the location at longitude 120.97388 and latitude 14.6042.", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "relevance", "query": "Can you recommend a good movie to watch?", "query_for_retrieval": "Can you recommend a good movie to watch?", "answer": "word_count", "answer_params": "", "api_description": "def word_count:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the word count of a provided string of text.\n\t\n\tArguments:\n\t---------\n\t- text : string = None (required) The text for which word count needs to be calculated.\n\t- language : string = None (required) The language in which the text is written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"word_count\", \"description\": \"Calculate the word count of a provided string of text.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text for which word count needs to be calculated.\"}, \"language\": {\"type\": \"string\", \"description\": \"The language in which the text is written.\"}}, \"required\": [\"text\", \"language\"]}}"}
{"scope": "parallel_multiple_function", "query": "Create a square painting with blue background and dimensions 16x16 inches, then display it for 30 seconds with 70% screen brightness", "query_for_retrieval": "Create a square painting with blue background and dimensions 16x16 inches, then display it for 30 seconds with 70% screen brightness", "answer": "painting.create", "answer_params": "", "api_description": "def painting.create:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a new painting with specified parameters\n\t\n\tArguments:\n\t---------\n\t- shape : string = None (required) Shape of the painting to be created.\n\t- background_color : string = None (required) Background color of the painting.\n\t- dimensions : array = None (required) Dimensions of the painting in inches.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"painting.create\", \"description\": \"Creates a new painting with specified parameters\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"shape\": {\"type\": \"string\", \"description\": \"Shape of the painting to be created.\"}, \"background_color\": {\"type\": \"string\", \"description\": \"Background color of the painting.\"}, \"dimensions\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dimensions of the painting in inches.\"}}, \"required\": [\"shape\", \"background_color\", \"dimensions\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a financial analysis for an upcoming business transaction, and I need to convert 5,000 Euros into Japanese Yen. Could you provide me with the converted amount using the current exchange rates?", "query_for_retrieval": "I'm working on a financial analysis for an upcoming business transaction, and I need to convert 5,000 Euros into Japanese Yen. Could you provide me with the converted amount using the current exchange rates?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "java", "query": "How can I update the data in a spreadsheet view within a database application, ensuring that metadata is refreshed, existing data is appended, and the current state is preserved?", "query_for_retrieval": "How can I update the data in a spreadsheet view within a database application, ensuring that metadata is refreshed, existing data is appended, and the current state is preserved?", "answer": "SpreadsheetPresentation.refreshData", "answer_params": "", "api_description": "def SpreadsheetPresentation.refreshData:\n\t\"\"\"\n\tDescription:\n\t\n\tRefreshes the data in the spreadsheet view, with options to refresh metadata, append data, and keep the current state.\n\t\n\tArguments:\n\t---------\n\t- refreshMetadata : boolean = None (required) Indicates whether to refresh the metadata.\n\t- append : boolean = None (required) Indicates whether to append the data to the existing data.\n\t- keepState : boolean = None (required) Indicates whether to preserve the current state of the spreadsheet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SpreadsheetPresentation.refreshData\", \"description\": \"Refreshes the data in the spreadsheet view, with options to refresh metadata, append data, and keep the current state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"refreshMetadata\": {\"type\": \"boolean\", \"description\": \"Indicates whether to refresh the metadata.\"}, \"append\": {\"type\": \"boolean\", \"description\": \"Indicates whether to append the data to the existing data.\"}, \"keepState\": {\"type\": \"boolean\", \"description\": \"Indicates whether to preserve the current state of the spreadsheet.\"}}, \"required\": [\"refreshMetadata\", \"append\", \"keepState\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find a Chinese restaurant near me in New York and suggest a high-rated of 4 Italian restaurant in Los Angeles. Then find a cheapest flight for round-trip from New York to Los Angeles", "query_for_retrieval": "Find a Chinese restaurant near me in New York and suggest a high-rated of 4 Italian restaurant in Los Angeles. Then find a cheapest flight for round-trip from New York to Los Angeles", "answer": "restaurant.search", "answer_params": "", "api_description": "def restaurant.search:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a restaurant in a specified location based on the cuisine and ratings.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York, NY\n\t- cuisine : string = None (required) The type of cuisine.\n\t- rating : float = None (optional) The minimum rating. Default 1.0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.search\", \"description\": \"Find a restaurant in a specified location based on the cuisine and ratings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"The type of cuisine.\"}, \"rating\": {\"type\": \"float\", \"description\": \"The minimum rating. Default 1.0\"}}, \"required\": [\"location\", \"cuisine\"], \"optional\": [\"rating\"]}}"}
{"scope": "parallel_function", "query": "You are given a dataset \"data_random_forest\" in the form of a dataframe and you want to train a Random Forest Model on this data. You decide to experiment with different numbers of trees in the forest and different maximum depths of the trees to see how these parameters affect the model's performance. \n\nFirst, you train a model with 100 trees and a maximum depth of 10. Then, you train another model with 200 trees and a maximum depth of 20. After that, you train a third model with 300 trees and a maximum depth of 30. Finally, you train a fourth model with 400 trees and a maximum depth of 40. \n\nCan you invoke the 'random_forest.train' function four times with these different parameters and compare the performance of the four models?", "query_for_retrieval": "You are given a dataset \"data_random_forest\" in the form of a dataframe and you want to train a Random Forest Model on this data. You decide to experiment with different numbers of trees in the forest and different maximum depths of the trees to see how these parameters affect the model's performance. \n\nFirst, you train a model with 100 trees and a maximum depth of 10. Then, you train another model with 200 trees and a maximum depth of 20. After that, you train a third model with 300 trees and a maximum depth of 30. Finally, you train a fourth model with 400 trees and a maximum depth of 40. \n\nCan you invoke the 'random_forest.train' function four times with these different parameters and compare the performance of the four models?", "answer": "random_forest.train", "answer_params": "", "api_description": "def random_forest.train:\n\t\"\"\"\n\tDescription:\n\t\n\tTrain a Random Forest Model on given data\n\t\n\tArguments:\n\t---------\n\t- n_estimators : integer = None (required) The number of trees in the forest.\n\t- max_depth : integer = None (required) The maximum depth of the tree.\n\t- data : string = None (required) The training data for the model.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"random_forest.train\", \"description\": \"Train a Random Forest Model on given data\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n_estimators\": {\"type\": \"integer\", \"description\": \"The number of trees in the forest.\"}, \"max_depth\": {\"type\": \"integer\", \"description\": \"The maximum depth of the tree.\"}, \"data\": {\"type\": \"string\", \"description\": \"The training data for the model.\"}}, \"required\": [\"n_estimators\", \"max_depth\", \"data\"]}}"}
{"scope": "parallel_function", "query": "What is the combined circumference of four circles, where the first circle has a radius of 5m, the second circle has a radius of 10m, the third circle has a radius of 15m, and the fourth circle has a radius of 20m, and I want the output in meters?", "query_for_retrieval": "What is the combined circumference of four circles, where the first circle has a radius of 5m, the second circle has a radius of 10m, the third circle has a radius of 15m, and the fourth circle has a radius of 20m, and I want the output in meters?", "answer": "geometry.circumference", "answer_params": "", "api_description": "def geometry.circumference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the circumference of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- units : string = None (optional) Units for the output circumference measurement. Default is 'cm'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.circumference\", \"description\": \"Calculate the circumference of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"Units for the output circumference measurement. Default is 'cm'.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "parallel_function", "query": "What is the total circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm?", "query_for_retrieval": "What is the total circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm?", "answer": "calculate_circumference", "answer_params": "", "api_description": "def calculate_circumference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the circumference of a circle with a given radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle in the unit given.\n\t- unit : string = None (optional) The unit of measurement for the radius. Default is m.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_circumference\", \"description\": \"Calculates the circumference of a circle with a given radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle in the unit given.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for the radius. Default is m.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "rest", "query": "I need to convert the (63.65687, 117.05229) somewhere in Mountain View, CA' to location name. I have an API key 'YOUR-GEOCODE-API-KEY'. Could you provide me with the proper requests.get call in Python using the Geocoding API?", "query_for_retrieval": "I need to convert the (63.65687, 117.05229) somewhere in Mountain View, CA' to location name. I have an API key 'YOUR-GEOCODE-API-KEY'. Could you provide me with the proper requests.get call in Python using the Geocoding API?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/reverse (required) Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the location to reverse geocode.\n\t  - lon : float = None (required) Longitude of the location to reverse geocode.\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\", \"default\": \"https://geocode.maps.co/reverse\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the location to reverse geocode.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the location to reverse geocode.\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you tell me the estimated date of the Jurassic geological era and calculate how many years ago it was? Also, could you provide the date of the signing of the Magna Carta and calculate how many years ago that event took place?\"", "query_for_retrieval": "\"Could you tell me the estimated date of the Jurassic geological era and calculate how many years ago it was? Also, could you provide the date of the signing of the Magna Carta and calculate how many years ago that event took place?\"", "answer": "geology.get_era", "answer_params": "", "api_description": "def geology.get_era:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the estimated date of a geological era.\n\t\n\tArguments:\n\t---------\n\t- era_name : string = None (required) The name of the geological era. e.g Ice age\n\t- calculate_years_ago : boolean = None (optional) True if years ago is to be calculated. False by default\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geology.get_era\", \"description\": \"Get the estimated date of a geological era.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"era_name\": {\"type\": \"string\", \"description\": \"The name of the geological era. e.g Ice age\"}, \"calculate_years_ago\": {\"type\": \"boolean\", \"description\": \"True if years ago is to be calculated. False by default\"}}, \"required\": [\"era_name\"]}}"}
{"scope": "multiple_function", "query": "Predict the house prices for the next month in New York.", "query_for_retrieval": "Predict the house prices for the next month in New York.", "answer": "house_price_forecast", "answer_params": "", "api_description": "def house_price_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the house prices for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the house price prediction for.\n\t- months : integer = None (required) Number of future months for the prediction.\n\t- features : array = None (optional) Additional features considered for prediction. Not required. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"house_price_forecast\", \"description\": \"Predict the house prices for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the house price prediction for.\"}, \"months\": {\"type\": \"integer\", \"description\": \"Number of future months for the prediction.\"}, \"features\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"SqFt\", \"Bedrooms\", \"Bathrooms\", \"Location\"]}, \"description\": \"Additional features considered for prediction. Not required. Default empty array\", \"optional\": true}}, \"required\": [\"location\", \"months\"]}}"}
{"scope": "relevance", "query": "What is the loss projection for company XYZ for next year?", "query_for_retrieval": "What is the loss projection for company XYZ for next year?", "answer": "finance.predict_revenue", "answer_params": "", "api_description": "def finance.predict_revenue:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the revenue of a company for a specific period based on historical data and industry trends.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- period : string = None (required) The period for which revenue is to be predicted, e.g. next year.\n\t- industry_trends : boolean = None (optional) Whether to consider industry trends in prediction. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.predict_revenue\", \"description\": \"Predict the revenue of a company for a specific period based on historical data and industry trends.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"period\": {\"type\": \"string\", \"description\": \"The period for which revenue is to be predicted, e.g. next year.\"}, \"industry_trends\": {\"type\": \"boolean\", \"description\": \"Whether to consider industry trends in prediction. Defaults to false.\"}}, \"required\": [\"company_name\", \"period\"]}}"}
{"scope": "java", "query": "How do I signal the end of an XML element with the qualified name `{namespaceURI='http://www.example.com', localPart='item', prefix='ex'}` and augmentation information `augmentations` in an XML processing application that uses namespaces?", "query_for_retrieval": "How do I signal the end of an XML element with the qualified name `{namespaceURI='http://www.example.com', localPart='item', prefix='ex'}` and augmentation information `augmentations` in an XML processing application that uses namespaces?", "answer": "XMLNamespaceBinder.endElement", "answer_params": "", "api_description": "def XMLNamespaceBinder.endElement:\n\t\"\"\"\n\tDescription:\n\t\n\tSignals the end of an XML element, handling namespace-related processing if namespaces are enabled, or delegating to the document handler otherwise.\n\t\n\tArguments:\n\t---------\n\t- element : any = None (required) The qualified name of the element that is ending. Use QName object, has a constructor that takes in three parameters, namespaceURI, localPart, prefix\n\t- augs : any = None (required) Augmentation information associated with the element.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"XMLNamespaceBinder.endElement\", \"description\": \"Signals the end of an XML element, handling namespace-related processing if namespaces are enabled, or delegating to the document handler otherwise.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"element\": {\"type\": \"any\", \"description\": \"The qualified name of the element that is ending. Use QName object, has a constructor that takes in three parameters, namespaceURI, localPart, prefix\"}, \"augs\": {\"type\": \"any\", \"description\": \"Augmentation information associated with the element.\"}}, \"required\": [\"element\", \"augs\"]}}"}
{"scope": "simple", "query": "Get the shortest driving distance between New York, USA and Miami, USA.", "query_for_retrieval": "Get the shortest driving distance between New York, USA and Miami, USA.", "answer": "calculate_shortest_distance", "answer_params": "", "api_description": "def calculate_shortest_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the shortest driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the drive.\n\t- end_location : string = None (required) The destination location for the drive.\n\t- route_preference : string = None (required) The preferred type of route.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_shortest_distance\", \"description\": \"Calculate the shortest driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the drive.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the drive.\"}, \"route_preference\": {\"type\": \"string\", \"enum\": [\"Shortest\", \"Scenic\"], \"description\": \"The preferred type of route.\"}}, \"required\": [\"start_location\", \"end_location\", \"route_preference\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find me the lowest price for a Yamaha Acoustic Guitar in Austin and compare it to the average price of Yamaha Acoustic Guitar in New York. Also tell me how many stores carry Yamaha Acoustic Guitar in each city.", "query_for_retrieval": "Find me the lowest price for a Yamaha Acoustic Guitar in Austin and compare it to the average price of Yamaha Acoustic Guitar in New York. Also tell me how many stores carry Yamaha Acoustic Guitar in each city.", "answer": "lowest_price", "answer_params": "", "api_description": "def lowest_price:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the lowest price for a particular product within a given city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city where the product will be searched.\n\t- product : string = None (required) The product for which the lowest price will be searched.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lowest_price\", \"description\": \"Returns the lowest price for a particular product within a given city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city where the product will be searched.\"}, \"product\": {\"type\": \"string\", \"description\": \"The product for which the lowest price will be searched.\"}}, \"required\": [\"city\", \"product\"]}}"}
{"scope": "parallel_function", "query": "\"In a thermodynamics experiment, you are tasked with calculating the entropy change for a process. The process starts at an initial temperature of 300 Kelvin and ends at a final temperature of 350 Kelvin. The heat capacity of the system is 4.18 J/K. The process is isothermal. Can you calculate the entropy change for this process? What if the process is not isothermal, how does the entropy change?\"", "query_for_retrieval": "\"In a thermodynamics experiment, you are tasked with calculating the entropy change for a process. The process starts at an initial temperature of 300 Kelvin and ends at a final temperature of 350 Kelvin. The heat capacity of the system is 4.18 J/K. The process is isothermal. Can you calculate the entropy change for this process? What if the process is not isothermal, how does the entropy change?\"", "answer": "calculate_entropy_change", "answer_params": "", "api_description": "def calculate_entropy_change:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the entropy change for an isothermal and reversible process.\n\t\n\tArguments:\n\t---------\n\t- initial_temp : integer = None (required) The initial temperature in Kelvin.\n\t- final_temp : integer = None (required) The final temperature in Kelvin.\n\t- heat_capacity : float = None (required) The heat capacity in J/K.\n\t- isothermal : boolean = None (optional) Whether the process is isothermal. Default is True.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_entropy_change\", \"description\": \"Calculate the entropy change for an isothermal and reversible process.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_temp\": {\"type\": \"integer\", \"description\": \"The initial temperature in Kelvin.\"}, \"final_temp\": {\"type\": \"integer\", \"description\": \"The final temperature in Kelvin.\"}, \"heat_capacity\": {\"type\": \"float\", \"description\": \"The heat capacity in J/K.\"}, \"isothermal\": {\"type\": \"boolean\", \"description\": \"Whether the process is isothermal. Default is True.\"}}, \"required\": [\"initial_temp\", \"final_temp\", \"heat_capacity\"]}}"}
{"scope": "simple", "query": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "query_for_retrieval": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "answer": "finance.calculate_future_value", "answer_params": "", "api_description": "def finance.calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- rate_of_return : float = None (required) The annual rate of return.\n\t- years : integer = None (required) The time frame of the investment in years.\n\t- contribution : integer = None (optional) Optional: Additional regular contributions. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.calculate_future_value\", \"description\": \"Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"rate_of_return\": {\"type\": \"float\", \"description\": \"The annual rate of return.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time frame of the investment in years.\"}, \"contribution\": {\"type\": \"integer\", \"description\": \"Optional: Additional regular contributions. Default is 0.\"}}, \"required\": [\"initial_investment\", \"rate_of_return\", \"years\"]}}"}
{"scope": "executable_simple", "query": "I'm currently deep into a complex quantum mechanics simulation, and part of the process involves a bit of linear algebra. I need to multiply two matrices to proceed with my calculations. The first matrix I have is [[2, 3], [4, 5]], and the second one is [[6, 7], [8, 9]]. Could you help me with the result of multiplying these two matrices?", "query_for_retrieval": "I'm currently deep into a complex quantum mechanics simulation, and part of the process involves a bit of linear algebra. I need to multiply two matrices to proceed with my calculations. The first matrix I have is [[2, 3], [4, 5]], and the second one is [[6, 7], [8, 9]]. Could you help me with the result of multiplying these two matrices?", "answer": "mat_mul", "answer_params": "", "api_description": "def mat_mul:\n\t\"\"\"\n\tDescription:\n\t\n\tMultiplies two matrices.\n\t\n\tArguments:\n\t---------\n\t- matA : array = None (required) The first matrix.\n\t- matB : array = None (required) The second matrix.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mat_mul\", \"description\": \"Multiplies two matrices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"matA\": {\"type\": \"array\", \"description\": \"The first matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}, \"matB\": {\"type\": \"array\", \"description\": \"The second matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}}, \"required\": [\"matA\", \"matB\"]}}"}
{"scope": "relevance", "query": "How frequent do members at the Museum of Modern Art visi last year?", "query_for_retrieval": "How frequent do members at the Museum of Modern Art visi last year?", "answer": "most_frequent_visitor", "answer_params": "", "api_description": "def most_frequent_visitor:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the visitor who visited the museum the most within a given period.\n\t\n\tArguments:\n\t---------\n\t- museum_name : string = None (required) The name of the museum.\n\t- start_date : string = None (required) The start date of the period, format: yyyy-mm-dd.\n\t- end_date : string = None (required) The end date of the period, format: yyyy-mm-dd.\n\t- minimum_visits : integer = None (optional) The minimum number of visits to qualify. Default: 1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"most_frequent_visitor\", \"description\": \"Retrieve the visitor who visited the museum the most within a given period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The start date of the period, format: yyyy-mm-dd.\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The end date of the period, format: yyyy-mm-dd.\"}, \"minimum_visits\": {\"type\": \"integer\", \"description\": \"The minimum number of visits to qualify. Default: 1\"}}, \"required\": [\"museum_name\", \"start_date\", \"end_date\"]}}"}
{"scope": "sql", "query": "Can you generate a new table named \"Genes\" in the database, with the column names being \"GeneID\", \"GeneName\", \"Chromosome\", \"StartLocation\", and \"EndLocation\"?", "query_for_retrieval": "Can you generate a new table named \"Genes\" in the database, with the column names being \"GeneID\", \"GeneName\", \"Chromosome\", \"StartLocation\", and \"EndLocation\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently delving into the Fibonacci sequence for my mathematical research and I'd like to examine the first 20 numbers of the sequence. Could you generate that for me?", "query_for_retrieval": "I'm currently delving into the Fibonacci sequence for my mathematical research and I'd like to examine the first 20 numbers of the sequence. Could you generate that for me?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me create a piece of music in D Minor with a tempo of 120 beats per minute and then generate an audio signal with a frequency of 440 Hz and an amplitude of 0.5? After that, I would like to generate another piece of music in E Major with a tempo of 90 beats per minute and a time signature of 3/4. Finally, generate another audio signal with a frequency of 300 Hz, an amplitude of 0.7, and a duration of 5 seconds.\"", "query_for_retrieval": "\"Can you help me create a piece of music in D Minor with a tempo of 120 beats per minute and then generate an audio signal with a frequency of 440 Hz and an amplitude of 0.5? After that, I would like to generate another piece of music in E Major with a tempo of 90 beats per minute and a time signature of 3/4. Finally, generate another audio signal with a frequency of 300 Hz, an amplitude of 0.7, and a duration of 5 seconds.\"", "answer": "audio.generate", "answer_params": "", "api_description": "def audio.generate:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate an audio signal given a frequency, amplitude, and duration.\n\t\n\tArguments:\n\t---------\n\t- frequency : integer = None (required) Frequency of the audio signal in Hz.\n\t- amplitude : float = None (required) Amplitude of the audio signal.\n\t- duration : float = None (optional) Duration of the audio signal in seconds. Default is 1 second if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"audio.generate\", \"description\": \"Generate an audio signal given a frequency, amplitude, and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"frequency\": {\"type\": \"integer\", \"description\": \"Frequency of the audio signal in Hz.\"}, \"amplitude\": {\"type\": \"float\", \"description\": \"Amplitude of the audio signal.\"}, \"duration\": {\"type\": \"float\", \"description\": \"Duration of the audio signal in seconds. Default is 1 second if not specified.\", \"optional\": true}}, \"required\": [\"frequency\", \"amplitude\"]}}"}
{"scope": "multiple_function", "query": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "query_for_retrieval": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "answer": "currency_exchange.convert", "answer_params": "", "api_description": "def currency_exchange.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert an amount from a base currency to a target currency based on the current exchange rate.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The currency to convert from.\n\t- target_currency : string = None (required) The currency to convert to.\n\t- amount : float = None (required) The amount in base currency to convert\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_exchange.convert\", \"description\": \"Convert an amount from a base currency to a target currency based on the current exchange rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount in base currency to convert\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "multiple_function", "query": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "query_for_retrieval": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "answer": "metropolitan_museum.get_top_artworks", "answer_params": "", "api_description": "def metropolitan_museum.get_top_artworks:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number of artworks to fetch\n\t- sort_by : string = None (optional) The criteria to sort the results on. Default is ''.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"metropolitan_museum.get_top_artworks\", \"description\": \"Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number of artworks to fetch\"}, \"sort_by\": {\"type\": \"string\", \"description\": \"The criteria to sort the results on. Default is ''.\", \"enum\": [\"popularity\", \"chronological\", \"alphabetical\"]}}, \"required\": [\"number\"]}}"}
{"scope": "relevance", "query": "What is the fastest route from Los Angeles to New York?", "query_for_retrieval": "What is the fastest route from Los Angeles to New York?", "answer": "get_closest_airport", "answer_params": "", "api_description": "def get_closest_airport:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the closest airport to a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city you want to find the nearest airport for.\n\t- radius : integer = 1 (optional) The radius within which to find airports.\n\t- limit : integer = None (optional) Limit the number of airports to return. Default: 5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_closest_airport\", \"description\": \"Find the closest airport to a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city you want to find the nearest airport for.\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The radius within which to find airports.\", \"optional\": \"true\", \"default\": 1}, \"limit\": {\"type\": \"integer\", \"description\": \"Limit the number of airports to return. Default: 5\", \"optional\": \"true\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Calculate the greatest common divisor of two given numbers, for example 12 and 15.", "query_for_retrieval": "Calculate the greatest common divisor of two given numbers, for example 12 and 15.", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the greatest common divisor (gcd) of the two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) The first number.\n\t- num2 : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Calculate the greatest common divisor (gcd) of the two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"The first number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "simple", "query": "Provide key war events in German history from 1871 to 1945.", "query_for_retrieval": "Provide key war events in German history from 1871 to 1945.", "answer": "history.get_key_events", "answer_params": "", "api_description": "def history.get_key_events:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve key historical events within a specific period for a certain country.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The name of the country for which history is queried.\n\t- start_year : integer = None (required) Start year of the period for which history is queried.\n\t- end_year : integer = None (required) End year of the period for which history is queried.\n\t- event_type : array = None (optional) Types of event. Default to 'all', which all types will be considered.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history.get_key_events\", \"description\": \"Retrieve key historical events within a specific period for a certain country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The name of the country for which history is queried.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"Start year of the period for which history is queried.\"}, \"end_year\": {\"type\": \"integer\", \"description\": \"End year of the period for which history is queried.\"}, \"event_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"War\", \"Revolutions\", \"Diplomacy\", \"Economy\"]}, \"description\": \"Types of event. Default to 'all', which all types will be considered.\"}}, \"required\": [\"country\", \"start_year\", \"end_year\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please provide me with the following financial data for Microsoft and Apple over the past 30 days? First, I would like to know the average closing price of Microsoft's stocks using data from Yahoo Finance. Second, I need to know the total revenue of Apple using data from Google Finance. Third, I am interested in the total volume of stocks traded for both Microsoft and Apple, again using data from Yahoo Finance. Could you please calculate these for me?\"", "query_for_retrieval": "\"Could you please provide me with the following financial data for Microsoft and Apple over the past 30 days? First, I would like to know the average closing price of Microsoft's stocks using data from Yahoo Finance. Second, I need to know the total revenue of Apple using data from Google Finance. Third, I am interested in the total volume of stocks traded for both Microsoft and Apple, again using data from Yahoo Finance. Could you please calculate these for me?\"", "answer": "volume_traded", "answer_params": "", "api_description": "def volume_traded:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total volume of stocks traded over a certain period of time\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) Name of the company to get data for\n\t- days : integer = None (required) Number of past days to calculate volume traded for\n\t- data_source : string = None (optional) Source to fetch the financial data. default is 'yahoo finance'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"volume_traded\", \"description\": \"Calculate the total volume of stocks traded over a certain period of time\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"Name of the company to get data for\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days to calculate volume traded for\"}, \"data_source\": {\"type\": \"string\", \"description\": \"Source to fetch the financial data. default is 'yahoo finance'\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "simple", "query": "Look up details of a felony crime record for case number CA123456 in San Diego County", "query_for_retrieval": "Look up details of a felony crime record for case number CA123456 in San Diego County", "answer": "crime_record.get_record", "answer_params": "", "api_description": "def crime_record.get_record:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve detailed felony crime records using a specific case number and location.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The case number related to the crime.\n\t- county : string = None (required) The county in which the crime occurred.\n\t- details : boolean = None (optional) To get a detailed report, set as true. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"crime_record.get_record\", \"description\": \"Retrieve detailed felony crime records using a specific case number and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The case number related to the crime.\"}, \"county\": {\"type\": \"string\", \"description\": \"The county in which the crime occurred.\"}, \"details\": {\"type\": \"boolean\", \"description\": \"To get a detailed report, set as true. Defaults to false.\"}}, \"required\": [\"case_number\", \"county\"]}}"}
{"scope": "simple", "query": "Find the closest sushi restaurant with a patio in Boston.", "query_for_retrieval": "Find the closest sushi restaurant with a patio in Boston.", "answer": "restaurant_search.find_closest", "answer_params": "", "api_description": "def restaurant_search.find_closest:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city, for instance Boston, MA\n\t- cuisine : string = None (required) Type of food like Sushi.\n\t- amenities : array = None (optional) Preferred amenities in the restaurant. Default 'Wi-Fi'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_search.find_closest\", \"description\": \"Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city, for instance Boston, MA\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Type of food like Sushi.\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Patio\", \"Wi-Fi\", \"Happy Hour\", \"Wheelchair Accessible\"]}, \"description\": \"Preferred amenities in the restaurant. Default 'Wi-Fi'.\"}}, \"required\": [\"location\", \"cuisine\"]}}"}
{"scope": "java", "query": "How can I create a term query for a field type `usernameField` that searches for the value 'JohnDoe' in a case-insensitive manner within an Elasticsearch test case?", "query_for_retrieval": "How can I create a term query for a field type `usernameField` that searches for the value 'JohnDoe' in a case-insensitive manner within an Elasticsearch test case?", "answer": "TermQueryBuilderTests.termQuery", "answer_params": "", "api_description": "def TermQueryBuilderTests.termQuery:\n\t\"\"\"\n\tDescription:\n\t\n\tConstructs a term query based on the provided field type, value, and case sensitivity setting.\n\t\n\tArguments:\n\t---------\n\t- mapper : any = None (required) The MappedFieldType instance for the field to be queried.\n\t- value : any = None (required) The value to query for.\n\t- caseInsensitive : boolean = None (required) Whether the term query should be case insensitive.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"TermQueryBuilderTests.termQuery\", \"description\": \"Constructs a term query based on the provided field type, value, and case sensitivity setting.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mapper\": {\"type\": \"any\", \"description\": \"The MappedFieldType instance for the field to be queried.\"}, \"value\": {\"type\": \"any\", \"description\": \"The value to query for.\"}, \"caseInsensitive\": {\"type\": \"boolean\", \"description\": \"Whether the term query should be case insensitive.\"}}, \"required\": [\"mapper\", \"value\", \"caseInsensitive\"]}}"}
{"scope": "java", "query": "How do I ensure that the application image directory exists and has a valid name when preparing parameters for creating a macOS installer package, given that the application image path is '/Applications/MyApp.app' and the application name is 'MyApp'?", "query_for_retrieval": "How do I ensure that the application image directory exists and has a valid name when preparing parameters for creating a macOS installer package, given that the application image path is '/Applications/MyApp.app' and the application name is 'MyApp'?", "answer": "MacBaseInstallerBundler.validateAppImageAndBundeler", "answer_params": "", "api_description": "def MacBaseInstallerBundler.validateAppImageAndBundeler:\n\t\"\"\"\n\tDescription:\n\t\n\tValidates the application image and bundler parameters to ensure that the application image directory exists, has a valid name, and checks if it's signed when required.\n\t\n\tArguments:\n\t---------\n\t- params : HashMap = None (required) A map containing the parameters for the application image and bundler validation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"MacBaseInstallerBundler.validateAppImageAndBundeler\", \"description\": \"Validates the application image and bundler parameters to ensure that the application image directory exists, has a valid name, and checks if it's signed when required.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"params\": {\"type\": \"HashMap\", \"description\": \"A map containing the parameters for the application image and bundler validation.\"}}, \"required\": [\"params\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the return on equity for two companies? The first company has a net income of $1,000,000, shareholder's equity of $5,000,000, and paid dividends of $200,000. The second company has a net income of $2,000,000, shareholder's equity of $10,000,000, but did not pay any dividends.\"", "query_for_retrieval": "\"Can you calculate the return on equity for two companies? The first company has a net income of $1,000,000, shareholder's equity of $5,000,000, and paid dividends of $200,000. The second company has a net income of $2,000,000, shareholder's equity of $10,000,000, but did not pay any dividends.\"", "answer": "calculate_return_on_equity", "answer_params": "", "api_description": "def calculate_return_on_equity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\n\t\n\tArguments:\n\t---------\n\t- net_income : integer = None (required) The company's net income.\n\t- shareholder_equity : integer = None (required) The company's total shareholder's equity.\n\t- dividends_paid : integer = None (optional) The total dividends paid by the company. Optional. If not given, assumes it's 0 as default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_return_on_equity\", \"description\": \"Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"net_income\": {\"type\": \"integer\", \"description\": \"The company's net income.\"}, \"shareholder_equity\": {\"type\": \"integer\", \"description\": \"The company's total shareholder's equity.\"}, \"dividends_paid\": {\"type\": \"integer\", \"description\": \"The total dividends paid by the company. Optional. If not given, assumes it's 0 as default.\"}}, \"required\": [\"net_income\", \"shareholder_equity\"]}}"}
{"scope": "sql", "query": "In a database of chemical compounds, there is a table named 'Compounds' that includes details about various chemical compounds. The columns in this table are 'CompoundName', 'MolecularFormula', 'MolecularWeight', 'Density', and 'MeltingPoint'. If a recent scientific study disproves the existence of a compound previously believed to be real, specifically the compound with the name 'Dihydrogen Monoxide' and the molecular formula 'H2O', how would you eliminate this data from the database?", "query_for_retrieval": "In a database of chemical compounds, there is a table named 'Compounds' that includes details about various chemical compounds. The columns in this table are 'CompoundName', 'MolecularFormula', 'MolecularWeight', 'Density', and 'MeltingPoint'. If a recent scientific study disproves the existence of a compound previously believed to be real, specifically the compound with the name 'Dihydrogen Monoxide' and the molecular formula 'H2O', how would you eliminate this data from the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "How far will a car travel in time 't' when launched with velocity 'v' at an angle 'theta'?", "query_for_retrieval": "How far will a car travel in time 't' when launched with velocity 'v' at an angle 'theta'?", "answer": "calculate_projectile_range", "answer_params": "", "api_description": "def calculate_projectile_range:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the range of a projectile launched at an angle with initial velocity, using the kinematic equation.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity at which projectile is launched.\n\t- angle : float = None (required) The angle at which projectile is launched. This should be in degrees.\n\t- time : float = 0.5 (optional) The time in seconds after which the range is to be calculated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_projectile_range\", \"description\": \"Calculate the range of a projectile launched at an angle with initial velocity, using the kinematic equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity at which projectile is launched.\"}, \"angle\": {\"type\": \"float\", \"description\": \"The angle at which projectile is launched. This should be in degrees.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time in seconds after which the range is to be calculated.\", \"default\": 0.5}}, \"required\": [\"initial_velocity\", \"angle\"]}}"}
{"scope": "parallel_multiple_function", "query": "Get temperature and humidity forecast for Boston, USA and precipitation forecast for Rome, Italy for next 10 days.", "query_for_retrieval": "Get temperature and humidity forecast for Boston, USA and precipitation forecast for Rome, Italy for next 10 days.", "answer": "weather_forecast_precipitation", "answer_params": "", "api_description": "def weather_forecast_precipitation:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a precipitation forecast for a specific location for a certain number of days.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the precipitation forecast for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_forecast_precipitation\", \"description\": \"Retrieve a precipitation forecast for a specific location for a certain number of days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the precipitation forecast for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "simple", "query": "What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?", "query_for_retrieval": "What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?", "answer": "calculate_vehicle_emission", "answer_params": "", "api_description": "def calculate_vehicle_emission:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\n\t\n\tArguments:\n\t---------\n\t- vehicle_type : string = None (required) The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\n\t- miles_driven : integer = None (required) The number of miles driven per year.\n\t- emission_factor : float = None (optional) Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_vehicle_emission\", \"description\": \"Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vehicle_type\": {\"type\": \"string\", \"description\": \"The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\"}, \"miles_driven\": {\"type\": \"integer\", \"description\": \"The number of miles driven per year.\"}, \"emission_factor\": {\"type\": \"float\", \"description\": \"Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48.\"}}, \"required\": [\"vehicle_type\", \"miles_driven\"]}}"}
{"scope": "parallel_function", "query": "What is the status and scheduled trial date for case number XY1234 in Los Angeles County Court, and case number GH5678 in Orange County Court?", "query_for_retrieval": "What is the status and scheduled trial date for case number XY1234 in Los Angeles County Court, and case number GH5678 in Orange County Court?", "answer": "court_info.get_case_status", "answer_params": "", "api_description": "def court_info.get_case_status:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the status and trial dates for court cases from specified county courts.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The specific court case number.\n\t- court : string = None (required) The county court where the case is filed.\n\t- details : string = None (optional) Specific details required about the court case. Defaults to 'status'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"court_info.get_case_status\", \"description\": \"Retrieves the status and trial dates for court cases from specified county courts.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The specific court case number.\"}, \"court\": {\"type\": \"string\", \"description\": \"The county court where the case is filed.\"}, \"details\": {\"type\": \"string\", \"enum\": [\"status\", \"trial_date\"], \"description\": \"Specific details required about the court case. Defaults to 'status'.\"}}, \"required\": [\"case_number\", \"court\"]}}"}
{"scope": "rest", "query": "Can you show me how to make a GET request to find the geolocation details of an IP address, but I'm only interested in the query, status, and country fields. Also, I need the response in French.", "query_for_retrieval": "Can you show me how to make a GET request to find the geolocation details of an IP address, but I'm only interested in the query, status, and country fields. Also, I need the response in French.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "What is the most visited market in New York?", "query_for_retrieval": "What is the most visited market in New York?", "answer": "museum_data.get_visit_stats", "answer_params": "", "api_description": "def museum_data.get_visit_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve visitation statistics for museums.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city where the museum is located.\n\t- year : integer = None (required) The year for which data is to be fetched.\n\t- month : integer = 12 (optional) The month for which data is to be fetched (Optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum_data.get_visit_stats\", \"description\": \"Retrieve visitation statistics for museums.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city where the museum is located.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which data is to be fetched.\"}, \"month\": {\"type\": \"integer\", \"description\": \"The month for which data is to be fetched (Optional).\", \"default\": 12}}, \"required\": [\"city\", \"year\"]}}"}
{"scope": "executable_multiple_function", "query": "I need to calculate the sum of the binary numbers '10011' and '1100'. Could you help me with that?", "query_for_retrieval": "I need to calculate the sum of the binary numbers '10011' and '1100'. Could you help me with that?", "answer": "add_binary_numbers", "answer_params": "", "api_description": "def add_binary_numbers:\n\t\"\"\"\n\tDescription:\n\t\n\tAdds two binary numbers.\n\t\n\tArguments:\n\t---------\n\t- a : string = None (required) The first binary number.\n\t- b : string = None (required) The second binary number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_binary_numbers\", \"description\": \"Adds two binary numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"string\", \"description\": \"The first binary number.\"}, \"b\": {\"type\": \"string\", \"description\": \"The second binary number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "simple", "query": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.", "query_for_retrieval": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.", "answer": "investment.predictProfit", "answer_params": "", "api_description": "def investment.predictProfit:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the profit for given investment after specified number of years.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The amount invested in dollars.\n\t- annual_return : float = None (required) The annual return rate of the investment.\n\t- years : integer = None (required) The time period in years for which the investment is made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment.predictProfit\", \"description\": \"Predict the profit for given investment after specified number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The amount invested in dollars.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate of the investment.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The time period in years for which the investment is made.\"}}, \"required\": [\"investment_amount\", \"annual_return\", \"years\"]}}"}
{"scope": "parallel_function", "query": "\"Can you plot two sine waves for me? The first one should have a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. The second one should have a frequency of 10 Hz, starting from 0 radians and ending at 20 radians, with an amplitude of 3 and a phase shift of 2 radians.\"", "query_for_retrieval": "\"Can you plot two sine waves for me? The first one should have a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. The second one should have a frequency of 10 Hz, starting from 0 radians and ending at 20 radians, with an amplitude of 3 and a phase shift of 2 radians.\"", "answer": "plot_sine_wave", "answer_params": "", "api_description": "def plot_sine_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tPlot a sine wave for a given frequency in a given range.\n\t\n\tArguments:\n\t---------\n\t- start_range : integer = None (required) Start of the range in radians.\n\t- end_range : integer = None (required) End of the range in radians.\n\t- frequency : integer = None (required) Frequency of the sine wave in Hz.\n\t- amplitude : integer = None (optional) Amplitude of the sine wave. Default is 1.\n\t- phase_shift : integer = None (optional) Phase shift of the sine wave in radians. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plot_sine_wave\", \"description\": \"Plot a sine wave for a given frequency in a given range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_range\": {\"type\": \"integer\", \"description\": \"Start of the range in radians.\"}, \"end_range\": {\"type\": \"integer\", \"description\": \"End of the range in radians.\"}, \"frequency\": {\"type\": \"integer\", \"description\": \"Frequency of the sine wave in Hz.\"}, \"amplitude\": {\"type\": \"integer\", \"description\": \"Amplitude of the sine wave. Default is 1.\"}, \"phase_shift\": {\"type\": \"integer\", \"description\": \"Phase shift of the sine wave in radians. Default is 0.\"}}, \"required\": [\"start_range\", \"end_range\", \"frequency\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me plan my vacation? I need to know the total cost. First, I'm considering staying at the Hilton New York for 5 nights in a deluxe room. Could you tell me how much that would cost? Second, I'm thinking of renting a sedan from Enterprise for 10 days. How much would that be? Lastly, I'm planning to fly with Delta Airlines in business class. There will be 3 of us. Can you tell me the total flight cost?\"", "query_for_retrieval": "\"Could you help me plan my vacation? I need to know the total cost. First, I'm considering staying at the Hilton New York for 5 nights in a deluxe room. Could you tell me how much that would cost? Second, I'm thinking of renting a sedan from Enterprise for 10 days. How much would that be? Lastly, I'm planning to fly with Delta Airlines in business class. There will be 3 of us. Can you tell me the total flight cost?\"", "answer": "flight_ticket_pricing.get", "answer_params": "", "api_description": "def flight_ticket_pricing.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet pricing for a specific type of flight ticket for specified number of passengers.\n\t\n\tArguments:\n\t---------\n\t- airline : string = None (required) The name of the airline.\n\t- flightClass : string = None (required) Class of the flight.\n\t- passengers : integer = None (required) Number of passengers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight_ticket_pricing.get\", \"description\": \"Get pricing for a specific type of flight ticket for specified number of passengers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"airline\": {\"type\": \"string\", \"description\": \"The name of the airline.\"}, \"flightClass\": {\"type\": \"string\", \"description\": \"Class of the flight.\"}, \"passengers\": {\"type\": \"integer\", \"description\": \"Number of passengers.\"}}, \"required\": [\"airline\", \"flightClass\", \"passengers\"]}}"}
{"scope": "sql", "query": "Can you remove all records from the 'employees' table where the 'salary' column is less than 50000?", "query_for_retrieval": "Can you remove all records from the 'employees' table where the 'salary' column is less than 50000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a trip? I need to know the distance in kilometers from New York to London using the 'geodistance.find' function, then I want to know the time difference between New York and London using the 'timezones.get_difference' function. After that, I want to find flights from New York to London on the date of 'next friday' using the 'flights.search' function. Finally, I want to know the distance in miles from London to Paris using the 'geodistance.find' function again.\"", "query_for_retrieval": "\"Can you help me plan a trip? I need to know the distance in kilometers from New York to London using the 'geodistance.find' function, then I want to know the time difference between New York and London using the 'timezones.get_difference' function. After that, I want to find flights from New York to London on the date of 'next friday' using the 'flights.search' function. Finally, I want to know the distance in miles from London to Paris using the 'geodistance.find' function again.\"", "answer": "flights.search", "answer_params": "", "api_description": "def flights.search:\n\t\"\"\"\n\tDescription:\n\t\n\tFind flights between two cities.\n\t\n\tArguments:\n\t---------\n\t- from_city : string = None (required) The city to depart from.\n\t- to_city : string = None (required) The city to arrive at.\n\t- date : string = None (optional) The date to fly. Default is today if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flights.search\", \"description\": \"Find flights between two cities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"from_city\": {\"type\": \"string\", \"description\": \"The city to depart from.\"}, \"to_city\": {\"type\": \"string\", \"description\": \"The city to arrive at.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date to fly. Default is today if not specified.\"}}, \"required\": [\"from_city\", \"to_city\"]}}"}
{"scope": "simple", "query": "Compose a simple piano melody with a progression of C, F and G for 4 measures.", "query_for_retrieval": "Compose a simple piano melody with a progression of C, F and G for 4 measures.", "answer": "compose_melody", "answer_params": "", "api_description": "def compose_melody:\n\t\"\"\"\n\tDescription:\n\t\n\tCompose a melody using the specified chord progression for a certain number of measures on specified instrument.\n\t\n\tArguments:\n\t---------\n\t- progression : array = None (required) The progression of chords.\n\t- measures : integer = None (required) The number of measures of the melody.\n\t- instrument : string = None (optional) The instrument for the composition. Default is 'Piano'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"compose_melody\", \"description\": \"Compose a melody using the specified chord progression for a certain number of measures on specified instrument.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"progression\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The progression of chords.\"}, \"measures\": {\"type\": \"integer\", \"description\": \"The number of measures of the melody.\"}, \"instrument\": {\"type\": \"string\", \"description\": \"The instrument for the composition. Default is 'Piano'.\"}}, \"required\": [\"progression\", \"measures\"]}}"}
{"scope": "relevance", "query": "What is the highest grossing movie of all time?", "query_for_retrieval": "What is the highest grossing movie of all time?", "answer": "movies.search", "answer_params": "", "api_description": "def movies.search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch movies based on a set of specified criteria.\n\t\n\tArguments:\n\t---------\n\t- title : string = None (required) The title of the movie.\n\t- year : integer = None (required) The release year of the movie.\n\t- genre : string = None (optional) The genre of the movie. Default: 'science fiction'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"movies.search\", \"description\": \"Search movies based on a set of specified criteria.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"The title of the movie.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The release year of the movie.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of the movie. Default: 'science fiction'\"}}, \"required\": [\"title\", \"year\"]}}"}
{"scope": "simple", "query": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "query_for_retrieval": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "answer": "entropy_change.calculate", "answer_params": "", "api_description": "def entropy_change.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the change in entropy for a mass of a specific substance under set initial and final conditions.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The substance for which the change in entropy is calculated.\n\t- mass : integer = None (required) The mass of the substance in kg.\n\t- initial_temperature : integer = None (required) The initial temperature of the substance in degree Celsius.\n\t- final_temperature : integer = None (required) The final temperature of the substance in degree Celsius.\n\t- pressure : integer = 1 (optional) The pressure the substance is under in atmospheres.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"entropy_change.calculate\", \"description\": \"Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The substance for which the change in entropy is calculated.\"}, \"mass\": {\"type\": \"integer\", \"description\": \"The mass of the substance in kg.\"}, \"initial_temperature\": {\"type\": \"integer\", \"description\": \"The initial temperature of the substance in degree Celsius.\"}, \"final_temperature\": {\"type\": \"integer\", \"description\": \"The final temperature of the substance in degree Celsius.\"}, \"pressure\": {\"type\": \"integer\", \"default\": 1, \"description\": \"The pressure the substance is under in atmospheres.\"}}, \"required\": [\"substance\", \"mass\", \"initial_temperature\", \"final_temperature\"]}}"}
{"scope": "simple", "query": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet.", "query_for_retrieval": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet.", "answer": "predict_house_price", "answer_params": "", "api_description": "def predict_house_price:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the price of a house in a given area based on number of bedrooms, bathrooms and area.\n\t\n\tArguments:\n\t---------\n\t- bedrooms : integer = None (required) The number of bedrooms in the house.\n\t- bathrooms : integer = None (required) The number of bathrooms in the house.\n\t- area : integer = None (required) The area of the house in square feet.\n\t- location : string = None (required) The location of the house in the format of city name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"predict_house_price\", \"description\": \"Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"bedrooms\": {\"type\": \"integer\", \"description\": \"The number of bedrooms in the house.\"}, \"bathrooms\": {\"type\": \"integer\", \"description\": \"The number of bathrooms in the house.\"}, \"area\": {\"type\": \"integer\", \"description\": \"The area of the house in square feet.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the house in the format of city name.\"}}, \"required\": [\"bedrooms\", \"bathrooms\", \"area\", \"location\"]}}"}
{"scope": "multiple_function", "query": "Calculate the magnetic field at point P using Ampere\u2019s law where current I is 10 Amperes and r is 0.01 meter.", "query_for_retrieval": "Calculate the magnetic field at point P using Ampere\u2019s law where current I is 10 Amperes and r is 0.01 meter.", "answer": "electric_field.calculate", "answer_params": "", "api_description": "def electric_field.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric field based on the amount of charge and distance from the charge\n\t\n\tArguments:\n\t---------\n\t- Q : float = None (required) The amount of charge in coulombs.\n\t- r : float = None (required) The distance from the charge in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"electric_field.calculate\", \"description\": \"Calculate the electric field based on the amount of charge and distance from the charge\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"Q\": {\"type\": \"float\", \"description\": \"The amount of charge in coulombs.\"}, \"r\": {\"type\": \"float\", \"description\": \"The distance from the charge in meters.\"}}, \"required\": [\"Q\", \"r\"]}}"}
{"scope": "multiple_function", "query": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "query_for_retrieval": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "answer": "create_player_profile", "answer_params": "", "api_description": "def create_player_profile:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a new player profile with character name, class and starting level.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The desired name of the player.\n\t- class : string = None (required) The character class for the player\n\t- starting_level : integer = 1 (optional) The starting level for the player\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_player_profile\", \"description\": \"Create a new player profile with character name, class and starting level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The desired name of the player.\"}, \"class\": {\"type\": \"string\", \"description\": \"The character class for the player\"}, \"starting_level\": {\"type\": \"integer\", \"description\": \"The starting level for the player\", \"default\": 1}}, \"required\": [\"player_name\", \"class\"]}}"}
{"scope": "multiple_function", "query": "Determine my personality type based on the five factor model with given information: I'm talkative, gets nervous easily, has few artistic interests, tend to be lazy and has a forgiving nature.", "query_for_retrieval": "Determine my personality type based on the five factor model with given information: I'm talkative, gets nervous easily, has few artistic interests, tend to be lazy and has a forgiving nature.", "answer": "MBTI.analyse", "answer_params": "", "api_description": "def MBTI.analyse:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.\n\t\n\tArguments:\n\t---------\n\t- thinking_vs_feeling : string = None (required) Preference of user between thinking and feeling.\n\t- introverted_vs_extroverted : string = None (required) Preference of user between introverted and extroverted.\n\t- judging_vs_perceiving : string = None (required) Preference of user between judging and perceiving.\n\t- sensing_vs_intuition : string = None (required) Preference of user between sensing and intuition.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"MBTI.analyse\", \"description\": \"Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"thinking_vs_feeling\": {\"type\": \"string\", \"description\": \"Preference of user between thinking and feeling.\"}, \"introverted_vs_extroverted\": {\"type\": \"string\", \"description\": \"Preference of user between introverted and extroverted.\"}, \"judging_vs_perceiving\": {\"type\": \"string\", \"description\": \"Preference of user between judging and perceiving.\"}, \"sensing_vs_intuition\": {\"type\": \"string\", \"description\": \"Preference of user between sensing and intuition.\"}}, \"required\": [\"thinking_vs_feeling\", \"introverted_vs_extroverted\", \"judging_vs_perceiving\", \"sensing_vs_intuition\"]}}"}
{"scope": "simple", "query": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text", "query_for_retrieval": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text", "answer": "court_case.search", "answer_params": "", "api_description": "def court_case.search:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves details about a court case using its docket number and location.\n\t\n\tArguments:\n\t---------\n\t- docket_number : string = None (required) The docket number for the case.\n\t- location : string = None (required) The location where the case is registered, in the format: state, e.g., Texas\n\t- full_text : boolean = false (optional) Option to return the full text of the case ruling.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"court_case.search\", \"description\": \"Retrieves details about a court case using its docket number and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"docket_number\": {\"type\": \"string\", \"description\": \"The docket number for the case.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the case is registered, in the format: state, e.g., Texas\"}, \"full_text\": {\"type\": \"boolean\", \"default\": \"false\", \"description\": \"Option to return the full text of the case ruling.\"}}, \"required\": [\"docket_number\", \"location\"]}}"}
{"scope": "sql", "query": "Can you record the discovery of a new plant species in the Sahara desert, named \"Cactaceae saharae\", with a height of 15 cm, a lifespan of 20 years, and a seed weight of 0.5 grams, in the \"Plant_Species\" table in the database? The columns in the table are \"Species_Name\", \"Height\", \"Lifespan\", and \"Seed_Weight\".", "query_for_retrieval": "Can you record the discovery of a new plant species in the Sahara desert, named \"Cactaceae saharae\", with a height of 15 cm, a lifespan of 20 years, and a seed weight of 0.5 grams, in the \"Plant_Species\" table in the database? The columns in the table are \"Species_Name\", \"Height\", \"Lifespan\", and \"Seed_Weight\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Who is the Governor of California?", "query_for_retrieval": "Who is the Governor of California?", "answer": "legal_case.file", "answer_params": "", "api_description": "def legal_case.file:\n\t\"\"\"\n\tDescription:\n\t\n\tFile a new case in a specific court.\n\t\n\tArguments:\n\t---------\n\t- court : string = None (required) The name of the court.\n\t- case_type : string = None (required) The type of case being filed.\n\t- documents : array = ['document.txt'] (optional) List of documents needed to be filed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"legal_case.file\", \"description\": \"File a new case in a specific court.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"court\": {\"type\": \"string\", \"description\": \"The name of the court.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of case being filed.\"}, \"documents\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of documents needed to be filed.\", \"default\": [\"document.txt\"]}}, \"required\": [\"court\", \"case_type\"]}}"}
{"scope": "parallel_function", "query": "What is the shortest driving distance from New York City to Los Angeles, and then from Los Angeles to Miami, considering both the shortest and scenic route preferences?", "query_for_retrieval": "What is the shortest driving distance from New York City to Los Angeles, and then from Los Angeles to Miami, considering both the shortest and scenic route preferences?", "answer": "calculate_shortest_distance", "answer_params": "", "api_description": "def calculate_shortest_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the shortest driving distance between two locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the drive.\n\t- end_location : string = None (required) The destination location for the drive.\n\t- route_preference : string = None (required) The preferred type of route.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_shortest_distance\", \"description\": \"Calculate the shortest driving distance between two locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the drive.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the drive.\"}, \"route_preference\": {\"type\": \"string\", \"enum\": [\"Shortest\", \"Scenic\"], \"description\": \"The preferred type of route.\"}}, \"required\": [\"start_location\", \"end_location\", \"route_preference\"]}}"}
{"scope": "parallel_function", "query": "\"Could you calculate the derivative of the polynomial function '3x^3 - 2x^2 + 5x - 7' and then evaluate this derivative at x=4? After that, could you also calculate the derivative of the resulting function and evaluate it at x=2?\"", "query_for_retrieval": "\"Could you calculate the derivative of the polynomial function '3x^3 - 2x^2 + 5x - 7' and then evaluate this derivative at x=4? After that, could you also calculate the derivative of the resulting function and evaluate it at x=2?\"", "answer": "calculate_derivative", "answer_params": "", "api_description": "def calculate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the derivative of a polynomial function.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The polynomial function.\n\t- x_value : integer = None (optional) The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value. default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_derivative\", \"description\": \"Calculate the derivative of a polynomial function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The polynomial function.\"}, \"x_value\": {\"type\": \"integer\", \"description\": \"The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value. default is 0.\"}}, \"required\": [\"function\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm in the middle of analyzing demographic data for a project and need to cross-reference some information based on zip codes. I've got a specific zip code, let's say 90210, and I need to find out which city it corresponds to. Can you help me retrieve the city name for this zip code?", "query_for_retrieval": "I'm in the middle of analyzing demographic data for a project and need to cross-reference some information based on zip codes. I've got a specific zip code, let's say 90210, and I need to find out which city it corresponds to. Can you help me retrieve the city name for this zip code?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_function", "query": "Can you find me case law details of Case No 28473 and 64725, their history and details of litigants?", "query_for_retrieval": "Can you find me case law details of Case No 28473 and 64725, their history and details of litigants?", "answer": "law_case.get_details", "answer_params": "", "api_description": "def law_case.get_details:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches detailed information on a specific case including its history and the litigants involved.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The unique number identifying the case.\n\t- include_history : boolean = None (optional) Flag indicating if case history should be included. Default is false.\n\t- include_litigants : boolean = None (optional) Flag indicating if litigant details should be included. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_case.get_details\", \"description\": \"Fetches detailed information on a specific case including its history and the litigants involved.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The unique number identifying the case.\"}, \"include_history\": {\"type\": \"boolean\", \"description\": \"Flag indicating if case history should be included. Default is false.\"}, \"include_litigants\": {\"type\": \"boolean\", \"description\": \"Flag indicating if litigant details should be included. Default is false.\"}}, \"required\": [\"case_number\"]}}"}
{"scope": "multiple_function", "query": "Calculate the area of a triangle with base 6 and height 10.", "query_for_retrieval": "Calculate the area of a triangle with base 6 and height 10.", "answer": "map_service.get_directions", "answer_params": "", "api_description": "def map_service.get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from a starting location to an ending location, including options for route preferences.\n\t\n\tArguments:\n\t---------\n\t- start : string = None (required) Starting location for the route.\n\t- end : string = None (required) Ending location for the route.\n\t- avoid : array = None (optional) Route features to avoid. Default is empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_service.get_directions\", \"description\": \"Retrieve directions from a starting location to an ending location, including options for route preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"string\", \"description\": \"Starting location for the route.\"}, \"end\": {\"type\": \"string\", \"description\": \"Ending location for the route.\"}, \"avoid\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"tolls\", \"highways\", \"ferries\"]}, \"description\": \"Route features to avoid. Default is empty array.\"}}, \"required\": [\"start\", \"end\"]}}"}
{"scope": "simple", "query": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "query_for_retrieval": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "answer": "safeway.order", "answer_params": "", "api_description": "def safeway.order:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder specified items from a Safeway location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location of the Safeway store, e.g. Palo Alto, CA.\n\t- items : array = None (required) List of items to order.\n\t- quantity : array = None (required) Quantity of each item in the order list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"safeway.order\", \"description\": \"Order specified items from a Safeway location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location of the Safeway store, e.g. Palo Alto, CA.\"}, \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items to order.\"}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Quantity of each item in the order list.\"}}, \"required\": [\"location\", \"items\", \"quantity\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been monitoring my investment portfolio and I noticed that I have 500 shares of Apple stock. I'm curious to know the total value in Euros. Currently, the stock is valued at $500 per share. I'll need the latest monthly stock history with no adjustments for dividends or splits. After getting the stock value, can you convert the total amount from USD to Euros for me?", "query_for_retrieval": "I've been monitoring my investment portfolio and I noticed that I have 500 shares of Apple stock. I'm curious to know the total value in Euros. Currently, the stock is valued at $500 per share. I'll need the latest monthly stock history with no adjustments for dividends or splits. After getting the stock value, can you convert the total amount from USD to Euros for me?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "multiple_function", "query": "Calculate the circumference of a circle with radius 3", "query_for_retrieval": "Calculate the circumference of a circle with radius 3", "answer": "get_earliest_reference", "answer_params": "", "api_description": "def get_earliest_reference:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the earliest historical reference of a person.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the person.\n\t- source : string = None (optional) Source to fetch the reference. Default is 'scriptures'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_earliest_reference\", \"description\": \"Retrieve the earliest historical reference of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the person.\"}, \"source\": {\"type\": \"string\", \"enum\": [\"scriptures\", \"historical records\"], \"description\": \"Source to fetch the reference. Default is 'scriptures'\"}}, \"required\": [\"name\"]}}"}
{"scope": "javascript", "query": "What is the final velocity for an object in free fall after 5 seconds, given the gravity g and initial velocity 0?", "query_for_retrieval": "What is the final velocity for an object in free fall after 5 seconds, given the gravity g and initial velocity 0?", "answer": "calculateFinalVelocity", "answer_params": "", "api_description": "def calculateFinalVelocity:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function calculates the final velocity of an object in free fall after a certain time, taking into account the acceleration due to gravity and the initial velocity.\n\t\n\tArguments:\n\t---------\n\t- time : float = None (required) The time in seconds for which the object has been in free fall.\n\t- gravity : float = None (required) The acceleration due to gravity, typically in m/s^2.\n\t- initialVelocity : float = None (required) The initial velocity of the object in m/s at the start of the free fall.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculateFinalVelocity\", \"description\": \"This function calculates the final velocity of an object in free fall after a certain time, taking into account the acceleration due to gravity and the initial velocity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"time\": {\"type\": \"float\", \"description\": \"The time in seconds for which the object has been in free fall.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The acceleration due to gravity, typically in m/s^2.\"}, \"initialVelocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object in m/s at the start of the free fall.\"}}, \"required\": [\"time\", \"gravity\", \"initialVelocity\"]}}"}
{"scope": "multiple_function", "query": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "query_for_retrieval": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "answer": "weather.humidity_forecast", "answer_params": "", "api_description": "def weather.humidity_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a humidity forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the humidity for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t- min_humidity : integer = None (optional) Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather.humidity_forecast\", \"description\": \"Retrieve a humidity forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the humidity for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}, \"min_humidity\": {\"type\": \"integer\", \"description\": \"Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "java", "query": "How can I obtain a reactive queue with the name 'taskQueue' using a custom serialization codec `jsonCodec` in a reactive programming model with Redisson?", "query_for_retrieval": "How can I obtain a reactive queue with the name 'taskQueue' using a custom serialization codec `jsonCodec` in a reactive programming model with Redisson?", "answer": "RedissonRx.getQueue", "answer_params": "", "api_description": "def RedissonRx.getQueue:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves a reactive queue instance with the specified name and codec.\n\t\n\tArguments:\n\t---------\n\t- name : String = None (required) The name of the queue.\n\t- codec : any = None (required) The codec used for serialization and deserialization of objects in the queue.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RedissonRx.getQueue\", \"description\": \"Retrieves a reactive queue instance with the specified name and codec.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"String\", \"description\": \"The name of the queue.\"}, \"codec\": {\"type\": \"any\", \"description\": \"The codec used for serialization and deserialization of objects in the queue.\"}}, \"required\": [\"name\", \"codec\"]}}"}
{"scope": "relevance", "query": "What is the dominant genetic trait of a Lion?", "query_for_retrieval": "What is the dominant genetic trait of a Lion?", "answer": "genetics.get_variant_frequency", "answer_params": "", "api_description": "def genetics.get_variant_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the frequency of a gene variant in a specific population.\n\t\n\tArguments:\n\t---------\n\t- variant_id : string = None (required) The id of the gene variant.\n\t- population : string = None (required) The population to retrieve the frequency for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"genetics.get_variant_frequency\", \"description\": \"Retrieve the frequency of a gene variant in a specific population.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"variant_id\": {\"type\": \"string\", \"description\": \"The id of the gene variant.\"}, \"population\": {\"type\": \"string\", \"description\": \"The population to retrieve the frequency for.\"}}, \"required\": [\"variant_id\", \"population\"]}}"}
{"scope": "parallel_function", "query": "I want to order a large pepperoni pizza and a chicken Caesar salad from Whole Foods at the downtown location and then another order of the same items from the uptown location.", "query_for_retrieval": "I want to order a large pepperoni pizza and a chicken Caesar salad from Whole Foods at the downtown location and then another order of the same items from the uptown location.", "answer": "whole_foods.order", "answer_params": "", "api_description": "def whole_foods.order:\n\t\"\"\"\n\tDescription:\n\t\n\tOrder food from Whole Foods\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location of Whole Foods.\n\t- items : array = None (required) List of items to order.\n\t- size : string = None (required) Size of the order.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"whole_foods.order\", \"description\": \"Order food from Whole Foods\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location of Whole Foods.\"}, \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of items to order.\"}, \"size\": {\"type\": \"string\", \"description\": \"Size of the order.\", \"enum\": [\"small\", \"medium\", \"large\"]}}, \"required\": [\"location\", \"items\", \"size\"]}}"}
{"scope": "multiple_function", "query": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "query_for_retrieval": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "answer": "flight.book", "answer_params": "", "api_description": "def flight.book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a direct flight for a specific date and time from departure location to destination location.\n\t\n\tArguments:\n\t---------\n\t- departure_location : string = None (required) The location you are departing from.\n\t- destination_location : string = None (required) The location you are flying to.\n\t- date : string = None (required) The date of the flight. Accepts standard date format e.g., 2022-04-28.\n\t- time : string = None (optional) Preferred time of flight. Default is 'anytime'.\n\t- direct_flight : boolean = None (optional) If set to true, only direct flights will be searched. Default is false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight.book\", \"description\": \"Book a direct flight for a specific date and time from departure location to destination location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"departure_location\": {\"type\": \"string\", \"description\": \"The location you are departing from.\"}, \"destination_location\": {\"type\": \"string\", \"description\": \"The location you are flying to.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the flight. Accepts standard date format e.g., 2022-04-28.\"}, \"time\": {\"type\": \"string\", \"description\": \"Preferred time of flight. Default is 'anytime'.\"}, \"direct_flight\": {\"type\": \"boolean\", \"description\": \"If set to true, only direct flights will be searched. Default is false\"}}, \"required\": [\"departure_location\", \"destination_location\", \"date\"]}}"}
{"scope": "simple", "query": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero.", "query_for_retrieval": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero.", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\n\t\n\tArguments:\n\t---------\n\t- height : integer = None (required) The height the object is dropped from, in meters.\n\t- initial_velocity : integer = None (optional) The initial velocity of the object in m/s. Default is zero.\n\t- gravity : float = None (optional) Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"height\": {\"type\": \"integer\", \"description\": \"The height the object is dropped from, in meters.\"}, \"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in m/s. Default is zero.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity.\"}}, \"required\": [\"height\"]}}"}
{"scope": "sql", "query": "Can you fetch the records from the 'students' table where the 'grade' column is less than 60 and the 'course' column is 'Computer Science'?", "query_for_retrieval": "Can you fetch the records from the 'students' table where the 'grade' column is less than 60 and the 'course' column is 'Computer Science'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660.", "query_for_retrieval": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660.", "answer": "card_games.poker_determine_winner", "answer_params": "", "api_description": "def card_games.poker_determine_winner:\n\t\"\"\"\n\tDescription:\n\t\n\tDetermines the winner in a game of Poker based on the cards in each players' hands.\n\t\n\tArguments:\n\t---------\n\t- player1 : string = None (required) The first player's name.\n\t- hand1 : array = None (required) The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']\n\t- player2 : string = None (required) The second player's name.\n\t- hand2 : array = None (required) The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"card_games.poker_determine_winner\", \"description\": \"Determines the winner in a game of Poker based on the cards in each players' hands.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player1\": {\"type\": \"string\", \"description\": \"The first player's name.\"}, \"hand1\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of cards (as strings) in first player's hand. E.g ['10\\u2660', 'J\\u2660']\"}, \"player2\": {\"type\": \"string\", \"description\": \"The second player's name.\"}, \"hand2\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of cards (as strings) in second player's hand. E.g ['9\\u2665', '10\\u2665']\"}}, \"required\": [\"player1\", \"hand1\", \"player2\", \"hand2\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you first calculate the probability of drawing a heart from a deck of 52 cards where there are 13 hearts, and then calculate the probability of drawing a queen from the same deck where there are 4 queens? After that, could you retrieve the most recent artwork by the artist named 'Pablo Picasso' with a detailed description? Finally, could you locate the most popular sculpture exhibitions in New York, NY that are happening in the month of December and have high user ratings?\"", "query_for_retrieval": "\"Could you first calculate the probability of drawing a heart from a deck of 52 cards where there are 13 hearts, and then calculate the probability of drawing a queen from the same deck where there are 4 queens? After that, could you retrieve the most recent artwork by the artist named 'Pablo Picasso' with a detailed description? Finally, could you locate the most popular sculpture exhibitions in New York, NY that are happening in the month of December and have high user ratings?\"", "answer": "get_sculpture_info", "answer_params": "", "api_description": "def get_sculpture_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the most recent artwork by a specified artist with its detailed description.\n\t\n\tArguments:\n\t---------\n\t- artist_name : string = None (required) The name of the artist.\n\t- year : integer = None (optional) Year of the sculpture. This is optional. Default is the current year.\n\t- detail : boolean = None (optional) If True, it provides detailed description of the sculpture. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sculpture_info\", \"description\": \"Retrieves the most recent artwork by a specified artist with its detailed description.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the sculpture. This is optional. Default is the current year.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"If True, it provides detailed description of the sculpture. Defaults to False.\"}}, \"required\": [\"artist_name\"]}}"}
{"scope": "relevance", "query": "Find me restaurants in London", "query_for_retrieval": "Find me restaurants in London", "answer": "find_pois", "answer_params": "", "api_description": "def find_pois:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate points of interest (pois) based on specified criteria.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city or region, e.g. London, UK\n\t- category : array = None (required) Type of points of interest.\n\t- rating : float = 0.3 (optional) Minimum rating to consider\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_pois\", \"description\": \"Locate points of interest (pois) based on specified criteria.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city or region, e.g. London, UK\"}, \"category\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Restaurants\", \"Hotels\", \"Tourist spots\"]}, \"description\": \"Type of points of interest.\"}, \"rating\": {\"type\": \"float\", \"description\": \"Minimum rating to consider\", \"default\": \"0.3\"}}, \"required\": [\"location\", \"category\"]}}"}
{"scope": "parallel_function", "query": "\"Could you calculate the Body Mass Index (BMI) for four individuals? The first person weighs 75 kilograms and is 180 centimeters tall, the second person weighs 60 kilograms and is 165 centimeters tall, the third person weighs 80 kilograms and is 175 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. Please use the metric system for all calculations.\"", "query_for_retrieval": "\"Could you calculate the Body Mass Index (BMI) for four individuals? The first person weighs 75 kilograms and is 180 centimeters tall, the second person weighs 60 kilograms and is 165 centimeters tall, the third person weighs 80 kilograms and is 175 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. Please use the metric system for all calculations.\"", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) for a person based on their weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) The weight of the person in kilograms.\n\t- height : integer = None (required) The height of the person in centimeters.\n\t- system : string = None (optional) The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) for a person based on their weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the person in centimeters.\"}, \"system\": {\"type\": \"string\", \"description\": \"The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "multiple_function", "query": "Who is ranked as the top player in woman tennis?", "query_for_retrieval": "Who is ranked as the top player in woman tennis?", "answer": "find_instrument", "answer_params": "", "api_description": "def find_instrument:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a musical instrument within specified budget and of specific type.\n\t\n\tArguments:\n\t---------\n\t- budget : float = None (required) Your budget for the instrument.\n\t- type : string = None (required) Type of the instrument\n\t- make : string = None (optional) Maker of the instrument, Optional parameter. Default is ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_instrument\", \"description\": \"Search for a musical instrument within specified budget and of specific type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"budget\": {\"type\": \"float\", \"description\": \"Your budget for the instrument.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of the instrument\"}, \"make\": {\"type\": \"string\", \"description\": \"Maker of the instrument, Optional parameter. Default is ''\"}}, \"required\": [\"budget\", \"type\"]}}"}
{"scope": "parallel_function", "query": "Get me the price and stock availability for a Yamaha P125 piano in Berlin and Madrid's music stores.", "query_for_retrieval": "Get me the price and stock availability for a Yamaha P125 piano in Berlin and Madrid's music stores.", "answer": "check_instrument_availability", "answer_params": "", "api_description": "def check_instrument_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the price and availability of a specified instrument in a music store located in a specified city\n\t\n\tArguments:\n\t---------\n\t- instrument : string = None (required) The name of the musical instrument.\n\t- city : string = None (required) City where the store is located.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"check_instrument_availability\", \"description\": \"Get the price and availability of a specified instrument in a music store located in a specified city\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument\": {\"type\": \"string\", \"description\": \"The name of the musical instrument.\"}, \"city\": {\"type\": \"string\", \"description\": \"City where the store is located.\"}}, \"required\": [\"instrument\", \"city\"]}}"}
{"scope": "simple", "query": "Estimate the population of pandas in the wild in China.", "query_for_retrieval": "Estimate the population of pandas in the wild in China.", "answer": "estimate_population", "answer_params": "", "api_description": "def estimate_population:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the population of a particular species in a given country.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species for which population needs to be estimated.\n\t- country : string = None (required) The country where the species lives.\n\t- year : integer = None (optional) The year for which population estimate is sought. Default is the current year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_population\", \"description\": \"Estimate the population of a particular species in a given country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species for which population needs to be estimated.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the species lives.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which population estimate is sought. Default is the current year.\"}}, \"required\": [\"species\", \"country\"]}}"}
{"scope": "parallel_function", "query": "Can you analyze the DNA sequence \"AGCTTAGCTA\" and \"AGCTTAGGCTA\" using the reference sequence \"AGCTTAGCTA\" to identify any potential 'insertion' mutations, then repeat the same analysis for 'deletion' and 'substitution' mutations?", "query_for_retrieval": "Can you analyze the DNA sequence \"AGCTTAGCTA\" and \"AGCTTAGGCTA\" using the reference sequence \"AGCTTAGCTA\" to identify any potential 'insertion' mutations, then repeat the same analysis for 'deletion' and 'substitution' mutations?", "answer": "analyze_dna_sequence", "answer_params": "", "api_description": "def analyze_dna_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyzes the DNA sequence based on a reference sequence and return any potential mutations.\n\t\n\tArguments:\n\t---------\n\t- sequence : string = None (required) The DNA sequence to be analyzed.\n\t- reference_sequence : string = None (required) The reference DNA sequence.\n\t- mutation_type : string = insertion (optional) Type of the mutation to be looked for in the sequence.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"analyze_dna_sequence\", \"description\": \"Analyzes the DNA sequence based on a reference sequence and return any potential mutations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sequence\": {\"type\": \"string\", \"description\": \"The DNA sequence to be analyzed.\"}, \"reference_sequence\": {\"type\": \"string\", \"description\": \"The reference DNA sequence.\"}, \"mutation_type\": {\"type\": \"string\", \"enum\": [\"insertion\", \"deletion\", \"substitution\"], \"description\": \"Type of the mutation to be looked for in the sequence.\", \"default\": \"insertion\"}}, \"required\": [\"sequence\", \"reference_sequence\"]}}"}
{"scope": "java", "query": "How do I handle surrogate pairs in XML serialization, specifically for a high surrogate value of 55357 and a low surrogate value of 56832, when the content is not within a CDATA section?", "query_for_retrieval": "How do I handle surrogate pairs in XML serialization, specifically for a high surrogate value of 55357 and a low surrogate value of 56832, when the content is not within a CDATA section?", "answer": "BaseMarkupSerializer.surrogates", "answer_params": "", "api_description": "def BaseMarkupSerializer.surrogates:\n\t\"\"\"\n\tDescription:\n\t\n\tProcesses surrogate pairs in XML content, ensuring they are valid XML characters and serializes them appropriately, handling cases both inside and outside of CDATA sections.\n\t\n\tArguments:\n\t---------\n\t- high : integer = None (required) The high surrogate value of the surrogate pair.\n\t- low : integer = None (required) The low surrogate value of the surrogate pair.\n\t- inContent : boolean = None (required) A flag indicating whether the surrogate pair is within XML content.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"BaseMarkupSerializer.surrogates\", \"description\": \"Processes surrogate pairs in XML content, ensuring they are valid XML characters and serializes them appropriately, handling cases both inside and outside of CDATA sections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"high\": {\"type\": \"integer\", \"description\": \"The high surrogate value of the surrogate pair.\"}, \"low\": {\"type\": \"integer\", \"description\": \"The low surrogate value of the surrogate pair.\"}, \"inContent\": {\"type\": \"boolean\", \"description\": \"A flag indicating whether the surrogate pair is within XML content.\"}}, \"required\": [\"high\", \"low\", \"inContent\"]}}"}
{"scope": "parallel_multiple_function", "query": "Perform Gaussian integral of the function exp(-x^2) from -2 to 2. Also calculate the definite integral from 0 to 3.1416 of sin(x).", "query_for_retrieval": "Perform Gaussian integral of the function exp(-x^2) from -2 to 2. Also calculate the definite integral from 0 to 3.1416 of sin(x).", "answer": "math.gaussian_integral", "answer_params": "", "api_description": "def math.gaussian_integral:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform Gaussian integration over the range of the function.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to integrate, given in terms of x.\n\t- lower_limit : float = None (required) The lower limit of the integral.\n\t- upper_limit : float = None (required) The upper limit of the integral.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gaussian_integral\", \"description\": \"Perform Gaussian integration over the range of the function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to integrate, given in terms of x.\"}, \"lower_limit\": {\"type\": \"float\", \"description\": \"The lower limit of the integral.\"}, \"upper_limit\": {\"type\": \"float\", \"description\": \"The upper limit of the integral.\"}}, \"required\": [\"function\", \"lower_limit\", \"upper_limit\"]}}"}
{"scope": "javascript", "query": "How can I reset a state property called 'userSession' to 'null' in a React component?", "query_for_retrieval": "How can I reset a state property called 'userSession' to 'null' in a React component?", "answer": "resetStateProperty", "answer_params": "", "api_description": "def resetStateProperty:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function resets a given state property to null. It is typically used in React components to clear state.\n\t\n\tArguments:\n\t---------\n\t- stateProperty : String = None (required) The name of the state property to reset.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"resetStateProperty\", \"description\": \"This function resets a given state property to null. It is typically used in React components to clear state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stateProperty\": {\"type\": \"String\", \"description\": \"The name of the state property to reset.\"}}, \"required\": [\"stateProperty\"]}}"}
{"scope": "relevance", "query": "Who is the teacher for the upcoming lectures?", "query_for_retrieval": "Who is the teacher for the upcoming lectures?", "answer": "get_concert_info", "answer_params": "", "api_description": "def get_concert_info:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch upcoming concert details.\n\t\n\tArguments:\n\t---------\n\t- concert_id : integer = None (required) The unique identifier for the concert.\n\t- include_artist_info : boolean = false (optional) Include details about the performing artist.\n\t- include_venue_info : boolean = false (optional) Include details about the concert venue.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_concert_info\", \"description\": \"Fetch upcoming concert details.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"concert_id\": {\"type\": \"integer\", \"description\": \"The unique identifier for the concert.\"}, \"include_artist_info\": {\"type\": \"boolean\", \"description\": \"Include details about the performing artist.\", \"default\": \"false\"}, \"include_venue_info\": {\"type\": \"boolean\", \"description\": \"Include details about the concert venue.\", \"default\": \"false\"}}, \"required\": [\"concert_id\"]}}"}
{"scope": "simple", "query": "Can you find me the latest information about air quality index and pollution data for Chicago?", "query_for_retrieval": "Can you find me the latest information about air quality index and pollution data for Chicago?", "answer": "get_air_quality", "answer_params": "", "api_description": "def get_air_quality:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve real-time air quality and pollution data for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the air quality data for.\n\t- detail : boolean = None (optional) If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false.\n\t- historical : string = today (optional) Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_air_quality\", \"description\": \"Retrieve real-time air quality and pollution data for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the air quality data for.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false.\"}, \"historical\": {\"type\": \"string\", \"description\": \"Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.\", \"default\": \"today\"}}, \"required\": [\"location\"]}}"}
{"scope": "simple", "query": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.", "query_for_retrieval": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.", "answer": "get_lawsuit_details", "answer_params": "", "api_description": "def get_lawsuit_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the detailed information about a lawsuit based on its case number and the court location.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The case number of the lawsuit.\n\t- court_location : string = None (required) The location of the court where the case is filed.\n\t- additional_details : array = None (optional) Optional. Array containing additional details to be fetched. Default is all.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_lawsuit_details\", \"description\": \"Retrieve the detailed information about a lawsuit based on its case number and the court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The case number of the lawsuit.\"}, \"court_location\": {\"type\": \"string\", \"description\": \"The location of the court where the case is filed.\"}, \"additional_details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"attorneys\", \"plaintiffs\", \"defendants\", \"charges\", \"court_updates\"]}, \"description\": \"Optional. Array containing additional details to be fetched. Default is all.\"}}, \"required\": [\"case_number\", \"court_location\"]}}"}
{"scope": "parallel_function", "query": "What were the closing stock prices for Microsoft and Apple on NASDAQ on the dates 2022-01-01 and 2022-02-01?", "query_for_retrieval": "What were the closing stock prices for Microsoft and Apple on NASDAQ on the dates 2022-01-01 and 2022-02-01?", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the closing stock price for a specific company on a specified date.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) Name of the company.\n\t- date : string = None (required) Date of when to get the stock price. Format: yyyy-mm-dd.\n\t- exchange : string = None (optional) Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Get the closing stock price for a specific company on a specified date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"Name of the company.\"}, \"date\": {\"type\": \"string\", \"description\": \"Date of when to get the stock price. Format: yyyy-mm-dd.\"}, \"exchange\": {\"type\": \"string\", \"description\": \"Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\"}}, \"required\": [\"company_name\", \"date\"]}}"}
{"scope": "relevance", "query": "What is the freezing point point of water at a pressure of 10 kPa?", "query_for_retrieval": "What is the freezing point point of water at a pressure of 10 kPa?", "answer": "thermodynamics.calculate_boiling_point", "answer_params": "", "api_description": "def thermodynamics.calculate_boiling_point:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the boiling point of a given substance at a specific pressure.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The substance for which to calculate the boiling point.\n\t- pressure : float = None (required) The pressure at which to calculate the boiling point.\n\t- unit : string = None (optional) The unit of the pressure. Default is 'kPa'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"thermodynamics.calculate_boiling_point\", \"description\": \"Calculate the boiling point of a given substance at a specific pressure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The substance for which to calculate the boiling point.\"}, \"pressure\": {\"type\": \"float\", \"description\": \"The pressure at which to calculate the boiling point.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of the pressure. Default is 'kPa'.\"}}, \"required\": [\"substance\", \"pressure\"]}}"}
{"scope": "multiple_function", "query": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "query_for_retrieval": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "answer": "grocery_store.find_nearby", "answer_params": "", "api_description": "def grocery_store.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby grocery stores based on specific criteria like organic fruits and vegetables.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Houston, TX\n\t- categories : array = None (optional) Categories of items to be found in the grocery store. Default is empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.find_nearby\", \"description\": \"Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Houston, TX\"}, \"categories\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Organic\", \"Vegetables\", \"Fruits\", \"Dairy\", \"Seafood\", \"Bakery\"]}, \"description\": \"Categories of items to be found in the grocery store. Default is empty array\"}}, \"required\": [\"location\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm conducting a physics experiment involving charged particles and electric fields. There's a particle that I've introduced into the field, and it carries a charge of exactly 5 coulombs. The electric field itself has a potential difference of 10 volts. I need to calculate the electrostatic potential energy for this scenario. Can you help me with that calculation?", "query_for_retrieval": "I'm conducting a physics experiment involving charged particles and electric fields. There's a particle that I've introduced into the field, and it carries a charge of exactly 5 coulombs. The electric field itself has a potential difference of 10 volts. I need to calculate the electrostatic potential energy for this scenario. Can you help me with that calculation?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "parallel_function", "query": "What is the result if you calculate the factorial of 5, the factorial of 3, then  the factorial of 4 and finally the factorial of 2?", "query_for_retrieval": "What is the result if you calculate the factorial of 5, the factorial of 3, then  the factorial of 4 and finally the factorial of 2?", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to compute factorial.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to compute factorial.\"}}, \"required\": [\"number\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a multiplayer game that is compatible with my Windows 10 system, has a minimum rating of 4.0, and falls under the 'Action' genre? After that, I need to calculate the area under the curve for the mathematical function 'x^2' within the interval [0, 5] using the 'trapezoidal' method. Then, I want to know the geographic distance in kilometers from 'Los Angeles' to 'New York'. Lastly, I need to send an email to 'john.doe@example.com' with the subject 'Meeting Reminder', the body saying 'Do not forget about our meeting tomorrow at 10 AM', and carbon copy it to 'jane.doe@example.com'.\"", "query_for_retrieval": "\"Can you help me find a multiplayer game that is compatible with my Windows 10 system, has a minimum rating of 4.0, and falls under the 'Action' genre? After that, I need to calculate the area under the curve for the mathematical function 'x^2' within the interval [0, 5] using the 'trapezoidal' method. Then, I want to know the geographic distance in kilometers from 'Los Angeles' to 'New York'. Lastly, I need to send an email to 'john.doe@example.com' with the subject 'Meeting Reminder', the body saying 'Do not forget about our meeting tomorrow at 10 AM', and carbon copy it to 'jane.doe@example.com'.\"", "answer": "geo_distance.calculate", "answer_params": "", "api_description": "def geo_distance.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the geographic distance between two given locations.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the distance calculation.\n\t- end_location : string = None (required) The destination location for the distance calculation.\n\t- units : string = None (optional) Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geo_distance.calculate\", \"description\": \"Calculate the geographic distance between two given locations.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the distance calculation.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination location for the distance calculation.\"}, \"units\": {\"type\": \"string\", \"description\": \"Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "simple", "query": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "query_for_retrieval": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "answer": "calculate_BMI", "answer_params": "", "api_description": "def calculate_BMI:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) given a person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight_kg : integer = None (required) The weight of the person in kilograms.\n\t- height_m : float = None (required) The height of the person in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_BMI\", \"description\": \"Calculate the Body Mass Index (BMI) given a person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight_kg\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height_m\": {\"type\": \"float\", \"description\": \"The height of the person in meters.\"}}, \"required\": [\"weight_kg\", \"height_m\"]}}"}
{"scope": "java", "query": "How can I create a stubbed source map for a nested document structure in Elasticsearch, if I have a filtered source map `docFields` that only includes fields 'name' and 'address'?", "query_for_retrieval": "How can I create a stubbed source map for a nested document structure in Elasticsearch, if I have a filtered source map `docFields` that only includes fields 'name' and 'address'?", "answer": "NestedValueFetcher.createSourceMapStub", "answer_params": "", "api_description": "def NestedValueFetcher.createSourceMapStub:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a stubbed source map for a nested document structure by iterating through the nested path parts and constructing a nested map hierarchy.\n\t\n\tArguments:\n\t---------\n\t- filteredSource : HashMap = None (required) A map containing the filtered source fields for which the nested stub map should be created.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"NestedValueFetcher.createSourceMapStub\", \"description\": \"Creates a stubbed source map for a nested document structure by iterating through the nested path parts and constructing a nested map hierarchy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"filteredSource\": {\"type\": \"HashMap\", \"description\": \"A map containing the filtered source fields for which the nested stub map should be created.\"}}, \"required\": [\"filteredSource\"]}}"}
{"scope": "relevance", "query": "What is the area under the curve of the function f(x) = 3x^2 from x = 1 to x = 5?", "query_for_retrieval": "What is the area under the curve of the function f(x) = 3x^2 from x = 1 to x = 5?", "answer": "math.integral_calculator", "answer_params": "", "api_description": "def math.integral_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the definite integral of a mathematical function over a specific interval.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The mathematical function whose integral needs to be calculated.\n\t- lower_bound : float = None (required) The lower limit of the definite integral.\n\t- upper_bound : float = None (required) The upper limit of the definite integral.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.integral_calculator\", \"description\": \"Calculate the definite integral of a mathematical function over a specific interval.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The mathematical function whose integral needs to be calculated.\"}, \"lower_bound\": {\"type\": \"float\", \"description\": \"The lower limit of the definite integral.\"}, \"upper_bound\": {\"type\": \"float\", \"description\": \"The upper limit of the definite integral.\"}}, \"required\": [\"function\", \"lower_bound\", \"upper_bound\"]}}"}
{"scope": "parallel_function", "query": "\"Could you please predict the likelihood of type 2 diabetes for four individuals with the following characteristics: The first person weighs 180 lbs, is 70 inches tall, and has a 'lightly active' lifestyle. The second person weighs 200 lbs, is 65 inches tall, and is 'very active'. The third person weighs 150 lbs, is 72 inches tall, and is 'moderately active'. The fourth person weighs 220 lbs, is 68 inches tall, and is 'extra active'.\"", "query_for_retrieval": "\"Could you please predict the likelihood of type 2 diabetes for four individuals with the following characteristics: The first person weighs 180 lbs, is 70 inches tall, and has a 'lightly active' lifestyle. The second person weighs 200 lbs, is 65 inches tall, and is 'very active'. The third person weighs 150 lbs, is 72 inches tall, and is 'moderately active'. The fourth person weighs 220 lbs, is 68 inches tall, and is 'extra active'.\"", "answer": "diabetes_prediction", "answer_params": "", "api_description": "def diabetes_prediction:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the likelihood of diabetes type 2 based on a person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in lbs.\n\t- height : integer = None (required) Height of the person in inches.\n\t- activity_level : string = None (required) Physical activity level of the person.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"diabetes_prediction\", \"description\": \"Predict the likelihood of diabetes type 2 based on a person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in lbs.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in inches.\"}, \"activity_level\": {\"type\": \"string\", \"enum\": [\"sedentary\", \"lightly active\", \"moderately active\", \"very active\", \"extra active\"], \"description\": \"Physical activity level of the person.\"}}, \"required\": [\"weight\", \"height\", \"activity_level\"]}}"}
{"scope": "multiple_function", "query": "Provide key war events in German history from 1871 to 1945.", "query_for_retrieval": "Provide key war events in German history from 1871 to 1945.", "answer": "history.get_key_events", "answer_params": "", "api_description": "def history.get_key_events:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve key historical events within a specific period for a certain country.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The name of the country for which history is queried.\n\t- start_year : integer = None (required) Start year of the period for which history is queried.\n\t- end_year : integer = None (required) End year of the period for which history is queried.\n\t- event_type : array = None (optional) Types of event. If none is provided, all types will be considered. Default is ['all'].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history.get_key_events\", \"description\": \"Retrieve key historical events within a specific period for a certain country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The name of the country for which history is queried.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"Start year of the period for which history is queried.\"}, \"end_year\": {\"type\": \"integer\", \"description\": \"End year of the period for which history is queried.\"}, \"event_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"War\", \"Revolutions\", \"Diplomacy\", \"Economy\"]}, \"description\": \"Types of event. If none is provided, all types will be considered. Default is ['all'].\"}}, \"required\": [\"country\", \"start_year\", \"end_year\"]}}"}
{"scope": "relevance", "query": "What is the average weight of a human brain?", "query_for_retrieval": "What is the average weight of a human brain?", "answer": "get_neural_activity", "answer_params": "", "api_description": "def get_neural_activity:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the neural activity of the brain by given timeframe.\n\t\n\tArguments:\n\t---------\n\t- patient_id : string = None (required) The identification of the patient.\n\t- start_time : string = None (required) Start time for the period (YYYY-MM-DD HH:MM:SS)\n\t- end_time : string = None (required) End time for the period (YYYY-MM-DD HH:MM:SS)\n\t- filter_frequency : boolean = False (optional) Optional flag to filter out low frequency brain wave.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_neural_activity\", \"description\": \"Get the neural activity of the brain by given timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"patient_id\": {\"type\": \"string\", \"description\": \"The identification of the patient.\"}, \"start_time\": {\"type\": \"string\", \"description\": \"Start time for the period (YYYY-MM-DD HH:MM:SS)\"}, \"end_time\": {\"type\": \"string\", \"description\": \"End time for the period (YYYY-MM-DD HH:MM:SS)\"}, \"filter_frequency\": {\"type\": \"boolean\", \"description\": \"Optional flag to filter out low frequency brain wave.\", \"default\": \"False\"}}, \"required\": [\"patient_id\", \"start_time\", \"end_time\"]}}"}
{"scope": "parallel_function", "query": "A chemist is conducting an experiment with a 2 kg sample of a specific substance A. The experiment begins with the substance at an initial temperature of 25 degrees Celsius. The chemist then heats the substance to a final temperature of 75 degrees Celsius. The experiment is conducted under a pressure of 1 atmosphere. The chemist repeats the experiment with the same substance, but this time the initial temperature is 10 degrees Celsius and the final temperature is 50 degrees Celsius. Can you calculate the change in entropy for the substance under these set initial and final conditions for both experiments?", "query_for_retrieval": "A chemist is conducting an experiment with a 2 kg sample of a specific substance A. The experiment begins with the substance at an initial temperature of 25 degrees Celsius. The chemist then heats the substance to a final temperature of 75 degrees Celsius. The experiment is conducted under a pressure of 1 atmosphere. The chemist repeats the experiment with the same substance, but this time the initial temperature is 10 degrees Celsius and the final temperature is 50 degrees Celsius. Can you calculate the change in entropy for the substance under these set initial and final conditions for both experiments?", "answer": "entropy_change.calculate", "answer_params": "", "api_description": "def entropy_change.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the change in entropy for a mass of a specific substance under set initial and final conditions.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The substance for which the change in entropy is calculated.\n\t- mass : integer = None (required) The mass of the substance in kg.\n\t- initial_temperature : integer = None (required) The initial temperature of the substance in degree Celsius.\n\t- final_temperature : integer = None (required) The final temperature of the substance in degree Celsius.\n\t- pressure : integer = 1 (optional) The pressure the substance is under in atmospheres.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"entropy_change.calculate\", \"description\": \"Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The substance for which the change in entropy is calculated.\"}, \"mass\": {\"type\": \"integer\", \"description\": \"The mass of the substance in kg.\"}, \"initial_temperature\": {\"type\": \"integer\", \"description\": \"The initial temperature of the substance in degree Celsius.\"}, \"final_temperature\": {\"type\": \"integer\", \"description\": \"The final temperature of the substance in degree Celsius.\"}, \"pressure\": {\"type\": \"integer\", \"default\": 1, \"description\": \"The pressure the substance is under in atmospheres.\"}}, \"required\": [\"substance\", \"mass\", \"initial_temperature\", \"final_temperature\"]}}"}
{"scope": "java", "query": "How can I validate that the caller-sensitive method has correctly injected an invoker class for the `CSM` instance `csmInstance` and that the expected class is `MyExpectedClass.class` in a unit test?", "query_for_retrieval": "How can I validate that the caller-sensitive method has correctly injected an invoker class for the `CSM` instance `csmInstance` and that the expected class is `MyExpectedClass.class` in a unit test?", "answer": "MethodInvokeTest.checkInjectedInvoker", "answer_params": "", "api_description": "def MethodInvokeTest.checkInjectedInvoker:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks if the injected invoker class in the CSM instance is hidden, belongs to the same module as the expected class, and appears before the expected class on the stack.\n\t\n\tArguments:\n\t---------\n\t- csm : any = None (required) The CSM instance to check for the injected invoker.\n\t- expected : any = None (required) The expected class to compare against the injected invoker.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"MethodInvokeTest.checkInjectedInvoker\", \"description\": \"Checks if the injected invoker class in the CSM instance is hidden, belongs to the same module as the expected class, and appears before the expected class on the stack.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"csm\": {\"type\": \"any\", \"description\": \"The CSM instance to check for the injected invoker.\"}, \"expected\": {\"type\": \"any\", \"description\": \"The expected class to compare against the injected invoker.\"}}, \"required\": [\"csm\", \"expected\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the area under the curve from x=1 to x=5 for the function f(x)=x^2. And find the derivative at x=3.", "query_for_retrieval": "Calculate the area under the curve from x=1 to x=5 for the function f(x)=x^2. And find the derivative at x=3.", "answer": "integral", "answer_params": "", "api_description": "def integral:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the definite integral of a function over an interval [a, b].\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to integrate.\n\t- a : float = None (required) The lower bound of the interval.\n\t- b : float = None (required) The upper bound of the interval.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"integral\", \"description\": \"Calculate the definite integral of a function over an interval [a, b].\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to integrate.\"}, \"a\": {\"type\": \"float\", \"description\": \"The lower bound of the interval.\"}, \"b\": {\"type\": \"float\", \"description\": \"The upper bound of the interval.\"}}, \"required\": [\"function\", \"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with a couple of calculations? I have two points in a 2D space, Point A with coordinates [3, 2] and Point B with coordinates [7, 5]. First, I would like to know the Euclidean distance between these two points, rounded to 2 decimal places. Then, I would like to find out the angle between these two points with respect to the x-axis, also rounded to 2 decimal places. After that, I have another set of points, Point C with coordinates [10, 8] and Point D with coordinates [14, 12]. Could you please calculate the Euclidean distance and the angle to the x-axis for these points as well, both rounded to 2 decimal places?\"", "query_for_retrieval": "\"Could you please help me with a couple of calculations? I have two points in a 2D space, Point A with coordinates [3, 2] and Point B with coordinates [7, 5]. First, I would like to know the Euclidean distance between these two points, rounded to 2 decimal places. Then, I would like to find out the angle between these two points with respect to the x-axis, also rounded to 2 decimal places. After that, I have another set of points, Point C with coordinates [10, 8] and Point D with coordinates [14, 12]. Could you please calculate the Euclidean distance and the angle to the x-axis for these points as well, both rounded to 2 decimal places?\"", "answer": "angleToXAxis.calculate", "answer_params": "", "api_description": "def angleToXAxis.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the angle between two points with respect to x-axis.\n\t\n\tArguments:\n\t---------\n\t- pointA : array = None (required) Coordinates for Point A.\n\t- pointB : array = None (required) Coordinates for Point B.\n\t- rounding : integer = 2 (optional) Optional: The number of decimals to round off the result.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"angleToXAxis.calculate\", \"description\": \"Calculate the angle between two points with respect to x-axis.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Coordinates for Point A.\"}, \"pointB\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Coordinates for Point B.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"Optional: The number of decimals to round off the result.\", \"default\": 2}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "parallel_function", "query": "Calculate the amount of sales tax to be added on a purchase amount of $30.45 in Chicago, Illinois, $52.33 in Sacramento, California and $11.23 in Portland, Oregon.", "query_for_retrieval": "Calculate the amount of sales tax to be added on a purchase amount of $30.45 in Chicago, Illinois, $52.33 in Sacramento, California and $11.23 in Portland, Oregon.", "answer": "calculate_sales_tax", "answer_params": "", "api_description": "def calculate_sales_tax:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the sales tax for a given purchase amount in a specific city and state.\n\t\n\tArguments:\n\t---------\n\t- purchase_amount : float = None (required) The purchase amount.\n\t- city : string = None (required) The city where the purchase is made.\n\t- state : string = None (required) The state where the purchase is made.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_sales_tax\", \"description\": \"Calculate the sales tax for a given purchase amount in a specific city and state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"purchase_amount\": {\"type\": \"float\", \"description\": \"The purchase amount.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city where the purchase is made.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state where the purchase is made.\"}}, \"required\": [\"purchase_amount\", \"city\", \"state\"]}}"}
{"scope": "executable_simple", "query": "I'm considering showing the movie \"Avatar\" at my family's movie night this weekend, but I need to make sure it's appropriate for all ages. Can you find out the age rating for \"Avatar\" for me?", "query_for_retrieval": "I'm considering showing the movie \"Avatar\" at my family's movie night this weekend, but I need to make sure it's appropriate for all ages. Can you find out the age rating for \"Avatar\" for me?", "answer": "get_movie_rating", "answer_params": "", "api_description": "def get_movie_rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the age rating of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_rating\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "Locate all supermarkets in Los Angeles and find the most popular site seeing place in Miami.", "query_for_retrieval": "Locate all supermarkets in Los Angeles and find the most popular site seeing place in Miami.", "answer": "supermarket.find_in_city", "answer_params": "", "api_description": "def supermarket.find_in_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFind all supermarkets in a given city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city to locate supermarkets in.\n\t- state : string = None (required) The state to further narrow down the search.\n\t- openNow : boolean = None (optional) If true, returns only supermarkets that are currently open. Default to true\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"supermarket.find_in_city\", \"description\": \"Find all supermarkets in a given city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city to locate supermarkets in.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state to further narrow down the search.\"}, \"openNow\": {\"type\": \"boolean\", \"description\": \"If true, returns only supermarkets that are currently open. Default to true\"}}, \"required\": [\"city\", \"state\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few things? First, I'm interested in a court case with the docket number 12345 that was registered in Dallas, TX. Could you retrieve the details about this case for me? I don't need the full text of the case ruling. Second, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me? Third, I'm trying to remember the date of the historical event known as the Battle of Gettysburg. Do you know when that took place? Lastly, I'm working on a physics problem and need to calculate the final speed of an object. The object was dropped from a height of 100 meters with an initial velocity of 0 m/s. The gravitational acceleration is 9.8 m/s^2. Can you help me calculate the final speed?\"", "query_for_retrieval": "\"Can you help me with a few things? First, I'm interested in a court case with the docket number 12345 that was registered in Dallas, TX. Could you retrieve the details about this case for me? I don't need the full text of the case ruling. Second, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me? Third, I'm trying to remember the date of the historical event known as the Battle of Gettysburg. Do you know when that took place? Lastly, I'm working on a physics problem and need to calculate the final speed of an object. The object was dropped from a height of 100 meters with an initial velocity of 0 m/s. The gravitational acceleration is 9.8 m/s^2. Can you help me calculate the final speed?\"", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "relevance", "query": "What's the average temperature for Los Angeles in December?", "query_for_retrieval": "What's the average temperature for Los Angeles in December?", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the Body Mass Index given person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- height : float = None (required) The height of the person in meters.\n\t- unit : string = None (optional) Unit for calculation, either metric or imperial. Default is metric\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculates the Body Mass Index given person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the person in meters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Unit for calculation, either metric or imperial. Default is metric\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "simple", "query": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "query_for_retrieval": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "answer": "calc_binomial_prob", "answer_params": "", "api_description": "def calc_binomial_prob:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of an outcome based on the binomial distribution\n\t\n\tArguments:\n\t---------\n\t- num_trials : integer = None (required) Number of independent experiments.\n\t- num_success : integer = None (required) Number of times the event of interest has occurred.\n\t- prob_success : float = None (required) Probability of the event of interest on any single experiment.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_prob\", \"description\": \"Calculates the probability of an outcome based on the binomial distribution\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num_trials\": {\"type\": \"integer\", \"description\": \"Number of independent experiments.\"}, \"num_success\": {\"type\": \"integer\", \"description\": \"Number of times the event of interest has occurred.\"}, \"prob_success\": {\"type\": \"float\", \"description\": \"Probability of the event of interest on any single experiment.\"}}, \"required\": [\"num_trials\", \"num_success\", \"prob_success\"]}}"}
{"scope": "relevance", "query": "What are the components of Civil Law?", "query_for_retrieval": "What are the components of Civil Law?", "answer": "file_complaint", "answer_params": "", "api_description": "def file_complaint:\n\t\"\"\"\n\tDescription:\n\t\n\tFile a complaint for noise to the local council in a specified city.\n\t\n\tArguments:\n\t---------\n\t- complaint_type : string = None (required) The type of complaint, such as noise, litter, etc.\n\t- location : string = None (required) The city where the complaint is to be filed.\n\t- details : string = bug (optional) Detailed information about the complaint.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"file_complaint\", \"description\": \"File a complaint for noise to the local council in a specified city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"complaint_type\": {\"type\": \"string\", \"description\": \"The type of complaint, such as noise, litter, etc.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city where the complaint is to be filed.\"}, \"details\": {\"type\": \"string\", \"description\": \"Detailed information about the complaint.\", \"optional\": true, \"default\": \"bug\"}}, \"required\": [\"complaint_type\", \"location\"]}}"}
{"scope": "relevance", "query": "What kind of fertilizer is best for growing tomatoes?", "query_for_retrieval": "What kind of fertilizer is best for growing tomatoes?", "answer": "soil_analysis.analyze_soil_type", "answer_params": "", "api_description": "def soil_analysis.analyze_soil_type:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyze a type of soil and provides characteristics about it.\n\t\n\tArguments:\n\t---------\n\t- soil_type : string = None (required) The type of the soil. For example, loam, sandy, etc.\n\t- parameters_needed : array = None (optional) Optional specific characteristics of the soil to analyze.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"soil_analysis.analyze_soil_type\", \"description\": \"Analyze a type of soil and provides characteristics about it.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"soil_type\": {\"type\": \"string\", \"description\": \"The type of the soil. For example, loam, sandy, etc.\"}, \"parameters_needed\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"pH level\", \"Mineral content\", \"Organic matter content\"], \"default\": [\"Mineral content\"]}, \"description\": \"Optional specific characteristics of the soil to analyze.\"}}, \"required\": [\"soil_type\"]}}"}
{"scope": "simple", "query": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "query_for_retrieval": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "answer": "algebra.quadratic_roots", "answer_params": "", "api_description": "def algebra.quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the roots of a quadratic equation ax^2 + bx + c = 0.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x^2.\n\t- b : integer = None (required) Coefficient of x.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"algebra.quadratic_roots\", \"description\": \"Find the roots of a quadratic equation ax^2 + bx + c = 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x^2.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "relevance", "query": "How long will it take to paint the Eiffel Tower?", "query_for_retrieval": "How long will it take to paint the Eiffel Tower?", "answer": "lawsuit.settlement_estimate", "answer_params": "", "api_description": "def lawsuit.settlement_estimate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate an estimated lawsuit settlement amount based on inputs.\n\t\n\tArguments:\n\t---------\n\t- damage_amount : float = None (required) Amount of damages in USD.\n\t- incident_type : string = None (required) Type of incident leading to the lawsuit.\n\t- defendant_assets : float = None (optional) Amount of defendant's assets in USD. Default: 0.1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit.settlement_estimate\", \"description\": \"Calculate an estimated lawsuit settlement amount based on inputs.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"damage_amount\": {\"type\": \"float\", \"description\": \"Amount of damages in USD.\"}, \"incident_type\": {\"type\": \"string\", \"description\": \"Type of incident leading to the lawsuit.\"}, \"defendant_assets\": {\"type\": \"float\", \"description\": \"Amount of defendant's assets in USD. Default: 0.1\"}}, \"required\": [\"damage_amount\", \"incident_type\"]}}"}
{"scope": "relevance", "query": "What is the slope of the line which is perpendicular to the line with the equation y = 3x + 2?", "query_for_retrieval": "What is the slope of the line which is perpendicular to the line with the equation y = 3x + 2?", "answer": "find_critical_points", "answer_params": "", "api_description": "def find_critical_points:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the critical points of the function.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to find the critical points for.\n\t- variable : string = None (required) The variable in the function.\n\t- range : array = None (optional) The range to consider for finding critical points. Optional. Default is [0.0, 3.4].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_critical_points\", \"description\": \"Finds the critical points of the function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to find the critical points for.\"}, \"variable\": {\"type\": \"string\", \"description\": \"The variable in the function.\"}, \"range\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The range to consider for finding critical points. Optional. Default is [0.0, 3.4].\"}}, \"required\": [\"function\", \"variable\"]}}"}
{"scope": "java", "query": "How do I decode a 9-patch image from an input stream `imageInputStream` and write the decoded PNG image to an output stream `imageOutputStream`?", "query_for_retrieval": "How do I decode a 9-patch image from an input stream `imageInputStream` and write the decoded PNG image to an output stream `imageOutputStream`?", "answer": "Res9patchStreamDecoder.decode", "answer_params": "", "api_description": "def Res9patchStreamDecoder.decode:\n\t\"\"\"\n\tDescription:\n\t\n\tDecodes a 9-patch image from the given input stream and writes the decoded PNG image to the specified output stream. Returns true if the operation is successful, otherwise false.\n\t\n\tArguments:\n\t---------\n\t- input : any = None (required) The input stream containing the 9-patch image data.\n\t- out : any = None (required) The output stream where the decoded PNG image will be written.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Res9patchStreamDecoder.decode\", \"description\": \"Decodes a 9-patch image from the given input stream and writes the decoded PNG image to the specified output stream. Returns true if the operation is successful, otherwise false.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"input\": {\"type\": \"any\", \"description\": \"The input stream containing the 9-patch image data.\"}, \"out\": {\"type\": \"any\", \"description\": \"The output stream where the decoded PNG image will be written.\"}}, \"required\": [\"input\", \"out\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few tasks? First, I need to book a hotel room in Paris for 5 nights starting from 20th June. I prefer a deluxe room and would like the hotel to have a gym and offer free breakfast. Secondly, I am curious about the last match played by the soccer club 'Manchester United'. Could you fetch the details for me? Also, include the match statistics. Lastly, I recently measured my weight and height. I weigh 75 kilograms and my height is 1.8 meters. Could you calculate my Body Mass Index (BMI)?\"", "query_for_retrieval": "\"Can you help me with a few tasks? First, I need to book a hotel room in Paris for 5 nights starting from 20th June. I prefer a deluxe room and would like the hotel to have a gym and offer free breakfast. Secondly, I am curious about the last match played by the soccer club 'Manchester United'. Could you fetch the details for me? Also, include the match statistics. Lastly, I recently measured my weight and height. I weigh 75 kilograms and my height is 1.8 meters. Could you calculate my Body Mass Index (BMI)?\"", "answer": "hotel_booking", "answer_params": "", "api_description": "def hotel_booking:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a hotel room given the location, room type, stay duration and any additional preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to book the hotel.\n\t- room_type : string = None (required) Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n\t- duration : integer = None (required) The number of nights you want to book the hotel for.\n\t- start_date : string = None (required) The date when your stay begins.\n\t- preferences : array = None (optional) Optional preferences of stay at the hotel. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking\", \"description\": \"Books a hotel room given the location, room type, stay duration and any additional preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to book the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"Type of the room required. Options: 'single', 'double', 'deluxe', etc.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The number of nights you want to book the hotel for.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The date when your stay begins.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"pet_friendly\", \"gym\", \"swimming_pool\", \"free_breakfast\", \"parking\"]}, \"description\": \"Optional preferences of stay at the hotel. Default is all if not specified.\"}}, \"required\": [\"location\", \"room_type\", \"duration\", \"start_date\"]}}"}
{"scope": "simple", "query": "Find the nearest parking lot within 2 miles of Central Park in New York.", "query_for_retrieval": "Find the nearest parking lot within 2 miles of Central Park in New York.", "answer": "parking_lot.find_nearest", "answer_params": "", "api_description": "def parking_lot.find_nearest:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the nearest parking lot based on a specific location and radius.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The reference location e.g. Central Park, NY\n\t- radius : integer = None (required) The maximum distance from the location in miles. Default is 5 miles\n\t- type : string = None (optional) The type of parking lot. Default is 'public'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"parking_lot.find_nearest\", \"description\": \"Locate the nearest parking lot based on a specific location and radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The reference location e.g. Central Park, NY\"}, \"radius\": {\"type\": \"integer\", \"description\": \"The maximum distance from the location in miles. Default is 5 miles\"}, \"type\": {\"type\": \"string\", \"description\": \"The type of parking lot. Default is 'public'.\"}}, \"required\": [\"location\", \"radius\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me solve the following quadratic equations? The first one has coefficients a = 2, b = 5, and c = 3 and I want to find all roots, real or complex. The second equation has coefficients a = 1, b = -3, and c = 2 and I only want to find the real roots. The third equation has coefficients a = 4, b = -7, and c = 3 and I want to find all roots, real or complex. And the last equation has coefficients a = 1, b = 2, and c = 1 and I only want to find the real roots.\"", "query_for_retrieval": "\"Can you help me solve the following quadratic equations? The first one has coefficients a = 2, b = 5, and c = 3 and I want to find all roots, real or complex. The second equation has coefficients a = 1, b = -3, and c = 2 and I only want to find the real roots. The third equation has coefficients a = 4, b = -7, and c = 3 and I want to find all roots, real or complex. And the last equation has coefficients a = 1, b = 2, and c = 1 and I only want to find the real roots.\"", "answer": "solve_quadratic", "answer_params": "", "api_description": "def solve_quadratic:\n\t\"\"\"\n\tDescription:\n\t\n\tSolve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The coefficient of the squared term in the quadratic equation.\n\t- b : integer = None (required) The coefficient of the linear term in the quadratic equation.\n\t- c : integer = None (required) The constant term in the quadratic equation.\n\t- root_type : string = None (optional) The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional. default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic\", \"description\": \"Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The coefficient of the squared term in the quadratic equation.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The coefficient of the linear term in the quadratic equation.\"}, \"c\": {\"type\": \"integer\", \"description\": \"The constant term in the quadratic equation.\"}, \"root_type\": {\"type\": \"string\", \"description\": \"The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional. default is 'all'\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "simple", "query": "What's the elevation and area of Yellowstone National Park?", "query_for_retrieval": "What's the elevation and area of Yellowstone National Park?", "answer": "park_information", "answer_params": "", "api_description": "def park_information:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the basic information such as elevation and area of a national park.\n\t\n\tArguments:\n\t---------\n\t- park_name : string = None (required) The name of the national park.\n\t- information : array = None (required) The type of information you want about the park.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"park_information\", \"description\": \"Retrieve the basic information such as elevation and area of a national park.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"park_name\": {\"type\": \"string\", \"description\": \"The name of the national park.\"}, \"information\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Elevation\", \"Area\", \"Location\", \"Established Year\"]}, \"description\": \"The type of information you want about the park.\"}}, \"required\": [\"park_name\", \"information\"]}}"}
{"scope": "multiple_function", "query": "Predict the stock price for Google for the next 3 days.", "query_for_retrieval": "Predict the stock price for Google for the next 3 days.", "answer": "stock_forecast", "answer_params": "", "api_description": "def stock_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the future stock price for a specific company and time frame.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company that you want to get the stock price prediction for.\n\t- days : integer = None (required) Number of future days for which to predict the stock price.\n\t- model : string = None (optional) The model to use for prediction. Default 'regression'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_forecast\", \"description\": \"Predict the future stock price for a specific company and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company that you want to get the stock price prediction for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of future days for which to predict the stock price.\"}, \"model\": {\"type\": \"string\", \"description\": \"The model to use for prediction. Default 'regression'\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "relevance", "query": "What is a holy book?", "query_for_retrieval": "What is a holy book?", "answer": "search_holy_books", "answer_params": "", "api_description": "def search_holy_books:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch content, chapters or authors of holy books.\n\t\n\tArguments:\n\t---------\n\t- book : string = None (required) The name of the holy book.\n\t- chapter : integer = None (optional) The chapter number, if relevant. Default: 3\n\t- content : string = book (optional) Specific content to look for, if relevant.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"search_holy_books\", \"description\": \"Search content, chapters or authors of holy books.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"book\": {\"type\": \"string\", \"description\": \"The name of the holy book.\"}, \"chapter\": {\"type\": \"integer\", \"description\": \"The chapter number, if relevant. Default: 3\"}, \"content\": {\"type\": \"string\", \"description\": \"Specific content to look for, if relevant.\", \"default\": \"book\"}}, \"required\": [\"book\"]}}"}
{"scope": "relevance", "query": "How long would it take to travel from Boston to New York by car?", "query_for_retrieval": "How long would it take to travel from Boston to New York by car?", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two geographical coordinates in miles.\n\t\n\tArguments:\n\t---------\n\t- origin : dict = None (required) The origin coordinate with latitude and longitude as decimal values.\n\t- destination : dict = None (required) The destination coordinate with latitude and longitude as decimal values.\n\t- speed : float = None (required) The speed of travel in mph.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate the distance between two geographical coordinates in miles.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"dict\", \"description\": \"The origin coordinate with latitude and longitude as decimal values.\"}, \"destination\": {\"type\": \"dict\", \"description\": \"The destination coordinate with latitude and longitude as decimal values.\"}, \"speed\": {\"type\": \"float\", \"description\": \"The speed of travel in mph.\"}}, \"required\": [\"origin\", \"destination\", \"speed\"]}}"}
{"scope": "relevance", "query": "What is the assist average of basketball player LeBron James?", "query_for_retrieval": "What is the assist average of basketball player LeBron James?", "answer": "player_stats.average_scoring", "answer_params": "", "api_description": "def player_stats.average_scoring:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve average scoring details of a specific basketball player.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the basketball player.\n\t- season : string = None (required) The specific season to get statistics for.\n\t- league : string = NBA (optional) The league the player belongs to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"player_stats.average_scoring\", \"description\": \"Retrieve average scoring details of a specific basketball player.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the basketball player.\"}, \"season\": {\"type\": \"string\", \"description\": \"The specific season to get statistics for.\"}, \"league\": {\"type\": \"string\", \"default\": \"NBA\", \"description\": \"The league the player belongs to.\"}}, \"required\": [\"player_name\", \"season\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me plan a dinner party? I need to find a Vegetarian recipe that uses potatoes, carrots, and onions and serves 4 people. Also, I'm hosting this party in New York and I would like to know the detailed weather forecast for the next 12 hours, including precipitation details. Lastly, my friend is joining from Tokyo and I need to know the time difference between New York and Tokyo to schedule the party at a convenient time for both of us.\"", "query_for_retrieval": "\"Could you help me plan a dinner party? I need to find a Vegetarian recipe that uses potatoes, carrots, and onions and serves 4 people. Also, I'm hosting this party in New York and I would like to know the detailed weather forecast for the next 12 hours, including precipitation details. Lastly, my friend is joining from Tokyo and I need to know the time difference between New York and Tokyo to schedule the party at a convenient time for both of us.\"", "answer": "recipe_search", "answer_params": "", "api_description": "def recipe_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a recipe given dietary restriction, ingredients, and number of servings.\n\t\n\tArguments:\n\t---------\n\t- dietary_restriction : string = None (required) The dietary restriction, e.g., 'Vegetarian'.\n\t- ingredients : array = None (required) The list of ingredients.\n\t- servings : integer = None (required) The number of servings the recipe should make\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_search\", \"description\": \"Search for a recipe given dietary restriction, ingredients, and number of servings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restriction\": {\"type\": \"string\", \"description\": \"The dietary restriction, e.g., 'Vegetarian'.\"}, \"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of ingredients.\"}, \"servings\": {\"type\": \"integer\", \"description\": \"The number of servings the recipe should make\"}}, \"required\": [\"dietary_restriction\", \"ingredients\", \"servings\"]}}"}
{"scope": "multiple_function", "query": "How much is the potential of the Solar farm at location with coordinates [43.653225, -79.383186] in December, given that it has a total solar panel area of 80000 sq ft?", "query_for_retrieval": "How much is the potential of the Solar farm at location with coordinates [43.653225, -79.383186] in December, given that it has a total solar panel area of 80000 sq ft?", "answer": "solarFarm.potential", "answer_params": "", "api_description": "def solarFarm.potential:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the energy output of a solar farm given its location and panel area for a particular month.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The geographic coordinates of the location of the solar farm.\n\t- panelArea : integer = None (required) The total solar panel area in square feet at the location.\n\t- month : string = None (optional) The month for which to calculate the potential energy output. Default to January\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solarFarm.potential\", \"description\": \"Estimate the energy output of a solar farm given its location and panel area for a particular month.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The geographic coordinates of the location of the solar farm.\"}, \"panelArea\": {\"type\": \"integer\", \"description\": \"The total solar panel area in square feet at the location.\"}, \"month\": {\"type\": \"string\", \"description\": \"The month for which to calculate the potential energy output. Default to January\", \"optional\": true}}, \"required\": [\"coordinates\", \"panelArea\"]}}"}
{"scope": "sql", "query": "In the \"PlantSpecies\" database table, how can we modify the \"AverageHeight\" column to reflect a new average height of 150 cm for the plant species \"Sunflower\", given that the current average height recorded is less than 150 cm?", "query_for_retrieval": "In the \"PlantSpecies\" database table, how can we modify the \"AverageHeight\" column to reflect a new average height of 150 cm for the plant species \"Sunflower\", given that the current average height recorded is less than 150 cm?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "query_for_retrieval": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "answer": "average_batting_score", "answer_params": "", "api_description": "def average_batting_score:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the average batting score of a cricketer for specified past matches.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) Name of the cricket player.\n\t- matches : integer = None (required) Number of past matches to consider for average calculation.\n\t- match_format : string = None (optional) Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"average_batting_score\", \"description\": \"Get the average batting score of a cricketer for specified past matches.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"Name of the cricket player.\"}, \"matches\": {\"type\": \"integer\", \"description\": \"Number of past matches to consider for average calculation.\"}, \"match_format\": {\"type\": \"string\", \"description\": \"Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'.\"}}, \"required\": [\"player_name\", \"matches\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a divorce lawyer in New York, NY and then a criminal lawyer in Los Angeles, CA? After that, I need to find a cardiologist in Chicago, IL and an orthopedic doctor in Houston, TX.\"", "query_for_retrieval": "\"Can you help me find a divorce lawyer in New York, NY and then a criminal lawyer in Los Angeles, CA? After that, I need to find a cardiologist in Chicago, IL and an orthopedic doctor in Houston, TX.\"", "answer": "lawyer.search", "answer_params": "", "api_description": "def lawyer.search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a lawyer based on area of expertise and location\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Los Angeles, CA\n\t- expertise : string = None (required) Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawyer.search\", \"description\": \"Search for a lawyer based on area of expertise and location\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Los Angeles, CA\"}, \"expertise\": {\"type\": \"string\", \"description\": \"Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'.\"}}, \"required\": [\"location\", \"expertise\"]}}"}
{"scope": "simple", "query": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "query_for_retrieval": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "answer": "mathematics.calculate_area_under_curve", "answer_params": "", "api_description": "def mathematics.calculate_area_under_curve:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area under the curve for a given polynomial function within a specified interval.\n\t\n\tArguments:\n\t---------\n\t- polynomial : array = None (required) The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\n\t- limits : array = None (required) A list of two numbers specifying the lower and upper limit for the integration interval.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mathematics.calculate_area_under_curve\", \"description\": \"Calculate the area under the curve for a given polynomial function within a specified interval.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"polynomial\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\"}, \"limits\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"A list of two numbers specifying the lower and upper limit for the integration interval.\"}}, \"required\": [\"polynomial\", \"limits\"]}}"}
{"scope": "multiple_function", "query": "What is the cheapest selling price for the game 'Assassins Creed Valhalla' in the PlayStation Store in the United States?", "query_for_retrieval": "What is the cheapest selling price for the game 'Assassins Creed Valhalla' in the PlayStation Store in the United States?", "answer": "video_games.store_currency", "answer_params": "", "api_description": "def video_games.store_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the currency used in a specific region in a gaming platform store.\n\t\n\tArguments:\n\t---------\n\t- platform : string = None (required) The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\n\t- region : string = True (optional) The region e.g. United States, United Kingdom, Japan\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"video_games.store_currency\", \"description\": \"Fetches the currency used in a specific region in a gaming platform store.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"platform\": {\"type\": \"string\", \"description\": \"The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\"}, \"region\": {\"type\": \"string\", \"description\": \"The region e.g. United States, United Kingdom, Japan\", \"default\": \"True\"}}, \"required\": [\"platform\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find a board game with complexity rating under 2.5 and that supports more than 5 players, as well as a trivia game that could be played within 60 minutes.", "query_for_retrieval": "Find a board game with complexity rating under 2.5 and that supports more than 5 players, as well as a trivia game that could be played within 60 minutes.", "answer": "card_game_search", "answer_params": "", "api_description": "def card_game_search:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a card game based on a specific theme.\n\t\n\tArguments:\n\t---------\n\t- theme : string = None (required) The theme for the card game.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"card_game_search\", \"description\": \"Locate a card game based on a specific theme.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"theme\": {\"type\": \"string\", \"description\": \"The theme for the card game.\"}}, \"required\": [\"theme\"]}}"}
{"scope": "simple", "query": "What is the function of ATP synthase in mitochondria?", "query_for_retrieval": "What is the function of ATP synthase in mitochondria?", "answer": "cell_biology.function_lookup", "answer_params": "", "api_description": "def cell_biology.function_lookup:\n\t\"\"\"\n\tDescription:\n\t\n\tLook up the function of a given molecule in a specified organelle.\n\t\n\tArguments:\n\t---------\n\t- molecule : string = None (required) The molecule of interest.\n\t- organelle : string = None (required) The organelle of interest.\n\t- specific_function : boolean = None (required) If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cell_biology.function_lookup\", \"description\": \"Look up the function of a given molecule in a specified organelle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"molecule\": {\"type\": \"string\", \"description\": \"The molecule of interest.\"}, \"organelle\": {\"type\": \"string\", \"description\": \"The organelle of interest.\"}, \"specific_function\": {\"type\": \"boolean\", \"description\": \"If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\"}}, \"required\": [\"molecule\", \"organelle\", \"specific_function\"]}}"}
{"scope": "parallel_function", "query": "Fetch the details of the ancient empires Persian Empire and Mauryan Empire with their religious history and influences.", "query_for_retrieval": "Fetch the details of the ancient empires Persian Empire and Mauryan Empire with their religious history and influences.", "answer": "ancient_empires.get_religion_info", "answer_params": "", "api_description": "def ancient_empires.get_religion_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about religious history and influences of an ancient empire.\n\t\n\tArguments:\n\t---------\n\t- empire_name : string = None (required) The name of the ancient empire.\n\t- include_influences : boolean = False (optional) Specify whether to include details about the religious influences of the empire.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ancient_empires.get_religion_info\", \"description\": \"Retrieve information about religious history and influences of an ancient empire.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"empire_name\": {\"type\": \"string\", \"description\": \"The name of the ancient empire.\"}, \"include_influences\": {\"type\": \"boolean\", \"default\": false, \"description\": \"Specify whether to include details about the religious influences of the empire.\"}}, \"required\": [\"empire_name\"]}}"}
{"scope": "parallel_function", "query": "What are the proteins found in the cell compartments of the nucleus, mitochondria, and cytoplasm, and can you also provide a brief description of each protein?", "query_for_retrieval": "What are the proteins found in the cell compartments of the nucleus, mitochondria, and cytoplasm, and can you also provide a brief description of each protein?", "answer": "cellbio.get_proteins", "answer_params": "", "api_description": "def cellbio.get_proteins:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the list of proteins in a specific cell compartment.\n\t\n\tArguments:\n\t---------\n\t- cell_compartment : string = None (required) The specific cell compartment.\n\t- include_description : boolean = false (optional) Set true if you want a brief description of each protein.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cellbio.get_proteins\", \"description\": \"Get the list of proteins in a specific cell compartment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_compartment\": {\"type\": \"string\", \"description\": \"The specific cell compartment.\"}, \"include_description\": {\"type\": \"boolean\", \"description\": \"Set true if you want a brief description of each protein.\", \"default\": \"false\"}}, \"required\": [\"cell_compartment\"]}}"}
{"scope": "simple", "query": "Who discovered radium?", "query_for_retrieval": "Who discovered radium?", "answer": "discoverer.get", "answer_params": "", "api_description": "def discoverer.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the name of the discoverer of an element based on its name.\n\t\n\tArguments:\n\t---------\n\t- element_name : string = None (required) The name of the element.\n\t- year : integer = None (optional) Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it.\n\t- first : boolean = True (optional) Optional parameter indicating if the first discoverer's name should be retrieved.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"discoverer.get\", \"description\": \"Retrieve the name of the discoverer of an element based on its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"element_name\": {\"type\": \"string\", \"description\": \"The name of the element.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it.\"}, \"first\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Optional parameter indicating if the first discoverer's name should be retrieved.\"}}, \"required\": [\"element_name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've got $5000 invested at an annual interest rate of 5%, and I'm planning to leave it untouched for 10 years. I'd like to know what its future value will be. On a different note, I've been eyeing the stock ticker 'AAPL' and I'm curious about the actual company name behind it. Also, just out of curiosity, I'm wondering about the permutations for choosing 3 items from a set of 7. Could we work these out?", "query_for_retrieval": "I've got $5000 invested at an annual interest rate of 5%, and I'm planning to leave it untouched for 10 years. I'd like to know what its future value will be. On a different note, I've been eyeing the stock ticker 'AAPL' and I'm curious about the actual company name behind it. Also, just out of curiosity, I'm wondering about the permutations for choosing 3 items from a set of 7. Could we work these out?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "relevance", "query": "Who won the championship of the World Series in 2020?", "query_for_retrieval": "Who won the championship of the World Series in 2020?", "answer": "sports.ranking.get_champion", "answer_params": "", "api_description": "def sports.ranking.get_champion:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the champion of a specific sports event for a given year.\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The sports event.\n\t- year : integer = None (required) The year of the sports event.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports.ranking.get_champion\", \"description\": \"Retrieve the champion of a specific sports event for a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The sports event.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year of the sports event.\"}}, \"required\": [\"event\", \"year\"]}}"}
{"scope": "relevance", "query": "Calculate the prime factors of 100.", "query_for_retrieval": "Calculate the prime factors of 100.", "answer": "calculate_compound_interest", "answer_params": "", "api_description": "def calculate_compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the compound interest for a given principal amount, rate, time and compounding frequency.\n\t\n\tArguments:\n\t---------\n\t- principal_amount : float = None (required) The initial amount of money that is loaned or invested.\n\t- annual_interest_rate : float = None (required) The annual interest rate as a decimal number. For example, an interest rate of 5% would be entered as 0.05.\n\t- compounding_periods_per_year : integer = None (required) The number of times that interest is compounded per year.\n\t- years : integer = None (required) The number of years the money is invested for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compound_interest\", \"description\": \"Calculate the compound interest for a given principal amount, rate, time and compounding frequency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal_amount\": {\"type\": \"float\", \"description\": \"The initial amount of money that is loaned or invested.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate as a decimal number. For example, an interest rate of 5% would be entered as 0.05.\"}, \"compounding_periods_per_year\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per year.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years the money is invested for.\"}}, \"required\": [\"principal_amount\", \"annual_interest_rate\", \"compounding_periods_per_year\", \"years\"]}}"}
{"scope": "simple", "query": "What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?", "query_for_retrieval": "What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?", "answer": "get_game_item_stats", "answer_params": "", "api_description": "def get_game_item_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the statistics of a specific item in a specific video game.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The game to retrieve information from.\n\t- item : string = None (required) The name of the item in the game.\n\t- stat : string = None (required) Specific statistic required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_game_item_stats\", \"description\": \"Retrieve the statistics of a specific item in a specific video game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The game to retrieve information from.\"}, \"item\": {\"type\": \"string\", \"description\": \"The name of the item in the game.\"}, \"stat\": {\"type\": \"string\", \"description\": \"Specific statistic required.\"}}, \"required\": [\"game\", \"item\", \"stat\"]}}"}
{"scope": "java", "query": "How can I generate the full SQL creation script with a header for a Firebird database view named 'EmployeeView', using a progress monitor `dbMonitor` and the original source 'SELECT * FROM Employee WHERE status = 'active''?", "query_for_retrieval": "How can I generate the full SQL creation script with a header for a Firebird database view named 'EmployeeView', using a progress monitor `dbMonitor` and the original source 'SELECT * FROM Employee WHERE status = 'active''?", "answer": "FireBirdUtils.getViewSourceWithHeader", "answer_params": "", "api_description": "def FireBirdUtils.getViewSourceWithHeader:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates the SQL script to create or alter a Firebird database view, including the view definition header, based on the server version and the provided source.\n\t\n\tArguments:\n\t---------\n\t- monitor : any = None (required) The DBRProgressMonitor to monitor the progress of the operation.\n\t- view : any = None (required) The GenericTableBase object representing the view.\n\t- source : String = None (required) The SQL source code of the view.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"FireBirdUtils.getViewSourceWithHeader\", \"description\": \"Generates the SQL script to create or alter a Firebird database view, including the view definition header, based on the server version and the provided source.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"monitor\": {\"type\": \"any\", \"description\": \"The DBRProgressMonitor to monitor the progress of the operation.\"}, \"view\": {\"type\": \"any\", \"description\": \"The GenericTableBase object representing the view.\"}, \"source\": {\"type\": \"String\", \"description\": \"The SQL source code of the view.\"}}, \"required\": [\"monitor\", \"view\", \"source\"]}}"}
{"scope": "java", "query": "How can I schedule a cleanup task to run after 5 minutes using a timer in a service manager, considering the task is represented by the `cleanupTask` TimerTask object?", "query_for_retrieval": "How can I schedule a cleanup task to run after 5 minutes using a timer in a service manager, considering the task is represented by the `cleanupTask` TimerTask object?", "answer": "ServiceManager.newTimeout", "answer_params": "", "api_description": "def ServiceManager.newTimeout:\n\t\"\"\"\n\tDescription:\n\t\n\tSchedules a new timeout to execute a TimerTask after a specified delay. If the service manager is shutting down, it returns a dummy timeout instead.\n\t\n\tArguments:\n\t---------\n\t- task : any = None (required) The TimerTask to schedule.\n\t- delay : long = None (required) The delay before the task is executed.\n\t- unit : any = None (required) The time unit of the delay. Represented by TimeUnit.SECONDS for seconds\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ServiceManager.newTimeout\", \"description\": \"Schedules a new timeout to execute a TimerTask after a specified delay. If the service manager is shutting down, it returns a dummy timeout instead.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"task\": {\"type\": \"any\", \"description\": \"The TimerTask to schedule.\"}, \"delay\": {\"type\": \"long\", \"description\": \"The delay before the task is executed.\"}, \"unit\": {\"type\": \"any\", \"description\": \"The time unit of the delay. Represented by TimeUnit.SECONDS for seconds\"}}, \"required\": [\"task\", \"delay\", \"unit\"]}}"}
{"scope": "sql", "query": "Can you add a new record to the 'ChemicalElements' table in the database, where the columns are 'ElementName', 'AtomicNumber', 'Symbol', and 'AtomicWeight', and the values to be inserted are 'Helium', '2', 'He', and '4.002602'?", "query_for_retrieval": "Can you add a new record to the 'ChemicalElements' table in the database, where the columns are 'ElementName', 'AtomicNumber', 'Symbol', and 'AtomicWeight', and the values to be inserted are 'Helium', '2', 'He', and '4.002602'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "sql", "query": "What is the average income of individuals in the city of New York from the 'income_data' table, considering only the columns 'city' and 'income', where the city is 'New York'?", "query_for_retrieval": "What is the average income of individuals in the city of New York from the 'income_data' table, considering only the columns 'city' and 'income', where the city is 'New York'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "How do I prepare a JDBC statement to retrieve the privilege names and grantor names for system privileges of a specific Altibase grantee named 'JohnDoe' in a `JDBC_session`?", "query_for_retrieval": "How do I prepare a JDBC statement to retrieve the privilege names and grantor names for system privileges of a specific Altibase grantee named 'JohnDoe' in a `JDBC_session`?", "answer": "AltibaseGrantee.prepareObjectsStatement", "answer_params": "", "api_description": "def AltibaseGrantee.prepareObjectsStatement:\n\t\"\"\"\n\tDescription:\n\t\n\tPrepares a JDBC statement for querying system privileges and their grantors for a given Altibase grantee.\n\t\n\tArguments:\n\t---------\n\t- session : any = None (required) The JDBC session in which to prepare the statement.\n\t- owner : any = None (required) The Altibase grantee whose system privileges and grantors are to be queried.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"AltibaseGrantee.prepareObjectsStatement\", \"description\": \"Prepares a JDBC statement for querying system privileges and their grantors for a given Altibase grantee.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"session\": {\"type\": \"any\", \"description\": \"The JDBC session in which to prepare the statement.\"}, \"owner\": {\"type\": \"any\", \"description\": \"The Altibase grantee whose system privileges and grantors are to be queried.\"}}, \"required\": [\"session\", \"owner\"]}}"}
{"scope": "simple", "query": "Find the highest grossing bank in the U.S for year 2020.", "query_for_retrieval": "Find the highest grossing bank in the U.S for year 2020.", "answer": "highest_grossing_banks", "answer_params": "", "api_description": "def highest_grossing_banks:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the highest grossing banks in a specified country and year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to get the data from.\n\t- year : integer = None (required) The year to get the data from.\n\t- top_n : integer = None (optional) Top n banks in terms of grossing. Default is 5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"highest_grossing_banks\", \"description\": \"Retrieve the highest grossing banks in a specified country and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to get the data from.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year to get the data from.\"}, \"top_n\": {\"type\": \"integer\", \"description\": \"Top n banks in terms of grossing. Default is 5\"}}, \"required\": [\"country\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a math problem? I have two functions, the first one is '4x+7' and the second one is '2x+5'. I need to find the intersection points of these two functions. After that, I have another function '3x+9'. I need to find the zero points of this function. Can you solve these for me?\"", "query_for_retrieval": "\"Can you help me with a math problem? I have two functions, the first one is '4x+7' and the second one is '2x+5'. I need to find the intersection points of these two functions. After that, I have another function '3x+9'. I need to find the zero points of this function. Can you solve these for me?\"", "answer": "functions.intersect", "answer_params": "", "api_description": "def functions.intersect:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the intersection points of two functions.\n\t\n\tArguments:\n\t---------\n\t- function1 : string = None (required) First function given as a string with x as the variable, e.g. 3x+2\n\t- function2 : string = None (required) Second function given as a string with x as the variable, e.g. 2x+3\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"functions.intersect\", \"description\": \"Locate the intersection points of two functions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function1\": {\"type\": \"string\", \"description\": \"First function given as a string with x as the variable, e.g. 3x+2\"}, \"function2\": {\"type\": \"string\", \"description\": \"Second function given as a string with x as the variable, e.g. 2x+3\"}}, \"required\": [\"function1\", \"function2\"]}}"}
{"scope": "multiple_function", "query": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "query_for_retrieval": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "answer": "hotel_booking", "answer_params": "", "api_description": "def hotel_booking:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a hotel room for a specific date range.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The city and state, e.g. New York, NY.\n\t- start_date : string = None (required) The start date of the reservation. Use format 'YYYY-MM-DD'.\n\t- end_date : string = None (required) The end date of the reservation. Use format 'YYYY-MM-DD'.\n\t- rooms : integer = 1 (optional) The number of rooms to reserve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking\", \"description\": \"Books a hotel room for a specific date range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The start date of the reservation. Use format 'YYYY-MM-DD'.\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The end date of the reservation. Use format 'YYYY-MM-DD'.\"}, \"rooms\": {\"type\": \"integer\", \"default\": 1, \"description\": \"The number of rooms to reserve.\"}}, \"required\": [\"hotel_name\", \"location\", \"start_date\", \"end_date\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me who discovered the Higgs Boson and provide additional details about them, such as their birth date and nationality? Also, I am a 180 lbs, 5'11\" tall individual who is moderately active, can you predict my likelihood of having type 2 diabetes? Lastly, I am planning to visit the Louvre museum in Paris, can you tell me its working hours on Monday?\"", "query_for_retrieval": "\"Can you tell me who discovered the Higgs Boson and provide additional details about them, such as their birth date and nationality? Also, I am a 180 lbs, 5'11\" tall individual who is moderately active, can you predict my likelihood of having type 2 diabetes? Lastly, I am planning to visit the Louvre museum in Paris, can you tell me its working hours on Monday?\"", "answer": "get_discoverer", "answer_params": "", "api_description": "def get_discoverer:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the person or team who made a particular scientific discovery\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The discovery for which the discoverer's information is needed.\n\t- detail : boolean = None (required) Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_discoverer\", \"description\": \"Get the person or team who made a particular scientific discovery\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The discovery for which the discoverer's information is needed.\"}, \"detail\": {\"type\": \"boolean\", \"description\": \"Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\"}}, \"required\": [\"discovery\", \"detail\"]}}"}
{"scope": "simple", "query": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "query_for_retrieval": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two GPS coordinates.\n\t\n\tArguments:\n\t---------\n\t- coord1 : tuple = None (required) The first coordinate as (latitude, longitude).\n\t- coord2 : tuple = None (required) The second coordinate as (latitude, longitude).\n\t- unit : string = None (required) The unit of distance. Options: 'miles', 'kilometers'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate the distance between two GPS coordinates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coord1\": {\"type\": \"tuple\", \"description\": \"The first coordinate as (latitude, longitude).\", \"items\": {\"type\": \"float\"}}, \"coord2\": {\"type\": \"tuple\", \"description\": \"The second coordinate as (latitude, longitude).\", \"items\": {\"type\": \"float\"}}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of distance. Options: 'miles', 'kilometers'.\"}}, \"required\": [\"coord1\", \"coord2\", \"unit\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you provide me with the following information about the NBA league: the record for the most points scored by a single player in one game, including the player's name, points scored, and game date; the record for the most points scored by a single player in one season, including the player's name, points scored, and season; and the record for the most points scored by a player in his career, including the player's name, total points scored, and career span?\"", "query_for_retrieval": "\"Could you provide me with the following information about the NBA league: the record for the most points scored by a single player in one game, including the player's name, points scored, and game date; the record for the most points scored by a single player in one season, including the player's name, points scored, and season; and the record for the most points scored by a player in his career, including the player's name, total points scored, and career span?\"", "answer": "sports_data.basketball.most_points_single_game", "answer_params": "", "api_description": "def sports_data.basketball.most_points_single_game:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.\n\t\n\tArguments:\n\t---------\n\t- league : string = None (required) The specific basketball league for which to fetch the record. In this case, 'NBA'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_data.basketball.most_points_single_game\", \"description\": \"Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"league\": {\"type\": \"string\", \"description\": \"The specific basketball league for which to fetch the record. In this case, 'NBA'.\"}}, \"required\": [\"league\"]}}"}
{"scope": "simple", "query": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "query_for_retrieval": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "answer": "currency_converter", "answer_params": "", "api_description": "def currency_converter:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cost in target currency given the amount in base currency and exchange rate\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The currency to convert from.\n\t- target_currency : string = None (required) The currency to convert to.\n\t- amount : float = None (required) The amount in base currency\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_converter\", \"description\": \"Calculates the cost in target currency given the amount in base currency and exchange rate\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount in base currency\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me compare the potential energy output of two different renewable energy projects? The first project is a solar farm located at coordinates 37.7749 and -122.4194 with a total solar panel area of 50000 square feet. I would like to know the estimated energy output for the month of July. The second project is a wind farm located at coordinates 40.7128 and -74.0060 with a total of 100 wind turbines. I would also like to know the estimated energy output for this wind farm for the month of July.\"", "query_for_retrieval": "\"Can you help me compare the potential energy output of two different renewable energy projects? The first project is a solar farm located at coordinates 37.7749 and -122.4194 with a total solar panel area of 50000 square feet. I would like to know the estimated energy output for the month of July. The second project is a wind farm located at coordinates 40.7128 and -74.0060 with a total of 100 wind turbines. I would also like to know the estimated energy output for this wind farm for the month of July.\"", "answer": "windFarm.potential", "answer_params": "", "api_description": "def windFarm.potential:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the energy output of a wind farm given its location and turbine count for a particular month.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The geographic coordinates of the location of the wind farm.\n\t- turbineCount : float = None (required) The total number of wind turbines at the location.\n\t- month : string =  (optional) The month for which to calculate the potential energy output.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"windFarm.potential\", \"description\": \"Estimate the energy output of a wind farm given its location and turbine count for a particular month.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The geographic coordinates of the location of the wind farm.\"}, \"turbineCount\": {\"type\": \"float\", \"description\": \"The total number of wind turbines at the location.\"}, \"month\": {\"type\": \"string\", \"description\": \"The month for which to calculate the potential energy output.\", \"default\": \"\"}}, \"required\": [\"coordinates\", \"turbineCount\"]}}"}
{"scope": "multiple_function", "query": "Look up details of a felony crime record for case number CA123456 in San Diego County", "query_for_retrieval": "Look up details of a felony crime record for case number CA123456 in San Diego County", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population density of a specific country in a specific year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which the density needs to be calculated.\n\t- year : string = None (required) The year in which the density is to be calculated.\n\t- population : integer = None (required) The population of the country.\n\t- land_area : float = None (required) The land area of the country in square kilometers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the population density of a specific country in a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which the density needs to be calculated.\"}, \"year\": {\"type\": \"string\", \"description\": \"The year in which the density is to be calculated.\"}, \"population\": {\"type\": \"integer\", \"description\": \"The population of the country.\"}, \"land_area\": {\"type\": \"float\", \"description\": \"The land area of the country in square kilometers.\"}}, \"required\": [\"country\", \"year\", \"population\", \"land_area\"]}}"}
{"scope": "relevance", "query": "What's 10inch in meter", "query_for_retrieval": "What's 10inch in meter", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a amount from one currency to another at the current exchange rate.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money you want to convert.\n\t- from_currency : string = None (required) The currency to convert from.\n\t- to_currency : string = None (required) The currency to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Convert a amount from one currency to another at the current exchange rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money you want to convert.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the heat capacity at constant pressure of air for a science experiment I am conducting? I have a container with a volume of 2.5 m^3 and I am able to maintain the temperature at 300 Kelvin. I will be repeating the experiment at a higher temperature of 350 Kelvin and then at a lower volume of 1.5 m^3. I am using air for all these experiments. Can you provide the heat capacity for these three different conditions?\"", "query_for_retrieval": "\"Can you calculate the heat capacity at constant pressure of air for a science experiment I am conducting? I have a container with a volume of 2.5 m^3 and I am able to maintain the temperature at 300 Kelvin. I will be repeating the experiment at a higher temperature of 350 Kelvin and then at a lower volume of 1.5 m^3. I am using air for all these experiments. Can you provide the heat capacity for these three different conditions?\"", "answer": "calc_heat_capacity", "answer_params": "", "api_description": "def calc_heat_capacity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the heat capacity at constant pressure of air using its temperature and volume.\n\t\n\tArguments:\n\t---------\n\t- temp : integer = None (required) The temperature of the gas in Kelvin.\n\t- volume : float = None (required) The volume of the gas in m^3.\n\t- gas : string = None (optional) Type of gas, with air as default.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_heat_capacity\", \"description\": \"Calculate the heat capacity at constant pressure of air using its temperature and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"temp\": {\"type\": \"integer\", \"description\": \"The temperature of the gas in Kelvin.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the gas in m^3.\"}, \"gas\": {\"type\": \"string\", \"description\": \"Type of gas, with air as default.\"}}, \"required\": [\"temp\", \"volume\"]}}"}
{"scope": "simple", "query": "What's the total worth in euro of Messi according to latest data?", "query_for_retrieval": "What's the total worth in euro of Messi according to latest data?", "answer": "celebrity_net_worth.get", "answer_params": "", "api_description": "def celebrity_net_worth.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the total net worth of a sports celebrity based on most recent data.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The full name of the sports celebrity.\n\t- currency : string = None (required) The currency in which the net worth will be returned. Default is 'USD'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"celebrity_net_worth.get\", \"description\": \"Get the total net worth of a sports celebrity based on most recent data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The full name of the sports celebrity.\"}, \"currency\": {\"type\": \"string\", \"description\": \"The currency in which the net worth will be returned. Default is 'USD'.\"}}, \"required\": [\"name\", \"currency\"]}}"}
{"scope": "sql", "query": "Can you add a new entry to the 'PeriodicTable' database table, where the columns are 'Element', 'AtomicNumber', 'Symbol', and 'AtomicMass', and the values to be inserted correspond to the element 'Neon', with atomic number '10', symbol 'Ne', and atomic mass '20.1797'?", "query_for_retrieval": "Can you add a new entry to the 'PeriodicTable' database table, where the columns are 'Element', 'AtomicNumber', 'Symbol', and 'AtomicMass', and the values to be inserted correspond to the element 'Neon', with atomic number '10', symbol 'Ne', and atomic mass '20.1797'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_multiple_function", "query": "While I was updating a city map today, I needed to figure out how far apart two landmarks were. The first point is at coordinates (45.76, 4.85), and the second is at (48.85, 2.35). Could you calculate the distance between these two points for me?", "query_for_retrieval": "While I was updating a city map today, I needed to figure out how far apart two landmarks were. The first point is at coordinates (45.76, 4.85), and the second is at (48.85, 2.35). Could you calculate the distance between these two points for me?", "answer": "get_fibonacci_sequence", "answer_params": "", "api_description": "def get_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the n numbers of the Fibonacci.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of Fibonacci numbers to calculate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_fibonacci_sequence\", \"description\": \"Calculates the n numbers of the Fibonacci.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of Fibonacci numbers to calculate.\"}}, \"required\": [\"n\"]}}"}
{"scope": "simple", "query": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "query_for_retrieval": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "answer": "fMRI.analyze", "answer_params": "", "api_description": "def fMRI.analyze:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function takes in fMRI data to output analyzed data.\n\t\n\tArguments:\n\t---------\n\t- data_source : string = None (required) The path where the data is stored.\n\t- sequence_type : string = None (required) Type of fMRI sequence\n\t- smooth : integer = None (required) Spatial smoothing FWHM. In mm.\n\t- voxel_size : integer = 3 (optional) Size of isotropic voxels in mm.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fMRI.analyze\", \"description\": \"This function takes in fMRI data to output analyzed data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data_source\": {\"type\": \"string\", \"description\": \"The path where the data is stored.\"}, \"sequence_type\": {\"type\": \"string\", \"description\": \"Type of fMRI sequence\"}, \"smooth\": {\"type\": \"integer\", \"description\": \"Spatial smoothing FWHM. In mm.\"}, \"voxel_size\": {\"type\": \"integer\", \"description\": \"Size of isotropic voxels in mm.\", \"default\": 3}}, \"required\": [\"data_source\", \"sequence_type\", \"smooth\"]}}"}
{"scope": "simple", "query": "What's the current time in Sydney, Australia?", "query_for_retrieval": "What's the current time in Sydney, Australia?", "answer": "get_current_time", "answer_params": "", "api_description": "def get_current_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current time in a specific time zone.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the city.\n\t- country : string = None (required) The name of the country.\n\t- timezone : string = None (optional) The optional timezone to get current time. Default \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_time\", \"description\": \"Retrieve the current time in a specific time zone.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the city.\"}, \"country\": {\"type\": \"string\", \"description\": \"The name of the country.\"}, \"timezone\": {\"type\": \"string\", \"description\": \"The optional timezone to get current time. Default \"}}, \"required\": [\"location\", \"country\"]}}"}
{"scope": "simple", "query": "Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict", "query_for_retrieval": "Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict", "answer": "get_lawsuit_details", "answer_params": "", "api_description": "def get_lawsuit_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve details of a lawsuit based on its case number and court location.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) Case number of the lawsuit.\n\t- court_location : string = None (required) The location of the court where the lawsuit was filed.\n\t- with_verdict : boolean = None (optional) Flag to include verdict details if available. Default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_lawsuit_details\", \"description\": \"Retrieve details of a lawsuit based on its case number and court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"Case number of the lawsuit.\"}, \"court_location\": {\"type\": \"string\", \"description\": \"The location of the court where the lawsuit was filed.\"}, \"with_verdict\": {\"type\": \"boolean\", \"description\": \"Flag to include verdict details if available. Default is False\"}}, \"required\": [\"case_number\", \"court_location\"]}}"}
{"scope": "rest", "query": "I'm currently at the GPS coordinates 40.712776, -74.005974, and I need to find out the timezone here for a scheduling app I'm developing. Can you provide me with the appropriate requests.get call using a compact JSON response from the RapidAPI service, specifying my API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "I'm currently at the GPS coordinates 40.712776, -74.005974, and I need to find out the timezone here for a scheduling app I'm developing. Can you provide me with the appropriate requests.get call using a compact JSON response from the RapidAPI service, specifying my API key 'YOUR-RAPID-API-KEY' and host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I need to calculate the electrostatic potential energy for an object that has a charge of 5 Coulombs and is under a voltage of 10 volts. Also, can you find out the postal code for where the IP address 192.168.1.1 is located?", "query_for_retrieval": "I need to calculate the electrostatic potential energy for an object that has a charge of 5 Coulombs and is under a voltage of 10 volts. Also, can you find out the postal code for where the IP address 192.168.1.1 is located?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "parallel_function", "query": "What is the total distance in kilometers if you were to travel from the Eiffel Tower in Paris (48.8584\u00b0 N, 2.2945\u00b0 E) to the Colosseum in Rome (41.8902\u00b0 N, 12.4922\u00b0 E), then to the Acropolis in Athens (37.9715\u00b0 N, 23.7257\u00b0 E), and finally to the Pyramids of Giza in Egypt (29.9792\u00b0 N, 31.1342\u00b0 E)?", "query_for_retrieval": "What is the total distance in kilometers if you were to travel from the Eiffel Tower in Paris (48.8584\u00b0 N, 2.2945\u00b0 E) to the Colosseum in Rome (41.8902\u00b0 N, 12.4922\u00b0 E), then to the Acropolis in Athens (37.9715\u00b0 N, 23.7257\u00b0 E), and finally to the Pyramids of Giza in Egypt (29.9792\u00b0 N, 31.1342\u00b0 E)?", "answer": "calculate_distance", "answer_params": "", "api_description": "def calculate_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two GPS coordinates.\n\t\n\tArguments:\n\t---------\n\t- coord1 : tuple = None (required) The first coordinate as (latitude, longitude).\n\t- coord2 : tuple = None (required) The second coordinate as (latitude, longitude).\n\t- unit : string = None (required) The unit of distance. Defaults to miles if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_distance\", \"description\": \"Calculate the distance between two GPS coordinates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coord1\": {\"type\": \"tuple\", \"description\": \"The first coordinate as (latitude, longitude).\", \"items\": {\"type\": \"float\"}}, \"coord2\": {\"type\": \"tuple\", \"description\": \"The second coordinate as (latitude, longitude).\", \"items\": {\"type\": \"float\"}}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of distance. Defaults to miles if not specified.\"}}, \"required\": [\"coord1\", \"coord2\", \"unit\"]}}"}
{"scope": "multiple_function", "query": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "query_for_retrieval": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "answer": "building.get_dimensions", "answer_params": "", "api_description": "def building.get_dimensions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dimensions of a specific building based on its name.\n\t\n\tArguments:\n\t---------\n\t- building_name : string = None (required) The name of the building.\n\t- unit : string = None (required) The unit in which you want the dimensions. Default is meter.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"building.get_dimensions\", \"description\": \"Retrieve the dimensions of a specific building based on its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_name\": {\"type\": \"string\", \"description\": \"The name of the building.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit in which you want the dimensions. Default is meter.\", \"enum\": [\"meter\", \"feet\"]}}, \"required\": [\"building_name\", \"unit\"]}}"}
{"scope": "java", "query": "How do I execute the jar agent with the options 'trace' and 'log' for instrumentation purposes in a Java application, assuming the instrumentation object is named `appInstrumentation`?", "query_for_retrieval": "How do I execute the jar agent with the options 'trace' and 'log' for instrumentation purposes in a Java application, assuming the instrumentation object is named `appInstrumentation`?", "answer": "AbstractJarAgent.runJarAgent", "answer_params": "", "api_description": "def AbstractJarAgent.runJarAgent:\n\t\"\"\"\n\tDescription:\n\t\n\tRuns the jar agent with the specified options and attaches it to the provided Instrumentation instance. It initializes common parameters, performs test-specific initialization, and starts a special thread for test-specific actions.\n\t\n\tArguments:\n\t---------\n\t- options : String = None (required) The options for the jar agent, separated by spaces.\n\t- inst : any = None (required) The Instrumentation instance to which the agent will be attached.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"AbstractJarAgent.runJarAgent\", \"description\": \"Runs the jar agent with the specified options and attaches it to the provided Instrumentation instance. It initializes common parameters, performs test-specific initialization, and starts a special thread for test-specific actions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"options\": {\"type\": \"String\", \"description\": \"The options for the jar agent, separated by spaces.\"}, \"inst\": {\"type\": \"any\", \"description\": \"The Instrumentation instance to which the agent will be attached.\"}}, \"required\": [\"options\", \"inst\"]}}"}
{"scope": "multiple_function", "query": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?", "query_for_retrieval": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?", "answer": "wildlife_population.assess_growth", "answer_params": "", "api_description": "def wildlife_population.assess_growth:\n\t\"\"\"\n\tDescription:\n\t\n\tAssesses the population growth of a specific species in a specified location over a period.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species for which the growth is to be calculated.\n\t- location : string = None (required) The area where the species is present.\n\t- duration : integer = None (required) The time period for which the population growth should be calculated in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"wildlife_population.assess_growth\", \"description\": \"Assesses the population growth of a specific species in a specified location over a period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species for which the growth is to be calculated.\"}, \"location\": {\"type\": \"string\", \"description\": \"The area where the species is present.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The time period for which the population growth should be calculated in years.\"}}, \"required\": [\"species\", \"location\", \"duration\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm considering some investment scenarios and would like to understand the potential growth of my capital over different time frames and with varying conditions. First off, let's look at an initial investment of $1,000,000 with an annual addition of $1,000. I plan to keep this for 3 years, expecting an annual return of 10%. However, I am aware that inflation can impact the real value of my investment, and I have estimated it to be 1% in the first year, followed by 4% in the next two years. Could you calculate the real value of this investment at the end of the term?\n\nFollowing that, I have a second scenario where I start with $500,000 and plan to add $500 each year. This time, it's a 5-year investment term with a 7% return rate per year, and my inflation estimates are 2%, 3%, 2%, 3%, and again 2% for each consecutive year. What would the investment value be in this case?\n\nNext, let's consider a smaller initial sum of $250,000 with a higher annual contribution of $2,000. I'd like to keep this for 7 years, hoping for a 5% return every year. Inflation is expected to alternate annually between 1% and 2%. I need to know the adjusted value of this investment as well.\n\nLastly, I have a more extended plan where I start with $800,000 and add $1,500 each year for 10 years. The investment is hoped to yield an 8% annual return. Inflation is anticipated to oscillate between 1% and 2% every other year. What would be the final value of this investment, considering the inflation adjustment?\n\nFor all scenarios, please adjust the final values for inflation.", "query_for_retrieval": "I'm considering some investment scenarios and would like to understand the potential growth of my capital over different time frames and with varying conditions. First off, let's look at an initial investment of $1,000,000 with an annual addition of $1,000. I plan to keep this for 3 years, expecting an annual return of 10%. However, I am aware that inflation can impact the real value of my investment, and I have estimated it to be 1% in the first year, followed by 4% in the next two years. Could you calculate the real value of this investment at the end of the term?\n\nFollowing that, I have a second scenario where I start with $500,000 and plan to add $500 each year. This time, it's a 5-year investment term with a 7% return rate per year, and my inflation estimates are 2%, 3%, 2%, 3%, and again 2% for each consecutive year. What would the investment value be in this case?\n\nNext, let's consider a smaller initial sum of $250,000 with a higher annual contribution of $2,000. I'd like to keep this for 7 years, hoping for a 5% return every year. Inflation is expected to alternate annually between 1% and 2%. I need to know the adjusted value of this investment as well.\n\nLastly, I have a more extended plan where I start with $800,000 and add $1,500 each year for 10 years. The investment is hoped to yield an 8% annual return. Inflation is anticipated to oscillate between 1% and 2% every other year. What would be the final value of this investment, considering the inflation adjustment?\n\nFor all scenarios, please adjust the final values for inflation.", "answer": "calculate_investment_value", "answer_params": "", "api_description": "def calculate_investment_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the value of an investment over time.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- annual_contribution : float = None (required) The annual contribution amount.\n\t- years : integer = None (required) The number of years to calculate the investment value for.\n\t- annual_return : float = None (required) The annual return rate, ranging from 0 to 1.\n\t- inflation_rate : array = None (required) The inflation rate for each year in percentage, ranging from 0 to 1.\n\t- adjust_for_inflation : boolean = True (optional) Whether to adjust the investment value for inflation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_investment_value\", \"description\": \"Calculates the value of an investment over time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"annual_contribution\": {\"type\": \"float\", \"description\": \"The annual contribution amount.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to calculate the investment value for.\"}, \"annual_return\": {\"type\": \"float\", \"description\": \"The annual return rate, ranging from 0 to 1.\"}, \"inflation_rate\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The inflation rate for each year in percentage, ranging from 0 to 1.\"}, \"adjust_for_inflation\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Whether to adjust the investment value for inflation.\"}}, \"required\": [\"initial_investment\", \"annual_contribution\", \"years\", \"annual_return\", \"inflation_rate\"]}}"}
{"scope": "multiple_function", "query": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "query_for_retrieval": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "answer": "mix_paint_color", "answer_params": "", "api_description": "def mix_paint_color:\n\t\"\"\"\n\tDescription:\n\t\n\tCombine two primary paint colors and adjust the resulting color's lightness level.\n\t\n\tArguments:\n\t---------\n\t- color1 : string = None (required) The first primary color to be mixed.\n\t- color2 : string = None (required) The second primary color to be mixed.\n\t- lightness : integer = None (optional) The desired lightness level of the resulting color in percentage. The default level is set to 50%.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mix_paint_color\", \"description\": \"Combine two primary paint colors and adjust the resulting color's lightness level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color1\": {\"type\": \"string\", \"description\": \"The first primary color to be mixed.\"}, \"color2\": {\"type\": \"string\", \"description\": \"The second primary color to be mixed.\"}, \"lightness\": {\"type\": \"integer\", \"description\": \"The desired lightness level of the resulting color in percentage. The default level is set to 50%.\"}}, \"required\": [\"color1\", \"color2\"]}}"}
{"scope": "executable_simple", "query": "I'm prepping for tomorrow's math class on prime factorization and need to come up with some clear examples. Can you break down the number 4567 into its prime factors for me? This will be a great way to demonstrate the concept to the students.", "query_for_retrieval": "I'm prepping for tomorrow's math class on prime factorization and need to come up with some clear examples. Can you break down the number 4567 into its prime factors for me? This will be a great way to demonstrate the concept to the students.", "answer": "get_prime_factors", "answer_params": "", "api_description": "def get_prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to calculate the prime factors of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prime_factors\", \"description\": \"Calculates the prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to calculate the prime factors of.\"}}, \"required\": [\"number\"]}}"}
{"scope": "parallel_function", "query": "What are the prime factors of the number 4567 and 7890, and can you provide these in a formatted string as well as an array?", "query_for_retrieval": "What are the prime factors of the number 4567 and 7890, and can you provide these in a formatted string as well as an array?", "answer": "get_prime_factors", "answer_params": "", "api_description": "def get_prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tFunction to retrieve prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) Number for which prime factors need to be calculated\n\t- formatted : boolean = None (required) Return formatted string if true, array if false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prime_factors\", \"description\": \"Function to retrieve prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"Number for which prime factors need to be calculated\"}, \"formatted\": {\"type\": \"boolean\", \"description\": \"Return formatted string if true, array if false\"}}, \"required\": [\"number\", \"formatted\"]}}"}
{"scope": "parallel_function", "query": "Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm.", "query_for_retrieval": "Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm.", "answer": "find_movie_showing", "answer_params": "", "api_description": "def find_movie_showing:\n\t\"\"\"\n\tDescription:\n\t\n\tFind local movie theatres and their schedule for a specific movie\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. San Diego, CA\n\t- movie : array = None (required) Preferred movie to watch.\n\t- time : array = None (required) No description available.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_movie_showing\", \"description\": \"Find local movie theatres and their schedule for a specific movie\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. San Diego, CA\"}, \"movie\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Tenet\", \"No Time To Die\"]}, \"description\": \"Preferred movie to watch.\"}, \"time\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"Show time for each movie\"}}}, \"required\": [\"location\", \"movie\", \"time\"]}}"}
{"scope": "simple", "query": "Get the working hours of Louvre Museum in Paris.", "query_for_retrieval": "Get the working hours of Louvre Museum in Paris.", "answer": "museum_working_hours.get", "answer_params": "", "api_description": "def museum_working_hours.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the working hours of a museum in a specific location.\n\t\n\tArguments:\n\t---------\n\t- museum : string = None (required) The name of the museum.\n\t- location : string = None (required) The location of the museum.\n\t- day : string = None (optional) Specific day of the week. Default is 'Monday'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum_working_hours.get\", \"description\": \"Get the working hours of a museum in a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the museum.\"}, \"day\": {\"type\": \"string\", \"description\": \"Specific day of the week. Default is 'Monday'\"}}, \"required\": [\"museum\", \"location\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a program that's supposed to solve quadratic equations, and I need to test out a function that calculates the roots. Right now, I need to find the roots for the equation 5x^2 - 8x + 2 = 0. I'll use the coefficients 5 for a, -8 for b, and 2 for c. Can we run this through the function to see what the roots are?", "query_for_retrieval": "I'm working on a program that's supposed to solve quadratic equations, and I need to test out a function that calculates the roots. Right now, I need to find the roots for the equation 5x^2 - 8x + 2 = 0. I'll use the coefficients 5 for a, -8 for b, and 2 for c. Can we run this through the function to see what the roots are?", "answer": "quadratic_roots", "answer_params": "", "api_description": "def quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the roots of a quadratic equation.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first coefficient.\n\t- b : integer = None (required) The second coefficient.\n\t- c : integer = None (required) The third coefficient.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"quadratic_roots\", \"description\": \"Calculates the roots of a quadratic equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first coefficient.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second coefficient.\"}, \"c\": {\"type\": \"integer\", \"description\": \"The third coefficient.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "multiple_function", "query": "Calculate the roots of a quadratic equation with coefficients 5, 20, and -25", "query_for_retrieval": "Calculate the roots of a quadratic equation with coefficients 5, 20, and -25", "answer": "math_roots.quadratic", "answer_params": "", "api_description": "def math_roots.quadratic:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the roots of a quadratic equation.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of the second-degree term.\n\t- b : integer = None (required) Coefficient of the first-degree term.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_roots.quadratic\", \"description\": \"Calculate the roots of a quadratic equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of the second-degree term.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of the first-degree term.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "sql", "query": "In a database, there is a table called 'Employees' with columns 'EmployeeID', 'Name', 'Position', 'Salary'. You need to modify the 'Salary' of an employee with 'EmployeeID' 'E123' to '80000'. How can you accomplish this task?", "query_for_retrieval": "In a database, there is a table called 'Employees' with columns 'EmployeeID', 'Name', 'Position', 'Salary'. You need to modify the 'Salary' of an employee with 'EmployeeID' 'E123' to '80000'. How can you accomplish this task?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a real estate project that requires me to analyze various properties in different cities. I've got a list of zip codes but need to match them with their respective cities to proceed with my market analysis. Could you help me find the cities for the following zip codes: '90210', '10001', '60601', and '94102'? This information will be crucial for my next meeting with the investors.", "query_for_retrieval": "I'm working on a real estate project that requires me to analyze various properties in different cities. I've got a list of zip codes but need to match them with their respective cities to proceed with my market analysis. Could you help me find the cities for the following zip codes: '90210', '10001', '60601', and '94102'? This information will be crucial for my next meeting with the investors.", "answer": "retrieve_city_based_on_zipcode", "answer_params": "", "api_description": "def retrieve_city_based_on_zipcode:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the city of a zipcode.\n\t\n\tArguments:\n\t---------\n\t- zipcode : string = None (required) The zipcode of the city.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_city_based_on_zipcode\", \"description\": \"Finds the city of a zipcode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"zipcode\": {\"type\": \"string\", \"description\": \"The zipcode of the city.\"}}, \"required\": [\"zipcode\"]}}"}
{"scope": "multiple_function", "query": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "query_for_retrieval": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "answer": "concert_booking.book_ticket", "answer_params": "", "api_description": "def concert_booking.book_ticket:\n\t\"\"\"\n\tDescription:\n\t\n\tBook concert tickets for a specific artist in a specified city.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) The artist you want to book tickets for.\n\t- city : string = None (required) The city where the concert is.\n\t- num_tickets : integer = None (optional) Number of tickets required. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_booking.book_ticket\", \"description\": \"Book concert tickets for a specific artist in a specified city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"The artist you want to book tickets for.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city where the concert is.\"}, \"num_tickets\": {\"type\": \"integer\", \"description\": \"Number of tickets required. Default is 1.\"}}, \"required\": [\"artist\", \"city\"]}}"}
{"scope": "executable_simple", "query": "While researching the political alliances of ancient Rome, I discovered that during two separate periods, the Senate was comprised of 450 and then 300 members. To analyze the data further, I need to calculate the greatest common divisor of these two senate sizes. Could you help me find the GCD for these numbers?", "query_for_retrieval": "While researching the political alliances of ancient Rome, I discovered that during two separate periods, the Senate was comprised of 450 and then 300 members. To analyze the data further, I need to calculate the greatest common divisor of these two senate sizes. Could you help me find the GCD for these numbers?", "answer": "math_gcd", "answer_params": "", "api_description": "def math_gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a musician who also loves to paint and is interested in probability. You are planning to paint a wall in your house that is 12 feet in length and 8 feet in height. You have chosen a specific paint brand that can cover 350 square feet with one gallon of paint. How many gallons of paint would you need? After painting, you want to compose a song. You are thinking of composing it in the key of 'D'. What would be the musical scale for this key if you choose a 'minor' scale type? Also, you are curious about the binomial distribution. If you were to conduct 20 independent experiments with a success probability of 0.6, what is the probability of having exactly 10 successes?\"", "query_for_retrieval": "\"Imagine you are a musician who also loves to paint and is interested in probability. You are planning to paint a wall in your house that is 12 feet in length and 8 feet in height. You have chosen a specific paint brand that can cover 350 square feet with one gallon of paint. How many gallons of paint would you need? After painting, you want to compose a song. You are thinking of composing it in the key of 'D'. What would be the musical scale for this key if you choose a 'minor' scale type? Also, you are curious about the binomial distribution. If you were to conduct 20 independent experiments with a success probability of 0.6, what is the probability of having exactly 10 successes?\"", "answer": "musical_scale", "answer_params": "", "api_description": "def musical_scale:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the musical scale of a specific key in music theory.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The musical key for which the scale will be found.\n\t- scale_type : string = major (optional) The type of musical scale.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"musical_scale\", \"description\": \"Get the musical scale of a specific key in music theory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The musical key for which the scale will be found.\"}, \"scale_type\": {\"type\": \"string\", \"default\": \"major\", \"description\": \"The type of musical scale.\"}}, \"required\": [\"key\"]}}"}
{"scope": "simple", "query": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "query_for_retrieval": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "answer": "music_composer.create_mix", "answer_params": "", "api_description": "def music_composer.create_mix:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a mix of a song based on a particular music scale and duration\n\t\n\tArguments:\n\t---------\n\t- scale : string = None (required) The musical scale to be used. E.g: C Major, A Minor, etc.\n\t- note_duration : string = None (required) Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.\n\t- track_length : integer = None (required) Length of the mix track in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_composer.create_mix\", \"description\": \"Create a mix of a song based on a particular music scale and duration\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"scale\": {\"type\": \"string\", \"description\": \"The musical scale to be used. E.g: C Major, A Minor, etc.\"}, \"note_duration\": {\"type\": \"string\", \"description\": \"Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.\", \"enum\": [\"whole\", \"half\", \"quarter\", \"eighth\", \"sixteenth\"]}, \"track_length\": {\"type\": \"integer\", \"description\": \"Length of the mix track in seconds.\"}}, \"required\": [\"scale\", \"note_duration\", \"track_length\"]}}"}
{"scope": "sql", "query": "Can you create a new table in the database named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade'?", "query_for_retrieval": "Can you create a new table in the database named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please provide me with the origin and founder information of Buddhism, and then do the same for Hinduism? After that, could you also tell me about the core beliefs and practices of both these religions?\"", "query_for_retrieval": "\"Could you please provide me with the origin and founder information of Buddhism, and then do the same for Hinduism? After that, could you also tell me about the core beliefs and practices of both these religions?\"", "answer": "religion.get_core_beliefs", "answer_params": "", "api_description": "def religion.get_core_beliefs:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the core beliefs and practices of a specified religion.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) Name of the religion for which to retrieve the core beliefs and practices.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion.get_core_beliefs\", \"description\": \"Retrieves the core beliefs and practices of a specified religion.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"Name of the religion for which to retrieve the core beliefs and practices.\"}}, \"required\": [\"religion\"]}}"}
{"scope": "parallel_multiple_function", "query": "Get me the timeline of World War 2 in Europe and then get me an array of important leaders involved during the war.", "query_for_retrieval": "Get me the timeline of World War 2 in Europe and then get me an array of important leaders involved during the war.", "answer": "history.get_timeline", "answer_params": "", "api_description": "def history.get_timeline:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the timeline for a specific historical event\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The historical event you want the timeline for.\n\t- region : string = Europe (optional) Region of the event.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history.get_timeline\", \"description\": \"Retrieve the timeline for a specific historical event\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The historical event you want the timeline for.\"}, \"region\": {\"type\": \"string\", \"description\": \"Region of the event.\", \"default\": \"Europe\"}}, \"required\": [\"event\"]}}"}
{"scope": "simple", "query": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "query_for_retrieval": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "answer": "find_exhibition", "answer_params": "", "api_description": "def find_exhibition:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where the exhibition is held, e.g., New York City, NY.\n\t- art_form : string = None (required) The form of art the exhibition is displaying e.g., sculpture.\n\t- month : string = None (optional) The month of exhibition. Default value will return upcoming events if not specified.\n\t- user_ratings : string = None (optional) Select exhibitions with user rating threshold. Default is 'low'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_exhibition\", \"description\": \"Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where the exhibition is held, e.g., New York City, NY.\"}, \"art_form\": {\"type\": \"string\", \"description\": \"The form of art the exhibition is displaying e.g., sculpture.\"}, \"month\": {\"type\": \"string\", \"description\": \"The month of exhibition. Default value will return upcoming events if not specified.\"}, \"user_ratings\": {\"type\": \"string\", \"enum\": [\"low\", \"average\", \"high\"], \"description\": \"Select exhibitions with user rating threshold. Default is 'low'\"}}, \"required\": [\"location\", \"art_form\"]}}"}
{"scope": "simple", "query": "Find the prime factors of 450", "query_for_retrieval": "Find the prime factors of 450", "answer": "get_prime_factors", "answer_params": "", "api_description": "def get_prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tFunction to retrieve prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) Number for which prime factors need to be calculated\n\t- formatted : boolean = None (required) Return formatted string if true, array if false. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prime_factors\", \"description\": \"Function to retrieve prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"Number for which prime factors need to be calculated\"}, \"formatted\": {\"type\": \"boolean\", \"description\": \"Return formatted string if true, array if false. Default is true.\"}}, \"required\": [\"number\", \"formatted\"]}}"}
{"scope": "multiple_function", "query": "Get the NBA team's ranking with the best defence in the 2021 season.", "query_for_retrieval": "Get the NBA team's ranking with the best defence in the 2021 season.", "answer": "get_defense_ranking", "answer_params": "", "api_description": "def get_defense_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the defence ranking of NBA teams in a specified season.\n\t\n\tArguments:\n\t---------\n\t- season : integer = None (required) The NBA season to get defence ranking from.\n\t- top : integer = 1 (optional) Number of top teams in defence ranking to fetch.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_defense_ranking\", \"description\": \"Retrieve the defence ranking of NBA teams in a specified season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"season\": {\"type\": \"integer\", \"description\": \"The NBA season to get defence ranking from.\"}, \"top\": {\"type\": \"integer\", \"default\": 1, \"description\": \"Number of top teams in defence ranking to fetch.\"}}, \"required\": [\"season\"]}}"}
{"scope": "relevance", "query": "When will be sunset in Beijing today?", "query_for_retrieval": "When will be sunset in Beijing today?", "answer": "calculate_sunrise", "answer_params": "", "api_description": "def calculate_sunrise:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the time of sunrise for a specific date and location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location for which sunrise time needs to be calculated.\n\t- date : string = None (optional) The date for which sunrise time needs to be calculated in YYYY-MM-DD format. If not provided, current date is considered. Default: 1998-12-03\n\t- format : string = None (optional) Format in which the time should be returned. If not provided, default format 'HH:MM' is considered.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_sunrise\", \"description\": \"Calculate the time of sunrise for a specific date and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which sunrise time needs to be calculated.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date for which sunrise time needs to be calculated in YYYY-MM-DD format. If not provided, current date is considered. Default: 1998-12-03\"}, \"format\": {\"type\": \"string\", \"description\": \"Format in which the time should be returned. If not provided, default format 'HH:MM' is considered.\"}}, \"required\": [\"location\"]}}"}
{"scope": "multiple_function", "query": "What is the probability of getting a full house in poker?", "query_for_retrieval": "What is the probability of getting a full house in poker?", "answer": "poker_probability.full_house", "answer_params": "", "api_description": "def poker_probability.full_house:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of getting a full house in a poker game.\n\t\n\tArguments:\n\t---------\n\t- deck_size : integer = None (required) The size of the deck. Default is 52.\n\t- hand_size : integer = None (required) The size of the hand. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_probability.full_house\", \"description\": \"Calculate the probability of getting a full house in a poker game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deck_size\": {\"type\": \"integer\", \"description\": \"The size of the deck. Default is 52.\"}, \"hand_size\": {\"type\": \"integer\", \"description\": \"The size of the hand. Default is 5.\"}}, \"required\": [\"deck_size\", \"hand_size\"]}}"}
{"scope": "simple", "query": "Find social behaviors and patterns in a group size of 50 with extroverted members being 15 and introverted members being 35.", "query_for_retrieval": "Find social behaviors and patterns in a group size of 50 with extroverted members being 15 and introverted members being 35.", "answer": "group_dynamics.pattern", "answer_params": "", "api_description": "def group_dynamics.pattern:\n\t\"\"\"\n\tDescription:\n\t\n\tExamine the social dynamics and interactions within a group based on the personality traits and group size.\n\t\n\tArguments:\n\t---------\n\t- total : integer = None (required) The total group size.\n\t- extroverts : integer = None (required) The number of extroverted members in the group.\n\t- introverts : integer = None (required) The number of introverted members in the group.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"group_dynamics.pattern\", \"description\": \"Examine the social dynamics and interactions within a group based on the personality traits and group size.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total\": {\"type\": \"integer\", \"description\": \"The total group size.\"}, \"extroverts\": {\"type\": \"integer\", \"description\": \"The number of extroverted members in the group.\"}, \"introverts\": {\"type\": \"integer\", \"description\": \"The number of introverted members in the group.\"}}, \"required\": [\"total\", \"extroverts\", \"introverts\"]}}"}
{"scope": "javascript", "query": "How can I update the property 'version' of an object named 'packageInfo' to '1.2.3', ensuring the update only occurs if the new value differs from the existing one or if 'version' is not already a property of the object?", "query_for_retrieval": "How can I update the property 'version' of an object named 'packageInfo' to '1.2.3', ensuring the update only occurs if the new value differs from the existing one or if 'version' is not already a property of the object?", "answer": "vOe", "answer_params": "", "api_description": "def vOe:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function updates a property of an object to a new value, but only if the new value is different from the existing one or if the property does not already exist on the object.\n\t\n\tArguments:\n\t---------\n\t- r : any = None (required) The object to update.\n\t- e : String = None (required) The property of the object to update.\n\t- t : any = None (required) The new value to assign to the property.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"vOe\", \"description\": \"This function updates a property of an object to a new value, but only if the new value is different from the existing one or if the property does not already exist on the object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"r\": {\"type\": \"any\", \"description\": \"The object to update.\"}, \"e\": {\"type\": \"String\", \"description\": \"The property of the object to update.\"}, \"t\": {\"type\": \"any\", \"description\": \"The new value to assign to the property.\"}}, \"required\": [\"r\", \"e\", \"t\"]}}"}
{"scope": "relevance", "query": "What's the magnetic field at a point 4m away from a wire carrying a current of 2A?", "query_for_retrieval": "What's the magnetic field at a point 4m away from a wire carrying a current of 2A?", "answer": "calculate_wave_amplitude", "answer_params": "", "api_description": "def calculate_wave_amplitude:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the amplitude of an electromagnetic wave based on its maximum electric field strength.\n\t\n\tArguments:\n\t---------\n\t- max_electric_field_strength : float = None (required) The maximum electric field strength of the electromagnetic wave.\n\t- c : float = None (optional) The speed of light in vacuum, usually denoted as 'c'. Default is 3 * 10^8 m/s\n\t- wave_frequency : float = None (optional) The frequency of the electromagnetic wave. Default is 1 Hz\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_wave_amplitude\", \"description\": \"Calculate the amplitude of an electromagnetic wave based on its maximum electric field strength.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"max_electric_field_strength\": {\"type\": \"float\", \"description\": \"The maximum electric field strength of the electromagnetic wave.\"}, \"c\": {\"type\": \"float\", \"description\": \"The speed of light in vacuum, usually denoted as 'c'. Default is 3 * 10^8 m/s\"}, \"wave_frequency\": {\"type\": \"float\", \"description\": \"The frequency of the electromagnetic wave. Default is 1 Hz\"}}, \"required\": [\"max_electric_field_strength\"]}}"}
{"scope": "multiple_function", "query": "I want to book a suite with queen size bed for 3 nights in Hilton New York. Can you find the pricing for me?", "query_for_retrieval": "I want to book a suite with queen size bed for 3 nights in Hilton New York. Can you find the pricing for me?", "answer": "hotel_room_pricing.get", "answer_params": "", "api_description": "def hotel_room_pricing.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet pricing for a specific type of hotel room for specified number of nights.\n\t\n\tArguments:\n\t---------\n\t- hotelName : string = None (required) The name of the hotel e.g. Hilton New York\n\t- roomType : string = None (required) Type of the room to be booked.\n\t- nights : integer = None (required) Number of nights to book the room for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_room_pricing.get\", \"description\": \"Get pricing for a specific type of hotel room for specified number of nights.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotelName\": {\"type\": \"string\", \"description\": \"The name of the hotel e.g. Hilton New York\"}, \"roomType\": {\"type\": \"string\", \"description\": \"Type of the room to be booked.\"}, \"nights\": {\"type\": \"integer\", \"description\": \"Number of nights to book the room for.\"}}, \"required\": [\"hotelName\", \"roomType\", \"nights\"]}}"}
{"scope": "sql", "query": "Can you add a new entry to the 'Stocks' table in our financial database, where the columns are 'StockID', 'PurchaseDate', 'PurchasePrice', 'Quantity', and 'InvestorID', and the values to be inserted are 'STK54321', '2022-03-15', '150', '100', and 'INV456'?", "query_for_retrieval": "Can you add a new entry to the 'Stocks' table in our financial database, where the columns are 'StockID', 'PurchaseDate', 'PurchasePrice', 'Quantity', and 'InvestorID', and the values to be inserted are 'STK54321', '2022-03-15', '150', '100', and 'INV456'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.", "query_for_retrieval": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.", "answer": "lawyer.get_experience", "answer_params": "", "api_description": "def lawyer.get_experience:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve months of experience of a Lawyer on handling certain type of law cases.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The full name of the Lawyer.\n\t- law_type : string = None (required) The type of law case. eg. Bankruptcy\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawyer.get_experience\", \"description\": \"Retrieve months of experience of a Lawyer on handling certain type of law cases.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The full name of the Lawyer.\"}, \"law_type\": {\"type\": \"string\", \"description\": \"The type of law case. eg. Bankruptcy\"}}, \"required\": [\"name\", \"law_type\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been trying to stay updated with the COVID-19 situation and would like to know the latest death toll in Brazil. Also, I'm considering buying a product from Amazon, but I want to check the price first; its ASIN is 'B08PPDJWC8'. Lastly, I heard someone use the word 'Savage' in a conversation earlier, and I'm curious about its meaning on Urban Dictionary. Can you help me get this information?", "query_for_retrieval": "I've been trying to stay updated with the COVID-19 situation and would like to know the latest death toll in Brazil. Also, I'm considering buying a product from Amazon, but I want to check the price first; its ASIN is 'B08PPDJWC8'. Lastly, I heard someone use the word 'Savage' in a conversation earlier, and I'm curious about its meaning on Urban Dictionary. Can you help me get this information?", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "multiple_function", "query": "Predict the growth of forest in Yellowstone for the next 5 years including human impact.", "query_for_retrieval": "Predict the growth of forest in Yellowstone for the next 5 years including human impact.", "answer": "forest_growth_forecast", "answer_params": "", "api_description": "def forest_growth_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredicts the forest growth over the next N years based on current trends.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where you want to predict forest growth.\n\t- years : integer = None (required) The number of years for the forecast.\n\t- include_human_impact : boolean = None (optional) Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"forest_growth_forecast\", \"description\": \"Predicts the forest growth over the next N years based on current trends.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where you want to predict forest growth.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for the forecast.\"}, \"include_human_impact\": {\"type\": \"boolean\", \"description\": \"Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\"}}, \"required\": [\"location\", \"years\"]}}"}
{"scope": "relevance", "query": "What does the color purple represent in computer vision?", "query_for_retrieval": "What does the color purple represent in computer vision?", "answer": "psychology.color_representation", "answer_params": "", "api_description": "def psychology.color_representation:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyze the symbolic representation of a color in personality psychology.\n\t\n\tArguments:\n\t---------\n\t- color : string = None (required) The color to analyze.\n\t- context : string = None (required) The context in which the color is being analyzed, e.g. dream interpretation, room decoration etc.\n\t- individual_traits : string = traits (optional) The individual traits of the person whom color is associated with.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"psychology.color_representation\", \"description\": \"Analyze the symbolic representation of a color in personality psychology.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color\": {\"type\": \"string\", \"description\": \"The color to analyze.\"}, \"context\": {\"type\": \"string\", \"description\": \"The context in which the color is being analyzed, e.g. dream interpretation, room decoration etc.\"}, \"individual_traits\": {\"type\": \"string\", \"description\": \"The individual traits of the person whom color is associated with.\", \"default\": \"traits\"}}, \"required\": [\"color\", \"context\"]}}"}
{"scope": "java", "query": "How can I create a scheduled executor service that periodically updates Elasticsearch credentials from a file named 'es_credentials.properties' every 30 seconds, using the basic credentials provided in the variable `basicAuthCredentials`?", "query_for_retrieval": "How can I create a scheduled executor service that periodically updates Elasticsearch credentials from a file named 'es_credentials.properties' every 30 seconds, using the basic credentials provided in the variable `basicAuthCredentials`?", "answer": "configStorage.dynamicCredentialsScheduledExecutorService", "answer_params": "", "api_description": "def configStorage.dynamicCredentialsScheduledExecutorService:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a ScheduledExecutorService that periodically loads Elasticsearch credentials from a specified file at a given interval, using provided basic credentials.\n\t\n\tArguments:\n\t---------\n\t- credentialsFile : String = None (required) The path to the credentials file.\n\t- credentialsRefreshInterval : integer = None (required) The interval in seconds at which the credentials file should be reloaded.\n\t- basicCredentials : any = None (required) The BasicCredentials object containing the current credentials.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"configStorage.dynamicCredentialsScheduledExecutorService\", \"description\": \"Creates a ScheduledExecutorService that periodically loads Elasticsearch credentials from a specified file at a given interval, using provided basic credentials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"credentialsFile\": {\"type\": \"String\", \"description\": \"The path to the credentials file.\"}, \"credentialsRefreshInterval\": {\"type\": \"integer\", \"description\": \"The interval in seconds at which the credentials file should be reloaded.\"}, \"basicCredentials\": {\"type\": \"any\", \"description\": \"The BasicCredentials object containing the current credentials.\"}}, \"required\": [\"credentialsFile\", \"credentialsRefreshInterval\", \"basicCredentials\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm working on a project that involves predicting future trends based on past data. I have four sets of points for which I need to calculate the projected values using a linear regression model. For the first set with x-coordinates [1, 2, 3] and corresponding y-coordinates [4, 5, 6], I need to know the estimated y-value at x=10. For the second set, where x is [2, 4, 6] and y is [8, 10, 12], what would be the y-value when x=15? Similarly, with x-values [3, 6, 9] and y-values [12, 15, 18], I'm looking to find the y-value for x=20. And finally, for the last set with x-coordinates [4, 8, 12] and y-coordinates [16, 20, 24], I'd like to calculate the y at x=25. Can you run these predictions for me?", "query_for_retrieval": "I'm working on a project that involves predicting future trends based on past data. I have four sets of points for which I need to calculate the projected values using a linear regression model. For the first set with x-coordinates [1, 2, 3] and corresponding y-coordinates [4, 5, 6], I need to know the estimated y-value at x=10. For the second set, where x is [2, 4, 6] and y is [8, 10, 12], what would be the y-value when x=15? Similarly, with x-values [3, 6, 9] and y-values [12, 15, 18], I'm looking to find the y-value for x=20. And finally, for the last set with x-coordinates [4, 8, 12] and y-coordinates [16, 20, 24], I'd like to calculate the y at x=25. Can you run these predictions for me?", "answer": "linear_regression", "answer_params": "", "api_description": "def linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the linear regression of a set of points and evaluates it at a given point.\n\t\n\tArguments:\n\t---------\n\t- x : array = None (required) The x coordinates of the points.\n\t- y : array = None (required) The y coordinates of the points.\n\t- point : integer = None (required) The point to calculate the linear regression at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression\", \"description\": \"Finds the linear regression of a set of points and evaluates it at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"array\", \"description\": \"The x coordinates of the points.\", \"items\": {\"type\": \"integer\"}}, \"y\": {\"type\": \"array\", \"description\": \"The y coordinates of the points.\", \"items\": {\"type\": \"integer\"}}, \"point\": {\"type\": \"integer\", \"description\": \"The point to calculate the linear regression at.\"}}, \"required\": [\"x\", \"y\", \"point\"]}}"}
{"scope": "relevance", "query": "When was the declaration of independence signed?", "query_for_retrieval": "When was the declaration of independence signed?", "answer": "add_dates", "answer_params": "", "api_description": "def add_dates:\n\t\"\"\"\n\tDescription:\n\t\n\tAdd days to a specific date.\n\t\n\tArguments:\n\t---------\n\t- date : string = None (required) The starting date.\n\t- days_to_add : integer = None (required) The number of days to add to the starting date.\n\t- format : string = YYYY-MM-DD (optional) The desired date format for the returned date.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_dates\", \"description\": \"Add days to a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"date\": {\"type\": \"string\", \"description\": \"The starting date.\"}, \"days_to_add\": {\"type\": \"integer\", \"description\": \"The number of days to add to the starting date.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired date format for the returned date.\", \"default\": \"YYYY-MM-DD\"}}, \"required\": [\"date\", \"days_to_add\"]}}"}
{"scope": "executable_simple", "query": "Could you calculate the sum of two binary numbers '0011' and '1100' for me?", "query_for_retrieval": "Could you calculate the sum of two binary numbers '0011' and '1100' for me?", "answer": "add_binary_numbers", "answer_params": "", "api_description": "def add_binary_numbers:\n\t\"\"\"\n\tDescription:\n\t\n\tAdds two binary numbers.\n\t\n\tArguments:\n\t---------\n\t- a : string = None (required) The first binary number.\n\t- b : string = None (required) The second binary number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"add_binary_numbers\", \"description\": \"Adds two binary numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"string\", \"description\": \"The first binary number.\"}, \"b\": {\"type\": \"string\", \"description\": \"The second binary number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with the following tasks? First, I would like to know the elevation and area of the Yellowstone National Park. Second, I am considering investing $5000 in a stock that has an expected annual growth rate of 7%. I plan to hold the stock for 10 years and I would like to know the projected return of this investment, taking into account potential dividends. Third, I need to fetch detailed information about a legal case with the ID 'LC12345'. Lastly, I would also like to know the location and the year when the Yosemite National Park was established.\"", "query_for_retrieval": "\"Could you please help me with the following tasks? First, I would like to know the elevation and area of the Yellowstone National Park. Second, I am considering investing $5000 in a stock that has an expected annual growth rate of 7%. I plan to hold the stock for 10 years and I would like to know the projected return of this investment, taking into account potential dividends. Third, I need to fetch detailed information about a legal case with the ID 'LC12345'. Lastly, I would also like to know the location and the year when the Yosemite National Park was established.\"", "answer": "calculate_stock_return", "answer_params": "", "api_description": "def calculate_stock_return:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The amount of money to invest.\n\t- annual_growth_rate : float = None (required) The expected annual growth rate of the stock.\n\t- holding_period : integer = None (required) The number of years you intend to hold the stock.\n\t- dividends : boolean = None (optional) Optional. True if the calculation should take into account potential dividends. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_stock_return\", \"description\": \"Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The amount of money to invest.\"}, \"annual_growth_rate\": {\"type\": \"float\", \"description\": \"The expected annual growth rate of the stock.\"}, \"holding_period\": {\"type\": \"integer\", \"description\": \"The number of years you intend to hold the stock.\"}, \"dividends\": {\"type\": \"boolean\", \"description\": \"Optional. True if the calculation should take into account potential dividends. Default is false.\"}}, \"required\": [\"investment_amount\", \"annual_growth_rate\", \"holding_period\"]}}"}
{"scope": "simple", "query": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "query_for_retrieval": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "answer": "finance_calculator.npv", "answer_params": "", "api_description": "def finance_calculator.npv:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.\n\t\n\tArguments:\n\t---------\n\t- cash_flows : array = None (required) A list of cash flows.\n\t- discount_rate : float = None (required) The annual interest rate used to discount the cash flows.\n\t- years : array = None (optional) A list of years when the cash flow occurs. Default is empty array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance_calculator.npv\", \"description\": \"Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cash_flows\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A list of cash flows.\"}, \"discount_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate used to discount the cash flows.\"}, \"years\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A list of years when the cash flow occurs. Default is empty array.\"}}, \"required\": [\"cash_flows\", \"discount_rate\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are planning a trip to Mars. You weigh 75 kilograms on Earth and you are curious about how much you would weigh on Mars. After your trip to Mars, you plan to visit Japan. You have 5000 US dollars and you want to know how much it would be in Japanese Yen. During your stay in Japan, you come across a beautiful antique vase that is 24 inches tall, but you are more familiar with measurements in centimeters. How tall is the vase in centimeters?\"", "query_for_retrieval": "\"Imagine you are planning a trip to Mars. You weigh 75 kilograms on Earth and you are curious about how much you would weigh on Mars. After your trip to Mars, you plan to visit Japan. You have 5000 US dollars and you want to know how much it would be in Japanese Yen. During your stay in Japan, you come across a beautiful antique vase that is 24 inches tall, but you are more familiar with measurements in centimeters. How tall is the vase in centimeters?\"", "answer": "calculate.weight_in_space", "answer_params": "", "api_description": "def calculate.weight_in_space:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate your weight on different planets given your weight on earth\n\t\n\tArguments:\n\t---------\n\t- weight_earth_kg : float = None (required) Your weight on Earth in Kilograms.\n\t- planet : string = None (required) The planet you want to know your weight on.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate.weight_in_space\", \"description\": \"Calculate your weight on different planets given your weight on earth\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight_earth_kg\": {\"type\": \"float\", \"description\": \"Your weight on Earth in Kilograms.\"}, \"planet\": {\"type\": \"string\", \"description\": \"The planet you want to know your weight on.\"}}, \"required\": [\"weight_earth_kg\", \"planet\"]}}"}
{"scope": "relevance", "query": "What's the composition of species in my backyard garden in Boston?", "query_for_retrieval": "What's the composition of species in my backyard garden in Boston?", "answer": "soil_composition_analyze", "answer_params": "", "api_description": "def soil_composition_analyze:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyzes the composition of the soil including percentage of sand, silt, and clay based on the given soil sample.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where the soil sample is collected from.\n\t- soil_sample : boolean = None (required) The binary representation of the soil sample.\n\t- season : string = spring (optional) The season during which the soil sample is collected.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"soil_composition_analyze\", \"description\": \"Analyzes the composition of the soil including percentage of sand, silt, and clay based on the given soil sample.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where the soil sample is collected from.\"}, \"soil_sample\": {\"type\": \"boolean\", \"description\": \"The binary representation of the soil sample.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season during which the soil sample is collected.\", \"default\": \"spring\"}}, \"required\": [\"location\", \"soil_sample\"]}}"}
{"scope": "java", "query": "How can I configure an `ObjectParser` instance named `searchHitParser` to parse the inner hits fields for a search result in an Elasticsearch application?", "query_for_retrieval": "How can I configure an `ObjectParser` instance named `searchHitParser` to parse the inner hits fields for a search result in an Elasticsearch application?", "answer": "SearchHit.declareInnerHitsParseFields", "answer_params": "", "api_description": "def SearchHit.declareInnerHitsParseFields:\n\t\"\"\"\n\tDescription:\n\t\n\tConfigures an ObjectParser to parse the inner hits fields of a search result.\n\t\n\tArguments:\n\t---------\n\t- parser : any = None (required) The ObjectParser instance to configure.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SearchHit.declareInnerHitsParseFields\", \"description\": \"Configures an ObjectParser to parse the inner hits fields of a search result.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"parser\": {\"type\": \"any\", \"description\": \"The ObjectParser instance to configure.\"}}, \"required\": [\"parser\"]}}"}
{"scope": "simple", "query": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "query_for_retrieval": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "answer": "concert.search", "answer_params": "", "api_description": "def concert.search:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate a concert based on specific criteria like genre, location, and date.\n\t\n\tArguments:\n\t---------\n\t- genre : string = None (required) Genre of the concert.\n\t- location : string = None (required) City of the concert.\n\t- date : string = None (required) Date of the concert, e.g. this weekend, today, tomorrow, or date string.\n\t- price_range : string = None (optional) Expected price range of the concert tickets. Default is 'free'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.search\", \"description\": \"Locate a concert based on specific criteria like genre, location, and date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"genre\": {\"type\": \"string\", \"description\": \"Genre of the concert.\"}, \"location\": {\"type\": \"string\", \"description\": \"City of the concert.\"}, \"date\": {\"type\": \"string\", \"description\": \"Date of the concert, e.g. this weekend, today, tomorrow, or date string.\"}, \"price_range\": {\"type\": \"string\", \"enum\": [\"free\", \"cheap\", \"moderate\", \"expensive\"], \"description\": \"Expected price range of the concert tickets. Default is 'free'.\"}}, \"required\": [\"genre\", \"location\", \"date\"]}}"}
{"scope": "parallel_function", "query": "\"John, who weighs 85 kilograms and is 1.8 meters tall, and his friend Sarah, who weighs 60 kilograms and is 1.65 meters tall, are having a debate about their health. They decide to calculate their Body Mass Index (BMI) to settle the argument. Later, they meet their friend Mike, who weighs 75 kilograms and is 1.7 meters tall, and they decide to calculate his BMI as well. Can you help them calculate their BMIs?\"", "query_for_retrieval": "\"John, who weighs 85 kilograms and is 1.8 meters tall, and his friend Sarah, who weighs 60 kilograms and is 1.65 meters tall, are having a debate about their health. They decide to calculate their Body Mass Index (BMI) to settle the argument. Later, they meet their friend Mike, who weighs 75 kilograms and is 1.7 meters tall, and they decide to calculate his BMI as well. Can you help them calculate their BMIs?\"", "answer": "calculate_BMI", "answer_params": "", "api_description": "def calculate_BMI:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) given a person's weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight_kg : integer = None (required) The weight of the person in kilograms.\n\t- height_m : float = None (required) The height of the person in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_BMI\", \"description\": \"Calculate the Body Mass Index (BMI) given a person's weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight_kg\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height_m\": {\"type\": \"float\", \"description\": \"The height of the person in meters.\"}}, \"required\": [\"weight_kg\", \"height_m\"]}}"}
{"scope": "parallel_function", "query": "\"Imagine you are observing two racing cars on a straight track. The first car, Car A, starts from rest and accelerates at a rate of 6 m/s\u00b2 for 10 seconds. The second car, Car B, starts with an initial velocity of 20 m/s and accelerates at a rate of 4 m/s\u00b2 for 15 seconds. Using the function 'calculate_final_velocity', can you determine the final velocities of both Car A and Car B?\"", "query_for_retrieval": "\"Imagine you are observing two racing cars on a straight track. The first car, Car A, starts from rest and accelerates at a rate of 6 m/s\u00b2 for 10 seconds. The second car, Car B, starts with an initial velocity of 20 m/s and accelerates at a rate of 4 m/s\u00b2 for 15 seconds. Using the function 'calculate_final_velocity', can you determine the final velocities of both Car A and Car B?\"", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object.\n\t- acceleration : integer = None (required) The acceleration of the object.\n\t- time : integer = None (required) The time of acceleration.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object.\"}, \"acceleration\": {\"type\": \"integer\", \"description\": \"The acceleration of the object.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time of acceleration.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "multiple_function", "query": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year with fuel efficiency 20 mpg?", "query_for_retrieval": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year with fuel efficiency 20 mpg?", "answer": "grocery_store.find_best", "answer_params": "", "api_description": "def grocery_store.find_best:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the closest high-rated grocery stores based on certain product availability.\n\t\n\tArguments:\n\t---------\n\t- my_location : string = None (required) The current location of the user.\n\t- rating : float = None (optional) The minimum required store rating. Default is 0.0.\n\t- products : array = None (required) Required products in a list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.find_best\", \"description\": \"Find the closest high-rated grocery stores based on certain product availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"my_location\": {\"type\": \"string\", \"description\": \"The current location of the user.\"}, \"rating\": {\"type\": \"float\", \"description\": \"The minimum required store rating. Default is 0.0.\"}, \"products\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Required products in a list.\"}}, \"required\": [\"my_location\", \"products\"]}}"}
{"scope": "sql", "query": "Can you modify the \"employees\" table by setting the \"salary\" column to \"5000\" for all employees whose \"job_title\" is \"Manager\"?", "query_for_retrieval": "Can you modify the \"employees\" table by setting the \"salary\" column to \"5000\" for all employees whose \"job_title\" is \"Manager\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Find the area of a triangle with a base of 10 units and height of 5 units.", "query_for_retrieval": "Find the area of a triangle with a base of 10 units and height of 5 units.", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle given its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The base of the triangle.\n\t- height : integer = None (required) The height of the triangle.\n\t- unit : string = None (optional) The unit of measure (defaults to 'units' if not specified)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculate the area of a triangle given its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measure (defaults to 'units' if not specified)\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "parallel_function", "query": "\"John invested $5000 in a mutual fund 5 years ago. Today, the value of his investment has grown to $7000. He wants to compare this with another investment he made 3 years ago where he invested $8000 and now it's worth $12000. Can you help John calculate the Compound Annual Growth Rate (CAGR) for both these investments?\"", "query_for_retrieval": "\"John invested $5000 in a mutual fund 5 years ago. Today, the value of his investment has grown to $7000. He wants to compare this with another investment he made 3 years ago where he invested $8000 and now it's worth $12000. Can you help John calculate the Compound Annual Growth Rate (CAGR) for both these investments?\"", "answer": "calculate_cagr", "answer_params": "", "api_description": "def calculate_cagr:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n\t\n\tArguments:\n\t---------\n\t- initial_value : integer = None (required) The initial investment value.\n\t- final_value : integer = None (required) The final investment value.\n\t- period_in_years : integer = None (required) The period of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cagr\", \"description\": \"Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_value\": {\"type\": \"integer\", \"description\": \"The initial investment value.\"}, \"final_value\": {\"type\": \"integer\", \"description\": \"The final investment value.\"}, \"period_in_years\": {\"type\": \"integer\", \"description\": \"The period of the investment in years.\"}}, \"required\": [\"initial_value\", \"final_value\", \"period_in_years\"]}}"}
{"scope": "simple", "query": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "query_for_retrieval": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "answer": "find_recipe", "answer_params": "", "api_description": "def find_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a recipe based on the dietary restrictions, recipe type, and time constraints.\n\t\n\tArguments:\n\t---------\n\t- dietary_restrictions : string = None (required) Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n\t- recipe_type : string = None (required) Type of the recipe. E.g. dessert, main course, breakfast.\n\t- time : integer = None (required) Time limit in minutes to prep the meal.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipe\", \"description\": \"Find a recipe based on the dietary restrictions, recipe type, and time constraints.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restrictions\": {\"type\": \"string\", \"description\": \"Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\"}, \"recipe_type\": {\"type\": \"string\", \"description\": \"Type of the recipe. E.g. dessert, main course, breakfast.\"}, \"time\": {\"type\": \"integer\", \"description\": \"Time limit in minutes to prep the meal.\"}}, \"required\": [\"dietary_restrictions\", \"recipe_type\", \"time\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a community art project and planning a large circular mural for a public space. To figure out how much paint I need to buy, I need to calculate the area of the circle I'll be painting. The wall space I've been given has a perfect circular area with a radius of 15 feet. Can you help me determine the area of this circle?", "query_for_retrieval": "I'm working on a community art project and planning a large circular mural for a public space. To figure out how much paint I need to buy, I need to calculate the area of the circle I'll be painting. The wall space I've been given has a perfect circular area with a radius of 15 feet. Can you help me determine the area of this circle?", "answer": "calculate_electrostatic_potential_energy", "answer_params": "", "api_description": "def calculate_electrostatic_potential_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the electrostatic potential energy.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge of the object, in coulombs.\n\t- voltage : float = None (required) The voltage of the object, in volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential_energy\", \"description\": \"Calculates the electrostatic potential energy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge of the object, in coulombs.\"}, \"voltage\": {\"type\": \"float\", \"description\": \"The voltage of the object, in volts.\"}}, \"required\": [\"charge\", \"voltage\"]}}"}
{"scope": "simple", "query": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "query_for_retrieval": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "answer": "finance.calculate_quarterly_dividend_per_share", "answer_params": "", "api_description": "def finance.calculate_quarterly_dividend_per_share:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate quarterly dividend per share for a company given total dividend payout and outstanding shares\n\t\n\tArguments:\n\t---------\n\t- total_payout : integer = None (required) The total amount of dividends paid out in USD\n\t- outstanding_shares : integer = None (required) Total number of outstanding shares\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.calculate_quarterly_dividend_per_share\", \"description\": \"Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_payout\": {\"type\": \"integer\", \"description\": \"The total amount of dividends paid out in USD\"}, \"outstanding_shares\": {\"type\": \"integer\", \"description\": \"Total number of outstanding shares\"}}, \"required\": [\"total_payout\", \"outstanding_shares\"], \"optional\": []}}"}
{"scope": "multiple_function", "query": "Find the average closing price of Apple stock in the past 60 days", "query_for_retrieval": "Find the average closing price of Apple stock in the past 60 days", "answer": "volume_traded", "answer_params": "", "api_description": "def volume_traded:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total volume of stocks traded over a certain period of time\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) Name of the company to get data for\n\t- days : integer = None (required) Number of past days to calculate volume traded for\n\t- data_source : string = None (optional) Source to fetch the financial data. default is 'yahoo finance'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"volume_traded\", \"description\": \"Calculate the total volume of stocks traded over a certain period of time\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"Name of the company to get data for\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days to calculate volume traded for\"}, \"data_source\": {\"type\": \"string\", \"description\": \"Source to fetch the financial data. default is 'yahoo finance'\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "rest", "query": "I'm planning a hiking trip for next weekend and I need to check the weather forecast for the Yosemite National Park area. Can you fetch me the weather data for the coordinates 37.8651 N, 119.5383 W, including the hourly forecast for temperature, wind speed, and precipitation for the next 10 days? Also, I prefer the temperature in Fahrenheit, wind speed in mph, and precipitation in inches. Oh, and since I'll be in the local time zone, please adjust the timestamps accordingly.", "query_for_retrieval": "I'm planning a hiking trip for next weekend and I need to check the weather forecast for the Yosemite National Park area. Can you fetch me the weather data for the coordinates 37.8651 N, 119.5383 W, including the hourly forecast for temperature, wind speed, and precipitation for the next 10 days? Also, I prefer the temperature in Fahrenheit, wind speed in mph, and precipitation in inches. Oh, and since I'll be in the local time zone, please adjust the timestamps accordingly.", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "Who signed the declaration of independence?", "query_for_retrieval": "Who signed the declaration of independence?", "answer": "historical_event.get_date", "answer_params": "", "api_description": "def historical_event.get_date:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the date of a specific historical event.\n\t\n\tArguments:\n\t---------\n\t- event_name : string = None (required) The name of the historical event.\n\t- event_location : string = None (required) The location of the historical event.\n\t- event_time_period : string = Renaissance (optional) The historical time period during which the event took place. (e.g., Renaissance, Middle Ages, etc.)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"historical_event.get_date\", \"description\": \"Retrieve the date of a specific historical event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event_name\": {\"type\": \"string\", \"description\": \"The name of the historical event.\"}, \"event_location\": {\"type\": \"string\", \"description\": \"The location of the historical event.\"}, \"event_time_period\": {\"type\": \"string\", \"description\": \"The historical time period during which the event took place. (e.g., Renaissance, Middle Ages, etc.)\", \"default\": \"Renaissance\"}}, \"required\": [\"event_name\", \"event_location\"]}}"}
{"scope": "simple", "query": "What is the temperature in celsius and humidity level of Tokyo, Japan right now?", "query_for_retrieval": "What is the temperature in celsius and humidity level of Tokyo, Japan right now?", "answer": "current_weather_condition", "answer_params": "", "api_description": "def current_weather_condition:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the current weather conditions of a specific city including temperature and humidity.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city that you want to get the current weather conditions for.\n\t- country : string = None (required) The country of the city you specified.\n\t- measurement : string = None (optional) You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"current_weather_condition\", \"description\": \"Get the current weather conditions of a specific city including temperature and humidity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city that you want to get the current weather conditions for.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the city you specified.\"}, \"measurement\": {\"type\": \"string\", \"description\": \"You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'.\"}}, \"required\": [\"city\", \"country\"]}}"}
{"scope": "relevance", "query": "Who won the 1996 NBA championships?", "query_for_retrieval": "Who won the 1996 NBA championships?", "answer": "playoff.brackets", "answer_params": "", "api_description": "def playoff.brackets:\n\t\"\"\"\n\tDescription:\n\t\n\tDisplay NBA playoff brackets for a specified year.\n\t\n\tArguments:\n\t---------\n\t- year : integer = None (required) The year for the desired NBA playoffs.\n\t- round : string = None (required) Specific round of the playoffs.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"playoff.brackets\", \"description\": \"Display NBA playoff brackets for a specified year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"integer\", \"description\": \"The year for the desired NBA playoffs.\"}, \"round\": {\"type\": \"string\", \"description\": \"Specific round of the playoffs.\", \"enum\": [\"First Round\", \"Conference Semifinals\", \"Conference Finals\", \"Finals\"]}}, \"required\": [\"year\", \"round\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been brushing up on my linear algebra and I'm working with matrix operations. I have these two matrices I need to multiply: the first one, matA, contains [[1, 2], [3, 4]] and the second one, matB, contains [[5, 6], [7, 8]]. Could you multiply these two for me? Also, while you're at it, I have this list of numbers [1,2,3,4], and I'm looking to calculate the average. What's the mean of this list?", "query_for_retrieval": "I've been brushing up on my linear algebra and I'm working with matrix operations. I have these two matrices I need to multiply: the first one, matA, contains [[1, 2], [3, 4]] and the second one, matB, contains [[5, 6], [7, 8]]. Could you multiply these two for me? Also, while you're at it, I have this list of numbers [1,2,3,4], and I'm looking to calculate the average. What's the mean of this list?", "answer": "mat_mul", "answer_params": "", "api_description": "def mat_mul:\n\t\"\"\"\n\tDescription:\n\t\n\tMultiplies two matrices.\n\t\n\tArguments:\n\t---------\n\t- matA : array = None (required) The first matrix.\n\t- matB : array = None (required) The second matrix.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mat_mul\", \"description\": \"Multiplies two matrices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"matA\": {\"type\": \"array\", \"description\": \"The first matrix.\", \"items\": {\"type\": \"integer\"}}, \"matB\": {\"type\": \"array\", \"description\": \"The second matrix.\", \"items\": {\"type\": \"integer\"}}}, \"required\": [\"matA\", \"matB\"]}}"}
{"scope": "executable_simple", "query": "I'm developing a new encryption algorithm and I'm currently focusing on prime factorization as part of the process. To test the algorithm's effectiveness, I need to calculate the prime factors of the number 7891. Can you help me with that?", "query_for_retrieval": "I'm developing a new encryption algorithm and I'm currently focusing on prime factorization as part of the process. To test the algorithm's effectiveness, I need to calculate the prime factors of the number 7891. Can you help me with that?", "answer": "get_prime_factors", "answer_params": "", "api_description": "def get_prime_factors:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the prime factors of a number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number to calculate the prime factors of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_prime_factors\", \"description\": \"Calculates the prime factors of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number to calculate the prime factors of.\"}}, \"required\": [\"number\"]}}"}
{"scope": "simple", "query": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "query_for_retrieval": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population density of a specific country in a specific year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which the density needs to be calculated.\n\t- year : string = None (required) The year in which the density is to be calculated.\n\t- population : integer = None (required) The population of the country.\n\t- land_area : integer = None (required) The land area of the country in square kilometers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the population density of a specific country in a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which the density needs to be calculated.\"}, \"year\": {\"type\": \"string\", \"description\": \"The year in which the density is to be calculated.\"}, \"population\": {\"type\": \"integer\", \"description\": \"The population of the country.\"}, \"land_area\": {\"type\": \"integer\", \"description\": \"The land area of the country in square kilometers.\"}}, \"required\": [\"country\", \"year\", \"population\", \"land_area\"]}}"}
{"scope": "multiple_function", "query": "Calculate the derivative of the function 2x^2 at x = 1.", "query_for_retrieval": "Calculate the derivative of the function 2x^2 at x = 1.", "answer": "calculus.derivative", "answer_params": "", "api_description": "def calculus.derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the derivative of a function at a specific value.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- value : integer = None (required) The value where the derivative needs to be calculated at.\n\t- function_variable : string = None (optional) The variable present in the function, for instance x or y, etc. Default is 'x'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculus.derivative\", \"description\": \"Compute the derivative of a function at a specific value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"value\": {\"type\": \"integer\", \"description\": \"The value where the derivative needs to be calculated at.\"}, \"function_variable\": {\"type\": \"string\", \"description\": \"The variable present in the function, for instance x or y, etc. Default is 'x'\"}}, \"required\": [\"function\", \"value\"]}}"}
{"scope": "multiple_function", "query": "When was the signing of the Treaty of Lisbon?", "query_for_retrieval": "When was the signing of the Treaty of Lisbon?", "answer": "locate_tallest_mountains", "answer_params": "", "api_description": "def locate_tallest_mountains:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the tallest mountains within a specified radius of a location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city from which to calculate distance.\n\t- radius : float = None (required) The radius within which to find mountains, measured in kilometers.\n\t- amount : integer = None (required) The number of mountains to find, listed from tallest to smallest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"locate_tallest_mountains\", \"description\": \"Find the tallest mountains within a specified radius of a location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city from which to calculate distance.\"}, \"radius\": {\"type\": \"float\", \"description\": \"The radius within which to find mountains, measured in kilometers.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The number of mountains to find, listed from tallest to smallest.\"}}, \"required\": [\"location\", \"radius\", \"amount\"]}}"}
{"scope": "parallel_function", "query": "\"In a game of basketball, a player has a 60% chance of making any given shot. In a series of 10 shots, what is the probability that the player makes exactly 7 shots? Also, in another series of 15 shots, what is the probability that the player makes exactly 10 shots? Finally, in a series of 20 shots, what is the probability that the player makes exactly 15 shots?\"", "query_for_retrieval": "\"In a game of basketball, a player has a 60% chance of making any given shot. In a series of 10 shots, what is the probability that the player makes exactly 7 shots? Also, in another series of 15 shots, what is the probability that the player makes exactly 10 shots? Finally, in a series of 20 shots, what is the probability that the player makes exactly 15 shots?\"", "answer": "calculate_binomial_probability", "answer_params": "", "api_description": "def calculate_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n\t\n\tArguments:\n\t---------\n\t- number_of_trials : integer = None (required) The total number of trials.\n\t- number_of_successes : integer = None (required) The desired number of successful outcomes.\n\t- probability_of_success : float = 0.5 (optional) The probability of a successful outcome on any given trial.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_binomial_probability\", \"description\": \"Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number_of_trials\": {\"type\": \"integer\", \"description\": \"The total number of trials.\"}, \"number_of_successes\": {\"type\": \"integer\", \"description\": \"The desired number of successful outcomes.\"}, \"probability_of_success\": {\"type\": \"float\", \"description\": \"The probability of a successful outcome on any given trial.\", \"default\": 0.5}}, \"required\": [\"number_of_trials\", \"number_of_successes\"]}}"}
{"scope": "simple", "query": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "query_for_retrieval": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "answer": "get_religion_history", "answer_params": "", "api_description": "def get_religion_history:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves significant religious events, including the details of the event, its historical context, and its impacts.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) Name of the religion to be queried.\n\t- century : integer = None (required) The century in which the event(s) took place.\n\t- sort_by : string = chronological (optional) Order of sorting the events. Default is chronological.\n\t- count : integer = 5 (optional) Number of events to return. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_religion_history\", \"description\": \"Retrieves significant religious events, including the details of the event, its historical context, and its impacts.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"Name of the religion to be queried.\"}, \"century\": {\"type\": \"integer\", \"description\": \"The century in which the event(s) took place.\"}, \"sort_by\": {\"type\": \"string\", \"enum\": [\"importance\", \"chronological\"], \"default\": \"chronological\", \"description\": \"Order of sorting the events. Default is chronological.\"}, \"count\": {\"type\": \"integer\", \"default\": 5, \"description\": \"Number of events to return. Default is 5.\"}}, \"required\": [\"religion\", \"century\"]}}"}
{"scope": "javascript", "query": "How can I send a 'submit' action to a React form with the ID 'loginForm' at a coordinate that is 30% from the top and 60% from the left?", "query_for_retrieval": "How can I send a 'submit' action to a React form with the ID 'loginForm' at a coordinate that is 30% from the top and 60% from the left?", "answer": "submitAtCoordinate", "answer_params": "", "api_description": "def submitAtCoordinate:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function sends a submit action to a React form element at a specific position determined by coordinates relative to its bounding box.\n\t\n\tArguments:\n\t---------\n\t- action : String = None (required) The type of action to send.\n\t- formId : String = None (required) The ID of the React form element to which to send the action.\n\t- coordinates : array = None (required) An array of two numbers representing the x and y coordinates relative to the element's bounding box, in percentages.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"submitAtCoordinate\", \"description\": \"This function sends a submit action to a React form element at a specific position determined by coordinates relative to its bounding box.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"action\": {\"type\": \"String\", \"description\": \"The type of action to send.\"}, \"formId\": {\"type\": \"String\", \"description\": \"The ID of the React form element to which to send the action.\"}, \"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"An array of two numbers representing the x and y coordinates relative to the element's bounding box, in percentages.\"}}, \"required\": [\"action\", \"formId\", \"coordinates\"]}}"}
{"scope": "executable_simple", "query": "I'm planning a new art project - a circular mural on one of the downtown walls. It's going to be quite large, with a 15-foot radius. To make sure I buy enough paint without overspending, I need to figure out the area of this circle. Can you help me with that calculation?", "query_for_retrieval": "I'm planning a new art project - a circular mural on one of the downtown walls. It's going to be quite large, with a 15-foot radius. To make sure I buy enough paint without overspending, I need to figure out the area of this circle. Can you help me with that calculation?", "answer": "geometry_area_circle", "answer_params": "", "api_description": "def geometry_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a circle.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle, in feet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry_area_circle\", \"description\": \"Calculates the area of a circle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle, in feet.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "simple", "query": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.", "query_for_retrieval": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.", "answer": "create_histogram", "answer_params": "", "api_description": "def create_histogram:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a histogram based on provided data.\n\t\n\tArguments:\n\t---------\n\t- data : array = None (required) The data for which histogram needs to be plotted.\n\t- bins : integer = None (required) The number of equal-width bins in the range. Default is 10.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_histogram\", \"description\": \"Create a histogram based on provided data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The data for which histogram needs to be plotted.\"}, \"bins\": {\"type\": \"integer\", \"description\": \"The number of equal-width bins in the range. Default is 10.\"}}, \"required\": [\"data\", \"bins\"]}}"}
{"scope": "simple", "query": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "query_for_retrieval": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "answer": "t_test", "answer_params": "", "api_description": "def t_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform a statistical t-test to check if the means of two independent datasets are statistically different.\n\t\n\tArguments:\n\t---------\n\t- dataset_A : array = None (required) Dataset A for comparison.\n\t- dataset_B : array = None (required) Dataset B for comparison.\n\t- alpha : float = None (optional) Significance level for the test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"t_test\", \"description\": \"Perform a statistical t-test to check if the means of two independent datasets are statistically different.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset_A\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset A for comparison.\"}, \"dataset_B\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset B for comparison.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the test. Default is 0.05.\"}}, \"required\": [\"dataset_A\", \"dataset_B\"]}}"}
{"scope": "relevance", "query": "How much electricity will I need for my 2000 sq ft home?", "query_for_retrieval": "How much electricity will I need for my 2000 sq ft home?", "answer": "solar_panel.calculate_need", "answer_params": "", "api_description": "def solar_panel.calculate_need:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the number of solar panels needed for a house based on the square footage and average sunlight hours.\n\t\n\tArguments:\n\t---------\n\t- square_footage : float = None (required) The square footage of the house.\n\t- average_sunlight_hours : float = None (required) The average hours of sunlight received.\n\t- usage_efficiency : float = 0.8 (optional) The efficiency of energy usage in the home, default is 0.8.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solar_panel.calculate_need\", \"description\": \"Calculate the number of solar panels needed for a house based on the square footage and average sunlight hours.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"square_footage\": {\"type\": \"float\", \"description\": \"The square footage of the house.\"}, \"average_sunlight_hours\": {\"type\": \"float\", \"description\": \"The average hours of sunlight received.\"}, \"usage_efficiency\": {\"type\": \"float\", \"default\": 0.8, \"description\": \"The efficiency of energy usage in the home, default is 0.8.\"}}, \"required\": [\"square_footage\", \"average_sunlight_hours\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've been tracking the stock market and I'm interested in Apple's performance, but I only remember the ticker symbol 'AAPL', not the full company name. Could you look that up for me? Additionally, I need to schedule some events and I want them to sync up. The first event is every 12 days and the second one every 18 days. I need to know the least common multiple to find out when they will coincide. Lastly, I'm planning a triangular garden bed; it's going to have a 10-unit base and rise up 15 units in height. I need to calculate how much area that will cover.", "query_for_retrieval": "I've been tracking the stock market and I'm interested in Apple's performance, but I only remember the ticker symbol 'AAPL', not the full company name. Could you look that up for me? Additionally, I need to schedule some events and I want them to sync up. The first event is every 12 days and the second one every 18 days. I need to know the least common multiple to find out when they will coincide. Lastly, I'm planning a triangular garden bed; it's going to have a 10-unit base and rise up 15 units in height. I need to calculate how much area that will cover.", "answer": "get_company_name_by_stock_name", "answer_params": "", "api_description": "def get_company_name_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the company name of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_company_name_by_stock_name\", \"description\": \"Finds the company name of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "simple", "query": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "query_for_retrieval": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "answer": "metropolitan_museum.get_top_artworks", "answer_params": "", "api_description": "def metropolitan_museum.get_top_artworks:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number of artworks to fetch\n\t- sort_by : string = None (optional) The criteria to sort the results on. Default is 'popularity'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"metropolitan_museum.get_top_artworks\", \"description\": \"Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number of artworks to fetch\"}, \"sort_by\": {\"type\": \"string\", \"description\": \"The criteria to sort the results on. Default is 'popularity'.\", \"enum\": [\"popularity\", \"chronological\", \"alphabetical\"]}}, \"required\": [\"number\"]}}"}
{"scope": "parallel_multiple_function", "query": "I need to convert 10 dollars to Euros and make a 10 dollar deposit in my local bank account with account number - 987654.", "query_for_retrieval": "I need to convert 10 dollars to Euros and make a 10 dollar deposit in my local bank account with account number - 987654.", "answer": "banking_service", "answer_params": "", "api_description": "def banking_service:\n\t\"\"\"\n\tDescription:\n\t\n\tMake a deposit to a given bank account\n\t\n\tArguments:\n\t---------\n\t- account_id : string = None (required) Target account to make deposit to.\n\t- amount : float = None (required) Amount to deposit.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"banking_service\", \"description\": \"Make a deposit to a given bank account\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"account_id\": {\"type\": \"string\", \"description\": \"Target account to make deposit to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"Amount to deposit.\"}}, \"required\": [\"account_id\", \"amount\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you provide me with a 5-day air quality forecast for New York, a 7-day weather forecast for Los Angeles, news articles on 'global warming' for the past 3 days, and a 2-day air quality forecast for Beijing?\"", "query_for_retrieval": "\"Can you provide me with a 5-day air quality forecast for New York, a 7-day weather forecast for Los Angeles, news articles on 'global warming' for the past 3 days, and a 2-day air quality forecast for Beijing?\"", "answer": "news", "answer_params": "", "api_description": "def news:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve news articles for a specific topic.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The topic that you want to get the news for.\n\t- days : integer = None (required) Number of past days for which to retrieve the news.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"news\", \"description\": \"Retrieve news articles for a specific topic.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The topic that you want to get the news for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of past days for which to retrieve the news.\"}}, \"required\": [\"topic\", \"days\"]}}"}
{"scope": "relevance", "query": "What is the seating capacity of Camp Nou Stadium?", "query_for_retrieval": "What is the seating capacity of Camp Nou Stadium?", "answer": "sculpture_info.find_creator", "answer_params": "", "api_description": "def sculpture_info.find_creator:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the creator of a sculpture based on the name.\n\t\n\tArguments:\n\t---------\n\t- sculpture_name : string = None (required) The name of the sculpture.\n\t- location : string = None (required) The location where the sculpture is displayed, if known.\n\t- year : integer = 2000 (optional) The year the sculpture was created, if known.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture_info.find_creator\", \"description\": \"Retrieve the creator of a sculpture based on the name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sculpture_name\": {\"type\": \"string\", \"description\": \"The name of the sculpture.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the sculpture is displayed, if known.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year the sculpture was created, if known.\", \"default\": 2000}}, \"required\": [\"sculpture_name\", \"location\"]}}"}
{"scope": "rest", "query": "I need to convert the latitude 48.8584 and longitude 2.2945 to an address, I know it's somewhere famous in France. How do I make a GET request to the Geocoding API using my API key 'YOUR-GEOCODE-API-KEY' to get this information in JSON format?", "query_for_retrieval": "I need to convert the latitude 48.8584 and longitude 2.2945 to an address, I know it's somewhere famous in France. How do I make a GET request to the Geocoding API using my API key 'YOUR-GEOCODE-API-KEY' to get this information in JSON format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/reverse (required) Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the location to reverse geocode.\n\t  - lon : float = None (required) Longitude of the location to reverse geocode.\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses\", \"default\": \"https://geocode.maps.co/reverse\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the location to reverse geocode.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the location to reverse geocode.\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "What is the ranking of Manchester United in Premier League?", "query_for_retrieval": "What is the ranking of Manchester United in Premier League?", "answer": "sports_ranking", "answer_params": "", "api_description": "def sports_ranking:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the ranking of a specific sports team in a specific league\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team.\n\t- league : string = None (required) The name of the league.\n\t- season : integer = None (optional) Optional parameter to specify the season, default is the current season, 2024\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking\", \"description\": \"Fetch the ranking of a specific sports team in a specific league\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the league.\"}, \"season\": {\"type\": \"integer\", \"description\": \"Optional parameter to specify the season, default is the current season, 2024\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"John is a student who recently received his grades for the semester. His grades were as follows: Math - 85, English - 90, Science - 88, History - 92, and Art - 89. Could you please help John to understand his performance better by doing the following: \n\n1) Calculate the average grade across all his subjects using the 'calculate_average' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\n\n2) Calculate the standard deviation of his grades using the 'calculate_standard_deviation' function with the same grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89} to understand the variability of his scores.\n\n3) Identify the subject in which John scored the highest using the 'highest_grade' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\"", "query_for_retrieval": "\"John is a student who recently received his grades for the semester. His grades were as follows: Math - 85, English - 90, Science - 88, History - 92, and Art - 89. Could you please help John to understand his performance better by doing the following: \n\n1) Calculate the average grade across all his subjects using the 'calculate_average' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\n\n2) Calculate the standard deviation of his grades using the 'calculate_standard_deviation' function with the same grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89} to understand the variability of his scores.\n\n3) Identify the subject in which John scored the highest using the 'highest_grade' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\"", "answer": "highest_grade", "answer_params": "", "api_description": "def highest_grade:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function finds the subject where the student got the highest score.\n\t\n\tArguments:\n\t---------\n\t- gradeDict : dict = None (required) A dictionary where keys represent subjects and values represent scores\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"highest_grade\", \"description\": \"This function finds the subject where the student got the highest score.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"gradeDict\": {\"type\": \"dict\", \"description\": \"A dictionary where keys represent subjects and values represent scores\"}}, \"required\": [\"gradeDict\"]}}"}
{"scope": "parallel_function", "query": "\"A team of scientists is conducting an experiment involving a circular loop carrying an electric current. They have two different setups for this experiment. In the first setup, the loop has a radius of 0.5 meters and is carrying a current of 10 Amperes. In the second setup, the loop has a radius of 1 meter and is carrying a current of 15 Amperes. They want to compare the magnetic fields produced at the center of the loop in both setups. They assume the magnetic permeability to be the same as in free space in both cases. Can you calculate the magnetic fields for both setups using the 'calculate_magnetic_field' function and tell them which setup produces a stronger magnetic field?\"", "query_for_retrieval": "\"A team of scientists is conducting an experiment involving a circular loop carrying an electric current. They have two different setups for this experiment. In the first setup, the loop has a radius of 0.5 meters and is carrying a current of 10 Amperes. In the second setup, the loop has a radius of 1 meter and is carrying a current of 15 Amperes. They want to compare the magnetic fields produced at the center of the loop in both setups. They assume the magnetic permeability to be the same as in free space in both cases. Can you calculate the magnetic fields for both setups using the 'calculate_magnetic_field' function and tell them which setup produces a stronger magnetic field?\"", "answer": "calculate_magnetic_field", "answer_params": "", "api_description": "def calculate_magnetic_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the magnetic field produced at the center of a circular loop carrying current.\n\t\n\tArguments:\n\t---------\n\t- current : integer = None (required) The current through the circular loop in Amperes.\n\t- radius : float = None (required) The radius of the circular loop in meters.\n\t- permeability : integer = None (optional) The magnetic permeability. Default is permeability in free space.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_magnetic_field\", \"description\": \"Calculate the magnetic field produced at the center of a circular loop carrying current.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"integer\", \"description\": \"The current through the circular loop in Amperes.\"}, \"radius\": {\"type\": \"float\", \"description\": \"The radius of the circular loop in meters.\"}, \"permeability\": {\"type\": \"integer\", \"description\": \"The magnetic permeability. Default is permeability in free space.\"}}, \"required\": [\"current\", \"radius\"]}}"}
{"scope": "sql", "query": "Can you populate the 'customer' table with a new entry where the columns are 'customer_id', 'customer_name', 'customer_email', 'customer_address', and 'customer_phone', and the corresponding values to be added are 'C1023', 'Jane Smith', 'janesmith@example.com', '123 Main St, Anytown', and '987-654-3210'?", "query_for_retrieval": "Can you populate the 'customer' table with a new entry where the columns are 'customer_id', 'customer_name', 'customer_email', 'customer_address', and 'customer_phone', and the corresponding values to be added are 'C1023', 'Jane Smith', 'janesmith@example.com', '123 Main St, Anytown', and '987-654-3210'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Find a Thai restaurant in Chicago with vegetarian options.", "query_for_retrieval": "Find a Thai restaurant in Chicago with vegetarian options.", "answer": "hotel_booking.check_availability", "answer_params": "", "api_description": "def hotel_booking.check_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck room availability in a hotel based on certain criteria such as location and dates.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The city where the hotel is located.\n\t- check_in_date : string = None (required) The check-in date.\n\t- check_out_date : string = None (required) The check-out date.\n\t- room_type : string = double (optional) The type of room.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking.check_availability\", \"description\": \"Check room availability in a hotel based on certain criteria such as location and dates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The city where the hotel is located.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of room.\", \"default\": \"double\"}}, \"required\": [\"hotel_name\", \"location\", \"check_in_date\", \"check_out_date\"]}}"}
{"scope": "simple", "query": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.", "query_for_retrieval": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.", "answer": "calculate_molecular_weight", "answer_params": "", "api_description": "def calculate_molecular_weight:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the molecular weight of a compound given the compound formula.\n\t\n\tArguments:\n\t---------\n\t- compound : string = None (required) The molecular formula of the compound.\n\t- to_unit : string = None (required) The unit in which to return the result.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_molecular_weight\", \"description\": \"Calculate the molecular weight of a compound given the compound formula.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"compound\": {\"type\": \"string\", \"description\": \"The molecular formula of the compound.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit in which to return the result.\"}}, \"required\": [\"compound\", \"to_unit\"]}}"}
{"scope": "multiple_function", "query": "Find the conversion rate from Euro to Dollar at January 1, 2022", "query_for_retrieval": "Find the conversion rate from Euro to Dollar at January 1, 2022", "answer": "currency_conversion.convert", "answer_params": "", "api_description": "def currency_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a specified amount of money from one currency to another at the latest rate.\n\t\n\tArguments:\n\t---------\n\t- from_currency : string = None (required) The currency that you want to convert from.\n\t- to_currency : string = None (required) The currency that you want to convert to.\n\t- amount : float = None (required) The amount of money that you want to convert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_conversion.convert\", \"description\": \"Converts a specified amount of money from one currency to another at the latest rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"from_currency\": {\"type\": \"string\", \"description\": \"The currency that you want to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency that you want to convert to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount of money that you want to convert.\"}}, \"required\": [\"from_currency\", \"to_currency\", \"amount\"]}}"}
{"scope": "multiple_function", "query": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?", "query_for_retrieval": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?", "answer": "restaurant.find", "answer_params": "", "api_description": "def restaurant.find:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate restaurants based on specific criteria such as cuisine and price range\n\t\n\tArguments:\n\t---------\n\t- cuisine : string = None (required) The type of cuisine preferred.\n\t- price : array = None (optional) Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find\", \"description\": \"Locate restaurants based on specific criteria such as cuisine and price range\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cuisine\": {\"type\": \"string\", \"description\": \"The type of cuisine preferred.\"}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']\"}}, \"required\": [\"cuisine\"]}}"}
{"scope": "relevance", "query": "Who won the world series in 2018?", "query_for_retrieval": "Who won the world series in 2018?", "answer": "database_query.run", "answer_params": "", "api_description": "def database_query.run:\n\t\"\"\"\n\tDescription:\n\t\n\tRun a query on a SQL database.\n\t\n\tArguments:\n\t---------\n\t- database : string = None (required) The name of the database.\n\t- query : string = None (required) The SQL query to run.\n\t- connect_credentials : dict = {} (optional) Optional field. A dictionary of credentials to connect to the database if needed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"database_query.run\", \"description\": \"Run a query on a SQL database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"database\": {\"type\": \"string\", \"description\": \"The name of the database.\"}, \"query\": {\"type\": \"string\", \"description\": \"The SQL query to run.\"}, \"connect_credentials\": {\"type\": \"dict\", \"items\": {\"type\": \"string\"}, \"description\": \"Optional field. A dictionary of credentials to connect to the database if needed.\", \"default\": {}}}, \"required\": [\"database\", \"query\"]}}"}
{"scope": "executable_simple", "query": "I'm tasked with monitoring competitor pricing, and I need to keep tabs on a certain item listed on Amazon. Its ASIN is 'B08PPDJWC8'. Could you fetch the latest price for this product for me?", "query_for_retrieval": "I'm tasked with monitoring competitor pricing, and I need to keep tabs on a certain item listed on Amazon. Its ASIN is 'B08PPDJWC8'. Could you fetch the latest price for this product for me?", "answer": "get_price_by_amazon_ASIN", "answer_params": "", "api_description": "def get_price_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_price_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "multiple_function", "query": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "query_for_retrieval": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "parallel_function", "query": "Get me the currency exchange rates of the following pairs: USD to AUD and USD to CAD?", "query_for_retrieval": "Get me the currency exchange rates of the following pairs: USD to AUD and USD to CAD?", "answer": "get_exchange_rate", "answer_params": "", "api_description": "def get_exchange_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the current exchange rate for the provided currency pairs.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency in the pair.\n\t- target_currency : string = None (required) The currency to which the base currency needs to be converted.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_exchange_rate\", \"description\": \"Fetch the current exchange rate for the provided currency pairs.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency in the pair.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to which the base currency needs to be converted.\"}}, \"required\": [\"base_currency\", \"target_currency\"]}}"}
{"scope": "java", "query": "How can I asynchronously store the value 'John Doe' with the key 'employee:1234' in a Redisson map cache and ensure it's processed correctly?", "query_for_retrieval": "How can I asynchronously store the value 'John Doe' with the key 'employee:1234' in a Redisson map cache and ensure it's processed correctly?", "answer": "RedissonMapCache.putOperationAsync", "answer_params": "", "api_description": "def RedissonMapCache.putOperationAsync:\n\t\"\"\"\n\tDescription:\n\t\n\tAsynchronously stores a key-value pair in the Redisson map cache.\n\t\n\tArguments:\n\t---------\n\t- key : any = None (required) The key under which the value is to be stored in the map cache.\n\t- value : any = None (required) The value associated with the key to be stored in the map cache.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RedissonMapCache.putOperationAsync\", \"description\": \"Asynchronously stores a key-value pair in the Redisson map cache.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"any\", \"description\": \"The key under which the value is to be stored in the map cache.\"}, \"value\": {\"type\": \"any\", \"description\": \"The value associated with the key to be stored in the map cache.\"}}, \"required\": [\"key\", \"value\"]}}"}
{"scope": "relevance", "query": "Find the favorite restaurant in London.", "query_for_retrieval": "Find the favorite restaurant in London.", "answer": "cell.divide", "answer_params": "", "api_description": "def cell.divide:\n\t\"\"\"\n\tDescription:\n\t\n\tSimulate the division of a cell into two daughter cells.\n\t\n\tArguments:\n\t---------\n\t- cell_id : string = None (required) The unique ID of the parent cell.\n\t- method : string = None (required) The method of cell division, i.e., 'mitosis' or 'meiosis'.\n\t- times : integer = None (optional) The number of times the cell will divide. Defaults to 1 if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cell.divide\", \"description\": \"Simulate the division of a cell into two daughter cells.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_id\": {\"type\": \"string\", \"description\": \"The unique ID of the parent cell.\"}, \"method\": {\"type\": \"string\", \"description\": \"The method of cell division, i.e., 'mitosis' or 'meiosis'.\"}, \"times\": {\"type\": \"integer\", \"description\": \"The number of times the cell will divide. Defaults to 1 if not provided.\"}}, \"required\": [\"cell_id\", \"method\"]}}"}
{"scope": "simple", "query": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022.", "query_for_retrieval": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022.", "answer": "hotel_booking.book", "answer_params": "", "api_description": "def hotel_booking.book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a hotel room given the city, date, and the number of adults and children.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city where the hotel is located.\n\t- from_date : string = None (required) The start date of the booking. The format is MM-DD-YYYY.\n\t- to_date : string = None (required) The end date of the booking. The format is MM-DD-YYYY.\n\t- adults : integer = None (required) The number of adults for the booking.\n\t- children : integer = None (required) The number of children for the booking.\n\t- room_type : string = Standard (optional) The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking.book\", \"description\": \"Book a hotel room given the city, date, and the number of adults and children.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city where the hotel is located.\"}, \"from_date\": {\"type\": \"string\", \"description\": \"The start date of the booking. The format is MM-DD-YYYY.\"}, \"to_date\": {\"type\": \"string\", \"description\": \"The end date of the booking. The format is MM-DD-YYYY.\"}, \"adults\": {\"type\": \"integer\", \"description\": \"The number of adults for the booking.\"}, \"children\": {\"type\": \"integer\", \"description\": \"The number of children for the booking.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.\", \"default\": \"Standard\"}}, \"required\": [\"city\", \"from_date\", \"to_date\", \"adults\", \"children\"]}}"}
{"scope": "sql", "query": "Can you form a new table in the database called \"MolecularStructures\" with the columns \"MoleculeName\", \"MolecularFormula\", \"MolecularWeight\", and \"StructureDiagram\"?", "query_for_retrieval": "Can you form a new table in the database called \"MolecularStructures\" with the columns \"MoleculeName\", \"MolecularFormula\", \"MolecularWeight\", and \"StructureDiagram\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "sql", "query": "In a database table called \"ExamScores\", there are columns named \"ExamID\", \"AlgebraScore\", \"GeometryScore\", and \"CalculusScore\". If you need to modify the \"GeometryScore\" of the exam with \"ExamID\" 67890 to 85, what operation would you carry out and what would be the new values associated with the columns to set and the conditions for this operation?", "query_for_retrieval": "In a database table called \"ExamScores\", there are columns named \"ExamID\", \"AlgebraScore\", \"GeometryScore\", and \"CalculusScore\". If you need to modify the \"GeometryScore\" of the exam with \"ExamID\" 67890 to 85, what operation would you carry out and what would be the new values associated with the columns to set and the conditions for this operation?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_simple", "query": "During a training exercise, we're analyzing a simulation of a high-speed chase where a vehicle starts from a standstill and then accelerates constantly. We've clocked the acceleration at 9.8 meters per second squared and the time span for this acceleration is 12 seconds. I need to calculate the final velocity of the vehicle at the end of this time frame. Can you give me that figure?", "query_for_retrieval": "During a training exercise, we're analyzing a simulation of a high-speed chase where a vehicle starts from a standstill and then accelerates constantly. We've clocked the acceleration at 9.8 meters per second squared and the time span for this acceleration is 12 seconds. I need to calculate the final velocity of the vehicle at the end of this time frame. Can you give me that figure?", "answer": "calculate_final_velocity", "answer_params": "", "api_description": "def calculate_final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the final velocity of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object, in meters per second.\n\t- acceleration : float = None (required) The acceleration of the object, in meters per second squared.\n\t- time : float = None (required) The time the object has been moving, in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_velocity\", \"description\": \"Calculates the final velocity of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object, in meters per second.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object, in meters per second squared.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving, in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "simple", "query": "Calculate the area of a triangle with base 5m and height 3m.", "query_for_retrieval": "Calculate the area of a triangle with base 5m and height 3m.", "answer": "calc_area_triangle", "answer_params": "", "api_description": "def calc_area_triangle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle with the formula area = 0.5 * base * height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle in meters.\n\t- height : integer = None (required) The perpendicular height of the triangle from the base to the opposite vertex in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_area_triangle\", \"description\": \"Calculate the area of a triangle with the formula area = 0.5 * base * height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle in meters.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The perpendicular height of the triangle from the base to the opposite vertex in meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm compiling a report on the impact of COVID-19 and need the latest death tolls for a few specific countries. Could you provide me with the total number of deaths in Brazil, India, Russia, and France? Please ensure the data is as recent as possible.", "query_for_retrieval": "I'm compiling a report on the impact of COVID-19 and need the latest death tolls for a few specific countries. Could you provide me with the total number of deaths in Brazil, India, Russia, and France? Please ensure the data is as recent as possible.", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "simple", "query": "Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.", "query_for_retrieval": "Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.", "answer": "calculate_compound_interest", "answer_params": "", "api_description": "def calculate_compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the compound interest of an investment over a given time period.\n\t\n\tArguments:\n\t---------\n\t- principle : integer = None (required) The initial amount of the investment.\n\t- interest_rate : float = None (required) The yearly interest rate of the investment.\n\t- time : integer = None (required) The time, in years, the money is invested or borrowed for.\n\t- compounds_per_year : integer = None (optional) The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compound_interest\", \"description\": \"Calculates the compound interest of an investment over a given time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principle\": {\"type\": \"integer\", \"description\": \"The initial amount of the investment.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The yearly interest rate of the investment.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time, in years, the money is invested or borrowed for.\"}, \"compounds_per_year\": {\"type\": \"integer\", \"description\": \"The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly).\"}}, \"required\": [\"principle\", \"interest_rate\", \"time\"]}}"}
{"scope": "simple", "query": "Find me the average price and ratings of piano from Yamaha.", "query_for_retrieval": "Find me the average price and ratings of piano from Yamaha.", "answer": "get_instrument_details", "answer_params": "", "api_description": "def get_instrument_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the average price and ratings of an instrument from a particular manufacturer.\n\t\n\tArguments:\n\t---------\n\t- instrument : string = None (required) The name of the instrument.\n\t- manufacturer : string = None (required) The manufacturer of the instrument.\n\t- features : array = None (optional) The features to retrieve about the instrument. Default is 'price'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_instrument_details\", \"description\": \"Retrieve the average price and ratings of an instrument from a particular manufacturer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"instrument\": {\"type\": \"string\", \"description\": \"The name of the instrument.\"}, \"manufacturer\": {\"type\": \"string\", \"description\": \"The manufacturer of the instrument.\"}, \"features\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"price\", \"rating\"]}, \"description\": \"The features to retrieve about the instrument. Default is 'price'\"}}, \"required\": [\"instrument\", \"manufacturer\"]}}"}
{"scope": "simple", "query": "Find the compatibility score in percentage of Aries with Gemini.", "query_for_retrieval": "Find the compatibility score in percentage of Aries with Gemini.", "answer": "get_zodiac_compatibility", "answer_params": "", "api_description": "def get_zodiac_compatibility:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the compatibility score between two Zodiac signs.\n\t\n\tArguments:\n\t---------\n\t- sign1 : string = None (required) The first Zodiac sign.\n\t- sign2 : string = None (required) The second Zodiac sign.\n\t- scale : string = None (optional) The scale on which compatibility should be shown. Default is 'percentage'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zodiac_compatibility\", \"description\": \"Retrieve the compatibility score between two Zodiac signs.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sign1\": {\"type\": \"string\", \"description\": \"The first Zodiac sign.\"}, \"sign2\": {\"type\": \"string\", \"description\": \"The second Zodiac sign.\"}, \"scale\": {\"type\": \"string\", \"enum\": [\"percentage\", \"0-10 scale\"], \"description\": \"The scale on which compatibility should be shown. Default is 'percentage'.\"}}, \"required\": [\"sign1\", \"sign2\"]}}"}
{"scope": "simple", "query": "What is the value of the sculpture 'The Thinker' by Rodin?", "query_for_retrieval": "What is the value of the sculpture 'The Thinker' by Rodin?", "answer": "get_sculpture_value", "answer_params": "", "api_description": "def get_sculpture_value:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current market value of a particular sculpture by a specific artist.\n\t\n\tArguments:\n\t---------\n\t- sculpture : string = None (required) The name of the sculpture.\n\t- artist : string = None (required) The name of the artist who created the sculpture.\n\t- year : integer = None (optional) The year the sculpture was created. This is optional and is not required for all sculptures. Default is the most recent year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sculpture_value\", \"description\": \"Retrieve the current market value of a particular sculpture by a specific artist.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sculpture\": {\"type\": \"string\", \"description\": \"The name of the sculpture.\"}, \"artist\": {\"type\": \"string\", \"description\": \"The name of the artist who created the sculpture.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year the sculpture was created. This is optional and is not required for all sculptures. Default is the most recent year.\"}}, \"required\": [\"sculpture\", \"artist\"]}}"}
{"scope": "simple", "query": "What's the price of Amazon stock for the last 3 days?", "query_for_retrieval": "What's the price of Amazon stock for the last 3 days?", "answer": "stock_price", "answer_params": "", "api_description": "def stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tGet stock price data for a given company over a specified number of days.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company name.\n\t- days : integer = None (required) The number of previous days to retrieve data for.\n\t- data_type : string = None (optional) The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_price\", \"description\": \"Get stock price data for a given company over a specified number of days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company name.\"}, \"days\": {\"type\": \"integer\", \"description\": \"The number of previous days to retrieve data for.\"}, \"data_type\": {\"type\": \"string\", \"description\": \"The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\"}}, \"required\": [\"company\", \"days\"]}}"}
{"scope": "multiple_function", "query": "Find the price of Van Gogh's painting 'Starry Night' on auction platform.", "query_for_retrieval": "Find the price of Van Gogh's painting 'Starry Night' on auction platform.", "answer": "art_auction.fetch_artwork_price", "answer_params": "", "api_description": "def art_auction.fetch_artwork_price:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the price of a specific artwork on the auction platform.\n\t\n\tArguments:\n\t---------\n\t- artwork_name : string = None (required) The name of the artwork to be searched.\n\t- artist : string = None (required) The artist's name to ensure the precise artwork is fetched.\n\t- platform : string = all (optional) The platform where the artwork's price should be fetched from.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"art_auction.fetch_artwork_price\", \"description\": \"Fetch the price of a specific artwork on the auction platform.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artwork_name\": {\"type\": \"string\", \"description\": \"The name of the artwork to be searched.\"}, \"artist\": {\"type\": \"string\", \"description\": \"The artist's name to ensure the precise artwork is fetched.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The platform where the artwork's price should be fetched from.\", \"default\": \"all\"}}, \"required\": [\"artwork_name\", \"artist\"]}}"}
{"scope": "relevance", "query": "How to design a cathedral style ceiling?", "query_for_retrieval": "How to design a cathedral style ceiling?", "answer": "building_information.get_data", "answer_params": "", "api_description": "def building_information.get_data:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a specific building or monument\n\t\n\tArguments:\n\t---------\n\t- building_name : string = None (required) The name of the building or monument.\n\t- info_requested : string = None (required) The specific information requested about the building or monument. For example, 'height', 'architect', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"building_information.get_data\", \"description\": \"Retrieve information about a specific building or monument\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_name\": {\"type\": \"string\", \"description\": \"The name of the building or monument.\"}, \"info_requested\": {\"type\": \"string\", \"description\": \"The specific information requested about the building or monument. For example, 'height', 'architect', etc.\"}}, \"required\": [\"building_name\", \"info_requested\"]}}"}
{"scope": "simple", "query": "Find the top chess players in New York with a rating above 2300.", "query_for_retrieval": "Find the top chess players in New York with a rating above 2300.", "answer": "board_game.chess.get_top_players", "answer_params": "", "api_description": "def board_game.chess.get_top_players:\n\t\"\"\"\n\tDescription:\n\t\n\tFind top chess players in a location based on rating.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city you want to find the players from.\n\t- minimum_rating : integer = None (required) Minimum rating to filter the players.\n\t- number_of_players : integer = 10 (optional) Number of players you want to retrieve, default value is 10\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"board_game.chess.get_top_players\", \"description\": \"Find top chess players in a location based on rating.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city you want to find the players from.\"}, \"minimum_rating\": {\"type\": \"integer\", \"description\": \"Minimum rating to filter the players.\"}, \"number_of_players\": {\"type\": \"integer\", \"default\": 10, \"description\": \"Number of players you want to retrieve, default value is 10\"}}, \"required\": [\"location\", \"minimum_rating\"]}}"}
{"scope": "parallel_function", "query": "\"What is the function of the molecule ATP in the mitochondria and does it have a specific function within this organelle? Also, can you tell me the function of the molecule DNA in the nucleus and whether it has a specific function within the nucleus?\"", "query_for_retrieval": "\"What is the function of the molecule ATP in the mitochondria and does it have a specific function within this organelle? Also, can you tell me the function of the molecule DNA in the nucleus and whether it has a specific function within the nucleus?\"", "answer": "cell_biology.function_lookup", "answer_params": "", "api_description": "def cell_biology.function_lookup:\n\t\"\"\"\n\tDescription:\n\t\n\tLook up the function of a given molecule in a specified organelle.\n\t\n\tArguments:\n\t---------\n\t- molecule : string = None (required) The molecule of interest.\n\t- organelle : string = None (required) The organelle of interest.\n\t- specific_function : boolean = None (required) If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cell_biology.function_lookup\", \"description\": \"Look up the function of a given molecule in a specified organelle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"molecule\": {\"type\": \"string\", \"description\": \"The molecule of interest.\"}, \"organelle\": {\"type\": \"string\", \"description\": \"The organelle of interest.\"}, \"specific_function\": {\"type\": \"boolean\", \"description\": \"If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\"}}, \"required\": [\"molecule\", \"organelle\", \"specific_function\"]}}"}
{"scope": "multiple_function", "query": "Find the lawsuits filed against the company Google in California in the year 2020.", "query_for_retrieval": "Find the lawsuits filed against the company Google in California in the year 2020.", "answer": "lawsuits_search", "answer_params": "", "api_description": "def lawsuits_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits against a specific company within a specific time and location.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- location : string = None (required) The location where the lawsuit was filed.\n\t- year : integer = None (required) The year when the lawsuit was filed.\n\t- case_type : string = None (optional) The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuits_search\", \"description\": \"Search for lawsuits against a specific company within a specific time and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the lawsuit was filed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the lawsuit was filed.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'\"}}, \"required\": [\"company_name\", \"location\", \"year\"]}}"}
{"scope": "simple", "query": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "query_for_retrieval": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "answer": "elephant_population_estimate", "answer_params": "", "api_description": "def elephant_population_estimate:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate future population of elephants given current population and growth rate.\n\t\n\tArguments:\n\t---------\n\t- current_population : integer = None (required) The current number of elephants.\n\t- growth_rate : float = None (required) The annual population growth rate of elephants.\n\t- years : integer = None (required) The number of years to project the population.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"elephant_population_estimate\", \"description\": \"Estimate future population of elephants given current population and growth rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current_population\": {\"type\": \"integer\", \"description\": \"The current number of elephants.\"}, \"growth_rate\": {\"type\": \"float\", \"description\": \"The annual population growth rate of elephants.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years to project the population.\"}}, \"required\": [\"current_population\", \"growth_rate\", \"years\"]}}"}
{"scope": "simple", "query": "Find the size of the sculpture with title 'David' by Michelangelo.", "query_for_retrieval": "Find the size of the sculpture with title 'David' by Michelangelo.", "answer": "sculpture.get_details", "answer_params": "", "api_description": "def sculpture.get_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve details of a sculpture based on the artist and the title of the sculpture.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) The artist who made the sculpture.\n\t- title : string = None (required) The title of the sculpture.\n\t- detail : string = None (optional) The specific detail wanted about the sculpture. Default is 'general information'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture.get_details\", \"description\": \"Retrieve details of a sculpture based on the artist and the title of the sculpture.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"The artist who made the sculpture.\"}, \"title\": {\"type\": \"string\", \"description\": \"The title of the sculpture.\"}, \"detail\": {\"type\": \"string\", \"description\": \"The specific detail wanted about the sculpture. Default is 'general information'.\"}}, \"required\": [\"artist\", \"title\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"A car starts from rest and travels a distance of 120 meters in 10 seconds. What is the speed of the car at the end of this time period? After reaching this speed, the car continues to accelerate for another 5 seconds from 12 m/s until it reaches a final speed doubling the initial speed. The final speed is twice the speed calculated in the first part. What is the acceleration of the car in this second phase?\"", "query_for_retrieval": "\"A car starts from rest and travels a distance of 120 meters in 10 seconds. What is the speed of the car at the end of this time period? After reaching this speed, the car continues to accelerate for another 5 seconds from 12 m/s until it reaches a final speed doubling the initial speed. The final speed is twice the speed calculated in the first part. What is the acceleration of the car in this second phase?\"", "answer": "kinematics.calculate_acceleration", "answer_params": "", "api_description": "def kinematics.calculate_acceleration:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the acceleration of an object under given conditions.\n\t\n\tArguments:\n\t---------\n\t- initial_speed : float = None (required) The initial speed of the object.\n\t- final_speed : float = None (required) The final speed of the object.\n\t- time : float = None (required) The time in seconds it took the object to reach the final speed.\n\t- distance : float = 0 (optional) The distance in meters the object has traveled.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.calculate_acceleration\", \"description\": \"Calculates the acceleration of an object under given conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"float\", \"description\": \"The initial speed of the object.\"}, \"final_speed\": {\"type\": \"float\", \"description\": \"The final speed of the object.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time in seconds it took the object to reach the final speed.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance in meters the object has traveled.\", \"default\": 0}}, \"required\": [\"initial_speed\", \"final_speed\", \"time\"]}}"}
{"scope": "parallel_function", "query": "Fetch the population of New York City, NY,  and Los Angeles, CA from US Census Database, and also get the population data for Alaska state and USA", "query_for_retrieval": "Fetch the population of New York City, NY,  and Los Angeles, CA from US Census Database, and also get the population data for Alaska state and USA", "answer": "database_us_census.get_population", "answer_params": "", "api_description": "def database_us_census.get_population:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch population data from US Census database.\n\t\n\tArguments:\n\t---------\n\t- area : string = None (required) Name of the city, state, or country.\n\t- type : string = None (required) Specify whether the area is city/state/country.\n\t- year : integer = 2000 (optional) Year of the data\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"database_us_census.get_population\", \"description\": \"Fetch population data from US Census database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"area\": {\"type\": \"string\", \"description\": \"Name of the city, state, or country.\"}, \"type\": {\"type\": \"string\", \"description\": \"Specify whether the area is city/state/country.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the data\", \"default\": 2000}}, \"required\": [\"area\", \"type\"]}}"}
{"scope": "java", "query": "How can I execute the 'runIt' method to process command-line arguments for a debug session, and log the output to a specific PrintStream, using the arguments array ['suspend', 'log'] and a PrintStream variable named 'debugLog'?", "query_for_retrieval": "How can I execute the 'runIt' method to process command-line arguments for a debug session, and log the output to a specific PrintStream, using the arguments array ['suspend', 'log'] and a PrintStream variable named 'debugLog'?", "answer": "invokemethod007.runIt", "answer_params": "", "api_description": "def invokemethod007.runIt:\n\t\"\"\"\n\tDescription:\n\t\n\tProcesses command-line arguments for a debug session and logs the output to the provided PrintStream.\n\t\n\tArguments:\n\t---------\n\t- args : Array = None (required) An array of command-line arguments to process.\n\t- out : any = None (required) The PrintStream to which the output will be logged.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"invokemethod007.runIt\", \"description\": \"Processes command-line arguments for a debug session and logs the output to the provided PrintStream.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"args\": {\"type\": \"Array\", \"description\": \"An array of command-line arguments to process.\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream to which the output will be logged.\"}}, \"required\": [\"args\", \"out\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm currently working on a machine learning project that involves measuring the similarity between different data points. I've just computed two vectors and would like to understand how similar they are. Could you calculate the cosine similarity between the vectors [1, 2, 3] and [4, 5, 6] for me? Additionally, as part of my financial analysis, I'm tracking the performance of certain tech companies, and I need to know the latest trading price for Apple's stock. What's the current price of the 'AAPL' stock?", "query_for_retrieval": "I'm currently working on a machine learning project that involves measuring the similarity between different data points. I've just computed two vectors and would like to understand how similar they are. Could you calculate the cosine similarity between the vectors [1, 2, 3] and [4, 5, 6] for me? Additionally, as part of my financial analysis, I'm tracking the performance of certain tech companies, and I need to know the latest trading price for Apple's stock. What's the current price of the 'AAPL' stock?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on an architectural project for a new park, and the design includes a triangular section. I need to calculate the area of this triangle to continue with my planning. The dimensions I have are a base of 500 meters and a height of 300 meters. Can you help me figure out the total area with these measurements?", "query_for_retrieval": "I'm working on an architectural project for a new park, and the design includes a triangular section. I need to calculate the area of this triangle to continue with my planning. The dimensions I have are a base of 500 meters and a height of 300 meters. Can you help me figure out the total area with these measurements?", "answer": "get_company_name_by_stock_name", "answer_params": "", "api_description": "def get_company_name_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the company name of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_company_name_by_stock_name\", \"description\": \"Finds the company name of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "java", "query": "What are the indices of the two numbers in the array [2, 7, 11, 15] that add up to the target sum of 9?", "query_for_retrieval": "What are the indices of the two numbers in the array [2, 7, 11, 15] that add up to the target sum of 9?", "answer": "TwoSum.twoSum", "answer_params": "", "api_description": "def TwoSum.twoSum:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds two numbers in the given array that add up to the target sum and returns their indices.\n\t\n\tArguments:\n\t---------\n\t- nums : Array = None (required) An array of integers to search for the two numbers.\n\t- target : integer = None (required) The target sum to find within the array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"TwoSum.twoSum\", \"description\": \"Finds two numbers in the given array that add up to the target sum and returns their indices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"nums\": {\"type\": \"Array\", \"description\": \"An array of integers to search for the two numbers.\", \"items\": {\"type\": \"integer\"}}, \"target\": {\"type\": \"integer\", \"description\": \"The target sum to find within the array.\"}}, \"required\": [\"nums\", \"target\"]}}"}
{"scope": "simple", "query": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.", "query_for_retrieval": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given the initial amount, interest rate, and investment duration.\n\t\n\tArguments:\n\t---------\n\t- initial_investment : integer = None (required) The initial investment amount.\n\t- interest_rate : float = None (required) The annual interest rate in decimal form.\n\t- duration : integer = None (required) The investment duration in years.\n\t- compounded : integer = None (optional) The number of times the interest is compounded per year. Default is 1 (annual compounding).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculate the future value of an investment given the initial amount, interest rate, and investment duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment amount.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate in decimal form.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The investment duration in years.\"}, \"compounded\": {\"type\": \"integer\", \"description\": \"The number of times the interest is compounded per year. Default is 1 (annual compounding).\"}}, \"required\": [\"initial_investment\", \"interest_rate\", \"duration\"]}}"}
{"scope": "parallel_function", "query": "Can you find all the Drama and Comedy movies that Leonardo DiCaprio starred in 2010 and 2012 respectively by searching the database?", "query_for_retrieval": "Can you find all the Drama and Comedy movies that Leonardo DiCaprio starred in 2010 and 2012 respectively by searching the database?", "answer": "imdb.find_movies_by_actor", "answer_params": "", "api_description": "def imdb.find_movies_by_actor:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches the database to find all movies by a specific actor within a certain year.\n\t\n\tArguments:\n\t---------\n\t- actor_name : string = None (required) The name of the actor.\n\t- year : integer = None (required) The specific year to search in.\n\t- category : string = Drama (optional) The category of the film (e.g. Drama, Comedy, etc). This parameter is optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"imdb.find_movies_by_actor\", \"description\": \"Searches the database to find all movies by a specific actor within a certain year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"actor_name\": {\"type\": \"string\", \"description\": \"The name of the actor.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The specific year to search in.\"}, \"category\": {\"type\": \"string\", \"description\": \"The category of the film (e.g. Drama, Comedy, etc). This parameter is optional.\", \"default\": \"Drama\"}}, \"required\": [\"actor_name\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the average price of a 4 ft x 4 ft marble statue in the museum of Philadelphia and 6 ft x 3 ft bronze sculpture in New York museum? ", "query_for_retrieval": "What is the average price of a 4 ft x 4 ft marble statue in the museum of Philadelphia and 6 ft x 3 ft bronze sculpture in New York museum? ", "answer": "get_sculpture_details", "answer_params": "", "api_description": "def get_sculpture_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves details of a sculpture, such as its material and size, from a museum database.\n\t\n\tArguments:\n\t---------\n\t- museum_location : string = None (required) Location of the museum housing the sculpture.\n\t- sculpture_id : integer = None (required) Database ID of the sculpture.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_sculpture_details\", \"description\": \"Retrieves details of a sculpture, such as its material and size, from a museum database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_location\": {\"type\": \"string\", \"description\": \"Location of the museum housing the sculpture.\"}, \"sculpture_id\": {\"type\": \"integer\", \"description\": \"Database ID of the sculpture.\"}}, \"required\": [\"museum_location\", \"sculpture_id\"]}}"}
{"scope": "multiple_function", "query": "I want a seafood restaurant in Seattle that can accommodate a group of 5.", "query_for_retrieval": "I want a seafood restaurant in Seattle that can accommodate a group of 5.", "answer": "events.find_event", "answer_params": "", "api_description": "def events.find_event:\n\t\"\"\"\n\tDescription:\n\t\n\tFind events suitable for groups based on specified criteria such as location and event type.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Seattle, WA\n\t- event_type : array = None (optional) Type of event. Default empty array\n\t- group_size : integer = None (required) Size of the group that the event should accommodate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"events.find_event\", \"description\": \"Find events suitable for groups based on specified criteria such as location and event type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Seattle, WA\"}, \"event_type\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Concert\", \"Sports\", \"Exhibition\", \"Festival\"]}, \"description\": \"Type of event. Default empty array\"}, \"group_size\": {\"type\": \"integer\", \"description\": \"Size of the group that the event should accommodate.\"}}, \"required\": [\"location\", \"group_size\"]}}"}
{"scope": "multiple_function", "query": "Find the shortest driving distance between New York City and Washington D.C.", "query_for_retrieval": "Find the shortest driving distance between New York City and Washington D.C.", "answer": "instrument_price.get", "answer_params": "", "api_description": "def instrument_price.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current retail price of a specific musical instrument.\n\t\n\tArguments:\n\t---------\n\t- brand : string = None (required) The brand of the instrument.\n\t- model : string = None (required) The specific model of the instrument.\n\t- finish : string = None (required) The color or type of finish on the instrument.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"instrument_price.get\", \"description\": \"Retrieve the current retail price of a specific musical instrument.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"brand\": {\"type\": \"string\", \"description\": \"The brand of the instrument.\"}, \"model\": {\"type\": \"string\", \"description\": \"The specific model of the instrument.\"}, \"finish\": {\"type\": \"string\", \"description\": \"The color or type of finish on the instrument.\"}}, \"required\": [\"brand\", \"model\", \"finish\"]}}"}
{"scope": "java", "query": "How can I create a MethodEntryRequest for a specific thread `mainThread`, class `com.example.MainClass`, with a suspend policy of `EventRequest.SUSPEND_ALL`, and a custom property `testProperty` in a JDI test environment?", "query_for_retrieval": "How can I create a MethodEntryRequest for a specific thread `mainThread`, class `com.example.MainClass`, with a suspend policy of `EventRequest.SUSPEND_ALL`, and a custom property `testProperty` in a JDI test environment?", "answer": "filter_s002.setting22MethodEntryRequest", "answer_params": "", "api_description": "def filter_s002.setting22MethodEntryRequest:\n\t\"\"\"\n\tDescription:\n\t\n\tSets up a MethodEntryRequest with specified thread filter, class filter, suspend policy, and custom property. Throws JDITestRuntimeException on failure.\n\t\n\tArguments:\n\t---------\n\t- thread : any = None (required) The ThreadReference to which the request will be applied.\n\t- testedClass : String = None (required) The name of the class to filter for method entries.\n\t- suspendPolicy : integer = None (required) The suspend policy to be used for this request.\n\t- property : String = None (required) A custom property to associate with this request.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"filter_s002.setting22MethodEntryRequest\", \"description\": \"Sets up a MethodEntryRequest with specified thread filter, class filter, suspend policy, and custom property. Throws JDITestRuntimeException on failure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"thread\": {\"type\": \"any\", \"description\": \"The ThreadReference to which the request will be applied.\"}, \"testedClass\": {\"type\": \"String\", \"description\": \"The name of the class to filter for method entries.\"}, \"suspendPolicy\": {\"type\": \"integer\", \"description\": \"The suspend policy to be used for this request.\"}, \"property\": {\"type\": \"String\", \"description\": \"A custom property to associate with this request.\"}}, \"required\": [\"thread\", \"testedClass\", \"suspendPolicy\", \"property\"]}}"}
{"scope": "simple", "query": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "query_for_retrieval": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "answer": "calculate_genotype_frequency", "answer_params": "", "api_description": "def calculate_genotype_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n\t\n\tArguments:\n\t---------\n\t- allele_frequency : float = None (required) The frequency of the dominant allele in the population.\n\t- genotype : string = None (required) The genotype which frequency is needed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_genotype_frequency\", \"description\": \"Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"allele_frequency\": {\"type\": \"float\", \"description\": \"The frequency of the dominant allele in the population.\"}, \"genotype\": {\"type\": \"string\", \"description\": \"The genotype which frequency is needed.\", \"enum\": [\"AA\", \"Aa\", \"aa\"]}}, \"required\": [\"allele_frequency\", \"genotype\"]}}"}
{"scope": "sql", "query": "Can you add a new record into the 'employees' table, where the columns are 'employee_id', 'first_name', 'last_name', 'email', and 'phone_number', and the corresponding values to be inserted are 'E1001', 'John', 'Doe', 'johndoe@example.com', and '123-456-7890'?", "query_for_retrieval": "Can you add a new record into the 'employees' table, where the columns are 'employee_id', 'first_name', 'last_name', 'email', and 'phone_number', and the corresponding values to be inserted are 'E1001', 'John', 'Doe', 'johndoe@example.com', and '123-456-7890'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "What is the type of the genetic mutation that has the SNP ID 'rs123456' in the species 'Homo sapiens' and the SNP ID 'rs7891011' in the species 'Canis lupus familiaris' (Dog)?", "query_for_retrieval": "What is the type of the genetic mutation that has the SNP ID 'rs123456' in the species 'Homo sapiens' and the SNP ID 'rs7891011' in the species 'Canis lupus familiaris' (Dog)?", "answer": "mutation_type.find", "answer_params": "", "api_description": "def mutation_type.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n\t\n\tArguments:\n\t---------\n\t- snp_id : string = None (required) The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n\t- species : string = None (optional) Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mutation_type.find\", \"description\": \"Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"snp_id\": {\"type\": \"string\", \"description\": \"The ID of the Single Nucleotide Polymorphism (SNP) mutation.\"}, \"species\": {\"type\": \"string\", \"description\": \"Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\"}}, \"required\": [\"snp_id\"]}}"}
{"scope": "simple", "query": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "query_for_retrieval": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "answer": "get_stock_prices", "answer_params": "", "api_description": "def get_stock_prices:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves stock prices for specified companies and duration.\n\t\n\tArguments:\n\t---------\n\t- companies : array = None (required) List of companies to retrieve stock prices for.\n\t- duration : string = None (required) Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_prices\", \"description\": \"Retrieves stock prices for specified companies and duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"companies\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of companies to retrieve stock prices for.\"}, \"duration\": {\"type\": \"string\", \"description\": \"Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\"}}, \"required\": [\"companies\", \"duration\"]}}"}
{"scope": "multiple_function", "query": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "query_for_retrieval": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "answer": "religion.history_info", "answer_params": "", "api_description": "def religion.history_info:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides comprehensive historical details about a specified religion till a specified century.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) The name of the religion for which historical details are needed.\n\t- till_century : integer = None (required) The century till which historical details are needed.\n\t- include_people : boolean = None (optional) To include influential people related to the religion during that time period, default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion.history_info\", \"description\": \"Provides comprehensive historical details about a specified religion till a specified century.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"The name of the religion for which historical details are needed.\"}, \"till_century\": {\"type\": \"integer\", \"description\": \"The century till which historical details are needed.\"}, \"include_people\": {\"type\": \"boolean\", \"description\": \"To include influential people related to the religion during that time period, default is False\"}}, \"required\": [\"religion\", \"till_century\"]}}"}
{"scope": "executable_simple", "query": "While working on the urban planning project, I've decided to use a grid layout for the city's design. The grid is based on block numbers with the length spanning 360 blocks and the width covering 240 blocks. To ensure the layout is as efficient as possible, I need to find the largest block size that can be uniformly used across both dimensions. Can you calculate the greatest common divisor for these two numbers, 360 and 240, to help me optimize the city's block design?", "query_for_retrieval": "While working on the urban planning project, I've decided to use a grid layout for the city's design. The grid is based on block numbers with the length spanning 360 blocks and the width covering 240 blocks. To ensure the layout is as efficient as possible, I need to find the largest block size that can be uniformly used across both dimensions. Can you calculate the greatest common divisor for these two numbers, 360 and 240, to help me optimize the city's block design?", "answer": "math_gcd", "answer_params": "", "api_description": "def math_gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the greatest common divisor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first number. This should be the larger number.\n\t- b : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_gcd\", \"description\": \"Calculates the greatest common divisor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first number. This should be the larger number.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"a\", \"b\"]}}"}
{"scope": "multiple_function", "query": "Calculate the volume of a cone with radius 4 and height 7.", "query_for_retrieval": "Calculate the volume of a cone with radius 4 and height 7.", "answer": "geometry.calculate_cone_volume", "answer_params": "", "api_description": "def geometry.calculate_cone_volume:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the volume of a cone given the radius and height.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) Radius of the cone base.\n\t- height : integer = None (required) Height of the cone.\n\t- round_off : integer = None (optional) Number of decimal places to round off the answer. Default 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.calculate_cone_volume\", \"description\": \"Calculate the volume of a cone given the radius and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"Radius of the cone base.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the cone.\"}, \"round_off\": {\"type\": \"integer\", \"description\": \"Number of decimal places to round off the answer. Default 0\"}}, \"required\": [\"radius\", \"height\"]}}"}
{"scope": "relevance", "query": "What are the rules of the game 'Uno'?", "query_for_retrieval": "What are the rules of the game 'Uno'?", "answer": "cards.shuffle_deck", "answer_params": "", "api_description": "def cards.shuffle_deck:\n\t\"\"\"\n\tDescription:\n\t\n\tShuffles a deck of cards.\n\t\n\tArguments:\n\t---------\n\t- deck : string = None (required) The deck of cards to be shuffled.\n\t- times : integer = None (required) The number of times to shuffle the deck.\n\t- deck_type : string = None (optional) The type of card deck. E.g. 'Poker', 'Uno'. Default is 'Poker'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cards.shuffle_deck\", \"description\": \"Shuffles a deck of cards.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deck\": {\"type\": \"string\", \"description\": \"The deck of cards to be shuffled.\"}, \"times\": {\"type\": \"integer\", \"description\": \"The number of times to shuffle the deck.\"}, \"deck_type\": {\"type\": \"string\", \"description\": \"The type of card deck. E.g. 'Poker', 'Uno'. Default is 'Poker'.\"}}, \"required\": [\"deck\", \"times\"]}}"}
{"scope": "sql", "query": "Can you create a new table named \"StudentScores\" in the database, with columns \"StudentID\", \"MathScore\", \"EnglishScore\", and \"ScienceScore\"?", "query_for_retrieval": "Can you create a new table named \"StudentScores\" in the database, with columns \"StudentID\", \"MathScore\", \"EnglishScore\", and \"ScienceScore\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm in the middle of a climate study focusing on temperature changes in the Arctic, and I need the latest temperature readings at the North Pole. Specifically, I'm looking at the point with coordinates 90.00 latitude and 0.00 longitude. I need to access the current temperature data for this precise location using the Open-Meteo API. Could you help me get this information?", "query_for_retrieval": "I'm in the middle of a climate study focusing on temperature changes in the Arctic, and I need the latest temperature readings at the North Pole. Specifically, I'm looking at the point with coordinates 90.00 latitude and 0.00 longitude. I need to access the current temperature data for this precise location using the Open-Meteo API. Could you help me get this information?", "answer": "calc_binomial_probability", "answer_params": "", "api_description": "def calc_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of getting k successes in n trials.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of trials.\n\t- k : integer = None (required) The number of successes.\n\t- p : integer = None (required) The probability of success.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_probability\", \"description\": \"Calculates the probability of getting k successes in n trials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of trials.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of successes.\"}, \"p\": {\"type\": \"integer\", \"description\": \"The probability of success.\"}}, \"required\": [\"n\", \"k\", \"p\"]}}"}
{"scope": "simple", "query": "Retrieve all the lawsuit details for case number XYZ123", "query_for_retrieval": "Retrieve all the lawsuit details for case number XYZ123", "answer": "lawsuit_info", "answer_params": "", "api_description": "def lawsuit_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves details of a lawsuit given a case number\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The unique identifier of the lawsuit case\n\t- year : integer = None (optional) The year in which the lawsuit case was initiated. Default is latest year if not specified.\n\t- location : string = None (optional) The location or court jurisdiction where the case was filed. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_info\", \"description\": \"Retrieves details of a lawsuit given a case number\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The unique identifier of the lawsuit case\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the lawsuit case was initiated. Default is latest year if not specified.\", \"optional\": true}, \"location\": {\"type\": \"string\", \"description\": \"The location or court jurisdiction where the case was filed. Default is 'all'.\", \"optional\": true}}, \"required\": [\"case_number\"]}}"}
{"scope": "relevance", "query": "What is the perimeter of a rectangle with length 5 meters and width 4 meters?", "query_for_retrieval": "What is the perimeter of a rectangle with length 5 meters and width 4 meters?", "answer": "solve_quadratic_equation", "answer_params": "", "api_description": "def solve_quadratic_equation:\n\t\"\"\"\n\tDescription:\n\t\n\tSolves a quadratic equation and returns the possible solutions.\n\t\n\tArguments:\n\t---------\n\t- a : float = None (required) Coefficient of the x-squared term in the quadratic equation.\n\t- b : float = None (required) Coefficient of the x term in the quadratic equation.\n\t- c : float = None (required) Constant term in the quadratic equation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic_equation\", \"description\": \"Solves a quadratic equation and returns the possible solutions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"float\", \"description\": \"Coefficient of the x-squared term in the quadratic equation.\"}, \"b\": {\"type\": \"float\", \"description\": \"Coefficient of the x term in the quadratic equation.\"}, \"c\": {\"type\": \"float\", \"description\": \"Constant term in the quadratic equation.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "parallel_function", "query": "Check if the player with id 3142 in team RocketLeague has achieved top scorer status in seasons 2017, 2018 and 2019.", "query_for_retrieval": "Check if the player with id 3142 in team RocketLeague has achieved top scorer status in seasons 2017, 2018 and 2019.", "answer": "player_status.check", "answer_params": "", "api_description": "def player_status.check:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck a player's status in a team for a particular season.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The team where the player plays.\n\t- player_id : integer = None (required) The id of the player.\n\t- season : integer = None (optional) The season for which player's status need to be checked. Optional. Default is current season.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"player_status.check\", \"description\": \"Check a player's status in a team for a particular season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The team where the player plays.\"}, \"player_id\": {\"type\": \"integer\", \"description\": \"The id of the player.\"}, \"season\": {\"type\": \"integer\", \"description\": \"The season for which player's status need to be checked. Optional. Default is current season.\"}}, \"required\": [\"team\", \"player_id\"]}}"}
{"scope": "simple", "query": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "query_for_retrieval": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "answer": "whole_foods.find_top_brands", "answer_params": "", "api_description": "def whole_foods.find_top_brands:\n\t\"\"\"\n\tDescription:\n\t\n\tGet top brands based on a specific product from Whole Foods\n\t\n\tArguments:\n\t---------\n\t- product : string = None (required) The product for which the top brands should be fetched.\n\t- number : integer = None (optional) Number of top brands to be fetched. Default is 5\n\t- organic : boolean = None (optional) If the product should be organic. Default is false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"whole_foods.find_top_brands\", \"description\": \"Get top brands based on a specific product from Whole Foods\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"product\": {\"type\": \"string\", \"description\": \"The product for which the top brands should be fetched.\"}, \"number\": {\"type\": \"integer\", \"description\": \"Number of top brands to be fetched. Default is 5\"}, \"organic\": {\"type\": \"boolean\", \"description\": \"If the product should be organic. Default is false\"}}, \"required\": [\"product\"]}}"}
{"scope": "executable_simple", "query": "I'm developing a new encryption algorithm and I'm currently focused on the permutations aspect. I need to know how many unique arrangements are possible if I take 5 characters from the standard English alphabet, which has 26 letters. This calculation is crucial for understanding the complexity of the encryption. Can you run the permutations calculation with these values?", "query_for_retrieval": "I'm developing a new encryption algorithm and I'm currently focused on the permutations aspect. I need to know how many unique arrangements are possible if I take 5 characters from the standard English alphabet, which has 26 letters. This calculation is crucial for understanding the complexity of the encryption. Can you run the permutations calculation with these values?", "answer": "calculate_permutations", "answer_params": "", "api_description": "def calculate_permutations:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the number of permutations of k elements from a set of n elements.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of elements in the set.\n\t- k : integer = None (required) The number of elements to choose.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_permutations\", \"description\": \"Calculates the number of permutations of k elements from a set of n elements.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of elements in the set.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of elements to choose.\"}}, \"required\": [\"n\", \"k\"]}}"}
{"scope": "simple", "query": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "query_for_retrieval": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "answer": "probabilities.calculate_single", "answer_params": "", "api_description": "def probabilities.calculate_single:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of an event.\n\t\n\tArguments:\n\t---------\n\t- total_outcomes : integer = None (required) The total number of outcomes.\n\t- event_outcomes : integer = None (required) The number of outcomes where the event occurs.\n\t- round : integer = None (optional) Round the answer to a specified number of decimal places. Defaults to 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probabilities.calculate_single\", \"description\": \"Calculate the probability of an event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_outcomes\": {\"type\": \"integer\", \"description\": \"The total number of outcomes.\"}, \"event_outcomes\": {\"type\": \"integer\", \"description\": \"The number of outcomes where the event occurs.\"}, \"round\": {\"type\": \"integer\", \"description\": \"Round the answer to a specified number of decimal places. Defaults to 2.\"}}, \"required\": [\"total_outcomes\", \"event_outcomes\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me the net worth of the famous footballer Lionel Messi in Euros? After that, I would like to know the net worth of the basketball player LeBron James in British Pounds. Also, I'm curious about the Body Mass Index (BMI) of a person who weighs 85 kilograms and is 180 centimeters tall using the metric system. Lastly, could you calculate the BMI of another person who weighs 200 pounds and is 6 feet 2 inches tall using the imperial system?\"", "query_for_retrieval": "\"Can you tell me the net worth of the famous footballer Lionel Messi in Euros? After that, I would like to know the net worth of the basketball player LeBron James in British Pounds. Also, I'm curious about the Body Mass Index (BMI) of a person who weighs 85 kilograms and is 180 centimeters tall using the metric system. Lastly, could you calculate the BMI of another person who weighs 200 pounds and is 6 feet 2 inches tall using the imperial system?\"", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) of a person.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in kilograms.\n\t- height : integer = None (required) Height of the person in centimeters.\n\t- unit : string = None (optional) Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in centimeters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with two tasks? First, I'm interested in the field of constitutional law in the United Kingdom and I would like to know the top 5 landmark cases in this field. Second, I have two numbers, 36 and 48, and I need to find out their greatest common divisor. Can you assist with these?\"", "query_for_retrieval": "\"Could you please help me with two tasks? First, I'm interested in the field of constitutional law in the United Kingdom and I would like to know the top 5 landmark cases in this field. Second, I have two numbers, 36 and 48, and I need to find out their greatest common divisor. Can you assist with these?\"", "answer": "get_top_cases", "answer_params": "", "api_description": "def get_top_cases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a list of the most influential or landmark cases in a specific field of law.\n\t\n\tArguments:\n\t---------\n\t- field_of_law : string = None (required) The specific field of law e.g., constitutional law, criminal law, etc.\n\t- top_number : integer = None (required) The number of top cases to retrieve.\n\t- country : string = None (optional) The country where the law cases should be retrieved from. Default is US.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_top_cases\", \"description\": \"Retrieve a list of the most influential or landmark cases in a specific field of law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"field_of_law\": {\"type\": \"string\", \"description\": \"The specific field of law e.g., constitutional law, criminal law, etc.\"}, \"top_number\": {\"type\": \"integer\", \"description\": \"The number of top cases to retrieve.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the law cases should be retrieved from. Default is US.\"}}, \"required\": [\"field_of_law\", \"top_number\"]}}"}
{"scope": "parallel_function", "query": "What is the average temperature in New York for the past 7 days in Fahrenheit and how does it compare to the average temperature in Los Angeles for the same period in Celsius?", "query_for_retrieval": "What is the average temperature in New York for the past 7 days in Fahrenheit and how does it compare to the average temperature in Los Angeles for the same period in Celsius?", "answer": "average_temperature", "answer_params": "", "api_description": "def average_temperature:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the average temperature for a specific location over the defined timeframe.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city to get the average temperature for.\n\t- days : integer = None (required) The number of days to get the average temperature for.\n\t- temp_unit : string = None (optional) The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"average_temperature\", \"description\": \"Retrieves the average temperature for a specific location over the defined timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city to get the average temperature for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"The number of days to get the average temperature for.\"}, \"temp_unit\": {\"type\": \"string\", \"description\": \"The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "simple", "query": "Find a nearby restaurant that serves vegan food in Los Angeles.", "query_for_retrieval": "Find a nearby restaurant that serves vegan food in Los Angeles.", "answer": "restaurant.find_nearby", "answer_params": "", "api_description": "def restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on specific dietary preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Los Angeles, CA\n\t- dietary_preference : array = None (optional) Dietary preference. Default is empty list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_nearby\", \"description\": \"Locate nearby restaurants based on specific dietary preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Los Angeles, CA\"}, \"dietary_preference\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Vegan\", \"Vegetarian\", \"Gluten-free\", \"Dairy-free\", \"Nut-free\"]}, \"description\": \"Dietary preference. Default is empty list.\"}}, \"required\": [\"location\"]}}"}
{"scope": "rest", "query": "I'm planning a vacation and trying to maximize my time off. Can you fetch me information about long weekends in Canada for the year 2023?", "query_for_retrieval": "I'm planning a vacation and trying to maximize my time off. Can you fetch me information about long weekends in Canada for the year 2023?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode} (required) The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2\", \"default\": \"https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "What is the roster of Manchester United?", "query_for_retrieval": "What is the roster of Manchester United?", "answer": "sports_team.get_top_scorer", "answer_params": "", "api_description": "def sports_team.get_top_scorer:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the top scorer of a sports team in a specific season.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the sports team.\n\t- season : string = None (required) The season of interest, e.g. 2020-2021 NBA season.\n\t- league : string = None (optional) The league the team is part of. Default is 'NBA'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_team.get_top_scorer\", \"description\": \"Retrieve the top scorer of a sports team in a specific season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season of interest, e.g. 2020-2021 NBA season.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league the team is part of. Default is 'NBA'.\"}}, \"required\": [\"team\", \"season\"]}}"}
{"scope": "executable_parallel_function", "query": "I need to solve a few quadratic equations for a math assignment. Could you calculate the roots for these sets of coefficients: first with 3, 7, and 2; then with 5, 12, and 4; followed by 8, 16, and 6; and finally, for 10, 20, and 8? I'm trying to understand the pattern of the roots in relation to the coefficients.", "query_for_retrieval": "I need to solve a few quadratic equations for a math assignment. Could you calculate the roots for these sets of coefficients: first with 3, 7, and 2; then with 5, 12, and 4; followed by 8, 16, and 6; and finally, for 10, 20, and 8? I'm trying to understand the pattern of the roots in relation to the coefficients.", "answer": "quadratic_roots", "answer_params": "", "api_description": "def quadratic_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the roots of a quadratic equation.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The first coefficient.\n\t- b : integer = None (required) The second coefficient.\n\t- c : integer = None (required) The third coefficient.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"quadratic_roots\", \"description\": \"Calculates the roots of a quadratic equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The first coefficient.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The second coefficient.\"}, \"c\": {\"type\": \"integer\", \"description\": \"The third coefficient.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "parallel_function", "query": "I want to know the rise and fall of Christianity in Egypt and Turkey from 100 A.D to 1500 A.D.", "query_for_retrieval": "I want to know the rise and fall of Christianity in Egypt and Turkey from 100 A.D to 1500 A.D.", "answer": "religion_history.track", "answer_params": "", "api_description": "def religion_history.track:\n\t\"\"\"\n\tDescription:\n\t\n\tTrack the historical development of a specific religion in a specific area within a specific time frame.\n\t\n\tArguments:\n\t---------\n\t- region : string = None (required) The geographical area where the religion's history is to be tracked.\n\t- religion : string = None (required) The name of the religion.\n\t- start_year : integer = None (required) The beginning year of the time frame.\n\t- end_year : integer = None (required) The ending year of the time frame.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion_history.track\", \"description\": \"Track the historical development of a specific religion in a specific area within a specific time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"region\": {\"type\": \"string\", \"description\": \"The geographical area where the religion's history is to be tracked.\"}, \"religion\": {\"type\": \"string\", \"description\": \"The name of the religion.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"The beginning year of the time frame.\"}, \"end_year\": {\"type\": \"integer\", \"description\": \"The ending year of the time frame.\"}}, \"required\": [\"region\", \"religion\", \"start_year\", \"end_year\"]}}"}
{"scope": "simple", "query": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "query_for_retrieval": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) of a person.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in kilograms.\n\t- height : integer = None (required) Height of the person in centimeters.\n\t- unit : string = None (optional) Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in centimeters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "simple", "query": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?", "query_for_retrieval": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?", "answer": "find_restaurant", "answer_params": "", "api_description": "def find_restaurant:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on user defined criteria\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where user wants to search for a restaurant.\n\t- type : string = None (required) The type of the cuisine/restaurant.\n\t- diet_option : string = None (required) Special dietary preferences.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_restaurant\", \"description\": \"Locate nearby restaurants based on user defined criteria\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where user wants to search for a restaurant.\"}, \"type\": {\"type\": \"string\", \"description\": \"The type of the cuisine/restaurant.\"}, \"diet_option\": {\"type\": \"string\", \"description\": \"Special dietary preferences.\"}}, \"required\": [\"location\", \"type\", \"diet_option\"]}}"}
{"scope": "multiple_function", "query": "Find me the number of active players in the game 'World of Warcraft' in 2020.", "query_for_retrieval": "Find me the number of active players in the game 'World of Warcraft' in 2020.", "answer": "video_games.get_player_count", "answer_params": "", "api_description": "def video_games.get_player_count:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the number of active players for a specified video game and year.\n\t\n\tArguments:\n\t---------\n\t- game_title : string = None (required) The title of the video game.\n\t- year : integer = None (required) The year in question.\n\t- platform : string = None (optional) The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"video_games.get_player_count\", \"description\": \"Retrieves the number of active players for a specified video game and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_title\": {\"type\": \"string\", \"description\": \"The title of the video game.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in question.\"}, \"platform\": {\"type\": \"string\", \"optional\": true, \"description\": \"The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''\"}}, \"required\": [\"game_title\", \"year\"]}}"}
{"scope": "simple", "query": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "query_for_retrieval": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "answer": "book_hotel", "answer_params": "", "api_description": "def book_hotel:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a room in a specific hotel with particular preferences\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The location of the hotel.\n\t- room_type : string = None (required) The type of room preferred.\n\t- start_date : string = None (required) The starting date of the stay in format MM-DD-YYYY.\n\t- stay_duration : integer = None (required) The duration of the stay in days.\n\t- view : string = No preference (optional) The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_hotel\", \"description\": \"Book a room in a specific hotel with particular preferences\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"The type of room preferred.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The starting date of the stay in format MM-DD-YYYY.\"}, \"stay_duration\": {\"type\": \"integer\", \"description\": \"The duration of the stay in days.\"}, \"view\": {\"type\": \"string\", \"description\": \"The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.\", \"default\": \"No preference\"}}, \"required\": [\"hotel_name\", \"location\", \"room_type\", \"start_date\", \"stay_duration\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a two-part request? First, I'd like to know if there were any lawsuits filed against the company 'TechCorp' in the location 'San Francisco' in the year 2018, specifically civil cases. Secondly, I'm planning a trip and need to check the availability of Hilton hotels in 'New York City' for the check-in date '2022-10-15' and check-out date '2022-10-20' for 2 adults. Could you assist me with these?\"", "query_for_retrieval": "\"Could you help me with a two-part request? First, I'd like to know if there were any lawsuits filed against the company 'TechCorp' in the location 'San Francisco' in the year 2018, specifically civil cases. Secondly, I'm planning a trip and need to check the availability of Hilton hotels in 'New York City' for the check-in date '2022-10-15' and check-out date '2022-10-20' for 2 adults. Could you assist me with these?\"", "answer": "hilton_hotel.check_availability", "answer_params": "", "api_description": "def hilton_hotel.check_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck hotel availability for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to check hotel availability.\n\t- check_in_date : string = None (required) The check-in date in the format YYYY-MM-DD.\n\t- check_out_date : string = None (required) The check-out date in the format YYYY-MM-DD.\n\t- no_of_adults : integer = None (required) The number of adults for the hotel booking.\n\t- hotel_chain : string = Hilton (optional) The hotel chain where you want to book the hotel.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hilton_hotel.check_availability\", \"description\": \"Check hotel availability for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to check hotel availability.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in the format YYYY-MM-DD.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in the format YYYY-MM-DD.\"}, \"no_of_adults\": {\"type\": \"integer\", \"description\": \"The number of adults for the hotel booking.\"}, \"hotel_chain\": {\"type\": \"string\", \"description\": \"The hotel chain where you want to book the hotel.\", \"default\": \"Hilton\"}}, \"required\": [\"location\", \"check_in_date\", \"check_out_date\", \"no_of_adults\"]}}"}
{"scope": "rest", "query": "I want to find out the age rating for the movie 'Barbie' released in 2023. I have an API key 'YOUR-OMDB-API-KEY' for the OMDB API. How can I get this information?", "query_for_retrieval": "I want to find out the age rating for the movie 'Barbie' released in 2023. I have an API key 'YOUR-OMDB-API-KEY' for the OMDB API. How can I get this information?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "Convert the sentence 'Hello, how are you?' from English to French.", "query_for_retrieval": "Convert the sentence 'Hello, how are you?' from English to French.", "answer": "compress_file", "answer_params": "", "api_description": "def compress_file:\n\t\"\"\"\n\tDescription:\n\t\n\tCompresses a given file into a zip archive.\n\t\n\tArguments:\n\t---------\n\t- file_path : string = None (required) The path of the file to compress.\n\t- archive_name : string = None (required) The name of the resulting archive.\n\t- compression_level : integer = None (optional) The level of compression to apply (from 0 to 9). Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"compress_file\", \"description\": \"Compresses a given file into a zip archive.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"The path of the file to compress.\"}, \"archive_name\": {\"type\": \"string\", \"description\": \"The name of the resulting archive.\"}, \"compression_level\": {\"type\": \"integer\", \"description\": \"The level of compression to apply (from 0 to 9). Default is 5.\"}}, \"required\": [\"file_path\", \"archive_name\"]}}"}
{"scope": "executable_simple", "query": "I've got this strange object we've come across in our scientific research. It's pretty hefty, weighing in at 120 kilograms, and it takes up about 30 cubic meters of space. Can you help me calculate its density?", "query_for_retrieval": "I've got this strange object we've come across in our scientific research. It's pretty hefty, weighing in at 120 kilograms, and it takes up about 30 cubic meters of space. Can you help me calculate its density?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the density of an object.\n\t\n\tArguments:\n\t---------\n\t- mass : float = None (required) The mass of the object, in kilograms.\n\t- volume : float = None (required) The volume of the object, in cubic meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculates the density of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"float\", \"description\": \"The mass of the object, in kilograms.\"}, \"volume\": {\"type\": \"float\", \"description\": \"The volume of the object, in cubic meters.\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "multiple_function", "query": "Calculate the probability of rolling a sum of 7 on a roll of two dice.", "query_for_retrieval": "Calculate the probability of rolling a sum of 7 on a roll of two dice.", "answer": "dice_roll_probability", "answer_params": "", "api_description": "def dice_roll_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of a specific sum appearing from rolling two dice.\n\t\n\tArguments:\n\t---------\n\t- desired_sum : integer = None (required) The sum for which to calculate the probability.\n\t- n_rolls : integer = None (optional) Number of dice to be rolled. Default is 1\n\t- sides_per_die : integer = None (required) Number of sides on each die.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"dice_roll_probability\", \"description\": \"Calculate the probability of a specific sum appearing from rolling two dice.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"desired_sum\": {\"type\": \"integer\", \"description\": \"The sum for which to calculate the probability.\"}, \"n_rolls\": {\"type\": \"integer\", \"description\": \"Number of dice to be rolled. Default is 1\", \"optional\": true}, \"sides_per_die\": {\"type\": \"integer\", \"description\": \"Number of sides on each die.\"}}, \"required\": [\"desired_sum\", \"sides_per_die\"]}}"}
{"scope": "parallel_multiple_function", "query": "Create a hip hop beat at 95 beats per minute with a major scale and make a bass melody with C4, E4, F4, G4.", "query_for_retrieval": "Create a hip hop beat at 95 beats per minute with a major scale and make a bass melody with C4, E4, F4, G4.", "answer": "melody_generator", "answer_params": "", "api_description": "def melody_generator:\n\t\"\"\"\n\tDescription:\n\t\n\tCreate a melody based on specified notes.\n\t\n\tArguments:\n\t---------\n\t- note_sequence : array = None (required) The sequence of notes for the melody.\n\t- instrument : string = Bass (optional) The instrument to play the melody, e.g. Bass.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"melody_generator\", \"description\": \"Create a melody based on specified notes.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"note_sequence\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The sequence of notes for the melody.\"}, \"instrument\": {\"type\": \"string\", \"default\": \"Bass\", \"description\": \"The instrument to play the melody, e.g. Bass.\"}}, \"required\": [\"note_sequence\"]}}"}
{"scope": "java", "query": "How do I generate a DMG setup script for an application named 'PhotoEditor' located at '/Applications/PhotoEditor.app', with a custom background image and ensuring the script reflects the correct volume URL and installation directory when creating a macOS package using jpackage?", "query_for_retrieval": "How do I generate a DMG setup script for an application named 'PhotoEditor' located at '/Applications/PhotoEditor.app', with a custom background image and ensuring the script reflects the correct volume URL and installation directory when creating a macOS package using jpackage?", "answer": "MacDmgBundler.prepareDMGSetupScript", "answer_params": "", "api_description": "def MacDmgBundler.prepareDMGSetupScript:\n\t\"\"\"\n\tDescription:\n\t\n\tPrepares a DMG setup script for a macOS application package, including the volume URL, background image file, and installation directory.\n\t\n\tArguments:\n\t---------\n\t- appLocation : String = None (required) The file system path string to the application location.\n\t- params : HashMap = None (required) A map of parameters that may include the application name, images root, background image folder, and other packaging parameters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"MacDmgBundler.prepareDMGSetupScript\", \"description\": \"Prepares a DMG setup script for a macOS application package, including the volume URL, background image file, and installation directory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"appLocation\": {\"type\": \"String\", \"description\": \"The file system path string to the application location.\"}, \"params\": {\"type\": \"HashMap\", \"description\": \"A map of parameters that may include the application name, images root, background image folder, and other packaging parameters.\"}}, \"required\": [\"appLocation\", \"params\"]}}"}
{"scope": "relevance", "query": "What are the calories of a Big Mac?", "query_for_retrieval": "What are the calories of a Big Mac?", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index for a person based on their height and weight\n\t\n\tArguments:\n\t---------\n\t- height : float = None (required) The height of the person in meters.\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- unit : string = None (optional) The unit of measure. Defaults to metric units (kilograms/meters). Other option is imperial (pounds/inches).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index for a person based on their height and weight\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"height\": {\"type\": \"float\", \"description\": \"The height of the person in meters.\"}, \"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measure. Defaults to metric units (kilograms/meters). Other option is imperial (pounds/inches).\"}}, \"required\": [\"height\", \"weight\"]}}"}
{"scope": "relevance", "query": "Find a picnic spot in Miami.", "query_for_retrieval": "Find a picnic spot in Miami.", "answer": "local_fauna", "answer_params": "", "api_description": "def local_fauna:\n\t\"\"\"\n\tDescription:\n\t\n\tGet information about fauna in a specified region.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The region or area to find information about.\n\t- species_type : string = None (required) Type of species e.g birds, mammals etc. for detailed information.\n\t- migration_season : string = None (optional) Season when fauna migrate e.g spring, winter, none. Default is none.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"local_fauna\", \"description\": \"Get information about fauna in a specified region.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The region or area to find information about.\"}, \"species_type\": {\"type\": \"string\", \"description\": \"Type of species e.g birds, mammals etc. for detailed information.\"}, \"migration_season\": {\"type\": \"string\", \"description\": \"Season when fauna migrate e.g spring, winter, none. Default is none.\"}}, \"required\": [\"location\", \"species_type\"]}}"}
{"scope": "simple", "query": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "query_for_retrieval": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "answer": "solve_quadratic", "answer_params": "", "api_description": "def solve_quadratic:\n\t\"\"\"\n\tDescription:\n\t\n\tSolve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) The coefficient of the squared term in the quadratic equation.\n\t- b : integer = None (required) The coefficient of the linear term in the quadratic equation.\n\t- c : integer = None (required) The constant term in the quadratic equation.\n\t- root_type : string = None (optional) The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic\", \"description\": \"Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"The coefficient of the squared term in the quadratic equation.\"}, \"b\": {\"type\": \"integer\", \"description\": \"The coefficient of the linear term in the quadratic equation.\"}, \"c\": {\"type\": \"integer\", \"description\": \"The constant term in the quadratic equation.\"}, \"root_type\": {\"type\": \"string\", \"description\": \"The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working on a wildlife research project that involves tracking the migration patterns of a bird species known to pass through various cities. The next phase of my study will focus on their activity around Cairo. To ensure the precision of my tracking equipment, I need the exact latitude and longitude coordinates of Cairo. Could you provide me with these details for Cairo?", "query_for_retrieval": "I'm currently working on a wildlife research project that involves tracking the migration patterns of a bird species known to pass through various cities. The next phase of my study will focus on their activity around Cairo. To ensure the precision of my tracking equipment, I need the exact latitude and longitude coordinates of Cairo. Could you provide me with these details for Cairo?", "answer": "get_coordinates_from_city", "answer_params": "", "api_description": "def get_coordinates_from_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\n\t\n\tArguments:\n\t---------\n\t- city_name : string = None (required) The name of the city, such as 'Rome'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinates_from_city\", \"description\": \"Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city_name\": {\"type\": \"string\", \"description\": \"The name of the city, such as 'Rome'.\"}}, \"required\": [\"city_name\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the area under the curve for the polynomial function with coefficients [3, -2, 1] (meaning the function is 3x^2 - 2x + 1) within the interval [-1, 2], and then do the same for the polynomial function with coefficients [1, 0, -1] (meaning the function is x^2 - 1) within the interval [0, 3]? Please provide both results.\"", "query_for_retrieval": "\"Can you calculate the area under the curve for the polynomial function with coefficients [3, -2, 1] (meaning the function is 3x^2 - 2x + 1) within the interval [-1, 2], and then do the same for the polynomial function with coefficients [1, 0, -1] (meaning the function is x^2 - 1) within the interval [0, 3]? Please provide both results.\"", "answer": "mathematics.calculate_area_under_curve", "answer_params": "", "api_description": "def mathematics.calculate_area_under_curve:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area under the curve for a given polynomial function within a specified interval.\n\t\n\tArguments:\n\t---------\n\t- polynomial : array = None (required) The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\n\t- limits : array = None (required) A list of two numbers specifying the lower and upper limit for the integration interval.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mathematics.calculate_area_under_curve\", \"description\": \"Calculate the area under the curve for a given polynomial function within a specified interval.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"polynomial\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\"}, \"limits\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A list of two numbers specifying the lower and upper limit for the integration interval.\"}}, \"required\": [\"polynomial\", \"limits\"]}}"}
{"scope": "relevance", "query": "Find the best Sushi restaurant in Los Angeles.", "query_for_retrieval": "Find the best Sushi restaurant in Los Angeles.", "answer": "calculate_tip", "answer_params": "", "api_description": "def calculate_tip:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the total tip amount for a given total bill and tip percentage.\n\t\n\tArguments:\n\t---------\n\t- bill_total : float = None (required) The total bill amount.\n\t- tip_percentage : float = None (required) The tip percentage.\n\t- split : integer = None (optional) Number of people the tip is split between. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_tip\", \"description\": \"Calculate the total tip amount for a given total bill and tip percentage.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"bill_total\": {\"type\": \"float\", \"description\": \"The total bill amount.\"}, \"tip_percentage\": {\"type\": \"float\", \"description\": \"The tip percentage.\"}, \"split\": {\"type\": \"integer\", \"description\": \"Number of people the tip is split between. Default is 1.\"}}, \"required\": [\"bill_total\", \"tip_percentage\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm considering the long-term growth of my savings and I've put $5000 into a fixed deposit with a steady annual interest rate of 5%. I'm planning to let it sit for a decade. Could you calculate the future value of my investment after 10 years?", "query_for_retrieval": "I'm considering the long-term growth of my savings and I've put $5000 into a fixed deposit with a steady annual interest rate of 5%. I'm planning to let it sit for a decade. Could you calculate the future value of my investment after 10 years?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "relevance", "query": "What is the roots of linear equation bx + c = 0?", "query_for_retrieval": "What is the roots of linear equation bx + c = 0?", "answer": "find_roots", "answer_params": "", "api_description": "def find_roots:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the roots of a quadratic equation ax^2 + bx + c = 0.\n\t\n\tArguments:\n\t---------\n\t- a : float = None (required) Coefficient of x^2.\n\t- b : float = None (required) Coefficient of x.\n\t- c : float = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_roots\", \"description\": \"Find the roots of a quadratic equation ax^2 + bx + c = 0.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"float\", \"description\": \"Coefficient of x^2.\"}, \"b\": {\"type\": \"float\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"float\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a math teacher preparing for a class. You want to create a challenging problem for your students that involves multiple steps. You decide to create a problem that involves finding the least common multiple (LCM) and the greatest common divisor (GCD) of two numbers, and then calculating the square root of these results. You choose the numbers 36 and 48 for the LCM and GCD calculations. For the square root calculations, you want the results to be accurate to 3 decimal places. What are the square roots of the LCM and GCD of 36 and 48, accurate to 3 decimal places?\"", "query_for_retrieval": "\"Imagine you are a math teacher preparing for a class. You want to create a challenging problem for your students that involves multiple steps. You decide to create a problem that involves finding the least common multiple (LCM) and the greatest common divisor (GCD) of two numbers, and then calculating the square root of these results. You choose the numbers 36 and 48 for the LCM and GCD calculations. For the square root calculations, you want the results to be accurate to 3 decimal places. What are the square roots of the LCM and GCD of 36 and 48, accurate to 3 decimal places?\"", "answer": "math.sqrt", "answer_params": "", "api_description": "def math.sqrt:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the square root of a number.\n\t\n\tArguments:\n\t---------\n\t- num : float = None (required) The number.\n\t- accuracy : float = 2.0 (optional) The number of decimal places in the result.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.sqrt\", \"description\": \"Calculates the square root of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num\": {\"type\": \"float\", \"description\": \"The number.\"}, \"accuracy\": {\"type\": \"float\", \"description\": \"The number of decimal places in the result.\", \"default\": 2.0}}, \"required\": [\"num\"]}}"}
{"scope": "executable_multiple_function", "query": "I've been helping my grandmother to adopt a healthier lifestyle. She's 80 years old, and we've been quite active together lately. She's 170 cm tall and weighs 59 kg. Given that we're maintaining an activity level of 4 on the scale you've provided, we're aiming for a weight loss goal. Could you calculate her nutritional needs based on these details?", "query_for_retrieval": "I've been helping my grandmother to adopt a healthier lifestyle. She's 80 years old, and we've been quite active together lately. She's 170 cm tall and weighs 59 kg. Given that we're maintaining an activity level of 4 on the scale you've provided, we're aiming for a weight loss goal. Could you calculate her nutritional needs based on these details?", "answer": "calculate_basal_metabolic_rate", "answer_params": "", "api_description": "def calculate_basal_metabolic_rate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the Basal Metabolic Rate (BMR) of a person.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- height : float = None (required) The height of the person in centimeters.\n\t- age : float = None (required) The age of the person in years.\n\t- gender : string = None (required) The gender of the person. Possible options [male, female, other].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_basal_metabolic_rate\", \"description\": \"Calculates the Basal Metabolic Rate (BMR) of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the person in centimeters.\"}, \"age\": {\"type\": \"float\", \"description\": \"The age of the person in years.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the person. Possible options [male, female, other].\"}}, \"required\": [\"weight\", \"height\", \"age\", \"gender\"]}}"}
{"scope": "parallel_multiple_function", "query": "How much would it cost me to invest in 50 shares of Apple's stock right now? Also calculate the total dividend payout if each share returns $1.30 as dividend.", "query_for_retrieval": "How much would it cost me to invest in 50 shares of Apple's stock right now? Also calculate the total dividend payout if each share returns $1.30 as dividend.", "answer": "stock_invest.calculate_investment_cost", "answer_params": "", "api_description": "def stock_invest.calculate_investment_cost:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the cost of investing in a specific number of shares from a given company.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company that you want to invest in.\n\t- shares : integer = None (required) Number of shares to invest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"stock_invest.calculate_investment_cost\", \"description\": \"Calculate the cost of investing in a specific number of shares from a given company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company that you want to invest in.\"}, \"shares\": {\"type\": \"integer\", \"description\": \"Number of shares to invest.\"}}, \"required\": [\"company\", \"shares\"]}}"}
{"scope": "java", "query": "In a Java XML processing context, how can I obtain a list of all child elements of type `Element` from a `Node` representing a SAML assertion `SAMLAssertionNode`?", "query_for_retrieval": "In a Java XML processing context, how can I obtain a list of all child elements of type `Element` from a `Node` representing a SAML assertion `SAMLAssertionNode`?", "answer": "SamlObjectSignerTests.getChildren", "answer_params": "", "api_description": "def SamlObjectSignerTests.getChildren:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves all child nodes of a specified type from a given node.\n\t\n\tArguments:\n\t---------\n\t- node : any = None (required) The parent Node from which to retrieve child nodes.\n\t- node_type : any = None (required) The Class object representing the type of child nodes to retrieve. Represented by <TYPE>.class\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SamlObjectSignerTests.getChildren\", \"description\": \"Retrieves all child nodes of a specified type from a given node.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"node\": {\"type\": \"any\", \"description\": \"The parent Node from which to retrieve child nodes.\"}, \"node_type\": {\"type\": \"any\", \"description\": \"The Class object representing the type of child nodes to retrieve. Represented by <TYPE>.class\"}}, \"required\": [\"node\", \"node_type\"]}}"}
{"scope": "parallel_function", "query": "\"John is working on a project where he needs to calculate the area of two right-angled triangles. The first triangle has a base of 12 meters and a height of 15 meters. The second triangle has a base of 18 meters and a height of 24 meters. He wants to know the total area of these two triangles in square meters. Can you help him calculate this?\"", "query_for_retrieval": "\"John is working on a project where he needs to calculate the area of two right-angled triangles. The first triangle has a base of 12 meters and a height of 15 meters. The second triangle has a base of 18 meters and a height of 24 meters. He wants to know the total area of these two triangles in square meters. Can you help him calculate this?\"", "answer": "calculate_area", "answer_params": "", "api_description": "def calculate_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a right-angled triangle given the lengths of its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the right-angled triangle.\n\t- height : integer = None (required) The height of the right-angled triangle.\n\t- unit : string = cm (optional) The unit of measure used. Defaults to cm.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_area\", \"description\": \"Calculate the area of a right-angled triangle given the lengths of its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the right-angled triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the right-angled triangle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measure used. Defaults to cm.\", \"default\": \"cm\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "executable_simple", "query": "During my investigation into a recent security breach, I've pinpointed a suspicious IP address that could be the source of the attack. The address is 192.168.1.1. To narrow down the physical location of the potential hacker, I need to find out the zipcode associated with this IP. Can you provide me with that information?", "query_for_retrieval": "During my investigation into a recent security breach, I've pinpointed a suspicious IP address that could be the source of the attack. The address is 192.168.1.1. To narrow down the physical location of the potential hacker, I need to find out the zipcode associated with this IP. Can you provide me with that information?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "query_for_retrieval": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "answer": "multiplayer_game_finder", "answer_params": "", "api_description": "def multiplayer_game_finder:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.\n\t\n\tArguments:\n\t---------\n\t- platform : string = None (required) The platform you want the game to be compatible with, e.g. Windows 10, PS5.\n\t- rating : float = None (required) Desired minimum game rating on a 5.0 scale.\n\t- genre : string = None (optional) Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"multiplayer_game_finder\", \"description\": \"Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"platform\": {\"type\": \"string\", \"description\": \"The platform you want the game to be compatible with, e.g. Windows 10, PS5.\"}, \"rating\": {\"type\": \"float\", \"description\": \"Desired minimum game rating on a 5.0 scale.\"}, \"genre\": {\"type\": \"string\", \"description\": \"Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.\", \"enum\": [\"Action\", \"Adventure\", \"Racing\", \"Strategy\", \"Simulation\"]}}, \"required\": [\"platform\", \"rating\"]}}"}
{"scope": "parallel_function", "query": "\"Could you please perform a statistical t-test to check if the means of two independent datasets are statistically different? The first dataset, Dataset A, includes the following integers: 12, 15, 18, 20, 22, 25, 28, 30, 32, 35. The second dataset, Dataset B, includes these integers: 14, 17, 19, 21, 23, 26, 29, 31, 33, 36. Please perform the test twice, once with a significance level of 0.05 and once with a significance level of 0.01.\"", "query_for_retrieval": "\"Could you please perform a statistical t-test to check if the means of two independent datasets are statistically different? The first dataset, Dataset A, includes the following integers: 12, 15, 18, 20, 22, 25, 28, 30, 32, 35. The second dataset, Dataset B, includes these integers: 14, 17, 19, 21, 23, 26, 29, 31, 33, 36. Please perform the test twice, once with a significance level of 0.05 and once with a significance level of 0.01.\"", "answer": "t_test", "answer_params": "", "api_description": "def t_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform a statistical t-test to check if the means of two independent datasets are statistically different.\n\t\n\tArguments:\n\t---------\n\t- dataset_A : array = None (required) Dataset A for comparison.\n\t- dataset_B : array = None (required) Dataset B for comparison.\n\t- alpha : float = None (optional) Significance level for the test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"t_test\", \"description\": \"Perform a statistical t-test to check if the means of two independent datasets are statistically different.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset_A\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset A for comparison.\"}, \"dataset_B\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset B for comparison.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the test. Default is 0.05.\"}}, \"required\": [\"dataset_A\", \"dataset_B\"]}}"}
{"scope": "simple", "query": "What will be the weather in New York in the next 72 hours including the precipitation?", "query_for_retrieval": "What will be the weather in New York in the next 72 hours including the precipitation?", "answer": "detailed_weather_forecast", "answer_params": "", "api_description": "def detailed_weather_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city name that you want to get the weather for.\n\t- duration : integer = None (required) Duration in hours for the detailed forecast.\n\t- include_precipitation : boolean = None (optional) Whether to include precipitation data in the forecast. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"detailed_weather_forecast\", \"description\": \"Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city name that you want to get the weather for.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"Duration in hours for the detailed forecast.\"}, \"include_precipitation\": {\"type\": \"boolean\", \"description\": \"Whether to include precipitation data in the forecast. Default is false.\"}}, \"required\": [\"location\", \"duration\"]}}"}
{"scope": "parallel_function", "query": "Calculate the body mass index for a person who is 6 feet tall and weighs 80 kg, also for a person who is 5.6 feet and weighs 60 kg.", "query_for_retrieval": "Calculate the body mass index for a person who is 6 feet tall and weighs 80 kg, also for a person who is 5.6 feet and weighs 60 kg.", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate body mass index for a person based on their weight and height.\n\t\n\tArguments:\n\t---------\n\t- height : float = None (required) The height of the person in feet.\n\t- weight : integer = None (required) The weight of the person in kilograms.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate body mass index for a person based on their weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"height\": {\"type\": \"float\", \"description\": \"The height of the person in feet.\"}, \"weight\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}}, \"required\": [\"height\", \"weight\"]}}"}
{"scope": "simple", "query": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "query_for_retrieval": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "answer": "calculate_stock_return", "answer_params": "", "api_description": "def calculate_stock_return:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The amount of money to invest.\n\t- annual_growth_rate : float = None (required) The expected annual growth rate of the stock.\n\t- holding_period : integer = None (required) The number of years you intend to hold the stock.\n\t- dividends : boolean = None (optional) Optional. True if the calculation should take into account potential dividends. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_stock_return\", \"description\": \"Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The amount of money to invest.\"}, \"annual_growth_rate\": {\"type\": \"float\", \"description\": \"The expected annual growth rate of the stock.\"}, \"holding_period\": {\"type\": \"integer\", \"description\": \"The number of years you intend to hold the stock.\"}, \"dividends\": {\"type\": \"boolean\", \"description\": \"Optional. True if the calculation should take into account potential dividends. Default is false.\"}}, \"required\": [\"investment_amount\", \"annual_growth_rate\", \"holding_period\"]}}"}
{"scope": "simple", "query": "Retrieve the historic dates and facts related to Christianity between year 300 and 400.", "query_for_retrieval": "Retrieve the historic dates and facts related to Christianity between year 300 and 400.", "answer": "get_religion_history", "answer_params": "", "api_description": "def get_religion_history:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves historic events and facts related to a specified religion for a given period.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) The name of the religion.\n\t- start_year : integer = None (required) The starting year of the period.\n\t- end_year : integer = None (required) The end year of the period.\n\t- event_type : string = None (optional) Optional parameter specifying the type of event. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_religion_history\", \"description\": \"Retrieves historic events and facts related to a specified religion for a given period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"The name of the religion.\"}, \"start_year\": {\"type\": \"integer\", \"description\": \"The starting year of the period.\"}, \"end_year\": {\"type\": \"integer\", \"description\": \"The end year of the period.\"}, \"event_type\": {\"type\": \"string\", \"enum\": [\"all\", \"crusade\", \"schism\", \"reform\"], \"description\": \"Optional parameter specifying the type of event. Default is 'all'.\"}}, \"required\": [\"religion\", \"start_year\", \"end_year\"]}}"}
{"scope": "relevance", "query": "What is the equivalent of $20 in British Pounds?", "query_for_retrieval": "What is the equivalent of $20 in British Pounds?", "answer": "weather_in_location", "answer_params": "", "api_description": "def weather_in_location:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current weather conditions in a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where to retrieve the weather conditions.\n\t- unit : string = None (required) The unit to use for the temperature, either Celsius (C) or Fahrenheit (F).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_in_location\", \"description\": \"Retrieve the current weather conditions in a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where to retrieve the weather conditions.\"}, \"unit\": {\"type\": \"string\", \"enum\": [\"C\", \"F\"], \"description\": \"The unit to use for the temperature, either Celsius (C) or Fahrenheit (F).\"}}, \"required\": [\"location\", \"unit\"]}}"}
{"scope": "simple", "query": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "query_for_retrieval": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "answer": "law.civil.get_case_details", "answer_params": "", "api_description": "def law.civil.get_case_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of a Supreme Court case given its title.\n\t\n\tArguments:\n\t---------\n\t- case_title : string = None (required) Title of the Supreme Court case.\n\t- include_dissent : boolean = None (required) If true, the output will include details of the dissenting opinion.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law.civil.get_case_details\", \"description\": \"Retrieve the details of a Supreme Court case given its title.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_title\": {\"type\": \"string\", \"description\": \"Title of the Supreme Court case.\"}, \"include_dissent\": {\"type\": \"boolean\", \"description\": \"If true, the output will include details of the dissenting opinion.\"}}, \"required\": [\"case_title\", \"include_dissent\"]}}"}
{"scope": "java", "query": "How can I determine if the system property 'enableXmlSecurityFeature' is set to enable the security feature 'XML_SECURITY' in a Java XML processing environment?", "query_for_retrieval": "How can I determine if the system property 'enableXmlSecurityFeature' is set to enable the security feature 'XML_SECURITY' in a Java XML processing environment?", "answer": "JdkXmlFeatures.getSystemProperty", "answer_params": "", "api_description": "def JdkXmlFeatures.getSystemProperty:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks if the specified system property is set and applies its boolean value to the given XML feature. Throws NumberFormatException if the property value is invalid.\n\t\n\tArguments:\n\t---------\n\t- feature : any = None (required) The XML feature to check the system property for.\n\t- sysPropertyName : String = None (required) The name of the system property to be checked.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"JdkXmlFeatures.getSystemProperty\", \"description\": \"Checks if the specified system property is set and applies its boolean value to the given XML feature. Throws NumberFormatException if the property value is invalid.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"feature\": {\"type\": \"any\", \"description\": \"The XML feature to check the system property for.\"}, \"sysPropertyName\": {\"type\": \"String\", \"description\": \"The name of the system property to be checked.\"}}, \"required\": [\"feature\", \"sysPropertyName\"]}}"}
{"scope": "executable_simple", "query": "During the high-speed chase, when the driver accelerated the vehicle, it was initially moving at 25 meters per second. With the sudden push on the gas pedal, the car accelerated at 15 meters per second squared, and this went on for 8 seconds. I need to calculate the displacement of the vehicle over that time. Can you provide me with that information?", "query_for_retrieval": "During the high-speed chase, when the driver accelerated the vehicle, it was initially moving at 25 meters per second. With the sudden push on the gas pedal, the car accelerated at 15 meters per second squared, and this went on for 8 seconds. I need to calculate the displacement of the vehicle over that time. Can you provide me with that information?", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object, in meters per second.\n\t- acceleration : float = None (required) The acceleration of the object, in meters per second squared.\n\t- time : float = None (required) The time the object has been moving, in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object, in meters per second.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object, in meters per second squared.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving, in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"What is the capital city of Australia, what is the current population of Canada, and what is the largest city in Brazil?\"", "query_for_retrieval": "\"What is the capital city of Australia, what is the current population of Canada, and what is the largest city in Brazil?\"", "answer": "country_info.largest_city", "answer_params": "", "api_description": "def country_info.largest_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the largest city of a specified country.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) Name of the country.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"country_info.largest_city\", \"description\": \"Fetch the largest city of a specified country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country.\"}}, \"required\": [\"country\"]}}"}
{"scope": "simple", "query": "What is the area of a triangle with base of 10 units and height of 5 units?", "query_for_retrieval": "What is the area of a triangle with base of 10 units and height of 5 units?", "answer": "calculate_triangle_area", "answer_params": "", "api_description": "def calculate_triangle_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle using its base and height.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle.\n\t- height : integer = None (required) The height of the triangle from the base.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_triangle_area\", \"description\": \"Calculate the area of a triangle using its base and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle from the base.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "java", "query": "How can I prepare a JDBC statement for a DB2 view named 'EmployeeView' within the schema 'HR' using an active JDBC session object `jdbcSession`?", "query_for_retrieval": "How can I prepare a JDBC statement for a DB2 view named 'EmployeeView' within the schema 'HR' using an active JDBC session object `jdbcSession`?", "answer": "DB2ViewBaseDepCache.prepareObjectsStatement", "answer_params": "", "api_description": "def DB2ViewBaseDepCache.prepareObjectsStatement:\n\t\"\"\"\n\tDescription:\n\t\n\tPrepares a JDBC statement for querying metadata of a specific DB2 view in a given schema.\n\t\n\tArguments:\n\t---------\n\t- session : any = None (required) The JDBCSession object representing the active database session.\n\t- db2ViewBase : any = None (required) The DB2ViewBase object representing the DB2 view for which the statement is being prepared.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DB2ViewBaseDepCache.prepareObjectsStatement\", \"description\": \"Prepares a JDBC statement for querying metadata of a specific DB2 view in a given schema.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"session\": {\"type\": \"any\", \"description\": \"The JDBCSession object representing the active database session.\"}, \"db2ViewBase\": {\"type\": \"any\", \"description\": \"The DB2ViewBase object representing the DB2 view for which the statement is being prepared.\"}}, \"required\": [\"session\", \"db2ViewBase\"]}}"}
{"scope": "relevance", "query": "How to build a frontend interface for my e-commerce website?", "query_for_retrieval": "How to build a frontend interface for my e-commerce website?", "answer": "create_Recommender_Model", "answer_params": "", "api_description": "def create_Recommender_Model:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function is used to create a recommendation model using a given user data and an algorithm type\n\t\n\tArguments:\n\t---------\n\t- user_data : string = None (required) A data frame of user ratings. Rows represent users, columns represent items, and entries represent user ratings for items\n\t- algorithm : string = None (required) The algorithm to be used for creating the recommendation model. Collaborative filtering, content-based filtering and hybrid filtering.\n\t- matrix_factorization : boolean = None (optional) Optional parameter to indicate whether matrix factorization should be used. Default is False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"create_Recommender_Model\", \"description\": \"This function is used to create a recommendation model using a given user data and an algorithm type\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_data\": {\"type\": \"string\", \"description\": \"A data frame of user ratings. Rows represent users, columns represent items, and entries represent user ratings for items\"}, \"algorithm\": {\"type\": \"string\", \"enum\": [\"Collaborative\", \"Content Based\", \"Hybrid\"], \"description\": \"The algorithm to be used for creating the recommendation model. Collaborative filtering, content-based filtering and hybrid filtering.\"}, \"matrix_factorization\": {\"type\": \"boolean\", \"description\": \"Optional parameter to indicate whether matrix factorization should be used. Default is False.\"}}, \"required\": [\"user_data\", \"algorithm\"]}}"}
{"scope": "parallel_function", "query": "Can you provide me with the fastest route from my home in San Francisco to my office in Palo Alto and then a scenic route from Palo Alto to the Golden Gate Bridge in San Francisco, and finally the fastest route back to my home from the Golden Gate Bridge?", "query_for_retrieval": "Can you provide me with the fastest route from my home in San Francisco to my office in Palo Alto and then a scenic route from Palo Alto to the Golden Gate Bridge in San Francisco, and finally the fastest route back to my home from the Golden Gate Bridge?", "answer": "get_directions", "answer_params": "", "api_description": "def get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from one location to another.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting point of the journey.\n\t- end_location : string = None (required) The destination point of the journey.\n\t- route_type : string = None (optional) Type of route to use (e.g., fastest, scenic). Default is fastest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_directions\", \"description\": \"Retrieve directions from one location to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting point of the journey.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination point of the journey.\"}, \"route_type\": {\"type\": \"string\", \"description\": \"Type of route to use (e.g., fastest, scenic). Default is fastest.\", \"enum\": [\"fastest\", \"scenic\"]}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "multiple_function", "query": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "query_for_retrieval": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population density of a specific country in a specific year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which the density needs to be calculated.\n\t- year : string = None (required) The year in which the density is to be calculated.\n\t- population : integer = None (required) The population of the country.\n\t- land_area : float = None (required) The land area of the country in square kilometers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the population density of a specific country in a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which the density needs to be calculated.\"}, \"year\": {\"type\": \"string\", \"description\": \"The year in which the density is to be calculated.\"}, \"population\": {\"type\": \"integer\", \"description\": \"The population of the country.\"}, \"land_area\": {\"type\": \"float\", \"description\": \"The land area of the country in square kilometers.\"}}, \"required\": [\"country\", \"year\", \"population\", \"land_area\"]}}"}
{"scope": "java", "query": "How do I create a callable statement for executing a stored procedure `CALL totalSales(?)` with a result set that is scroll insensitive, read only, and has a close cursors at commit holdability, using a proxy connection object `proxyConn`?", "query_for_retrieval": "How do I create a callable statement for executing a stored procedure `CALL totalSales(?)` with a result set that is scroll insensitive, read only, and has a close cursors at commit holdability, using a proxy connection object `proxyConn`?", "answer": "ProxyConnection.prepareCall", "answer_params": "", "api_description": "def ProxyConnection.prepareCall:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a CallableStatement object for calling database stored procedures, with the specified result set type, concurrency type, and holdability.\n\t\n\tArguments:\n\t---------\n\t- sql : String = None (required) The SQL statement to execute.\n\t- resultSetType : integer = None (required) A result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE.\n\t- concurrency : integer = None (required) A concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE.\n\t- holdability : integer = None (required) A holdability type; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ProxyConnection.prepareCall\", \"description\": \"Creates a CallableStatement object for calling database stored procedures, with the specified result set type, concurrency type, and holdability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql\": {\"type\": \"String\", \"description\": \"The SQL statement to execute.\"}, \"resultSetType\": {\"type\": \"integer\", \"description\": \"A result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE.\"}, \"concurrency\": {\"type\": \"integer\", \"description\": \"A concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE.\"}, \"holdability\": {\"type\": \"integer\", \"description\": \"A holdability type; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT.\"}}, \"required\": [\"sql\", \"resultSetType\", \"concurrency\", \"holdability\"]}}"}
{"scope": "sql", "query": "What is the value of the 'result' column in the 'calculations' table for the calculation with the ID 5678.", "query_for_retrieval": "What is the value of the 'result' column in the 'calculations' table for the calculation with the ID 5678.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "What is the correct way to use the requests.get function to obtain the latest exchange rates for Euros against all other currencies using my Exchange Rate API key YOUR-EXCHANGERATE-API-KEY?", "query_for_retrieval": "What is the correct way to use the requests.get function to obtain the latest exchange rates for Euros against all other currencies using my Exchange Rate API key YOUR-EXCHANGERATE-API-KEY?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "Can you please retrieve the details of two lawsuits for me? The first one has a case number of '12345' and was filed in the 'New York Supreme Court'. I would also like to know the verdict details for this case. The second lawsuit has a case number '67890' and was filed in the 'Los Angeles Superior Court'. I do not need the verdict details for this case.", "query_for_retrieval": "Can you please retrieve the details of two lawsuits for me? The first one has a case number of '12345' and was filed in the 'New York Supreme Court'. I would also like to know the verdict details for this case. The second lawsuit has a case number '67890' and was filed in the 'Los Angeles Superior Court'. I do not need the verdict details for this case.", "answer": "get_lawsuit_details", "answer_params": "", "api_description": "def get_lawsuit_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve details of a lawsuit based on its case number and court location.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) Case number of the lawsuit.\n\t- court_location : string = None (required) The location of the court where the lawsuit was filed.\n\t- with_verdict : boolean = None (optional) Flag to include verdict details if available. Default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_lawsuit_details\", \"description\": \"Retrieve details of a lawsuit based on its case number and court location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"Case number of the lawsuit.\"}, \"court_location\": {\"type\": \"string\", \"description\": \"The location of the court where the lawsuit was filed.\"}, \"with_verdict\": {\"type\": \"boolean\", \"description\": \"Flag to include verdict details if available. Default is False\"}}, \"required\": [\"case_number\", \"court_location\"]}}"}
{"scope": "sql", "query": "Can you remove all records from the 'transactions' table in the database where the 'account_type' is 'savings' and the 'amount' is greater than 5000?", "query_for_retrieval": "Can you remove all records from the 'transactions' table in the database where the 'account_type' is 'savings' and the 'amount' is greater than 5000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "Can you provide me with the list of movie releases in the IMAX format at theaters in New York over the next 7 days, and also the list of movie releases in the 2D format at theaters in Los Angeles over the next 14 days?", "query_for_retrieval": "Can you provide me with the list of movie releases in the IMAX format at theaters in New York over the next 7 days, and also the list of movie releases in the 2D format at theaters in Los Angeles over the next 14 days?", "answer": "get_theater_movie_releases", "answer_params": "", "api_description": "def get_theater_movie_releases:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the list of movie releases in specific theaters for a specified period.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location of the theaters.\n\t- timeframe : integer = None (required) The number of days for which releases are required from current date.\n\t- format : string = IMAX (optional) Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_theater_movie_releases\", \"description\": \"Retrieve the list of movie releases in specific theaters for a specified period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location of the theaters.\"}, \"timeframe\": {\"type\": \"integer\", \"description\": \"The number of days for which releases are required from current date.\"}, \"format\": {\"type\": \"string\", \"description\": \"Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter.\", \"default\": \"IMAX\"}}, \"required\": [\"location\", \"timeframe\"]}}"}
{"scope": "executable_multiple_function", "query": "I've been hearing the slang term \"lit\" quite frequently these days and it's piqued my curiosity. I'm not entirely sure what it means, so I'm looking to find a definition that could shed some light on its usage and connotations. Can you find out what \"lit\" means on Urban Dictionary for me?", "query_for_retrieval": "I've been hearing the slang term \"lit\" quite frequently these days and it's piqued my curiosity. I'm not entirely sure what it means, so I'm looking to find a definition that could shed some light on its usage and connotations. Can you find out what \"lit\" means on Urban Dictionary for me?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "simple", "query": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "query_for_retrieval": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "answer": "get_bigfive_scores", "answer_params": "", "api_description": "def get_bigfive_scores:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve Big Five Personality trait scores based on individual's behavioural characteristics.\n\t\n\tArguments:\n\t---------\n\t- characteristics : array = None (required) List of user's behavioural characteristics.\n\t- scale : string = None (optional) The scoring scale of traits (default is medium).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_bigfive_scores\", \"description\": \"Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"characteristics\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of user's behavioural characteristics.\"}, \"scale\": {\"type\": \"string\", \"enum\": [\"high\", \"medium\", \"low\"], \"description\": \"The scoring scale of traits (default is medium).\"}}, \"required\": [\"characteristics\"]}}"}
{"scope": "java", "query": "Can I determine if the symbol 'getVersion' is readable in the native function interface library associated with the current object?", "query_for_retrieval": "Can I determine if the symbol 'getVersion' is readable in the native function interface library associated with the current object?", "answer": "NFILibrary.isMemberReadable", "answer_params": "", "api_description": "def NFILibrary.isMemberReadable:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks if the specified symbol is readable in the native function interface library associated with the current object.\n\t\n\tArguments:\n\t---------\n\t- symbol : String = None (required) The symbol to check for readability.\n\t- recursive : any = None (optional) The InteropLibrary instance used for recursive checks (automatically provided by the runtime). Default null\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"NFILibrary.isMemberReadable\", \"description\": \"Checks if the specified symbol is readable in the native function interface library associated with the current object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"symbol\": {\"type\": \"String\", \"description\": \"The symbol to check for readability.\"}, \"recursive\": {\"type\": \"any\", \"description\": \"The InteropLibrary instance used for recursive checks (automatically provided by the runtime). Default null\"}}, \"required\": [\"symbol\"]}}"}
{"scope": "simple", "query": "What is the third major chord in C major scale?", "query_for_retrieval": "What is the third major chord in C major scale?", "answer": "get_third_chord", "answer_params": "", "api_description": "def get_third_chord:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the third major chord in a given key.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key of the scale.\n\t- type : string = None (optional) Type of the scale, either major or minor. Default is 'major'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_third_chord\", \"description\": \"Calculate the third major chord in a given key.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key of the scale.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of the scale, either major or minor. Default is 'major'.\"}}, \"required\": [\"key\"]}}"}
{"scope": "executable_simple", "query": "Could you find out what the age rating is for \"Pulp Fiction\"? I'm trying to decide if it's suitable for my teenage kids to watch.", "query_for_retrieval": "Could you find out what the age rating is for \"Pulp Fiction\"? I'm trying to decide if it's suitable for my teenage kids to watch.", "answer": "get_movie_rating", "answer_params": "", "api_description": "def get_movie_rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the age rating of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_rating\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "simple", "query": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second.", "query_for_retrieval": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second.", "answer": "final_velocity", "answer_params": "", "api_description": "def final_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object given its initial velocity, acceleration, and time.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object in meters/second.\n\t- acceleration : integer = None (required) The acceleration of the object in meters/second^2.\n\t- time : integer = None (required) The time over which the acceleration is applied in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"final_velocity\", \"description\": \"Calculate the final velocity of an object given its initial velocity, acceleration, and time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in meters/second.\"}, \"acceleration\": {\"type\": \"integer\", \"description\": \"The acceleration of the object in meters/second^2.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time over which the acceleration is applied in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm doing a bit of market research and I have a list of Amazon Standard Identification Numbers (ASINs) for products I'm interested in. I need to match these ASINs to their product names to streamline my analysis. Here are the ASINs I'm working with: 'B075H2B962', 'B08BHXG144', 'B07ZPKBL9V', and 'B08PPDJWC8'. Could you look up the product names for these ASINs for me?", "query_for_retrieval": "I'm doing a bit of market research and I have a list of Amazon Standard Identification Numbers (ASINs) for products I'm interested in. I need to match these ASINs to their product names to streamline my analysis. Here are the ASINs I'm working with: 'B075H2B962', 'B08BHXG144', 'B07ZPKBL9V', and 'B08PPDJWC8'. Could you look up the product names for these ASINs for me?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "rest", "query": "I'm trying to find the ticker information for Tesla on the stock market, and I'm using the Yahoo Finance API through RapidAPI. My API key is 'YOUR-RAPID-API-KEY', and the host is 'yahoo-finance15.p.rapidapi.com'. How should I set up the GET request with the necessary headers and search parameters?", "query_for_retrieval": "I'm trying to find the ticker information for Tesla on the stock market, and I'm using the Yahoo Finance API through RapidAPI. My API key is 'YOUR-RAPID-API-KEY', and the host is 'yahoo-finance15.p.rapidapi.com'. How should I set up the GET request with the necessary headers and search parameters?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy.", "query_for_retrieval": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy.", "answer": "database.modify_columns", "answer_params": "", "api_description": "def database.modify_columns:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function allows deletion or addition of columns in a database\n\t\n\tArguments:\n\t---------\n\t- db_name : string = None (required) The name of the database to modify.\n\t- table : string = None (required) The name of the table to modify.\n\t- operation : string = None (required) The operation to carry out on the table. Can be 'delete' or 'add'.\n\t- columns : array = None (required) List of the columns to add or delete from the table.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"database.modify_columns\", \"description\": \"This function allows deletion or addition of columns in a database\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"db_name\": {\"type\": \"string\", \"description\": \"The name of the database to modify.\"}, \"table\": {\"type\": \"string\", \"description\": \"The name of the table to modify.\"}, \"operation\": {\"type\": \"string\", \"description\": \"The operation to carry out on the table. Can be 'delete' or 'add'.\"}, \"columns\": {\"type\": \"array\", \"description\": \"List of the columns to add or delete from the table.\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"db_name\", \"table\", \"operation\", \"columns\"]}}"}
{"scope": "simple", "query": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "query_for_retrieval": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "answer": "music_generator.generate_melody", "answer_params": "", "api_description": "def music_generator.generate_melody:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerate a melody based on certain musical parameters.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The key of the melody. E.g., 'C' for C major.\n\t- start_note : string = None (required) The first note of the melody, specified in scientific pitch notation. E.g., 'C4'.\n\t- length : integer = None (required) The number of measures in the melody.\n\t- tempo : integer = None (optional) The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_generator.generate_melody\", \"description\": \"Generate a melody based on certain musical parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The key of the melody. E.g., 'C' for C major.\"}, \"start_note\": {\"type\": \"string\", \"description\": \"The first note of the melody, specified in scientific pitch notation. E.g., 'C4'.\"}, \"length\": {\"type\": \"integer\", \"description\": \"The number of measures in the melody.\"}, \"tempo\": {\"type\": \"integer\", \"description\": \"The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120.\"}}, \"required\": [\"key\", \"start_note\", \"length\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "What is the first 10 numbers in the Fibonacci sequence? I'm working on some statistical analysis for a math project and I need those figures. Also Calculate the standard deviation for [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "query_for_retrieval": "What is the first 10 numbers in the Fibonacci sequence? I'm working on some statistical analysis for a math project and I need those figures. Also Calculate the standard deviation for [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "relevance", "query": "What's the population in New York right now?", "query_for_retrieval": "What's the population in New York right now?", "answer": "time_converter", "answer_params": "", "api_description": "def time_converter:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts the local time of user's region to the target region's local time.\n\t\n\tArguments:\n\t---------\n\t- user_timezone : string = None (required) The timezone of the user in string format. Example: 'Pacific Time (US & Canada)'\n\t- target_timezone : string = None (required) The target timezone in string format where user wants to know the local time. Example: 'Eastern Time (US & Canada)'\n\t- time : string = 13:30:00 (optional) The local time of user's timezone in string format (24 hr format). Optional parameter. Example: '15:30:00'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"time_converter\", \"description\": \"Converts the local time of user's region to the target region's local time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_timezone\": {\"type\": \"string\", \"description\": \"The timezone of the user in string format. Example: 'Pacific Time (US & Canada)'\"}, \"target_timezone\": {\"type\": \"string\", \"description\": \"The target timezone in string format where user wants to know the local time. Example: 'Eastern Time (US & Canada)'\"}, \"time\": {\"type\": \"string\", \"description\": \"The local time of user's timezone in string format (24 hr format). Optional parameter. Example: '15:30:00'\", \"default\": \"13:30:00\"}}, \"required\": [\"user_timezone\", \"target_timezone\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "Could you fetch the current weather data for the location with the latitude 45.4215 and longitude -75.6972? Also, I need to calculate the chances of achieving exactly 3 successes out of 5 attempts, assuming there's a 50% probability of success on each attempt.", "query_for_retrieval": "Could you fetch the current weather data for the location with the latitude 45.4215 and longitude -75.6972? Also, I need to calculate the chances of achieving exactly 3 successes out of 5 attempts, assuming there's a 50% probability of success on each attempt.", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "parallel_function", "query": "Can you fetch the latest news on the topic of \"Climate Change\" and \"Artificial Intelligence\", each with 5 articles, and specifically for the region \"Europe\"?", "query_for_retrieval": "Can you fetch the latest news on the topic of \"Climate Change\" and \"Artificial Intelligence\", each with 5 articles, and specifically for the region \"Europe\"?", "answer": "get_news", "answer_params": "", "api_description": "def get_news:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the latest news on a specific topic.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The subject for the news topic.\n\t- quantity : integer = None (required) Number of articles to fetch.\n\t- region : string = None (optional) The geographical region for the news (Optional). default is 'USA'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_news\", \"description\": \"Fetches the latest news on a specific topic.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The subject for the news topic.\"}, \"quantity\": {\"type\": \"integer\", \"description\": \"Number of articles to fetch.\"}, \"region\": {\"type\": \"string\", \"description\": \"The geographical region for the news (Optional). default is 'USA'\"}}, \"required\": [\"topic\", \"quantity\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with a couple of calculations? First, I need to find the greatest common divisor of 56 and 98 using the Euclidean algorithm. After that, I would like to know the greatest common divisor of 81 and 27, but this time using the binary algorithm. Once we have those, I need to calculate the least common multiple of 15 and 25 using the standard method. And finally, could you find the least common multiple of 21 and 14 using the reduced method?\"", "query_for_retrieval": "\"Could you please help me with a couple of calculations? First, I need to find the greatest common divisor of 56 and 98 using the Euclidean algorithm. After that, I would like to know the greatest common divisor of 81 and 27, but this time using the binary algorithm. Once we have those, I need to calculate the least common multiple of 15 and 25 using the standard method. And finally, could you find the least common multiple of 21 and 14 using the reduced method?\"", "answer": "calculate_lcm", "answer_params": "", "api_description": "def calculate_lcm:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the least common multiple (lcm) between two integers.\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) First number to calculate lcm for.\n\t- num2 : integer = None (required) Second number to calculate lcm for.\n\t- method : string = standard (optional) The specific method to use in the calculation. Supported values: 'standard', 'reduced'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_lcm\", \"description\": \"Calculate the least common multiple (lcm) between two integers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"First number to calculate lcm for.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"Second number to calculate lcm for.\"}, \"method\": {\"type\": \"string\", \"description\": \"The specific method to use in the calculation. Supported values: 'standard', 'reduced'\", \"default\": \"standard\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "multiple_function", "query": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "query_for_retrieval": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "answer": "event_finder.find_upcoming", "answer_params": "", "api_description": "def event_finder.find_upcoming:\n\t\"\"\"\n\tDescription:\n\t\n\tFind upcoming events of a specific genre in a given location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state where the search will take place, e.g. New York, NY.\n\t- genre : string = None (required) The genre of events.\n\t- days_ahead : integer = 7 (optional) The number of days from now to include in the search.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"event_finder.find_upcoming\", \"description\": \"Find upcoming events of a specific genre in a given location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state where the search will take place, e.g. New York, NY.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of events.\"}, \"days_ahead\": {\"type\": \"integer\", \"description\": \"The number of days from now to include in the search.\", \"default\": 7}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a math teacher preparing for a geometry class. You want to create a worksheet for your students that includes problems on calculating areas of different shapes. You have decided to include a problem on calculating the area of a triangle using Heron's formula, another problem on calculating the area of a triangle using the base and height, and a problem on calculating the area of a circle. For the first problem, you have chosen a triangle with sides of lengths 7 units, 10 units, and 5 units. For the second problem, you have chosen a triangle with a base of 8 units and a height of 6 units. For the third problem, you have chosen a circle with a radius of 4 units. Could you calculate the areas of these shapes for your worksheet?\"", "query_for_retrieval": "\"Imagine you are a math teacher preparing for a geometry class. You want to create a worksheet for your students that includes problems on calculating areas of different shapes. You have decided to include a problem on calculating the area of a triangle using Heron's formula, another problem on calculating the area of a triangle using the base and height, and a problem on calculating the area of a circle. For the first problem, you have chosen a triangle with sides of lengths 7 units, 10 units, and 5 units. For the second problem, you have chosen a triangle with a base of 8 units and a height of 6 units. For the third problem, you have chosen a circle with a radius of 4 units. Could you calculate the areas of these shapes for your worksheet?\"", "answer": "math.triangle_area_heron", "answer_params": "", "api_description": "def math.triangle_area_heron:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the area of a triangle using Heron's formula, given the lengths of its three sides.\n\t\n\tArguments:\n\t---------\n\t- side1 : float = None (required) Length of the first side of the triangle.\n\t- side2 : float = None (required) Length of the second side of the triangle.\n\t- side3 : float = None (required) Length of the third side of the triangle.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.triangle_area_heron\", \"description\": \"Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"side1\": {\"type\": \"float\", \"description\": \"Length of the first side of the triangle.\"}, \"side2\": {\"type\": \"float\", \"description\": \"Length of the second side of the triangle.\"}, \"side3\": {\"type\": \"float\", \"description\": \"Length of the third side of the triangle.\"}}, \"required\": [\"side1\", \"side2\", \"side3\"]}}"}
{"scope": "sql", "query": "In a chemistry database, there is a table named 'Elements' that contains information about all known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. If a new discovery proves that the element with the atomic number 118, currently known as 'Oganesson' with the symbol 'Og', does not exist, how would you remove this information from the database?", "query_for_retrieval": "In a chemistry database, there is a table named 'Elements' that contains information about all known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. If a new discovery proves that the element with the atomic number 118, currently known as 'Oganesson' with the symbol 'Og', does not exist, how would you remove this information from the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "How much will I weigh on Mars if my weight on Earth is 70 kg?", "query_for_retrieval": "How much will I weigh on Mars if my weight on Earth is 70 kg?", "answer": "unit_conversion.convert", "answer_params": "", "api_description": "def unit_conversion.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- value : float = None (required) The value to be converted.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"unit_conversion.convert\", \"description\": \"Convert a value from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"float\", \"description\": \"The value to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}}, \"required\": [\"value\", \"from_unit\", \"to_unit\"]}}"}
{"scope": "multiple_function", "query": "Calculate the probability of drawing a king from a deck of cards.", "query_for_retrieval": "Calculate the probability of drawing a king from a deck of cards.", "answer": "calculate_probability", "answer_params": "", "api_description": "def calculate_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of an event.\n\t\n\tArguments:\n\t---------\n\t- total_outcomes : integer = None (required) Total number of possible outcomes.\n\t- favorable_outcomes : integer = None (required) Number of outcomes considered as 'successful'.\n\t- round_to : integer = 2 (optional) Number of decimal places to round the result to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_probability\", \"description\": \"Calculate the probability of an event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_outcomes\": {\"type\": \"integer\", \"description\": \"Total number of possible outcomes.\"}, \"favorable_outcomes\": {\"type\": \"integer\", \"description\": \"Number of outcomes considered as 'successful'.\"}, \"round_to\": {\"type\": \"integer\", \"description\": \"Number of decimal places to round the result to.\", \"default\": 2}}, \"required\": [\"total_outcomes\", \"favorable_outcomes\"]}}"}
{"scope": "simple", "query": "What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?", "query_for_retrieval": "What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?", "answer": "calculate_final_speed", "answer_params": "", "api_description": "def calculate_final_speed:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\n\t\n\tArguments:\n\t---------\n\t- initial_speed : integer = None (optional) The initial speed of the object in m/s. Default is 0 for an object at rest.\n\t- time : integer = None (required) The time in seconds for which the object is in free fall.\n\t- gravity : float = None (optional) The acceleration due to gravity. Default is -9.81 m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_final_speed\", \"description\": \"Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"integer\", \"description\": \"The initial speed of the object in m/s. Default is 0 for an object at rest.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time in seconds for which the object is in free fall.\"}, \"gravity\": {\"type\": \"float\", \"description\": \"The acceleration due to gravity. Default is -9.81 m/s^2.\"}}, \"required\": [\"time\"]}}"}
{"scope": "relevance", "query": "Calculate the probability of getting a head when flipping a coin.", "query_for_retrieval": "Calculate the probability of getting a head when flipping a coin.", "answer": "get_standard_deviation", "answer_params": "", "api_description": "def get_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a series of numbers.\n\t\n\tArguments:\n\t---------\n\t- data : array = None (required) An array of numbers.\n\t- population : boolean = True (optional) A boolean indicating whether to calculate the population (true) or sample (false) standard deviation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_standard_deviation\", \"description\": \"Calculates the standard deviation of a series of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"data\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"An array of numbers.\"}, \"population\": {\"type\": \"boolean\", \"default\": true, \"description\": \"A boolean indicating whether to calculate the population (true) or sample (false) standard deviation.\"}}, \"required\": [\"data\"]}}"}
{"scope": "java", "query": "How do I create a spy instance for an Elasticsearch test framework, given the mock creation settings `mockSettings`, a mock handler `mockHandler`, and an object `testObject` to be spied upon?", "query_for_retrieval": "How do I create a spy instance for an Elasticsearch test framework, given the mock creation settings `mockSettings`, a mock handler `mockHandler`, and an object `testObject` to be spied upon?", "answer": "SecureMockMaker.createSpy", "answer_params": "", "api_description": "def SecureMockMaker.createSpy:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a spy instance for a given object using the provided mock creation settings and handler. This is used within the Elasticsearch test framework.\n\t\n\tArguments:\n\t---------\n\t- settings : any = None (required) The settings for creating the mock.\n\t- handler : any = None (required) The handler to be used for the mock.\n\t- object : any = None (required) The actual object to create a spy for.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SecureMockMaker.createSpy\", \"description\": \"Creates a spy instance for a given object using the provided mock creation settings and handler. This is used within the Elasticsearch test framework.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"settings\": {\"type\": \"any\", \"description\": \"The settings for creating the mock.\"}, \"handler\": {\"type\": \"any\", \"description\": \"The handler to be used for the mock.\"}, \"object\": {\"type\": \"any\", \"description\": \"The actual object to create a spy for.\"}}, \"required\": [\"settings\", \"handler\", \"object\"]}}"}
{"scope": "executable_simple", "query": "I'm considering purchasing a product from Amazon, and before I make a decision, I'd like to check its rating. The product has an ASIN of 'B08BHXG144'. Could you find that information for me?", "query_for_retrieval": "I'm considering purchasing a product from Amazon, and before I make a decision, I'd like to check its rating. The product has an ASIN of 'B08BHXG144'. Could you find that information for me?", "answer": "get_rating_by_amazon_ASIN", "answer_params": "", "api_description": "def get_rating_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the rating of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_rating_by_amazon_ASIN\", \"description\": \"Finds the rating of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "relevance", "query": "What is the mean of an experiment with 50 successful outcomes out of 500 trials, under the null hypothesis that the probability of success is 0.1?", "query_for_retrieval": "What is the mean of an experiment with 50 successful outcomes out of 500 trials, under the null hypothesis that the probability of success is 0.1?", "answer": "hypothesis_testing.get_p_value", "answer_params": "", "api_description": "def hypothesis_testing.get_p_value:\n\t\"\"\"\n\tDescription:\n\t\n\tPerforms a one-sample binomial test and returns the calculated p-value.\n\t\n\tArguments:\n\t---------\n\t- successes : integer = None (required) The number of successful outcomes observed in the experiment.\n\t- n : integer = None (required) The total number of trials conducted in the experiment.\n\t- prob_null : float = None (required) The hypothesized probability of success under the null hypothesis.\n\t- alternative : string = less (optional) Specifies the alternative hypothesis. 'less' means the true probability of success is less than prob_null, 'greater' means it is greater than prob_null, and 'two_sided' means it is different from prob_null.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hypothesis_testing.get_p_value\", \"description\": \"Performs a one-sample binomial test and returns the calculated p-value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"successes\": {\"type\": \"integer\", \"description\": \"The number of successful outcomes observed in the experiment.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The total number of trials conducted in the experiment.\"}, \"prob_null\": {\"type\": \"float\", \"description\": \"The hypothesized probability of success under the null hypothesis.\"}, \"alternative\": {\"type\": \"string\", \"enum\": [\"less\", \"greater\", \"two_sided\"], \"description\": \"Specifies the alternative hypothesis. 'less' means the true probability of success is less than prob_null, 'greater' means it is greater than prob_null, and 'two_sided' means it is different from prob_null.\", \"default\": \"less\"}}, \"required\": [\"successes\", \"n\", \"prob_null\"]}}"}
{"scope": "simple", "query": "What is the earliest reference of Jesus Christ in history from historical record?", "query_for_retrieval": "What is the earliest reference of Jesus Christ in history from historical record?", "answer": "get_earliest_reference", "answer_params": "", "api_description": "def get_earliest_reference:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the earliest historical reference of a person.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the person.\n\t- source : string = None (optional) Source to fetch the reference. Default is 'scriptures'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_earliest_reference\", \"description\": \"Retrieve the earliest historical reference of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the person.\"}, \"source\": {\"type\": \"string\", \"enum\": [\"scriptures\", \"historical records\"], \"description\": \"Source to fetch the reference. Default is 'scriptures'\"}}, \"required\": [\"name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few tasks? First, I would like to visualize a sine wave with a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. Secondly, I have a dataset `dataset` that I would like to train a Random Forest Model on. The dataset has 1000 rows and 20 columns, and I would like to set the number of trees in the forest to 200 and the maximum depth of the tree to 10. Thirdly, I am interested in the last match played by the soccer club 'Manchester United', and I would like to include match statistics like possession, shots on target etc. Lastly, I am curious about the dimensions of the 'Empire State Building', and I would like the dimensions in feet. Could you assist me with these?\"", "query_for_retrieval": "\"Could you help me with a few tasks? First, I would like to visualize a sine wave with a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. Secondly, I have a dataset `dataset` that I would like to train a Random Forest Model on. The dataset has 1000 rows and 20 columns, and I would like to set the number of trees in the forest to 200 and the maximum depth of the tree to 10. Thirdly, I am interested in the last match played by the soccer club 'Manchester United', and I would like to include match statistics like possession, shots on target etc. Lastly, I am curious about the dimensions of the 'Empire State Building', and I would like the dimensions in feet. Could you assist me with these?\"", "answer": "plot_sine_wave", "answer_params": "", "api_description": "def plot_sine_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tPlot a sine wave for a given frequency in a given range.\n\t\n\tArguments:\n\t---------\n\t- start_range : integer = None (required) Start of the range in radians.\n\t- end_range : integer = None (required) End of the range in radians.\n\t- frequency : integer = None (required) Frequency of the sine wave in Hz.\n\t- amplitude : integer = None (optional) Amplitude of the sine wave. Default is 1.\n\t- phase_shift : integer = None (optional) Phase shift of the sine wave in radians. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plot_sine_wave\", \"description\": \"Plot a sine wave for a given frequency in a given range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_range\": {\"type\": \"integer\", \"description\": \"Start of the range in radians.\"}, \"end_range\": {\"type\": \"integer\", \"description\": \"End of the range in radians.\"}, \"frequency\": {\"type\": \"integer\", \"description\": \"Frequency of the sine wave in Hz.\"}, \"amplitude\": {\"type\": \"integer\", \"description\": \"Amplitude of the sine wave. Default is 1.\"}, \"phase_shift\": {\"type\": \"integer\", \"description\": \"Phase shift of the sine wave in radians. Default is 0.\"}}, \"required\": [\"start_range\", \"end_range\", \"frequency\"]}}"}
{"scope": "multiple_function", "query": "Calculate the depreciated value of a property costing $200,000 with an annual depreciation rate of 3% for 5 years.", "query_for_retrieval": "Calculate the depreciated value of a property costing $200,000 with an annual depreciation rate of 3% for 5 years.", "answer": "finance.property_depreciation", "answer_params": "", "api_description": "def finance.property_depreciation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.\n\t\n\tArguments:\n\t---------\n\t- initial_cost : integer = None (required) The initial cost of the property.\n\t- depreciation_rate : integer = None (required) The annual depreciation rate in percentage.\n\t- years : integer = None (required) The number of years for which to calculate the depreciation.\n\t- monthly : boolean = False (optional) If set to true, it will calculate monthly depreciation instead of annually. (optional)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.property_depreciation\", \"description\": \"Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_cost\": {\"type\": \"integer\", \"description\": \"The initial cost of the property.\"}, \"depreciation_rate\": {\"type\": \"integer\", \"description\": \"The annual depreciation rate in percentage.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for which to calculate the depreciation.\"}, \"monthly\": {\"type\": \"boolean\", \"description\": \"If set to true, it will calculate monthly depreciation instead of annually. (optional)\", \"default\": false}}, \"required\": [\"initial_cost\", \"depreciation_rate\", \"years\"]}}"}
{"scope": "simple", "query": "Who invented the theory of relativity and in which year?", "query_for_retrieval": "Who invented the theory of relativity and in which year?", "answer": "science_history.get_invention", "answer_params": "", "api_description": "def science_history.get_invention:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the inventor and year of invention based on the invention's name.\n\t\n\tArguments:\n\t---------\n\t- invention_name : string = None (required) The name of the invention.\n\t- want_year : boolean = False (required) Return the year of invention if set to true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"science_history.get_invention\", \"description\": \"Retrieve the inventor and year of invention based on the invention's name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"invention_name\": {\"type\": \"string\", \"description\": \"The name of the invention.\"}, \"want_year\": {\"type\": \"boolean\", \"default\": false, \"description\": \"Return the year of invention if set to true.\"}}, \"required\": [\"invention_name\", \"want_year\"]}}"}
{"scope": "java", "query": "How can I append a substring of characters from a character array `textBuffer` starting at index 5 with a length of 10 characters to a text stream while handling XML serialization?", "query_for_retrieval": "How can I append a substring of characters from a character array `textBuffer` starting at index 5 with a length of 10 characters to a text stream while handling XML serialization?", "answer": "ToTextStream.characters", "answer_params": "", "api_description": "def ToTextStream.characters:\n\t\"\"\"\n\tDescription:\n\t\n\tWrites a range of characters from a character array to the text stream. It handles temporary and final output states differently, normalizing characters if necessary and tracing the event if a tracer is set.\n\t\n\tArguments:\n\t---------\n\t- ch : Array = None (required) The character array from which a range of characters will be written.\n\t- start : integer = None (required) The start index in the character array from which to begin writing characters.\n\t- length : integer = None (required) The number of characters to write from the character array.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ToTextStream.characters\", \"description\": \"Writes a range of characters from a character array to the text stream. It handles temporary and final output states differently, normalizing characters if necessary and tracing the event if a tracer is set.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ch\": {\"type\": \"Array\", \"description\": \"The character array from which a range of characters will be written.\", \"items\": {\"type\": \"char\"}}, \"start\": {\"type\": \"integer\", \"description\": \"The start index in the character array from which to begin writing characters.\"}, \"length\": {\"type\": \"integer\", \"description\": \"The number of characters to write from the character array.\"}}, \"required\": [\"ch\", \"start\", \"length\"]}}"}
{"scope": "parallel_function", "query": "\"In a game of chance, you have a 0.3 probability of winning any given round. If you play this game 20 times, what is the probability of winning exactly 5 times? Also, if you play the game 50 times, what is the probability of winning exactly 15 times? Lastly, if you play the game 100 times, what is the probability of winning exactly 30 times? Use the function 'prob_dist.binomial' to compute these probabilities.\"", "query_for_retrieval": "\"In a game of chance, you have a 0.3 probability of winning any given round. If you play this game 20 times, what is the probability of winning exactly 5 times? Also, if you play the game 50 times, what is the probability of winning exactly 15 times? Lastly, if you play the game 100 times, what is the probability of winning exactly 30 times? Use the function 'prob_dist.binomial' to compute these probabilities.\"", "answer": "prob_dist.binomial", "answer_params": "", "api_description": "def prob_dist.binomial:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the probability of having 'success' outcome from binomial distribution.\n\t\n\tArguments:\n\t---------\n\t- trials : integer = None (required) The number of independent experiments.\n\t- successes : integer = None (required) The number of success events.\n\t- p : float = None (optional) The probability of success on any given trial, defaults to 0.5\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prob_dist.binomial\", \"description\": \"Compute the probability of having 'success' outcome from binomial distribution.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"trials\": {\"type\": \"integer\", \"description\": \"The number of independent experiments.\"}, \"successes\": {\"type\": \"integer\", \"description\": \"The number of success events.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success on any given trial, defaults to 0.5\"}}, \"required\": [\"trials\", \"successes\"]}}"}
{"scope": "sql", "query": "Can you modify the 'employees' table in our database by changing the 'salary' column for the employee with the ID 'E123' to '5000'?", "query_for_retrieval": "Can you modify the 'employees' table in our database by changing the 'salary' column for the employee with the ID 'E123' to '5000'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I need to track down the physical location of an IP address for security reasons; the address is \"192.168.1.1\". Additionally, for a separate health report, I'm compiling, can you provide the latest total number of COVID-related deaths in Italy? Please give me the latitude and longitude for that IP and the death toll from Italy.", "query_for_retrieval": "I need to track down the physical location of an IP address for security reasons; the address is \"192.168.1.1\". Additionally, for a separate health report, I'm compiling, can you provide the latest total number of COVID-related deaths in Italy? Please give me the latitude and longitude for that IP and the death toll from Italy.", "answer": "get_coordinate_by_ip_address", "answer_params": "", "api_description": "def get_coordinate_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the latitude and longitude of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinate_by_ip_address\", \"description\": \"Finds the latitude and longitude of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "query_for_retrieval": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "answer": "calculate_fitness", "answer_params": "", "api_description": "def calculate_fitness:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.\n\t\n\tArguments:\n\t---------\n\t- trait_values : array = None (required) List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness.\n\t- trait_contributions : array = None (required) List of the percentage contributions of each trait to the overall fitness, which must sum to 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_fitness\", \"description\": \"Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"trait_values\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness.\"}, \"trait_contributions\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"List of the percentage contributions of each trait to the overall fitness, which must sum to 1.\"}}, \"required\": [\"trait_values\", \"trait_contributions\"]}}"}
{"scope": "java", "query": "How do I change the current schema to 'AnalyticsDB' in the Exasol execution context while monitoring the progress with a monitor object named 'progressMonitor'?", "query_for_retrieval": "How do I change the current schema to 'AnalyticsDB' in the Exasol execution context while monitoring the progress with a monitor object named 'progressMonitor'?", "answer": "ExasolExecutionContext.setCurrentSchema", "answer_params": "", "api_description": "def ExasolExecutionContext.setCurrentSchema:\n\t\"\"\"\n\tDescription:\n\t\n\tSets the current schema for the Exasol execution context to the specified schema name, and monitors the progress of this operation.\n\t\n\tArguments:\n\t---------\n\t- monitor : any = None (required) The progress monitor to track the execution of setting the current schema.\n\t- schemaName : String = None (required) The name of the schema to set as the current schema.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ExasolExecutionContext.setCurrentSchema\", \"description\": \"Sets the current schema for the Exasol execution context to the specified schema name, and monitors the progress of this operation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"monitor\": {\"type\": \"any\", \"description\": \"The progress monitor to track the execution of setting the current schema.\"}, \"schemaName\": {\"type\": \"String\", \"description\": \"The name of the schema to set as the current schema.\"}}, \"required\": [\"monitor\", \"schemaName\"]}}"}
{"scope": "relevance", "query": "Can you write a book?", "query_for_retrieval": "Can you write a book?", "answer": "cook_recipe.create", "answer_params": "", "api_description": "def cook_recipe.create:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a detailed recipe based on a list of ingredients and cooking instructions.\n\t\n\tArguments:\n\t---------\n\t- ingredients : array = None (required) A list of ingredients.\n\t- instructions : array = None (required) A list of step-by-step cooking instructions.\n\t- prep_time : float = None (optional) The preparation time in minutes, optional and default to 30.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cook_recipe.create\", \"description\": \"Creates a detailed recipe based on a list of ingredients and cooking instructions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of ingredients.\"}, \"instructions\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of step-by-step cooking instructions.\"}, \"prep_time\": {\"type\": \"float\", \"description\": \"The preparation time in minutes, optional and default to 30.\"}}, \"required\": [\"ingredients\", \"instructions\"]}}"}
{"scope": "simple", "query": "What are the names of proteins found in the plasma membrane?", "query_for_retrieval": "What are the names of proteins found in the plasma membrane?", "answer": "cellbio.get_proteins", "answer_params": "", "api_description": "def cellbio.get_proteins:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the list of proteins in a specific cell compartment.\n\t\n\tArguments:\n\t---------\n\t- cell_compartment : string = None (required) The specific cell compartment.\n\t- include_description : boolean = false (optional) Set true if you want a brief description of each protein.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cellbio.get_proteins\", \"description\": \"Get the list of proteins in a specific cell compartment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_compartment\": {\"type\": \"string\", \"description\": \"The specific cell compartment.\"}, \"include_description\": {\"type\": \"boolean\", \"description\": \"Set true if you want a brief description of each protein.\", \"default\": \"false\"}}, \"required\": [\"cell_compartment\"]}}"}
{"scope": "sql", "query": "What are the names and salaries of employees in the \"Employees\" table who have a salary greater than $5000?", "query_for_retrieval": "What are the names and salaries of employees in the \"Employees\" table who have a salary greater than $5000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm in the process of buying a new home and have been working out the financials. I've just secured a loan for $350,000 with a 3.5% interest rate, and the loan period is set for 30 years. Could you help me figure out what my monthly mortgage payment would be?\n\nOn a different note, my niece asked me for some help with her math homework, and I thought you might assist. She's learning about least common multiples and was tasked to find the LCM of 15 and 25. Could you provide that as well?\n\nAlso, she's working on factorials and got stuck on calculating 7!. It would be great if you could show us the result of that.\n\nLastly, I've been brushing up on my calculus and was trying to estimate the derivative of the function f(x) = 3x^2 + 2x - 1 at the point where x equals 5. I\u2019d appreciate it if you could help me with this calculation too.", "query_for_retrieval": "I'm in the process of buying a new home and have been working out the financials. I've just secured a loan for $350,000 with a 3.5% interest rate, and the loan period is set for 30 years. Could you help me figure out what my monthly mortgage payment would be?\n\nOn a different note, my niece asked me for some help with her math homework, and I thought you might assist. She's learning about least common multiples and was tasked to find the LCM of 15 and 25. Could you provide that as well?\n\nAlso, she's working on factorials and got stuck on calculating 7!. It would be great if you could show us the result of that.\n\nLastly, I've been brushing up on my calculus and was trying to estimate the derivative of the function f(x) = 3x^2 + 2x - 1 at the point where x equals 5. I\u2019d appreciate it if you could help me with this calculation too.", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "sql", "query": "Can you eliminate all entries from the 'customer_details' table where the 'credit_score' is less than 600 and the 'account_balance' is less than 1000?", "query_for_retrieval": "Can you eliminate all entries from the 'customer_details' table where the 'credit_score' is less than 600 and the 'account_balance' is less than 1000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "What would be the Python code to find the definitions of 'artwash' with my RapidAPI key 'YOUR-RAPID-API-KEY' and specific host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "query_for_retrieval": "What would be the Python code to find the definitions of 'artwash' with my RapidAPI key 'YOUR-RAPID-API-KEY' and specific host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://mashape-community-urban-dictionary.p.rapidapi.com/define (required) Urban Dictionary is the dictionary you write.\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - term : string = None (required) The search term or query parameter required by the API.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Urban Dictionary is the dictionary you write.\", \"default\": \"https://mashape-community-urban-dictionary.p.rapidapi.com/define\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The search term or query parameter required by the API.\"}}, \"type\": \"dict\", \"required\": [\"term\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "What will be the population growth in London over the next five years?", "query_for_retrieval": "What will be the population growth in London over the next five years?", "answer": "population_growth_estimate", "answer_params": "", "api_description": "def population_growth_estimate:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the future population growth of a specific location over a specified time period.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to estimate the population growth for.\n\t- years : integer = None (required) Number of years into the future for the estimate.\n\t- rate : float = None (optional) Expected annual growth rate in percentage. Default is 1.2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"population_growth_estimate\", \"description\": \"Estimate the future population growth of a specific location over a specified time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to estimate the population growth for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years into the future for the estimate.\"}, \"rate\": {\"type\": \"float\", \"description\": \"Expected annual growth rate in percentage. Default is 1.2.\"}}, \"required\": [\"location\", \"years\"]}}"}
{"scope": "simple", "query": "Calculate the factorial of 5 using math functions.", "query_for_retrieval": "Calculate the factorial of 5 using math functions.", "answer": "math.factorial", "answer_params": "", "api_description": "def math.factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the factorial of a given number.\n\t\n\tArguments:\n\t---------\n\t- number : integer = None (required) The number for which factorial needs to be calculated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.factorial\", \"description\": \"Calculate the factorial of a given number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number\": {\"type\": \"integer\", \"description\": \"The number for which factorial needs to be calculated.\"}}, \"required\": [\"number\"]}}"}
{"scope": "simple", "query": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "query_for_retrieval": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "answer": "walmart.purchase", "answer_params": "", "api_description": "def walmart.purchase:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information of items from Walmart including stock availability.\n\t\n\tArguments:\n\t---------\n\t- loc : string = None (required) Location of the nearest Walmart.\n\t- product_list : array = None (required) Items to be purchased listed in an array.\n\t- pack_size : array = None (optional) Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"walmart.purchase\", \"description\": \"Retrieve information of items from Walmart including stock availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loc\": {\"type\": \"string\", \"description\": \"Location of the nearest Walmart.\"}, \"product_list\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Items to be purchased listed in an array.\"}, \"pack_size\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified.\"}}, \"required\": [\"loc\", \"product_list\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my trip to New York? I would like to visit a modern art installation, a park with a playground and a picnic area, and a popular monument. Could you find these for me?\"", "query_for_retrieval": "\"Can you help me plan my trip to New York? I would like to visit a modern art installation, a park with a playground and a picnic area, and a popular monument. Could you find these for me?\"", "answer": "artwork_search.find", "answer_params": "", "api_description": "def artwork_search.find:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for artworks based on type and location.\n\t\n\tArguments:\n\t---------\n\t- type : string = None (required) Type of the artwork. E.g., painting, sculpture, installation.\n\t- location : string = None (required) Location or city where the artwork is.\n\t- era : string = None (optional) Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default is 'contemporary' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"artwork_search.find\", \"description\": \"Search for artworks based on type and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"Type of the artwork. E.g., painting, sculpture, installation.\"}, \"location\": {\"type\": \"string\", \"description\": \"Location or city where the artwork is.\"}, \"era\": {\"type\": \"string\", \"description\": \"Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default is 'contemporary' if not specified.\", \"optional\": \"True\"}}, \"required\": [\"type\", \"location\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on this interesting project where I need to analyze and compare the movements of two different objects. To get started, I need to calculate their final velocities. The first object has an initial velocity of 10 m/s, it's been accelerating at 2 m/s\u00b2, and it has been moving for 5 seconds. The second object started at 15 m/s, with an acceleration of 1.5 m/s\u00b2, over a period of 7 seconds. Once I have their final velocities, I want to compare the movements by finding the cosine similarity between the vectors representing velocity, accerlation, and time.\n\nOn a different note, I also need to sort out my personal finances. I have a $200,000 mortgage at a 5% interest rate, to be paid off over 30 years, and I need to work out what my monthly payments will be. Could you help me with these calculations?", "query_for_retrieval": "I'm working on this interesting project where I need to analyze and compare the movements of two different objects. To get started, I need to calculate their final velocities. The first object has an initial velocity of 10 m/s, it's been accelerating at 2 m/s\u00b2, and it has been moving for 5 seconds. The second object started at 15 m/s, with an acceleration of 1.5 m/s\u00b2, over a period of 7 seconds. Once I have their final velocities, I want to compare the movements by finding the cosine similarity between the vectors representing velocity, accerlation, and time.\n\nOn a different note, I also need to sort out my personal finances. I have a $200,000 mortgage at a 5% interest rate, to be paid off over 30 years, and I need to work out what my monthly payments will be. Could you help me with these calculations?", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "multiple_function", "query": "What's the area of a circle with a radius of 10?", "query_for_retrieval": "What's the area of a circle with a radius of 10?", "answer": "geometry.area_circle", "answer_params": "", "api_description": "def geometry.area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- units : string = meters (optional) The units in which the radius is measured (defaults to meters).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_circle\", \"description\": \"Calculate the area of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"The units in which the radius is measured (defaults to meters).\", \"default\": \"meters\"}}, \"required\": [\"radius\"]}}"}
{"scope": "java", "query": "How can I execute the test runner `runThis` with arguments to set the wait time to 2 minutes and output the logs to a specific print stream `testLogStream`, considering the debuggee name is 'TestDebuggee'?", "query_for_retrieval": "How can I execute the test runner `runThis` with arguments to set the wait time to 2 minutes and output the logs to a specific print stream `testLogStream`, considering the debuggee name is 'TestDebuggee'?", "answer": "runThis", "answer_params": "", "api_description": "def runThis:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes the test runner with provided arguments and a print stream for logging. It handles the debuggee binding, output redirection, and test execution flow.\n\t\n\tArguments:\n\t---------\n\t- argv : Array = None (required) An array of strings representing the command-line arguments, to include waittime and debuggeeName. Format: -waitTime, <waitTime>, -debuggeeName, TestDebuggee\n\t- out : any = None (required) The PrintStream to output the logs to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"runThis\", \"description\": \"Executes the test runner with provided arguments and a print stream for logging. It handles the debuggee binding, output redirection, and test execution flow.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"argv\": {\"type\": \"Array\", \"description\": \"An array of strings representing the command-line arguments, to include waittime and debuggeeName. Format: -waitTime, <waitTime>, -debuggeeName, TestDebuggee\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream to output the logs to.\"}}, \"required\": [\"argv\", \"out\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm planning an international conference and need to consider public holidays when scheduling. Could you retrieve the list of holidays for the United States in 2018? I also need the same information for Germany in 2020, Spain in 2019, and the United Kingdom in 2021. It's crucial these dates are accurate to avoid any clashes with national holidays.", "query_for_retrieval": "I'm planning an international conference and need to consider public holidays when scheduling. Could you retrieve the list of holidays for the United States in 2018? I also need the same information for Germany in 2020, Spain in 2019, and the United Kingdom in 2021. It's crucial these dates are accurate to avoid any clashes with national holidays.", "answer": "retrieve_holiday_by_year", "answer_params": "", "api_description": "def retrieve_holiday_by_year:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the holidays of a year.\n\t\n\tArguments:\n\t---------\n\t- year : string = None (required) The year of the holidays.\n\t- country : string = None (required) The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_holiday_by_year\", \"description\": \"Finds the holidays of a year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"year\": {\"type\": \"string\", \"description\": \"The year of the holidays.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA.\"}}, \"required\": [\"year\", \"country\"]}}"}
{"scope": "javascript", "query": "How can I configure a ShaderMaterial for a Three.js scene with specific properties 'materialProps', using textures 'textureList', and within the 3D object 'meshObject'?", "query_for_retrieval": "How can I configure a ShaderMaterial for a Three.js scene with specific properties 'materialProps', using textures 'textureList', and within the 3D object 'meshObject'?", "answer": "configureShaderMaterial", "answer_params": "", "api_description": "def configureShaderMaterial:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function configures a ShaderMaterial for a Three.js scene, applying custom shaders, textures, and properties based on the provided data, texture list, and 3D object.\n\t\n\tArguments:\n\t---------\n\t- property : dict = None (required) The properties specific to the ShaderMaterial being configured.\n\t- textures : array = None (required) A list of textures to be used in the ShaderMaterial.\n\t- object3D : any = None (required) The 3D object within which the ShaderMaterial is being applied.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"configureShaderMaterial\", \"description\": \"This function configures a ShaderMaterial for a Three.js scene, applying custom shaders, textures, and properties based on the provided data, texture list, and 3D object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"property\": {\"type\": \"dict\", \"description\": \"The properties specific to the ShaderMaterial being configured.\"}, \"textures\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"A list of textures to be used in the ShaderMaterial.\"}, \"object3D\": {\"type\": \"any\", \"description\": \"The 3D object within which the ShaderMaterial is being applied.\"}}, \"required\": [\"property\", \"textures\", \"object3D\"]}}"}
{"scope": "relevance", "query": "What are some popular books by J.K. Rowling?", "query_for_retrieval": "What are some popular books by J.K. Rowling?", "answer": "get_recent_tweets", "answer_params": "", "api_description": "def get_recent_tweets:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the most recent tweets from a specific user.\n\t\n\tArguments:\n\t---------\n\t- username : string = None (required) The Twitter handle of the user.\n\t- count : integer = None (required) The number of recent tweets to retrieve.\n\t- exclude_replies : boolean = None (optional) Whether to exclude replies. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_recent_tweets\", \"description\": \"Retrieve the most recent tweets from a specific user.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"username\": {\"type\": \"string\", \"description\": \"The Twitter handle of the user.\"}, \"count\": {\"type\": \"integer\", \"description\": \"The number of recent tweets to retrieve.\"}, \"exclude_replies\": {\"type\": \"boolean\", \"description\": \"Whether to exclude replies. Default is false.\"}}, \"required\": [\"username\", \"count\"]}}"}
{"scope": "javascript", "query": "How do I compute the updated coordinates for a set of vertices (10, 15) and (20, 25) after rotating them around a pivot point (12, 17) by 30 degrees?", "query_for_retrieval": "How do I compute the updated coordinates for a set of vertices (10, 15) and (20, 25) after rotating them around a pivot point (12, 17) by 30 degrees?", "answer": "rotateVertices", "answer_params": "", "api_description": "def rotateVertices:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function computes the updated coordinates of a set of vertices after rotating them around a pivot point by a given angle.\n\t\n\tArguments:\n\t---------\n\t- vertices : array = None (required) An array of vertices to rotate, where each vertex is in the format [x, y].\n\t- pivot : array = None (required) The pivot point around which the vertices are to be rotated, in the format [x, y].\n\t- angle : float = None (required) The rotation angle in degrees.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"rotateVertices\", \"description\": \"This function computes the updated coordinates of a set of vertices after rotating them around a pivot point by a given angle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vertices\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"An array of vertices to rotate, where each vertex is in the format [x, y].\"}, \"pivot\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The pivot point around which the vertices are to be rotated, in the format [x, y].\"}, \"angle\": {\"type\": \"float\", \"description\": \"The rotation angle in degrees.\"}}, \"required\": [\"vertices\", \"pivot\", \"angle\"]}}"}
{"scope": "relevance", "query": "How many sides does a hexagon have?", "query_for_retrieval": "How many sides does a hexagon have?", "answer": "calculate_boiling_point", "answer_params": "", "api_description": "def calculate_boiling_point:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the boiling point of a given substance at a given pressure.\n\t\n\tArguments:\n\t---------\n\t- substance : string = None (required) The chemical name of the substance.\n\t- pressure : float = None (required) The external pressure. Default is 1 atm (atmospheric pressure).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_boiling_point\", \"description\": \"Calculate the boiling point of a given substance at a given pressure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"substance\": {\"type\": \"string\", \"description\": \"The chemical name of the substance.\"}, \"pressure\": {\"type\": \"float\", \"description\": \"The external pressure. Default is 1 atm (atmospheric pressure).\"}}, \"required\": [\"substance\", \"pressure\"]}}"}
{"scope": "rest", "query": "In the context of developing an application to track COVID-19 trends, I require to obtain statistics for France, including case numbers and vaccination rates. Considering my API key 'YOUR-RAPID-API-KEY' and host 'covid-193.p.rapidapi.com', how can I perform this request ensuring it times out after 25 seconds if the server doesn't respond? Additionally, is there a way to filter the data by specific dates or is it aggregated?", "query_for_retrieval": "In the context of developing an application to track COVID-19 trends, I require to obtain statistics for France, including case numbers and vaccination rates. Considering my API key 'YOUR-RAPID-API-KEY' and host 'covid-193.p.rapidapi.com', how can I perform this request ensuring it times out after 25 seconds if the server doesn't respond? Additionally, is there a way to filter the data by specific dates or is it aggregated?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a physics simulation and I have a micro-particle here charged at 7.8 coulombs. It's placed in an electromagnetic field with a voltage of 15.2 volts. Can you calculate the electrostatic potential energy for this particle in the given field?", "query_for_retrieval": "I'm working on a physics simulation and I have a micro-particle here charged at 7.8 coulombs. It's placed in an electromagnetic field with a voltage of 15.2 volts. Can you calculate the electrostatic potential energy for this particle in the given field?", "answer": "calculate_electrostatic_potential_energy", "answer_params": "", "api_description": "def calculate_electrostatic_potential_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the electrostatic potential energy.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge of the object, in coulombs.\n\t- voltage : float = None (required) The voltage of the object, in volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential_energy\", \"description\": \"Calculates the electrostatic potential energy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge of the object, in coulombs.\"}, \"voltage\": {\"type\": \"float\", \"description\": \"The voltage of the object, in volts.\"}}, \"required\": [\"charge\", \"voltage\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a product review article and there's a particular item on Amazon I'm focusing on. Its ASIN is 'B08BHXG144'. I need to include the current price in my article, so could you help me find out what it's selling for?", "query_for_retrieval": "I'm working on a product review article and there's a particular item on Amazon I'm focusing on. Its ASIN is 'B08BHXG144'. I need to include the current price in my article, so could you help me find out what it's selling for?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "parallel_function", "query": "Please calculate the amount of alimony the payor spouse would have to pay to the recipient spouse in California for the next 10 years and 20 years if the payor spouse's monthly gross income is $10,000 and the recipient spouse's monthly gross income is $3,000.", "query_for_retrieval": "Please calculate the amount of alimony the payor spouse would have to pay to the recipient spouse in California for the next 10 years and 20 years if the payor spouse's monthly gross income is $10,000 and the recipient spouse's monthly gross income is $3,000.", "answer": "alimony_calculator.ca.calculate", "answer_params": "", "api_description": "def alimony_calculator.ca.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.\n\t\n\tArguments:\n\t---------\n\t- payor_income : integer = None (required) The monthly gross income of the payor spouse.\n\t- recipient_income : integer = None (required) The monthly gross income of the recipient spouse.\n\t- duration : integer = None (required) The duration of the alimony in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"alimony_calculator.ca.calculate\", \"description\": \"Calculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"payor_income\": {\"type\": \"integer\", \"description\": \"The monthly gross income of the payor spouse.\"}, \"recipient_income\": {\"type\": \"integer\", \"description\": \"The monthly gross income of the recipient spouse.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of the alimony in years.\"}}, \"required\": [\"payor_income\", \"recipient_income\", \"duration\"]}}"}
{"scope": "relevance", "query": "Find me a documentary about global warming.", "query_for_retrieval": "Find me a documentary about global warming.", "answer": "retrieve_scientific_paper", "answer_params": "", "api_description": "def retrieve_scientific_paper:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the details of scientific research paper based on its topic.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) Topic of the research paper\n\t- year : string = None (required) Year of publishing of the research paper. If not specified, fetches the most recent paper\n\t- author : string = None (optional) Author of the research paper. If not specified, fetches the paper with most citations\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_scientific_paper\", \"description\": \"Fetches the details of scientific research paper based on its topic.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"Topic of the research paper\"}, \"year\": {\"type\": \"string\", \"description\": \"Year of publishing of the research paper. If not specified, fetches the most recent paper\"}, \"author\": {\"type\": \"string\", \"description\": \"Author of the research paper. If not specified, fetches the paper with most citations\", \"default\": \"None\"}}, \"required\": [\"topic\", \"year\"]}}"}
{"scope": "parallel_function", "query": "Calculate the resistance of a wire with a length of 5m and cross sectional area 0.01m\u00b2 with resistivity of copper and aluminum", "query_for_retrieval": "Calculate the resistance of a wire with a length of 5m and cross sectional area 0.01m\u00b2 with resistivity of copper and aluminum", "answer": "calculate_resistance", "answer_params": "", "api_description": "def calculate_resistance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the resistance of a wire using resistivity, length, and cross-sectional area.\n\t\n\tArguments:\n\t---------\n\t- length : integer = None (required) The length of the wire in meters.\n\t- area : float = None (required) The cross-sectional area of the wire in square meters.\n\t- resistivity : string = None (optional) Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_resistance\", \"description\": \"Calculate the resistance of a wire using resistivity, length, and cross-sectional area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"length\": {\"type\": \"integer\", \"description\": \"The length of the wire in meters.\"}, \"area\": {\"type\": \"float\", \"description\": \"The cross-sectional area of the wire in square meters.\"}, \"resistivity\": {\"type\": \"string\", \"description\": \"Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'\"}}, \"required\": [\"length\", \"area\"]}}"}
{"scope": "executable_simple", "query": "I was having a debate with a friend about iconic movies, and naturally, 'Pulp Fiction' came up. We started discussing the unique directorial style that really defined the film, but embarrassingly, I blanked on the director's name. Could you please find out who directed 'Pulp Fiction'?", "query_for_retrieval": "I was having a debate with a friend about iconic movies, and naturally, 'Pulp Fiction' came up. We started discussing the unique directorial style that really defined the film, but embarrassingly, I blanked on the director's name. Could you please find out who directed 'Pulp Fiction'?", "answer": "get_movie_director", "answer_params": "", "api_description": "def get_movie_director:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the director of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_director\", \"description\": \"Fetches the director of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "sql", "query": "In a database, there is a table named \"Students\" with columns \"ID\", \"Name\", \"Age\", and \"Grade\". You need to add a new student's information into this table. The student's ID is \"S101\", name is \"John Doe\", age is \"16\", and grade is \"10\". How would you add this information into the \"Students\" table?", "query_for_retrieval": "In a database, there is a table named \"Students\" with columns \"ID\", \"Name\", \"Age\", and \"Grade\". You need to add a new student's information into this table. The student's ID is \"S101\", name is \"John Doe\", age is \"16\", and grade is \"10\". How would you add this information into the \"Students\" table?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "query_for_retrieval": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "answer": "plot_sine_wave", "answer_params": "", "api_description": "def plot_sine_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tPlot a sine wave for a given frequency in a given range.\n\t\n\tArguments:\n\t---------\n\t- start_range : float = None (required) Start of the range in radians. Four decimal places.\n\t- end_range : float = None (required) End of the range in radians. Four decimal places.\n\t- frequency : integer = None (required) Frequency of the sine wave in Hz.\n\t- amplitude : integer = None (optional) Amplitude of the sine wave. Default is 1.\n\t- phase_shift : integer = None (optional) Phase shift of the sine wave in radians. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plot_sine_wave\", \"description\": \"Plot a sine wave for a given frequency in a given range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_range\": {\"type\": \"float\", \"description\": \"Start of the range in radians. Four decimal places.\"}, \"end_range\": {\"type\": \"float\", \"description\": \"End of the range in radians. Four decimal places.\"}, \"frequency\": {\"type\": \"integer\", \"description\": \"Frequency of the sine wave in Hz.\"}, \"amplitude\": {\"type\": \"integer\", \"description\": \"Amplitude of the sine wave. Default is 1.\"}, \"phase_shift\": {\"type\": \"integer\", \"description\": \"Phase shift of the sine wave in radians. Default is 0.\"}}, \"required\": [\"start_range\", \"end_range\", \"frequency\"]}}"}
{"scope": "parallel_multiple_function", "query": "Calculate the magnetic field produced by a wire carrying a current of 4 amps with a distance of 2 m from the wire. And find the voltage difference of a region in the direction of the electric field that is 3 m apart, assuming the electric field is 5 N/C.", "query_for_retrieval": "Calculate the magnetic field produced by a wire carrying a current of 4 amps with a distance of 2 m from the wire. And find the voltage difference of a region in the direction of the electric field that is 3 m apart, assuming the electric field is 5 N/C.", "answer": "calculate_voltage_difference", "answer_params": "", "api_description": "def calculate_voltage_difference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the voltage difference between two points in an electric field.\n\t\n\tArguments:\n\t---------\n\t- electric_field : float = None (required) The electric field in newtons per coulomb.\n\t- distance : float = None (required) The distance between the two points in the direction of the field in meters.\n\t- charge : float = 0 (optional) The charge of the test particle, typically an electron, in coulombs. Default to 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_voltage_difference\", \"description\": \"Calculate the voltage difference between two points in an electric field.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"electric_field\": {\"type\": \"float\", \"description\": \"The electric field in newtons per coulomb.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance between the two points in the direction of the field in meters.\"}, \"charge\": {\"type\": \"float\", \"description\": \"The charge of the test particle, typically an electron, in coulombs. Default to 0\", \"default\": 0}}, \"required\": [\"electric_field\", \"distance\"]}}"}
{"scope": "executable_simple", "query": "During our advanced physics experiment, we've been tracking this unique object which initially was moving at 15 m/s. It's been accelerating at a rate of 9.8 m/s\u00b2, and this has been going on for exactly 10 seconds. I need to calculate the total displacement of the object over this period. Can you help me with that?", "query_for_retrieval": "During our advanced physics experiment, we've been tracking this unique object which initially was moving at 15 m/s. It's been accelerating at a rate of 9.8 m/s\u00b2, and this has been going on for exactly 10 seconds. I need to calculate the total displacement of the object over this period. Can you help me with that?", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object, in meters per second.\n\t- acceleration : float = None (required) The acceleration of the object, in meters per second squared.\n\t- time : float = None (required) The time the object has been moving, in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object, in meters per second.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object, in meters per second squared.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time the object has been moving, in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan my week? I'm interested in attending a jazz event in San Francisco, CA within the next 5 days. Also, I heard about a lawsuit involving Apple Inc. that was filed in California after January 1, 2020, can you find the status of that for me? Lastly, I need to do some shopping at Walmart, can you tell me the total price for 2 bottles of olive oil, 3 bags of rice, and 4 cans of beans at the Walmart in San Jose, CA?\"", "query_for_retrieval": "\"Can you help me plan my week? I'm interested in attending a jazz event in San Francisco, CA within the next 5 days. Also, I heard about a lawsuit involving Apple Inc. that was filed in California after January 1, 2020, can you find the status of that for me? Lastly, I need to do some shopping at Walmart, can you tell me the total price for 2 bottles of olive oil, 3 bags of rice, and 4 cans of beans at the Walmart in San Jose, CA?\"", "answer": "event_finder.find_upcoming", "answer_params": "", "api_description": "def event_finder.find_upcoming:\n\t\"\"\"\n\tDescription:\n\t\n\tFind upcoming events of a specific genre in a given location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state where the search will take place, e.g. New York, NY.\n\t- genre : string = None (required) The genre of events.\n\t- days_ahead : integer = 7 (optional) The number of days from now to include in the search.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"event_finder.find_upcoming\", \"description\": \"Find upcoming events of a specific genre in a given location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state where the search will take place, e.g. New York, NY.\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of events.\"}, \"days_ahead\": {\"type\": \"integer\", \"description\": \"The number of days from now to include in the search.\", \"default\": 7}}, \"required\": [\"location\", \"genre\"]}}"}
{"scope": "simple", "query": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.", "query_for_retrieval": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.", "answer": "recipe_finder.find", "answer_params": "", "api_description": "def recipe_finder.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a recipe based on dietary preferences, number of servings, and preparation time.\n\t\n\tArguments:\n\t---------\n\t- servings : integer = None (required) The number of people that the recipe should serve.\n\t- diet : string = None (required) Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc.\n\t- prep_time : integer = None (optional) The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_finder.find\", \"description\": \"Find a recipe based on dietary preferences, number of servings, and preparation time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"servings\": {\"type\": \"integer\", \"description\": \"The number of people that the recipe should serve.\"}, \"diet\": {\"type\": \"string\", \"description\": \"Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc.\"}, \"prep_time\": {\"type\": \"integer\", \"description\": \"The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes.\"}}, \"required\": [\"servings\", \"diet\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Given the list of words ['apple', 'banana', 'cherry', 'date', 'elderberry'], can you first use the 'sort_list' function to sort this list in descending order? Then, using the 'filter_list' function, can you filter out the fruits that start with the letter 'b'? After that, consider the list of numbers [5, 10, 15, 20, 25]. Can you use the 'sum_elements' function to find the total sum of these numbers? Finally, use the 'sort_list' function again to sort the numbers [35, 10, 25, 5, 15] in ascending order?\"", "query_for_retrieval": "\"Given the list of words ['apple', 'banana', 'cherry', 'date', 'elderberry'], can you first use the 'sort_list' function to sort this list in descending order? Then, using the 'filter_list' function, can you filter out the fruits that start with the letter 'b'? After that, consider the list of numbers [5, 10, 15, 20, 25]. Can you use the 'sum_elements' function to find the total sum of these numbers? Finally, use the 'sort_list' function again to sort the numbers [35, 10, 25, 5, 15] in ascending order?\"", "answer": "sort_list", "answer_params": "", "api_description": "def sort_list:\n\t\"\"\"\n\tDescription:\n\t\n\tSort the elements of a list in ascending or descending order\n\t\n\tArguments:\n\t---------\n\t- elements : array = None (required) The list of elements to sort.\n\t- order : string = asc (optional) The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sort_list\", \"description\": \"Sort the elements of a list in ascending or descending order\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"elements\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The list of elements to sort.\"}, \"order\": {\"type\": \"string\", \"description\": \"The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.\", \"default\": \"asc\"}}, \"required\": [\"elements\"]}}"}
{"scope": "multiple_function", "query": "Calculate the final speed of an object dropped from 100 m without air resistance.", "query_for_retrieval": "Calculate the final speed of an object dropped from 100 m without air resistance.", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "java", "query": "How can I execute the `runIt` method to test if a class has been correctly instrumented, using the command-line arguments `['/path/to/classes', '60']` and a `PrintStream` object `logStream`, assuming the original class value is `12345L` and the new expected value after instrumentation is `54321L`?", "query_for_retrieval": "How can I execute the `runIt` method to test if a class has been correctly instrumented, using the command-line arguments `['/path/to/classes', '60']` and a `PrintStream` object `logStream`, assuming the original class value is `12345L` and the new expected value after instrumentation is `54321L`?", "answer": "classfloadhk005.runIt", "answer_params": "", "api_description": "def classfloadhk005.runIt:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes the test to check if a class has been correctly instrumented by loading the class and invoking a method to verify the expected value change.\n\t\n\tArguments:\n\t---------\n\t- argv : Array = None (required) An array of command-line arguments to configure the test.\n\t- out : any = None (required) The PrintStream object used for logging output during the test.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"classfloadhk005.runIt\", \"description\": \"Executes the test to check if a class has been correctly instrumented by loading the class and invoking a method to verify the expected value change.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"argv\": {\"type\": \"Array\", \"description\": \"An array of command-line arguments to configure the test.\", \"items\": {\"type\": \"String\"}}, \"out\": {\"type\": \"any\", \"description\": \"The PrintStream object used for logging output during the test.\"}}, \"required\": [\"argv\", \"out\"]}}"}
{"scope": "simple", "query": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "query_for_retrieval": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "answer": "update_user_info", "answer_params": "", "api_description": "def update_user_info:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdate user information in the database.\n\t\n\tArguments:\n\t---------\n\t- user_id : integer = None (required) The user ID of the customer.\n\t- update_info : dict = None (required) The new information to update.\n\t  - name : string = None (optional) The customer's updated name.\n\t  - email : string = None (optional) The customer's updated email.\n\t- database : string = CustomerInfo (optional) The database where the user's information is stored.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"update_user_info\", \"description\": \"Update user information in the database.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"integer\", \"description\": \"The user ID of the customer.\"}, \"update_info\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The customer's updated name.\"}, \"email\": {\"type\": \"string\", \"description\": \"The customer's updated email.\"}}, \"description\": \"The new information to update.\"}, \"database\": {\"type\": \"string\", \"description\": \"The database where the user's information is stored.\", \"default\": \"CustomerInfo\"}}, \"required\": [\"user_id\", \"update_info\"]}}"}
{"scope": "java", "query": "How can I execute a generic operation on an inlined object with the argument 'HelloWorld' using a specialized node `InlinableNodeInstance`, considering that the operation is bound to a specific node library `NodeLibraryInstance`, using receiver `ExportInlinedObject1Instance`?", "query_for_retrieval": "How can I execute a generic operation on an inlined object with the argument 'HelloWorld' using a specialized node `InlinableNodeInstance`, considering that the operation is bound to a specific node library `NodeLibraryInstance`, using receiver `ExportInlinedObject1Instance`?", "answer": "ExportNodeTest.doGeneric", "answer_params": "", "api_description": "def ExportNodeTest.doGeneric:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a generic operation on the given receiver object with the provided argument, using a specialized inlinable node and bound to a node library.\n\t\n\tArguments:\n\t---------\n\t- receiver : any = None (required) The receiver object on which the operation is performed.\n\t- argument : String = None (required) The argument to pass to the node's execute method.\n\t- node : any = None (required) The specialized inlinable node used for execution.\n\t- library : any = None (required) The node library to which this operation is bound.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ExportNodeTest.doGeneric\", \"description\": \"Executes a generic operation on the given receiver object with the provided argument, using a specialized inlinable node and bound to a node library.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"receiver\": {\"type\": \"any\", \"description\": \"The receiver object on which the operation is performed.\"}, \"argument\": {\"type\": \"String\", \"description\": \"The argument to pass to the node's execute method.\"}, \"node\": {\"type\": \"any\", \"description\": \"The specialized inlinable node used for execution.\"}, \"library\": {\"type\": \"any\", \"description\": \"The node library to which this operation is bound.\"}}, \"required\": [\"receiver\", \"argument\", \"node\", \"library\"]}}"}
{"scope": "multiple_function", "query": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "query_for_retrieval": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "answer": "geometry.area_circle", "answer_params": "", "api_description": "def geometry.area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) The radius of the circle.\n\t- units : string = meters (optional) The units in which the radius is measured (defaults to meters).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_circle\", \"description\": \"Calculate the area of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"The units in which the radius is measured (defaults to meters).\", \"default\": \"meters\"}}, \"required\": [\"radius\"]}}"}
{"scope": "simple", "query": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided.", "query_for_retrieval": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided.", "answer": "map_routing.fastest_route", "answer_params": "", "api_description": "def map_routing.fastest_route:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the fastest route from one location to another, with an option to avoid toll roads.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the journey.\n\t- end_location : string = None (required) The destination for the journey.\n\t- avoid_tolls : boolean = None (optional) Option to avoid toll roads during the journey. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_routing.fastest_route\", \"description\": \"Finds the fastest route from one location to another, with an option to avoid toll roads.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the journey.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination for the journey.\"}, \"avoid_tolls\": {\"type\": \"boolean\", \"description\": \"Option to avoid toll roads during the journey. Default is false.\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "relevance", "query": "What's the current traffic condition in New York?", "query_for_retrieval": "What's the current traffic condition in New York?", "answer": "geocode_address", "answer_params": "", "api_description": "def geocode_address:\n\t\"\"\"\n\tDescription:\n\t\n\tTransforms a description of a location (like a pair of coordinates, an address, or a name of a place) to a location on the Earth's surface.\n\t\n\tArguments:\n\t---------\n\t- address : string = None (required) The address that needs to be geocoded.\n\t- locale : string = None (optional) Preferred locale for the returned address information. (Optional) Default: None\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geocode_address\", \"description\": \"Transforms a description of a location (like a pair of coordinates, an address, or a name of a place) to a location on the Earth's surface.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"address\": {\"type\": \"string\", \"description\": \"The address that needs to be geocoded.\"}, \"locale\": {\"type\": \"string\", \"description\": \"Preferred locale for the returned address information. (Optional) Default: None\"}}, \"required\": [\"address\"]}}"}
{"scope": "sql", "query": "Can you provide me with the data from the columns 'name', 'age', and 'salary' in the 'employees' table where the 'age' is greater than 30?", "query_for_retrieval": "Can you provide me with the data from the columns 'name', 'age', and 'salary' in the 'employees' table where the 'age' is greater than 30?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_function", "query": "What is the current temperature and humidity in New York, Los Angeles, London and Tokyo, if I want to include both temperature and humidity in the results?", "query_for_retrieval": "What is the current temperature and humidity in New York, Los Angeles, London and Tokyo, if I want to include both temperature and humidity in the results?", "answer": "get_current_weather", "answer_params": "", "api_description": "def get_current_weather:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current temperature and humidity for a specific location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location to get the weather for.\n\t- include_temperature : boolean = None (optional) Whether to include the temperature in the result. Default is true.\n\t- include_humidity : boolean = None (optional) Whether to include the humidity in the result. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current temperature and humidity for a specific location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location to get the weather for.\"}, \"include_temperature\": {\"type\": \"boolean\", \"description\": \"Whether to include the temperature in the result. Default is true.\"}, \"include_humidity\": {\"type\": \"boolean\", \"description\": \"Whether to include the humidity in the result. Default is true.\"}}, \"required\": [\"location\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me about the monarchs of France during the 17th century, major wars that took place in England during the 18th century, and the prominent art movements in Italy during the 19th century?\"", "query_for_retrieval": "\"Can you tell me about the monarchs of France during the 17th century, major wars that took place in England during the 18th century, and the prominent art movements in Italy during the 19th century?\"", "answer": "european_history.get_events", "answer_params": "", "api_description": "def european_history.get_events:\n\t\"\"\"\n\tDescription:\n\t\n\tProvides a list of major historical events based on the specified country and century.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) Country name.\n\t- century : integer = None (required) Century as an integer. For example, for the 1700s, input '18'.\n\t- event_type : string = None (optional) Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default to 'war'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"european_history.get_events\", \"description\": \"Provides a list of major historical events based on the specified country and century.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Country name.\"}, \"century\": {\"type\": \"integer\", \"description\": \"Century as an integer. For example, for the 1700s, input '18'.\"}, \"event_type\": {\"type\": \"string\", \"description\": \"Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default to 'war'.\"}}, \"required\": [\"country\", \"century\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find hotels in Paris, France and New York, USA with at least 4 stars rating. Also I prefer hotels with amenities like free WiFi, breakfast included, and gym facility", "query_for_retrieval": "Find hotels in Paris, France and New York, USA with at least 4 stars rating. Also I prefer hotels with amenities like free WiFi, breakfast included, and gym facility", "answer": "hotel.find", "answer_params": "", "api_description": "def hotel.find:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for hotels given the location, minimum stars and specific amenities.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to find the hotel\n\t- stars : integer = None (required) Minimum number of stars the hotel should have. Default 1\n\t- amenities : array = None (optional) List of preferred amenities in hotel. Default to empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel.find\", \"description\": \"Search for hotels given the location, minimum stars and specific amenities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to find the hotel\"}, \"stars\": {\"type\": \"integer\", \"description\": \"Minimum number of stars the hotel should have. Default 1\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"Preferred amenities in hotel. Here are a list of possible option : 'Free WiFi', 'Breakfast Included', 'Gym', 'Free Parking'\", \"enum\": [\"Free WiFi\", \"Breakfast Included\", \"Gym\", \"Free Parking\"]}, \"description\": \"List of preferred amenities in hotel. Default to empty array\"}}, \"required\": [\"location\", \"stars\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a report about a basketball player's average performance throughout the season. The data I have includes the points they scored in each game: 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160. To complete my analysis, I need to calculate the mean score per game. Can you help me with that?", "query_for_retrieval": "I'm working on a report about a basketball player's average performance throughout the season. The data I have includes the points they scored in each game: 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160. To complete my analysis, I need to calculate the mean score per game. Can you help me with that?", "answer": "calculate_mean", "answer_params": "", "api_description": "def calculate_mean:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the mean of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mean\", \"description\": \"Calculates the mean of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "relevance", "query": "What is the current time in Sydney, Australia?", "query_for_retrieval": "What is the current time in Sydney, Australia?", "answer": "get_local_time", "answer_params": "", "api_description": "def get_local_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the local time for a specific city.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city to get the local time for.\n\t- format : string = 12 (optional) The format of the time to be retrieved, either 12 hours or 24 hours.\n\t- timezone : string = None (optional) The timezone of the location. If left blank, the function will default to the city's local timezone.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_local_time\", \"description\": \"Retrieve the local time for a specific city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city to get the local time for.\"}, \"format\": {\"type\": \"string\", \"description\": \"The format of the time to be retrieved, either 12 hours or 24 hours.\", \"enum\": [\"12\", \"24\"], \"default\": \"12\"}, \"timezone\": {\"type\": \"string\", \"description\": \"The timezone of the location. If left blank, the function will default to the city's local timezone.\"}}, \"required\": [\"location\"]}}"}
{"scope": "parallel_function", "query": "What is the current price per ounce of gold, silver, platinum, and palladium?", "query_for_retrieval": "What is the current price per ounce of gold, silver, platinum, and palladium?", "answer": "get_metal_price", "answer_params": "", "api_description": "def get_metal_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current price for a specified metal and measure.\n\t\n\tArguments:\n\t---------\n\t- metal : string = None (required) The metal whose price needs to be fetched.\n\t- measure : string = None (required) The measure unit for price, like 'ounce' or 'kg'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_metal_price\", \"description\": \"Retrieve the current price for a specified metal and measure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"metal\": {\"type\": \"string\", \"description\": \"The metal whose price needs to be fetched.\"}, \"measure\": {\"type\": \"string\", \"description\": \"The measure unit for price, like 'ounce' or 'kg'.\"}}, \"required\": [\"metal\", \"measure\"]}}"}
{"scope": "parallel_function", "query": "\"Can you provide me with the details of the lawsuit case with the case number '12345ABC', which was initiated in the year 2018 and filed in the New York court jurisdiction? Also, can you retrieve the same information for another lawsuit case with the case number '67890XYZ', initiated in the year 2019 and filed in the California court jurisdiction?\"", "query_for_retrieval": "\"Can you provide me with the details of the lawsuit case with the case number '12345ABC', which was initiated in the year 2018 and filed in the New York court jurisdiction? Also, can you retrieve the same information for another lawsuit case with the case number '67890XYZ', initiated in the year 2019 and filed in the California court jurisdiction?\"", "answer": "lawsuit_info", "answer_params": "", "api_description": "def lawsuit_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves details of a lawsuit given a case number\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The unique identifier of the lawsuit case\n\t- year : integer = 2000 (optional) The year in which the lawsuit case was initiated\n\t- location : string = New York (optional) The location or court jurisdiction where the case was filed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_info\", \"description\": \"Retrieves details of a lawsuit given a case number\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The unique identifier of the lawsuit case\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the lawsuit case was initiated\", \"optional\": true, \"default\": 2000}, \"location\": {\"type\": \"string\", \"description\": \"The location or court jurisdiction where the case was filed.\", \"optional\": true, \"default\": \"New York\"}}, \"required\": [\"case_number\"]}}"}
{"scope": "simple", "query": "What's the timing and location for The Weeknd's concert happening in December?", "query_for_retrieval": "What's the timing and location for The Weeknd's concert happening in December?", "answer": "concert.find_details", "answer_params": "", "api_description": "def concert.find_details:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds details of a concert event.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) Name of the artist performing.\n\t- month : string = None (required) Month in which the concert is happening.\n\t- year : integer = 2022 (optional) Year of the concert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.find_details\", \"description\": \"Finds details of a concert event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"Name of the artist performing.\"}, \"month\": {\"type\": \"string\", \"description\": \"Month in which the concert is happening.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the concert.\", \"default\": 2022}}, \"required\": [\"artist\", \"month\"]}}"}
{"scope": "simple", "query": "Who is the scientist that first proposed the theory of evolution?", "query_for_retrieval": "Who is the scientist that first proposed the theory of evolution?", "answer": "get_scientist_for_discovery", "answer_params": "", "api_description": "def get_scientist_for_discovery:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the scientist's name who is credited for a specific scientific discovery or theory.\n\t\n\tArguments:\n\t---------\n\t- discovery : string = None (required) The scientific discovery or theory.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_scientist_for_discovery\", \"description\": \"Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"discovery\": {\"type\": \"string\", \"description\": \"The scientific discovery or theory.\"}}, \"required\": [\"discovery\"]}}"}
{"scope": "relevance", "query": "Who won the last world cup in football?", "query_for_retrieval": "Who won the last world cup in football?", "answer": "get_match_stats", "answer_params": "", "api_description": "def get_match_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the match statistics of a particular team in a specified sports tournament.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the team.\n\t- tournament : string = None (required) The name of the sports tournament.\n\t- year : integer = 1994 (optional) The year in which the tournament took place. (Optional)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_match_stats\", \"description\": \"Retrieve the match statistics of a particular team in a specified sports tournament.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the team.\"}, \"tournament\": {\"type\": \"string\", \"description\": \"The name of the sports tournament.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the tournament took place. (Optional)\", \"default\": 1994}}, \"required\": [\"team_name\", \"tournament\"]}}"}
{"scope": "simple", "query": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "query_for_retrieval": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "answer": "get_restaurant", "answer_params": "", "api_description": "def get_restaurant:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve highest rated restaurant given cuisine, location, and a condition.\n\t\n\tArguments:\n\t---------\n\t- cuisine : string = None (required) Cuisine of the restaurant.\n\t- location : string = None (required) City where restaurant is located.\n\t- condition : string = None (required) Condition to be met by the restaurant (e.g., operating days, amenities, etc.)\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_restaurant\", \"description\": \"Retrieve highest rated restaurant given cuisine, location, and a condition.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cuisine\": {\"type\": \"string\", \"description\": \"Cuisine of the restaurant.\"}, \"location\": {\"type\": \"string\", \"description\": \"City where restaurant is located.\"}, \"condition\": {\"type\": \"string\", \"description\": \"Condition to be met by the restaurant (e.g., operating days, amenities, etc.)\"}}, \"required\": [\"cuisine\", \"location\", \"condition\"]}}"}
{"scope": "parallel_function", "query": "What would be the predicted forest growth in the Amazon Rainforest and the Boreal Forests of Canada over the next 10 years and 20 years, respectively, if we do not include the impact of human activities?", "query_for_retrieval": "What would be the predicted forest growth in the Amazon Rainforest and the Boreal Forests of Canada over the next 10 years and 20 years, respectively, if we do not include the impact of human activities?", "answer": "forest_growth_forecast", "answer_params": "", "api_description": "def forest_growth_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tPredicts the forest growth over the next N years based on current trends.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location where you want to predict forest growth.\n\t- years : integer = None (required) The number of years for the forecast.\n\t- include_human_impact : boolean = None (optional) Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"forest_growth_forecast\", \"description\": \"Predicts the forest growth over the next N years based on current trends.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location where you want to predict forest growth.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years for the forecast.\"}, \"include_human_impact\": {\"type\": \"boolean\", \"description\": \"Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\"}}, \"required\": [\"location\", \"years\"]}}"}
{"scope": "executable_multiple_function", "query": "I've got $1,000,000 set aside as an initial investment and plan to add $1,000 to it every year. I'm looking at a potential annual interest rate of 10% over the next three years. However, I also want to consider the inflation rates, which I expect to be 1% in the first year and 4% for the next two years. I need to calculate what the investment's value would be at the end of three years, factoring in these inflation rates. Can you help me with that?", "query_for_retrieval": "I've got $1,000,000 set aside as an initial investment and plan to add $1,000 to it every year. I'm looking at a potential annual interest rate of 10% over the next three years. However, I also want to consider the inflation rates, which I expect to be 1% in the first year and 4% for the next two years. I need to calculate what the investment's value would be at the end of three years, factoring in these inflation rates. Can you help me with that?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment with periodic contributions.\n\t\n\tArguments:\n\t---------\n\t- present_value : integer = None (required) The present value of the investment.\n\t- annual_contribution : integer = None (required) The amount contributed to the investment annually.\n\t- years : integer = None (required) The number of years the investment will grow.\n\t- rate_of_return : float = None (required) The annual rate of return on the investment.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment with periodic contributions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"integer\", \"description\": \"The present value of the investment.\"}, \"annual_contribution\": {\"type\": \"integer\", \"description\": \"The amount contributed to the investment annually.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The number of years the investment will grow.\"}, \"rate_of_return\": {\"type\": \"float\", \"description\": \"The annual rate of return on the investment.\"}}, \"required\": [\"present_value\", \"annual_contribution\", \"years\", \"rate_of_return\"]}}"}
{"scope": "sql", "query": "Can you tell me the updated price of the stock named \"Apple Inc.\" in the \"stocks\" table after we decrease its current price of $150 by $10 in the \"price\" column, assuming the operation is successful?", "query_for_retrieval": "Can you tell me the updated price of the stock named \"Apple Inc.\" in the \"stocks\" table after we decrease its current price of $150 by $10 in the \"price\" column, assuming the operation is successful?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What are the primary triads in the key of C major?", "query_for_retrieval": "What are the primary triads in the key of C major?", "answer": "music_analysis.find_common_chords", "answer_params": "", "api_description": "def music_analysis.find_common_chords:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the most common chords in a specific genre of music.\n\t\n\tArguments:\n\t---------\n\t- genre : string = None (required) The genre of music to analyze.\n\t- num_chords : integer = None (required) The number of top common chords to return.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_analysis.find_common_chords\", \"description\": \"Find the most common chords in a specific genre of music.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"genre\": {\"type\": \"string\", \"description\": \"The genre of music to analyze.\"}, \"num_chords\": {\"type\": \"integer\", \"description\": \"The number of top common chords to return.\", \"optional\": true}}, \"required\": [\"genre\", \"num_chords\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find cases that pertain to 'Theft' from court record in 'New York' and from 'San Francisco', filed in year 2021, and display briefs of top 5 relevant cases.", "query_for_retrieval": "Find cases that pertain to 'Theft' from court record in 'New York' and from 'San Francisco', filed in year 2021, and display briefs of top 5 relevant cases.", "answer": "briefs.display_cases", "answer_params": "", "api_description": "def briefs.display_cases:\n\t\"\"\"\n\tDescription:\n\t\n\tDisplay briefs of the cases\n\t\n\tArguments:\n\t---------\n\t- case_id : array = None (required) A list of unique identifiers for cases.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"briefs.display_cases\", \"description\": \"Display briefs of the cases\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_id\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of unique identifiers for cases.\"}}, \"required\": [\"case_id\"]}}"}
{"scope": "parallel_function", "query": "Find opening hours and ticket prices for adults and children for the National Museum in Washington D.C. and the Louvre Museum in Paris.", "query_for_retrieval": "Find opening hours and ticket prices for adults and children for the National Museum in Washington D.C. and the Louvre Museum in Paris.", "answer": "museum_info.get_info", "answer_params": "", "api_description": "def museum_info.get_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve specific details about museums, such as opening hours and ticket prices.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City where the museum is located.\n\t- details : array = None (required) List of details to retrieve about the museum.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum_info.get_info\", \"description\": \"Retrieve specific details about museums, such as opening hours and ticket prices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City where the museum is located.\"}, \"details\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Opening hours\", \"Adult tickets\", \"Child tickets\"]}, \"description\": \"List of details to retrieve about the museum.\"}}, \"required\": [\"location\", \"details\"]}}"}
{"scope": "multiple_function", "query": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "query_for_retrieval": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current stock price of the specified companies\n\t\n\tArguments:\n\t---------\n\t- company_names : array = None (required) The list of companies for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieves the current stock price of the specified companies\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_names\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of companies for which to retrieve the stock price.\"}}, \"required\": [\"company_names\"]}}"}
{"scope": "relevance", "query": "Find a GMO yoga mat that I can buy in-store.", "query_for_retrieval": "Find a GMO yoga mat that I can buy in-store.", "answer": "geo_location_based_products.fetch_eco_friendly_products", "answer_params": "", "api_description": "def geo_location_based_products.fetch_eco_friendly_products:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate eco-friendly products near a specific geographic location based on product category and shopping preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Your city or the geographical location you're interested in shopping from. e.g., Seattle, WA\n\t- product_category : string = None (required) The category of product that you're interested in. e.g., Yoga Mats, Bamboo toothbrush, etc\n\t- availability : string = None (optional) Your preferred method of getting the product - Instore, Online, or Both.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geo_location_based_products.fetch_eco_friendly_products\", \"description\": \"Locate eco-friendly products near a specific geographic location based on product category and shopping preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Your city or the geographical location you're interested in shopping from. e.g., Seattle, WA\"}, \"product_category\": {\"type\": \"string\", \"description\": \"The category of product that you're interested in. e.g., Yoga Mats, Bamboo toothbrush, etc\"}, \"availability\": {\"type\": \"string\", \"description\": \"Your preferred method of getting the product - Instore, Online, or Both.\"}}, \"required\": [\"location\", \"product_category\"], \"default\": \"location\"}}"}
{"scope": "relevance", "query": "Who was the artist behind the famous painting 'The Scream'?", "query_for_retrieval": "Who was the artist behind the famous painting 'The Scream'?", "answer": "artwork_search", "answer_params": "", "api_description": "def artwork_search:\n\t\"\"\"\n\tDescription:\n\t\n\tFind details about an artwork given its name.\n\t\n\tArguments:\n\t---------\n\t- artwork_name : string = None (required) The name of the artwork.\n\t- museum_location : string = None (required) The location of the museum, e.g., Paris, France.\n\t- specific_details : string = all details (optional) Specific details wanted such as 'artist', 'year', etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"artwork_search\", \"description\": \"Find details about an artwork given its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artwork_name\": {\"type\": \"string\", \"description\": \"The name of the artwork.\"}, \"museum_location\": {\"type\": \"string\", \"description\": \"The location of the museum, e.g., Paris, France.\"}, \"specific_details\": {\"type\": \"string\", \"description\": \"Specific details wanted such as 'artist', 'year', etc.\", \"default\": \"all details\"}}, \"required\": [\"artwork_name\", \"museum_location\"]}}"}
{"scope": "simple", "query": "Get the current ranking for Liverpool Football Club in the Premier League.", "query_for_retrieval": "Get the current ranking for Liverpool Football Club in the Premier League.", "answer": "sports_ranking.get_current", "answer_params": "", "api_description": "def sports_ranking.get_current:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current ranking of a specific team in a particular league.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team whose ranking is sought.\n\t- league : string = None (required) The league in which the team participates.\n\t- season : string = None (optional) The season for which the ranking is sought. Defaults to the current season if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_current\", \"description\": \"Retrieve the current ranking of a specific team in a particular league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team whose ranking is sought.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league in which the team participates.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which the ranking is sought. Defaults to the current season if not provided.\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "relevance", "query": "Can you recommend a good Chinese restaurant in New York?", "query_for_retrieval": "Can you recommend a good Chinese restaurant in New York?", "answer": "file_lawsuit", "answer_params": "", "api_description": "def file_lawsuit:\n\t\"\"\"\n\tDescription:\n\t\n\tFile a lawsuit against a party.\n\t\n\tArguments:\n\t---------\n\t- defendant : string = None (required) The party being sued.\n\t- plaintiff : string = None (required) The party filing the lawsuit.\n\t- jurisdiction : string = Your local jurisdiction (optional) The legal jurisdiction in which the lawsuit is being filed, e.g. New York, NY\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"file_lawsuit\", \"description\": \"File a lawsuit against a party.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"defendant\": {\"type\": \"string\", \"description\": \"The party being sued.\"}, \"plaintiff\": {\"type\": \"string\", \"description\": \"The party filing the lawsuit.\"}, \"jurisdiction\": {\"type\": \"string\", \"description\": \"The legal jurisdiction in which the lawsuit is being filed, e.g. New York, NY\", \"default\": \"Your local jurisdiction\"}}, \"required\": [\"defendant\", \"plaintiff\"]}}"}
{"scope": "multiple_function", "query": "Predict the house prices for next 5 years based on interest rates and unemployment rates.", "query_for_retrieval": "Predict the house prices for next 5 years based on interest rates and unemployment rates.", "answer": "linear_regression", "answer_params": "", "api_description": "def linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tApplies linear regression to a given set of independent variables to make a prediction.\n\t\n\tArguments:\n\t---------\n\t- independent_var : array = None (required) The independent variables.\n\t- dependent_var : string = None (required) The dependent variable.\n\t- forecast_period : integer = None (optional) The number of years to forecast the prices. Default 1\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression\", \"description\": \"Applies linear regression to a given set of independent variables to make a prediction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"independent_var\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The independent variables.\"}, \"dependent_var\": {\"type\": \"string\", \"description\": \"The dependent variable.\"}, \"forecast_period\": {\"type\": \"integer\", \"description\": \"The number of years to forecast the prices. Default 1\", \"optional\": true}}, \"required\": [\"independent_var\", \"dependent_var\"]}}"}
{"scope": "parallel_function", "query": "How much will it cost in dollars if I transfer 15000 Euro to dollars? and how much if I convert 200 pounds to dollars?", "query_for_retrieval": "How much will it cost in dollars if I transfer 15000 Euro to dollars? and how much if I convert 200 pounds to dollars?", "answer": "get_conversion_cost", "answer_params": "", "api_description": "def get_conversion_cost:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one currency to another including conversion charges.\n\t\n\tArguments:\n\t---------\n\t- amount : integer = None (required) The amount of money to be converted.\n\t- from_currency : string = None (required) The current currency of the amount.\n\t- to_currency : string = None (required) The target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_conversion_cost\", \"description\": \"Convert a value from one currency to another including conversion charges.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"integer\", \"description\": \"The amount of money to be converted.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The current currency of the amount.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "relevance", "query": "What's the name of a type of cell that has multiple nuclei?", "query_for_retrieval": "What's the name of a type of cell that has multiple nuclei?", "answer": "bloodcell_classification", "answer_params": "", "api_description": "def bloodcell_classification:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentify and categorize different types of blood cells based on given attributes.\n\t\n\tArguments:\n\t---------\n\t- cell_shape : string = None (required) The shape of the cell, e.g. round, oval.\n\t- cell_size : string = None (required) The size of the cell, e.g. large, medium, small.\n\t- cell_function : string = None (optional) The function of the cell, e.g. carrying oxygen, fighting infection. Default: 'carry oxygen'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"bloodcell_classification\", \"description\": \"Identify and categorize different types of blood cells based on given attributes.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_shape\": {\"type\": \"string\", \"description\": \"The shape of the cell, e.g. round, oval.\"}, \"cell_size\": {\"type\": \"string\", \"description\": \"The size of the cell, e.g. large, medium, small.\"}, \"cell_function\": {\"type\": \"string\", \"description\": \"The function of the cell, e.g. carrying oxygen, fighting infection. Default: 'carry oxygen'.\", \"optional\": true}}, \"required\": [\"cell_shape\", \"cell_size\"]}}"}
{"scope": "multiple_function", "query": "What are the current stats for basketball player LeBron James including points per game, assists, and minutes per game.", "query_for_retrieval": "What are the current stats for basketball player LeBron James including points per game, assists, and minutes per game.", "answer": "basketball.player_stats.get", "answer_params": "", "api_description": "def basketball.player_stats.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet current statistics for a specified basketball player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the player.\n\t- stats_fields : array = None (required) List of statistical categories to be fetched, including points, assists, rebounds, minutes.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"basketball.player_stats.get\", \"description\": \"Get current statistics for a specified basketball player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the player.\"}, \"stats_fields\": {\"type\": \"array\", \"description\": \"List of statistical categories to be fetched, including points, assists, rebounds, minutes.\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"player_name\", \"stats_fields\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with a couple of calculations? First, I have a circle with a radius of 5.6 feet and I need to know its area. Second, I'm working on a project where I need to plot a sine wave. The range I'm interested in is from 0 to 3.14 radians. The frequency of the wave should be 2 Hz. Also, I want the amplitude of the wave to be 1.5 and the phase shift to be 0.5 radians. Could you calculate the area and plot the sine wave for me?\"", "query_for_retrieval": "\"Could you please help me with a couple of calculations? First, I have a circle with a radius of 5.6 feet and I need to know its area. Second, I'm working on a project where I need to plot a sine wave. The range I'm interested in is from 0 to 3.14 radians. The frequency of the wave should be 2 Hz. Also, I want the amplitude of the wave to be 1.5 and the phase shift to be 0.5 radians. Could you calculate the area and plot the sine wave for me?\"", "answer": "plot_sine_wave", "answer_params": "", "api_description": "def plot_sine_wave:\n\t\"\"\"\n\tDescription:\n\t\n\tPlot a sine wave for a given frequency in a given range.\n\t\n\tArguments:\n\t---------\n\t- start_range : integer = None (required) Start of the range in radians.\n\t- end_range : float = None (required) End of the range in radians.\n\t- frequency : integer = None (required) Frequency of the sine wave in Hz.\n\t- amplitude : float = None (optional) Amplitude of the sine wave. Default is 1.\n\t- phase_shift : float = None (optional) Phase shift of the sine wave in radians. Default is 0.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"plot_sine_wave\", \"description\": \"Plot a sine wave for a given frequency in a given range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_range\": {\"type\": \"integer\", \"description\": \"Start of the range in radians.\"}, \"end_range\": {\"type\": \"float\", \"description\": \"End of the range in radians.\"}, \"frequency\": {\"type\": \"integer\", \"description\": \"Frequency of the sine wave in Hz.\"}, \"amplitude\": {\"type\": \"float\", \"description\": \"Amplitude of the sine wave. Default is 1.\"}, \"phase_shift\": {\"type\": \"float\", \"description\": \"Phase shift of the sine wave in radians. Default is 0.\"}}, \"required\": [\"start_range\", \"end_range\", \"frequency\"]}}"}
{"scope": "multiple_function", "query": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies", "query_for_retrieval": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies", "answer": "game_scores.get", "answer_params": "", "api_description": "def game_scores.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve scores and rankings based on player\u2019s performance in a certain game.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the game.\n\t- platform : string = None (required) The gaming platform e.g. Xbox, Playstation, PC\n\t- level : integer = None (required) The level of the game for which you want to retrieve the scores.\n\t- player : string = None (optional) The name of the player for whom you want to retrieve scores. Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_scores.get\", \"description\": \"Retrieve scores and rankings based on player\\u2019s performance in a certain game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The gaming platform e.g. Xbox, Playstation, PC\"}, \"level\": {\"type\": \"integer\", \"description\": \"The level of the game for which you want to retrieve the scores.\"}, \"player\": {\"type\": \"string\", \"description\": \"The name of the player for whom you want to retrieve scores. Default ''\", \"optional\": true}}, \"required\": [\"game\", \"platform\", \"level\"]}}"}
{"scope": "relevance", "query": "Who discovered electricity?", "query_for_retrieval": "Who discovered electricity?", "answer": "calculate_electric_current", "answer_params": "", "api_description": "def calculate_electric_current:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electric current through a conductor given voltage and resistance.\n\t\n\tArguments:\n\t---------\n\t- voltage : float = None (required) The voltage across the conductor in Volts.\n\t- resistance : float = None (required) The resistance of the conductor in Ohms.\n\t- conductance : float = None (optional) The conductance of the conductor in Siemens. Optional if resistance is provided. Default: 0.3\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electric_current\", \"description\": \"Calculate the electric current through a conductor given voltage and resistance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"voltage\": {\"type\": \"float\", \"description\": \"The voltage across the conductor in Volts.\"}, \"resistance\": {\"type\": \"float\", \"description\": \"The resistance of the conductor in Ohms.\"}, \"conductance\": {\"type\": \"float\", \"description\": \"The conductance of the conductor in Siemens. Optional if resistance is provided. Default: 0.3\"}}, \"required\": [\"voltage\", \"resistance\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with some information? I am planning to renovate my house and need to know the most popular paint color for the living room over the past month. Also, I am planning a trip to Seattle in the next 5 days, so I would like to know the weather forecast for that period. Lastly, I am considering moving to San Francisco, CA and would like to know the average house price there over the last quarter.\"", "query_for_retrieval": "\"Could you please help me with some information? I am planning to renovate my house and need to know the most popular paint color for the living room over the past month. Also, I am planning a trip to Seattle in the next 5 days, so I would like to know the weather forecast for that period. Lastly, I am considering moving to San Francisco, CA and would like to know the average house price there over the last quarter.\"", "answer": "paint_color.trends", "answer_params": "", "api_description": "def paint_color.trends:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the most popular paint color for a specific area in the home.\n\t\n\tArguments:\n\t---------\n\t- room : string = None (required) Type of the room e.g. Living room, Bathroom etc.\n\t- period : string = None (optional) The period over which to check the paint color trend. Default is 'Monthly' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"paint_color.trends\", \"description\": \"Find the most popular paint color for a specific area in the home.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"room\": {\"type\": \"string\", \"description\": \"Type of the room e.g. Living room, Bathroom etc.\"}, \"period\": {\"type\": \"string\", \"enum\": [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\"], \"description\": \"The period over which to check the paint color trend. Default is 'Monthly' if not specified.\"}}, \"required\": [\"room\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with some gaming information? First, I want to know about the rewards I can get from playing 'Call of Duty' on my 'Playstation'. Second, I am curious about the scores and rankings on level 3 of 'FIFA' on 'Xbox'. Third, I would like to know all the missions for 'Assassin Creed'. Lastly, I want to know the rewards for the 'Master' trophy level in 'Fortnite' on my 'PC'.\"", "query_for_retrieval": "\"Can you help me with some gaming information? First, I want to know about the rewards I can get from playing 'Call of Duty' on my 'Playstation'. Second, I am curious about the scores and rankings on level 3 of 'FIFA' on 'Xbox'. Third, I would like to know all the missions for 'Assassin Creed'. Lastly, I want to know the rewards for the 'Master' trophy level in 'Fortnite' on my 'PC'.\"", "answer": "game_scores.get", "answer_params": "", "api_description": "def game_scores.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve scores and rankings based on player\u2019s performance in a certain game.\n\t\n\tArguments:\n\t---------\n\t- game : string = None (required) The name of the game.\n\t- platform : string = None (required) The gaming platform e.g. Xbox, Playstation, PC\n\t- level : integer = None (required) The level of the game for which you want to retrieve the scores.\n\t- player : string =  (optional) The name of the player for whom you want to retrieve scores.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"game_scores.get\", \"description\": \"Retrieve scores and rankings based on player\\u2019s performance in a certain game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game\": {\"type\": \"string\", \"description\": \"The name of the game.\"}, \"platform\": {\"type\": \"string\", \"description\": \"The gaming platform e.g. Xbox, Playstation, PC\"}, \"level\": {\"type\": \"integer\", \"description\": \"The level of the game for which you want to retrieve the scores.\"}, \"player\": {\"type\": \"string\", \"description\": \"The name of the player for whom you want to retrieve scores.\", \"default\": \"\"}}, \"required\": [\"game\", \"platform\", \"level\"]}}"}
{"scope": "multiple_function", "query": "Find me a pet-friendly library with facilities for disabled people in New York City.", "query_for_retrieval": "Find me a pet-friendly library with facilities for disabled people in New York City.", "answer": "store.find_nearby", "answer_params": "", "api_description": "def store.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city, for example, New York City, NY\n\t- preferences : array = None (required) Your preferences for the store.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"store.find_nearby\", \"description\": \"Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city, for example, New York City, NY\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Pet-friendly\", \"Disabled Access\", \"24 hours\", \"Cafe Inside\"]}, \"description\": \"Your preferences for the store.\"}}, \"required\": [\"location\", \"preferences\"]}}"}
{"scope": "multiple_function", "query": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "query_for_retrieval": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "answer": "lawsuits_search", "answer_params": "", "api_description": "def lawsuits_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for lawsuits against a specific company within a specific time and location.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- location : string = None (required) The location where the lawsuit was filed.\n\t- year : integer = None (required) The year when the lawsuit was filed.\n\t- case_type : string = None (optional) The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuits_search\", \"description\": \"Search for lawsuits against a specific company within a specific time and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the lawsuit was filed.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year when the lawsuit was filed.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'\"}}, \"required\": [\"company_name\", \"location\", \"year\"]}}"}
{"scope": "simple", "query": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "query_for_retrieval": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "answer": "recipe_search", "answer_params": "", "api_description": "def recipe_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a recipe given dietary restriction, ingredients, and number of servings.\n\t\n\tArguments:\n\t---------\n\t- dietary_restriction : string = None (required) The dietary restriction, e.g., 'Vegetarian'.\n\t- ingredients : array = None (required) The list of ingredients.\n\t- servings : integer = None (required) The number of servings the recipe should make\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_search\", \"description\": \"Search for a recipe given dietary restriction, ingredients, and number of servings.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restriction\": {\"type\": \"string\", \"description\": \"The dietary restriction, e.g., 'Vegetarian'.\"}, \"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of ingredients.\"}, \"servings\": {\"type\": \"integer\", \"description\": \"The number of servings the recipe should make\"}}, \"required\": [\"dietary_restriction\", \"ingredients\", \"servings\"]}}"}
{"scope": "multiple_function", "query": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "query_for_retrieval": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "answer": "calculate_mutual_fund_balance", "answer_params": "", "api_description": "def calculate_mutual_fund_balance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The initial total amount invested in the fund.\n\t- annual_yield : float = None (required) The annual yield rate of the fund.\n\t- years : integer = None (required) The period of time for the fund to mature.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mutual_fund_balance\", \"description\": \"Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The initial total amount invested in the fund.\"}, \"annual_yield\": {\"type\": \"float\", \"description\": \"The annual yield rate of the fund.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The period of time for the fund to mature.\"}}, \"required\": [\"investment_amount\", \"annual_yield\", \"years\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with some calculations? First, I have two vectors, [1, 2, 3] and [4, 5, 6], and I need to calculate the cosine similarity between them. I want the result to be rounded off to 2 decimal places. Then, I have two arrays of numbers, [7, 8, 9] and [10, 11, 12], and I need to calculate the Pearson correlation coefficient between them. After that, I have another two arrays of numbers, [13, 14, 15] and [16, 17, 18], and I need to calculate the Spearman correlation coefficient between them. Lastly, I have two more vectors, [19, 20, 21] and [22, 23, 24], and I need to calculate the cosine similarity between them, but this time I want the result to be rounded off to 3 decimal places.\"", "query_for_retrieval": "\"Could you help me with some calculations? First, I have two vectors, [1, 2, 3] and [4, 5, 6], and I need to calculate the cosine similarity between them. I want the result to be rounded off to 2 decimal places. Then, I have two arrays of numbers, [7, 8, 9] and [10, 11, 12], and I need to calculate the Pearson correlation coefficient between them. After that, I have another two arrays of numbers, [13, 14, 15] and [16, 17, 18], and I need to calculate the Spearman correlation coefficient between them. Lastly, I have two more vectors, [19, 20, 21] and [22, 23, 24], and I need to calculate the cosine similarity between them, but this time I want the result to be rounded off to 3 decimal places.\"", "answer": "cosine_similarity.calculate", "answer_params": "", "api_description": "def cosine_similarity.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the cosine similarity between two vectors.\n\t\n\tArguments:\n\t---------\n\t- vector1 : array = None (required) The first vector for calculating cosine similarity.\n\t- vector2 : array = None (required) The second vector for calculating cosine similarity.\n\t- rounding : integer = None (optional) Optional: The number of decimals to round off the result. Default 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cosine_similarity.calculate\", \"description\": \"Calculate the cosine similarity between two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vector1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The first vector for calculating cosine similarity.\"}, \"vector2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The second vector for calculating cosine similarity.\"}, \"rounding\": {\"type\": \"integer\", \"description\": \"Optional: The number of decimals to round off the result. Default 0\"}}, \"required\": [\"vector1\", \"vector2\"]}}"}
{"scope": "rest", "query": "I'm looking to find the definition of 'swole' on Urban Dictionary using RapidAPI. Could you provide me with the correct requests.get call using my API key `YOUR-RAPID-API-KEY` and Urban Dictionary's host `mashape-community-urban-dictionary.p.rapidapi.com`?", "query_for_retrieval": "I'm looking to find the definition of 'swole' on Urban Dictionary using RapidAPI. Could you provide me with the correct requests.get call using my API key `YOUR-RAPID-API-KEY` and Urban Dictionary's host `mashape-community-urban-dictionary.p.rapidapi.com`?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://mashape-community-urban-dictionary.p.rapidapi.com/define (required) Urban Dictionary is the dictionary you write.\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - term : string = None (required) The search term or query parameter required by the API.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Urban Dictionary is the dictionary you write.\", \"default\": \"https://mashape-community-urban-dictionary.p.rapidapi.com/define\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The search term or query parameter required by the API.\"}}, \"type\": \"dict\", \"required\": [\"term\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "query_for_retrieval": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "answer": "run_two_sample_ttest", "answer_params": "", "api_description": "def run_two_sample_ttest:\n\t\"\"\"\n\tDescription:\n\t\n\tRuns a two sample t-test for two given data groups.\n\t\n\tArguments:\n\t---------\n\t- group1 : array = None (required) First group of data points.\n\t- group2 : array = None (required) Second group of data points.\n\t- equal_variance : boolean = True (optional) Assumption about whether the two samples have equal variance.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"run_two_sample_ttest\", \"description\": \"Runs a two sample t-test for two given data groups.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"group1\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"First group of data points.\"}, \"group2\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Second group of data points.\"}, \"equal_variance\": {\"type\": \"boolean\", \"description\": \"Assumption about whether the two samples have equal variance.\", \"default\": true}}, \"required\": [\"group1\", \"group2\"]}}"}
{"scope": "simple", "query": "Calculate the required water daily intake for a person with weight 70 kg.", "query_for_retrieval": "Calculate the required water daily intake for a person with weight 70 kg.", "answer": "calculate_daily_water_intake", "answer_params": "", "api_description": "def calculate_daily_water_intake:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the recommended daily water intake for a person based on their weight.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) The weight of the person in kilograms.\n\t- activity_level : string = None (optional) The level of physical activity of the person. Default is 'moderate'.\n\t- climate : string = None (optional) The climate of the area where the person lives. Default is 'temperate'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_daily_water_intake\", \"description\": \"Calculate the recommended daily water intake for a person based on their weight.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"activity_level\": {\"type\": \"string\", \"description\": \"The level of physical activity of the person. Default is 'moderate'.\"}, \"climate\": {\"type\": \"string\", \"description\": \"The climate of the area where the person lives. Default is 'temperate'.\"}}, \"required\": [\"weight\"]}}"}
{"scope": "relevance", "query": "What's the total number of possible arrangements in a chess game?", "query_for_retrieval": "What's the total number of possible arrangements in a chess game?", "answer": "boardgame.calculate_score", "answer_params": "", "api_description": "def boardgame.calculate_score:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate final scores for a board game given a list of player actions.\n\t\n\tArguments:\n\t---------\n\t- player_actions : array = None (required) A list of player actions.\n\t- initial_scores : dict = None (optional) Initial scores for each player.\n\t  - player_id : integer = None (optional) Unique identifier for each player.\n\t  - score : integer = None (optional) Initial score of the player. Defaults to 0 if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"boardgame.calculate_score\", \"description\": \"Calculate final scores for a board game given a list of player actions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_actions\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"player_id\": {\"type\": \"integer\", \"description\": \"Unique identifier for each player.\"}, \"action\": {\"type\": \"string\", \"description\": \"Action performed by the player. Possible values are: 'buy property', 'sell property', 'pass go', 'pay fine'.\"}, \"property_id\": {\"type\": \"integer\", \"description\": \"Unique identifier for each property in the game.\"}}, \"required\": [\"player_id\", \"action\"]}, \"description\": \"A list of player actions.\"}, \"initial_scores\": {\"type\": \"dict\", \"properties\": {\"player_id\": {\"type\": \"integer\", \"description\": \"Unique identifier for each player.\"}, \"score\": {\"type\": \"integer\", \"description\": \"Initial score of the player. Defaults to 0 if not provided.\"}}, \"description\": \"Initial scores for each player.\", \"requried\": [\"player_id\", \"score\"]}}, \"required\": [\"player_actions\"]}}"}
{"scope": "relevance", "query": "What is the external rate of return for a project with cash flows of -$100, $40, $60, $80, $120?", "query_for_retrieval": "What is the external rate of return for a project with cash flows of -$100, $40, $60, $80, $120?", "answer": "calculate_internal_rate_of_return", "answer_params": "", "api_description": "def calculate_internal_rate_of_return:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the internal rate of return for a project given its cash flows.\n\t\n\tArguments:\n\t---------\n\t- cash_flows : array = None (required) The cash flows for the project. Cash outflows should be represented as negative values.\n\t- guess : float = None (optional) The guess for the IRR. Default is 0.1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_internal_rate_of_return\", \"description\": \"Calculate the internal rate of return for a project given its cash flows.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cash_flows\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The cash flows for the project. Cash outflows should be represented as negative values.\"}, \"guess\": {\"type\": \"float\", \"description\": \"The guess for the IRR. Default is 0.1.\"}}, \"required\": [\"cash_flows\"]}}"}
{"scope": "executable_simple", "query": "I've been tracking the scoring performance of a certain basketball player across the last 12 games to get insights into his consistency. The points he scored in each game are as follows: 30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, and 43. I need to calculate the standard deviation of this scoring to better understand the variability and predictability of his performance. Could you help me with that?", "query_for_retrieval": "I've been tracking the scoring performance of a certain basketball player across the last 12 games to get insights into his consistency. The points he scored in each game are as follows: 30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, and 43. I need to calculate the standard deviation of this scoring to better understand the variability and predictability of his performance. Could you help me with that?", "answer": "calculate_standard_deviation", "answer_params": "", "api_description": "def calculate_standard_deviation:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the standard deviation of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_standard_deviation\", \"description\": \"Calculates the standard deviation of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "parallel_multiple_function", "query": "You are an art curator and a part-time biologist. You have a painting in your collection that is currently 24x36 inches, painted with acrylic and has a dominant color of blue. You want to modify the painting's size to 30x40 inches, change the medium to oil, and the dominant color to red. After this, you want to predict the evolutionary rate of the African elephant species for the next 100 years using the Darwin model. \n\nLater in the day, you are planning a game of poker with friends and you want to calculate the probability of getting a royal flush. In a deck of 52 cards, there are 4 possible outcomes that result in a royal flush. You want the result to be rounded to 3 decimal places. \n\nWhat would be the new attributes of the painting, the predicted evolutionary rate of the African elephant, and the probability of getting a royal flush in your poker game?", "query_for_retrieval": "You are an art curator and a part-time biologist. You have a painting in your collection that is currently 24x36 inches, painted with acrylic and has a dominant color of blue. You want to modify the painting's size to 30x40 inches, change the medium to oil, and the dominant color to red. After this, you want to predict the evolutionary rate of the African elephant species for the next 100 years using the Darwin model. \n\nLater in the day, you are planning a game of poker with friends and you want to calculate the probability of getting a royal flush. In a deck of 52 cards, there are 4 possible outcomes that result in a royal flush. You want the result to be rounded to 3 decimal places. \n\nWhat would be the new attributes of the painting, the predicted evolutionary rate of the African elephant, and the probability of getting a royal flush in your poker game?", "answer": "prediction.evolution", "answer_params": "", "api_description": "def prediction.evolution:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the evolutionary rate for a specific species for a given timeframe.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species that the evolution rate will be predicted for.\n\t- years : integer = None (required) Number of years for the prediction.\n\t- model : string = None (optional) The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prediction.evolution\", \"description\": \"Predict the evolutionary rate for a specific species for a given timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species that the evolution rate will be predicted for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years for the prediction.\"}, \"model\": {\"type\": \"string\", \"description\": \"The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\"}}, \"required\": [\"species\", \"years\"]}}"}
{"scope": "simple", "query": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "query_for_retrieval": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "answer": "vegan_restaurant.find_nearby", "answer_params": "", "api_description": "def vegan_restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby vegan restaurants based on specific criteria like operating hours.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York, NY, you should format it as City, State.\n\t- operating_hours : integer = None (optional) Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"vegan_restaurant.find_nearby\", \"description\": \"Locate nearby vegan restaurants based on specific criteria like operating hours.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY, you should format it as City, State.\"}, \"operating_hours\": {\"type\": \"integer\", \"description\": \"Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24.\"}}, \"required\": [\"location\"]}}"}
{"scope": "executable_simple", "query": "As part of my data analysis project, I've been tasked with examining the temperature trends over the past month. I've collected a set of daily temperature readings that I need to interpret. The dataset includes temperatures ranging from 22 to 80 degrees Celsius, incrementing by 2 each day. To gain a better understanding of the overall climate patterns, could you calculate the average temperature for this period using these values?", "query_for_retrieval": "As part of my data analysis project, I've been tasked with examining the temperature trends over the past month. I've collected a set of daily temperature readings that I need to interpret. The dataset includes temperatures ranging from 22 to 80 degrees Celsius, incrementing by 2 each day. To gain a better understanding of the overall climate patterns, could you calculate the average temperature for this period using these values?", "answer": "calculate_mean", "answer_params": "", "api_description": "def calculate_mean:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the mean of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mean\", \"description\": \"Calculates the mean of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The list of numbers.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "parallel_function", "query": "Can you find the fastest route from my home in San Francisco to my office in Palo Alto, then from my office to my friend's house in San Jose, and finally from my friend's house back to my home, while avoiding toll roads?", "query_for_retrieval": "Can you find the fastest route from my home in San Francisco to my office in Palo Alto, then from my office to my friend's house in San Jose, and finally from my friend's house back to my home, while avoiding toll roads?", "answer": "map_routing.fastest_route", "answer_params": "", "api_description": "def map_routing.fastest_route:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the fastest route from one location to another, with an option to avoid toll roads.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The starting location for the journey.\n\t- end_location : string = None (required) The destination for the journey.\n\t- avoid_tolls : boolean = None (optional) Option to avoid toll roads during the journey. default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_routing.fastest_route\", \"description\": \"Finds the fastest route from one location to another, with an option to avoid toll roads.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The starting location for the journey.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The destination for the journey.\"}, \"avoid_tolls\": {\"type\": \"boolean\", \"description\": \"Option to avoid toll roads during the journey. default is False\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "multiple_function", "query": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "query_for_retrieval": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) of a person.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) Weight of the person in kilograms.\n\t- height : integer = None (required) Height of the person in centimeters.\n\t- unit : string = None (optional) Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) of a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"Weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"Height of the person in centimeters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "parallel_function", "query": "\"Could you calculate the area under the curve for the function 'x^3' between x values of 2 and 5 using the 'trapezoid' method of numerical integration, and then do the same calculation but using the 'simpson' method? After that, could you repeat these calculations but for the function '2x^2+3x-1' between x values of -1 and 3?\"", "query_for_retrieval": "\"Could you calculate the area under the curve for the function 'x^3' between x values of 2 and 5 using the 'trapezoid' method of numerical integration, and then do the same calculation but using the 'simpson' method? After that, could you repeat these calculations but for the function '2x^2+3x-1' between x values of -1 and 3?\"", "answer": "integrate", "answer_params": "", "api_description": "def integrate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area under a curve for a specified function between two x values.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to integrate, represented as a string. For example, 'x^3'\n\t- start_x : integer = None (required) The starting x-value to integrate over.\n\t- end_x : integer = None (required) The ending x-value to integrate over.\n\t- method : string = None (optional) The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"integrate\", \"description\": \"Calculate the area under a curve for a specified function between two x values.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to integrate, represented as a string. For example, 'x^3'\"}, \"start_x\": {\"type\": \"integer\", \"description\": \"The starting x-value to integrate over.\"}, \"end_x\": {\"type\": \"integer\", \"description\": \"The ending x-value to integrate over.\"}, \"method\": {\"type\": \"string\", \"description\": \"The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\"}}, \"required\": [\"function\", \"start_x\", \"end_x\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm considering buying a new home and need to crunch some numbers to see if it's feasible. I've got my eye on a place, but I need to take out a loan of $350,000 to purchase it. The bank offered me a 30-year mortgage with a 3.5% interest rate. I need to figure out what my monthly payment would be with these terms. On a different note, I'm also curious about how this big financial step compares to my investments. For instance, what's the current price of Apple Inc. stock? And while we're at it, I've been tracking some data for a project at work and need to analyze it further. Could you help me calculate the standard deviation of these numbers: 45, 67, 34, 89, 23, 56, 78, 90, 32, 67? It would really help me understand the variability in the data set.", "query_for_retrieval": "I'm considering buying a new home and need to crunch some numbers to see if it's feasible. I've got my eye on a place, but I need to take out a loan of $350,000 to purchase it. The bank offered me a 30-year mortgage with a 3.5% interest rate. I need to figure out what my monthly payment would be with these terms. On a different note, I'm also curious about how this big financial step compares to my investments. For instance, what's the current price of Apple Inc. stock? And while we're at it, I've been tracking some data for a project at work and need to analyze it further. Could you help me calculate the standard deviation of these numbers: 45, 67, 34, 89, 23, 56, 78, 90, 32, 67? It would really help me understand the variability in the data set.", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "simple", "query": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "query_for_retrieval": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "answer": "calculate_displacement", "answer_params": "", "api_description": "def calculate_displacement:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the displacement of an object in motion given initial velocity, time, and acceleration.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : integer = None (required) The initial velocity of the object in m/s.\n\t- time : integer = None (required) The time in seconds that the object has been in motion.\n\t- acceleration : float = 0 (optional) The acceleration of the object in m/s^2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_displacement\", \"description\": \"Calculates the displacement of an object in motion given initial velocity, time, and acceleration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"integer\", \"description\": \"The initial velocity of the object in m/s.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time in seconds that the object has been in motion.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2.\", \"default\": 0}}, \"required\": [\"initial_velocity\", \"time\"]}}"}
{"scope": "java", "query": "How can I update the HBase mapping configuration for a specific file named 'user-mapping.yml' with a new configuration object `newMappingConfig` that does not change the outer adapter key?", "query_for_retrieval": "How can I update the HBase mapping configuration for a specific file named 'user-mapping.yml' with a new configuration object `newMappingConfig` that does not change the outer adapter key?", "answer": "HbaseAdapter.updateConfig", "answer_params": "", "api_description": "def HbaseAdapter.updateConfig:\n\t\"\"\"\n\tDescription:\n\t\n\tUpdates the HBase mapping configuration for a given file name with the provided mapping configuration, ensuring the outer adapter key remains unchanged.\n\t\n\tArguments:\n\t---------\n\t- fileName : String = None (required) The name of the file for which the mapping configuration is to be updated.\n\t- config : any = None (required) The new mapping configuration object to be used for the update.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"HbaseAdapter.updateConfig\", \"description\": \"Updates the HBase mapping configuration for a given file name with the provided mapping configuration, ensuring the outer adapter key remains unchanged.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"fileName\": {\"type\": \"String\", \"description\": \"The name of the file for which the mapping configuration is to be updated.\"}, \"config\": {\"type\": \"any\", \"description\": \"The new mapping configuration object to be used for the update.\"}}, \"required\": [\"fileName\", \"config\"]}}"}
{"scope": "parallel_function", "query": "\"Could you calculate the genetic similarity between a human and a chimpanzee, and then between a human and a gorilla, using their DNA sequences? Please provide the results in both percentage and fraction formats.\"", "query_for_retrieval": "\"Could you calculate the genetic similarity between a human and a chimpanzee, and then between a human and a gorilla, using their DNA sequences? Please provide the results in both percentage and fraction formats.\"", "answer": "genetics.calculate_similarity", "answer_params": "", "api_description": "def genetics.calculate_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the genetic similarity between two species based on their DNA sequences.\n\t\n\tArguments:\n\t---------\n\t- species1 : string = None (required) The first species to compare.\n\t- species2 : string = None (required) The second species to compare.\n\t- format : string = None (optional) The format of the result (percentage or fraction). Default is percentage.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"genetics.calculate_similarity\", \"description\": \"Calculates the genetic similarity between two species based on their DNA sequences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species1\": {\"type\": \"string\", \"description\": \"The first species to compare.\"}, \"species2\": {\"type\": \"string\", \"description\": \"The second species to compare.\"}, \"format\": {\"type\": \"string\", \"description\": \"The format of the result (percentage or fraction). Default is percentage.\"}}, \"required\": [\"species1\", \"species2\"]}}"}
{"scope": "java", "query": "How can I configure an option parser to require the 'output-format' option unless either the 'quiet' or 'verbose' options are provided in a command-line application?", "query_for_retrieval": "How can I configure an option parser to require the 'output-format' option unless either the 'quiet' or 'verbose' options are provided in a command-line application?", "answer": "OptionSpecBuilder.requiredUnless", "answer_params": "", "api_description": "def OptionSpecBuilder.requiredUnless:\n\t\"\"\"\n\tDescription:\n\t\n\tConfigures the option parser to require the current option unless one of the specified dependent options is present.\n\t\n\tArguments:\n\t---------\n\t- dependent : String = None (required) The primary dependent option name.\n\t- otherDependents : Array = None (optional) Other dependent option names that can make the current option non-required. Default empty array\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"OptionSpecBuilder.requiredUnless\", \"description\": \"Configures the option parser to require the current option unless one of the specified dependent options is present.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dependent\": {\"type\": \"String\", \"description\": \"The primary dependent option name.\"}, \"otherDependents\": {\"type\": \"Array\", \"description\": \"Other dependent option names that can make the current option non-required. Default empty array\", \"items\": {\"type\": \"String\"}}}, \"required\": [\"dependent\"]}}"}
{"scope": "simple", "query": "Retrieve the full historyof Buddhism", "query_for_retrieval": "Retrieve the full historyof Buddhism", "answer": "retrieve_religion_info", "answer_params": "", "api_description": "def retrieve_religion_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the history and main beliefs of a religion.\n\t\n\tArguments:\n\t---------\n\t- religion_name : string = None (required) The name of the religion.\n\t- detail_level : string = summary (required) Level of detail for the returned information, either 'summary' or 'full'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"retrieve_religion_info\", \"description\": \"Retrieve the history and main beliefs of a religion.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion_name\": {\"type\": \"string\", \"description\": \"The name of the religion.\"}, \"detail_level\": {\"type\": \"string\", \"description\": \"Level of detail for the returned information, either 'summary' or 'full'.\", \"default\": \"summary\"}}, \"required\": [\"religion_name\", \"detail_level\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me book a ticket for a concert of Taylor Swift in New York with a VIP Seating add-on, then book another ticket for a concert of Ed Sheeran in Los Angeles with a Backstage Pass and Parking Pass add-ons, and finally book a ticket for the Coachella festival in Indio with a Camping Pass and Parking Pass add-ons?\"", "query_for_retrieval": "\"Can you help me book a ticket for a concert of Taylor Swift in New York with a VIP Seating add-on, then book another ticket for a concert of Ed Sheeran in Los Angeles with a Backstage Pass and Parking Pass add-ons, and finally book a ticket for the Coachella festival in Indio with a Camping Pass and Parking Pass add-ons?\"", "answer": "concert.book_ticket", "answer_params": "", "api_description": "def concert.book_ticket:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a ticket for a concert at a specific location with various add-ons like backstage pass.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) Name of the artist for the concert.\n\t- location : string = None (required) City where the concert will take place.\n\t- add_ons : array = None (optional) Add-ons for the concert. Default is 'VIP Seating' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert.book_ticket\", \"description\": \"Book a ticket for a concert at a specific location with various add-ons like backstage pass.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"Name of the artist for the concert.\"}, \"location\": {\"type\": \"string\", \"description\": \"City where the concert will take place.\"}, \"add_ons\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Backstage Pass\", \"VIP Seating\", \"Parking Pass\"]}, \"description\": \"Add-ons for the concert. Default is 'VIP Seating' if not specified.\"}}, \"required\": [\"artist\", \"location\"]}}"}
{"scope": "relevance", "query": "Who write Don Quixote?", "query_for_retrieval": "Who write Don Quixote?", "answer": "music_composer.composition_info", "answer_params": "", "api_description": "def music_composer.composition_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about a music composition including its composer, period and genre.\n\t\n\tArguments:\n\t---------\n\t- composition_name : string = None (required) The name of the music composition.\n\t- need_detailed_info : boolean = None (required) If set to True, retrieve detailed information about the composition such as year composed, duration, key, etc. Default is False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_composer.composition_info\", \"description\": \"Retrieve information about a music composition including its composer, period and genre.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"composition_name\": {\"type\": \"string\", \"description\": \"The name of the music composition.\"}, \"need_detailed_info\": {\"type\": \"boolean\", \"description\": \"If set to True, retrieve detailed information about the composition such as year composed, duration, key, etc. Default is False\"}}, \"required\": [\"composition_name\", \"need_detailed_info\"]}}"}
{"scope": "java", "query": "How can I asynchronously store the value '42' with the key 'answer' in a Redisson cache, only if the key does not already exist, and obtain a CompletableFuture that will complete with an Optional containing the previous value?", "query_for_retrieval": "How can I asynchronously store the value '42' with the key 'answer' in a Redisson cache, only if the key does not already exist, and obtain a CompletableFuture that will complete with an Optional containing the previous value?", "answer": "RedissonAsyncCache.putIfAbsent", "answer_params": "", "api_description": "def RedissonAsyncCache.putIfAbsent:\n\t\"\"\"\n\tDescription:\n\t\n\tAsynchronously puts the given value associated with the specified key into the cache if it is not already present, and returns a CompletableFuture that will complete with an Optional of the previous value.\n\t\n\tArguments:\n\t---------\n\t- key : any = None (required) The key with which the specified value is to be associated.\n\t- value : any = None (required) The value to be associated with the specified key.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RedissonAsyncCache.putIfAbsent\", \"description\": \"Asynchronously puts the given value associated with the specified key into the cache if it is not already present, and returns a CompletableFuture that will complete with an Optional of the previous value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"any\", \"description\": \"The key with which the specified value is to be associated.\"}, \"value\": {\"type\": \"any\", \"description\": \"The value to be associated with the specified key.\"}}, \"required\": [\"key\", \"value\"]}}"}
{"scope": "simple", "query": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "query_for_retrieval": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "answer": "database.query", "answer_params": "", "api_description": "def database.query:\n\t\"\"\"\n\tDescription:\n\t\n\tQuery the database based on certain conditions.\n\t\n\tArguments:\n\t---------\n\t- table : string = None (required) Name of the table to query.\n\t- conditions : array = None (required) Conditions for the query.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"database.query\", \"description\": \"Query the database based on certain conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"table\": {\"type\": \"string\", \"description\": \"Name of the table to query.\"}, \"conditions\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"field\": {\"type\": \"string\", \"description\": \"The field to apply the condition.\"}, \"operation\": {\"type\": \"string\", \"description\": \"The operation to be performed.\"}, \"value\": {\"type\": \"string\", \"description\": \"The value to be compared.\"}}, \"required\": [\"field\", \"operation\", \"value\"]}, \"description\": \"Conditions for the query.\"}}, \"required\": [\"table\", \"conditions\"]}}"}
{"scope": "parallel_function", "query": "\"Can you help me calculate the energy required for a phase change? I have a science experiment where I am first melting 500 grams of ice at 0 degrees Celsius, then I am freezing it back. After that, I am vaporizing the same mass of water at 100 degrees Celsius and then condensing it back to liquid state. The substance I am using for this experiment is water. Can you tell me how much energy is required or released during each of these phase changes?\"", "query_for_retrieval": "\"Can you help me calculate the energy required for a phase change? I have a science experiment where I am first melting 500 grams of ice at 0 degrees Celsius, then I am freezing it back. After that, I am vaporizing the same mass of water at 100 degrees Celsius and then condensing it back to liquid state. The substance I am using for this experiment is water. Can you tell me how much energy is required or released during each of these phase changes?\"", "answer": "thermo.calculate_energy", "answer_params": "", "api_description": "def thermo.calculate_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) Mass of the substance in grams.\n\t- phase_transition : string = None (required) Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\n\t- substance : string = None (optional) The substance which is undergoing phase change, default is 'water'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"thermo.calculate_energy\", \"description\": \"Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"Mass of the substance in grams.\"}, \"phase_transition\": {\"type\": \"string\", \"description\": \"Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\"}, \"substance\": {\"type\": \"string\", \"description\": \"The substance which is undergoing phase change, default is 'water'\"}}, \"required\": [\"mass\", \"phase_transition\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a Thai restaurant in New York, NY within a 10-mile radius, and then find an Italian restaurant in the same location within the same distance? After that, could you provide the precipitation statistics for the Amazon rainforest for the past year and then for the past five years?\"", "query_for_retrieval": "\"Can you help me find a Thai restaurant in New York, NY within a 10-mile radius, and then find an Italian restaurant in the same location within the same distance? After that, could you provide the precipitation statistics for the Amazon rainforest for the past year and then for the past five years?\"", "answer": "ecology_data.precipitation_stats", "answer_params": "", "api_description": "def ecology_data.precipitation_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve precipitation data for a specified location and time period.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The name of the location, e.g., 'Amazon rainforest'.\n\t- time_frame : string = None (required) The time period for which data is required.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ecology_data.precipitation_stats\", \"description\": \"Retrieve precipitation data for a specified location and time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The name of the location, e.g., 'Amazon rainforest'.\"}, \"time_frame\": {\"type\": \"string\", \"enum\": [\"six_months\", \"year\", \"five_years\"], \"description\": \"The time period for which data is required.\"}}, \"required\": [\"location\", \"time_frame\"]}}"}
{"scope": "simple", "query": "Find Italian restaurants near New York city that serves gluten-free options.", "query_for_retrieval": "Find Italian restaurants near New York city that serves gluten-free options.", "answer": "restaurant_finder", "answer_params": "", "api_description": "def restaurant_finder:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate restaurants based on certain criteria such as cuisine, city, and dietary preferences.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) City where you are looking for the restaurant.\n\t- cuisine : string = None (required) Type of cuisine you are interested in.\n\t- diet : string = None (optional) Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_finder\", \"description\": \"Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"City where you are looking for the restaurant.\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Type of cuisine you are interested in.\"}, \"diet\": {\"type\": \"string\", \"description\": \"Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'.\"}}, \"required\": [\"city\", \"cuisine\"]}}"}
{"scope": "relevance", "query": "Identify the genetic code sequence \"ATCG\".", "query_for_retrieval": "Identify the genetic code sequence \"ATCG\".", "answer": "identify_species", "answer_params": "", "api_description": "def identify_species:\n\t\"\"\"\n\tDescription:\n\t\n\tIdentifies the species of an organism based on its genetic code sequence.\n\t\n\tArguments:\n\t---------\n\t- sequence : string = None (required) A genetic code sequence.\n\t- database : string = GenBank (optional) The genetic database to refer to while identifying species.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"identify_species\", \"description\": \"Identifies the species of an organism based on its genetic code sequence.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sequence\": {\"type\": \"string\", \"description\": \"A genetic code sequence.\"}, \"database\": {\"type\": \"string\", \"description\": \"The genetic database to refer to while identifying species.\", \"default\": \"GenBank\"}}, \"required\": [\"sequence\"]}}"}
{"scope": "relevance", "query": "Can you tell me a machine to bake a chocolate cake?", "query_for_retrieval": "Can you tell me a machine to bake a chocolate cake?", "answer": "prepare_food.get_recipe", "answer_params": "", "api_description": "def prepare_food.get_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a recipe based on specific ingredients and type of food.\n\t\n\tArguments:\n\t---------\n\t- ingredients : array = None (required) List of ingredients for the recipe.\n\t- food_type : string = None (required) The type of food for the recipe.\n\t- serving_size : integer = None (optional) The number of servings the recipe should cater to. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prepare_food.get_recipe\", \"description\": \"Retrieve a recipe based on specific ingredients and type of food.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of ingredients for the recipe.\"}, \"food_type\": {\"type\": \"string\", \"description\": \"The type of food for the recipe.\"}, \"serving_size\": {\"type\": \"integer\", \"description\": \"The number of servings the recipe should cater to. Default is 1.\"}}, \"required\": [\"ingredients\", \"food_type\"]}}"}
{"scope": "javascript", "query": "How can I add statements for initializing properties named 'width' and 'height' for a receiver object named 'shape' into an existing statements array named 'shapeStatements'?", "query_for_retrieval": "How can I add statements for initializing properties named 'width' and 'height' for a receiver object named 'shape' into an existing statements array named 'shapeStatements'?", "answer": "addInitializedPropertyStatements", "answer_params": "", "api_description": "def addInitializedPropertyStatements:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function adds statements for initializing properties to an array of statements. It is designed to work with TypeScript's AST manipulation.\n\t\n\tArguments:\n\t---------\n\t- statements : array = None (required) The array of statements to which the new initialized property statements will be added.\n\t- property : array = None (required) An array of property names that need to be initialized. Default empty array\n\t- receiver : String = None (required) The name of the object for which the properties are being initialized.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"addInitializedPropertyStatements\", \"description\": \"This function adds statements for initializing properties to an array of statements. It is designed to work with TypeScript's AST manipulation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"statements\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The array of statements to which the new initialized property statements will be added.\"}, \"property\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"An array of property names that need to be initialized. Default empty array\"}, \"receiver\": {\"type\": \"String\", \"description\": \"The name of the object for which the properties are being initialized.\"}}, \"required\": [\"statements\", \"property\", \"receiver\"]}}"}
{"scope": "java", "query": "How can I determine the boolean value of a configuration setting 'enableLogging' which is currently set to 'yes', and if the setting is not specified, default to 'false'?", "query_for_retrieval": "How can I determine the boolean value of a configuration setting 'enableLogging' which is currently set to 'yes', and if the setting is not specified, default to 'false'?", "answer": "Booleans.parseBooleanLenient", "answer_params": "", "api_description": "def Booleans.parseBooleanLenient:\n\t\"\"\"\n\tDescription:\n\t\n\tParses a string to a boolean value leniently, allowing various string representations to be interpreted as 'false', and defaults to 'true' for other cases, unless a default value is provided.\n\t\n\tArguments:\n\t---------\n\t- value : String = None (required) The string value to parse into a boolean.\n\t- defaultValue : boolean = None (required) The default boolean value to return if the string value is null.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Booleans.parseBooleanLenient\", \"description\": \"Parses a string to a boolean value leniently, allowing various string representations to be interpreted as 'false', and defaults to 'true' for other cases, unless a default value is provided.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"String\", \"description\": \"The string value to parse into a boolean.\"}, \"defaultValue\": {\"type\": \"boolean\", \"description\": \"The default boolean value to return if the string value is null.\"}}, \"required\": [\"value\", \"defaultValue\"]}}"}
{"scope": "sql", "query": "Can you eliminate all entries from the 'customer_data' table where the 'customer_age' is less than '18'?", "query_for_retrieval": "Can you eliminate all entries from the 'customer_data' table where the 'customer_age' is less than '18'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Convert 200 euros to US dollars using current exchange rate.", "query_for_retrieval": "Convert 200 euros to US dollars using current exchange rate.", "answer": "currency_exchange.convert", "answer_params": "", "api_description": "def currency_exchange.convert:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a value from one currency to another using the latest exchange rate.\n\t\n\tArguments:\n\t---------\n\t- amount : integer = None (required) The amount of money to be converted.\n\t- from_currency : string = None (required) The currency to convert from.\n\t- to_currency : string = None (required) The currency to convert to.\n\t- live_conversion : boolean = None (optional) If true, use the latest exchange rate for conversion, else use the last known rate. Default false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_exchange.convert\", \"description\": \"Converts a value from one currency to another using the latest exchange rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"integer\", \"description\": \"The amount of money to be converted.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The currency to convert from.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The currency to convert to.\"}, \"live_conversion\": {\"type\": \"boolean\", \"description\": \"If true, use the latest exchange rate for conversion, else use the last known rate. Default false\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the equivalent note of C in Indian musical scale? And convert the frequency 440 Hz to wavelength?", "query_for_retrieval": "What is the equivalent note of C in Indian musical scale? And convert the frequency 440 Hz to wavelength?", "answer": "frequency_to_wavelength", "answer_params": "", "api_description": "def frequency_to_wavelength:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts the frequency of a musical note to its wavelength.\n\t\n\tArguments:\n\t---------\n\t- frequency : float = None (required) The frequency in hertz of the musical note.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"frequency_to_wavelength\", \"description\": \"Converts the frequency of a musical note to its wavelength.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"frequency\": {\"type\": \"float\", \"description\": \"The frequency in hertz of the musical note.\"}}, \"required\": [\"frequency\"]}}"}
{"scope": "executable_simple", "query": "During my fieldwork in the forest, I've been closely monitoring a certain animal's movement patterns. Just recently, I've noted two specific spots where it's been sighted. The first location is marked by the coordinates (32.71, -117.16), and the second one is at (34.05, -118.25). To better understand its roaming area, I need to calculate the distance it traveled between these two points. Can you help me determine this distance using the coordinates I provided for the two locations?", "query_for_retrieval": "During my fieldwork in the forest, I've been closely monitoring a certain animal's movement patterns. Just recently, I've noted two specific spots where it's been sighted. The first location is marked by the coordinates (32.71, -117.16), and the second one is at (34.05, -118.25). To better understand its roaming area, I need to calculate the distance it traveled between these two points. Can you help me determine this distance using the coordinates I provided for the two locations?", "answer": "get_distance", "answer_params": "", "api_description": "def get_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the distance between two 2D points.\n\t\n\tArguments:\n\t---------\n\t- pointA : tuple = None (required) The first point.\n\t- pointB : tuple = None (required) The second point.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_distance\", \"description\": \"Calculates the distance between two 2D points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"tuple\", \"description\": \"The first point.\", \"items\": {\"type\": \"float\"}}, \"pointB\": {\"type\": \"tuple\", \"description\": \"The second point.\", \"items\": {\"type\": \"float\"}}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I'm working on a project that requires some diverse bits of information. First, I need to schedule a meeting with a client who is located at the coordinates with longitude 120.97388 and latitude 23.973875; I want to make sure I get the timezone correct to avoid any confusion. Additionally, there's a design aspect where I need to calculate the area of a circular plot with a radius of 15 meters for the landscaping team. Lastly, I'm keeping an eye on my investment portfolio and I'm curious about the latest stock price for Apple. Could you provide me with the timezone for the specified coordinates, the area of the circle, and the current stock price for Apple?", "query_for_retrieval": "I'm working on a project that requires some diverse bits of information. First, I need to schedule a meeting with a client who is located at the coordinates with longitude 120.97388 and latitude 23.973875; I want to make sure I get the timezone correct to avoid any confusion. Additionally, there's a design aspect where I need to calculate the area of a circular plot with a radius of 15 meters for the landscaping team. Lastly, I'm keeping an eye on my investment portfolio and I'm curious about the latest stock price for Apple. Could you provide me with the timezone for the specified coordinates, the area of the circle, and the current stock price for Apple?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "javascript", "query": "How can I generate a dynamic chart with user-provided data `userDataArray` and apply a scaling factor of 3 for the axis values, linking it to a given dashboard `dashboardElement`?", "query_for_retrieval": "How can I generate a dynamic chart with user-provided data `userDataArray` and apply a scaling factor of 3 for the axis values, linking it to a given dashboard `dashboardElement`?", "answer": "DynamicChartGenerator", "answer_params": "", "api_description": "def DynamicChartGenerator:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function creates a dynamic chart based on user input, applies a scaling factor to the axis values, and integrates the chart into a specified dashboard for display.\n\t\n\tArguments:\n\t---------\n\t- userData : array = None (required) The data provided by the user to plot on the chart.\n\t- scalingFactor : float = None (required) A scaling factor applied to the chart's axis values. Optional parameter.\n\t- dashboard : any = None (required) The dashboard where the chart will be displayed.\n\t- options : dict = None (optional) Additional configuration options for the chart. Default empty dict\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DynamicChartGenerator\", \"description\": \"This function creates a dynamic chart based on user input, applies a scaling factor to the axis values, and integrates the chart into a specified dashboard for display.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"userData\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The data provided by the user to plot on the chart.\"}, \"scalingFactor\": {\"type\": \"float\", \"description\": \"A scaling factor applied to the chart's axis values. Optional parameter.\"}, \"dashboard\": {\"type\": \"any\", \"description\": \"The dashboard where the chart will be displayed.\"}, \"options\": {\"type\": \"dict\", \"description\": \"Additional configuration options for the chart. Default empty dict\"}}, \"required\": [\"userData\", \"scalingFactor\", \"dashboard\"]}}"}
{"scope": "executable_simple", "query": "I manage inventory for our online store, and it's crucial to keep track of our competitors' pricing, particularly on Amazon. We're currently selling a product that is also listed there, and I want to ensure our prices are competitive. Could you find out the latest price for the product with the Amazon ASIN 'B08PPDJWC8'?", "query_for_retrieval": "I manage inventory for our online store, and it's crucial to keep track of our competitors' pricing, particularly on Amazon. We're currently selling a product that is also listed there, and I want to ensure our prices are competitive. Could you find out the latest price for the product with the Amazon ASIN 'B08PPDJWC8'?", "answer": "get_price_by_amazon_ASIN", "answer_params": "", "api_description": "def get_price_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_price_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find all prime numbers between 50 and 150. Then get the fibonacci series upto 150.", "query_for_retrieval": "Find all prime numbers between 50 and 150. Then get the fibonacci series upto 150.", "answer": "count_items", "answer_params": "", "api_description": "def count_items:\n\t\"\"\"\n\tDescription:\n\t\n\tCount the number of items in a collection.\n\t\n\tArguments:\n\t---------\n\t- collection : array = None (required) The collection of items to count\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"count_items\", \"description\": \"Count the number of items in a collection.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The collection of items to count\"}}, \"required\": [\"collection\"]}}"}
{"scope": "relevance", "query": "Find the information on motor neuron diseases", "query_for_retrieval": "Find the information on motor neuron diseases", "answer": "medical_records.get_disease_info", "answer_params": "", "api_description": "def medical_records.get_disease_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves comprehensive medical information based on the name of the disease\n\t\n\tArguments:\n\t---------\n\t- disease_name : string = None (required) The name of the disease\n\t- include_statistics : boolean = None (optional) Whether to include statistics related to the disease. Default is false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"medical_records.get_disease_info\", \"description\": \"Retrieves comprehensive medical information based on the name of the disease\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"disease_name\": {\"type\": \"string\", \"description\": \"The name of the disease\"}, \"include_statistics\": {\"type\": \"boolean\", \"description\": \"Whether to include statistics related to the disease. Default is false\"}}, \"required\": [\"disease_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a trip? I would like to first find the shortest path from my home in New York City to the Metropolitan Museum of Art by walking. Then, I want to estimate how long it will take to walk this route. After visiting the museum, I plan to bike to Central Park. Could you find the shortest path for this bike trip? And finally, I would like to know how long it would take to bike this route.\"", "query_for_retrieval": "\"Can you help me plan a trip? I would like to first find the shortest path from my home in New York City to the Metropolitan Museum of Art by walking. Then, I want to estimate how long it will take to walk this route. After visiting the museum, I plan to bike to Central Park. Could you find the shortest path for this bike trip? And finally, I would like to know how long it would take to bike this route.\"", "answer": "maps.shortest_path", "answer_params": "", "api_description": "def maps.shortest_path:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the shortest path from one location to another by using a specific mode of transportation.\n\t\n\tArguments:\n\t---------\n\t- start_location : string = None (required) The name or coordinates of the start location.\n\t- end_location : string = None (required) The name or coordinates of the end location.\n\t- mode : string = walk (optional) The mode of transportation (walk, bike, transit, drive).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maps.shortest_path\", \"description\": \"Find the shortest path from one location to another by using a specific mode of transportation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start_location\": {\"type\": \"string\", \"description\": \"The name or coordinates of the start location.\"}, \"end_location\": {\"type\": \"string\", \"description\": \"The name or coordinates of the end location.\"}, \"mode\": {\"type\": \"string\", \"description\": \"The mode of transportation (walk, bike, transit, drive).\", \"default\": \"walk\"}}, \"required\": [\"start_location\", \"end_location\"]}}"}
{"scope": "parallel_function", "query": "What's the current most played Pop song and also find me the current most played Rock song in Australia.", "query_for_retrieval": "What's the current most played Pop song and also find me the current most played Rock song in Australia.", "answer": "musicCharts.getMostPlayed", "answer_params": "", "api_description": "def musicCharts.getMostPlayed:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function retrieves the most played song in a particular genre from a specified region\n\t\n\tArguments:\n\t---------\n\t- genre : string = None (required) Music genre e.g., Rock, Pop, HipHop etc.\n\t- region : string = None (required) Region where the song popularity is to be checked\n\t- duration : integer = None (optional) Time duration in hours for which the music played count will be considered. default is 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"musicCharts.getMostPlayed\", \"description\": \"This function retrieves the most played song in a particular genre from a specified region\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"genre\": {\"type\": \"string\", \"description\": \"Music genre e.g., Rock, Pop, HipHop etc.\"}, \"region\": {\"type\": \"string\", \"description\": \"Region where the song popularity is to be checked\"}, \"duration\": {\"type\": \"integer\", \"description\": \"Time duration in hours for which the music played count will be considered. default is 0\"}}, \"required\": [\"genre\", \"region\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a day out in Seattle, WA for my group of 10 friends? We are food lovers and would like to try some Seafood and Italian cuisine for lunch. Later in the evening, we are interested in attending a Concert or a Sports event. Could you find suitable restaurants and events for us?\"", "query_for_retrieval": "\"Can you help me plan a day out in Seattle, WA for my group of 10 friends? We are food lovers and would like to try some Seafood and Italian cuisine for lunch. Later in the evening, we are interested in attending a Concert or a Sports event. Could you find suitable restaurants and events for us?\"", "answer": "restaurant.find_group", "answer_params": "", "api_description": "def restaurant.find_group:\n\t\"\"\"\n\tDescription:\n\t\n\tFind restaurants suitable for groups based on specified criteria such as location and cuisine.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Seattle, WA\n\t- cuisine : array = None (optional) Preferred cuisine at the restaurant. Default is all if not specified.\n\t- group_size : integer = None (required) Size of the group that the restaurant should accommodate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_group\", \"description\": \"Find restaurants suitable for groups based on specified criteria such as location and cuisine.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Seattle, WA\"}, \"cuisine\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Seafood\", \"Italian\", \"Indian\", \"Chinese\"]}, \"description\": \"Preferred cuisine at the restaurant. Default is all if not specified.\"}, \"group_size\": {\"type\": \"integer\", \"description\": \"Size of the group that the restaurant should accommodate.\"}}, \"required\": [\"location\", \"group_size\"]}}"}
{"scope": "rest", "query": "I'm planning a hike next weekend and need to prepare for the weather. Can you fetch me a 7-day weather forecast including temperature 2 minute max, wind speed, and mean probability of precipitation for the coordinates 35.6895N, 139.6917 E, with temperatures in Celsius, wind speed 10 minute max in km/h, and precipitation in mm?", "query_for_retrieval": "I'm planning a hike next weekend and need to prepare for the weather. Can you fetch me a 7-day weather forecast including temperature 2 minute max, wind speed, and mean probability of precipitation for the coordinates 35.6895N, 139.6917 E, with temperatures in Celsius, wind speed 10 minute max in km/h, and precipitation in mm?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "What's the required minimum population size (Ne) for maintaining the genetic diversity of a wild tiger population for the next 100 generations with a probability of 0.95?", "query_for_retrieval": "What's the required minimum population size (Ne) for maintaining the genetic diversity of a wild tiger population for the next 100 generations with a probability of 0.95?", "answer": "species_distribution_modeling.project_range_shift", "answer_params": "", "api_description": "def species_distribution_modeling.project_range_shift:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the potential future geographic distribution of a species under a specified climate change scenario.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species of animal.\n\t- climate_scenario : string = None (required) The name of the climate change scenario.\n\t- future_time : integer = 100 (optional) The future time in years for the prediction.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"species_distribution_modeling.project_range_shift\", \"description\": \"Predict the potential future geographic distribution of a species under a specified climate change scenario.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species of animal.\"}, \"climate_scenario\": {\"type\": \"string\", \"description\": \"The name of the climate change scenario.\"}, \"future_time\": {\"type\": \"integer\", \"description\": \"The future time in years for the prediction.\", \"default\": 100}}, \"required\": [\"species\", \"climate_scenario\"]}}"}
{"scope": "relevance", "query": "When was the Declaration of Independence signed?", "query_for_retrieval": "When was the Declaration of Independence signed?", "answer": "calculate_age", "answer_params": "", "api_description": "def calculate_age:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the age of a person based on their birthdate.\n\t\n\tArguments:\n\t---------\n\t- birthdate : string = None (required) The person's date of birth. The format should be YYYY-MM-DD.\n\t- current_date : string = None (required) The current date. The format should be YYYY-MM-DD.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_age\", \"description\": \"Calculate the age of a person based on their birthdate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"birthdate\": {\"type\": \"string\", \"description\": \"The person's date of birth. The format should be YYYY-MM-DD.\"}, \"current_date\": {\"type\": \"string\", \"description\": \"The current date. The format should be YYYY-MM-DD.\"}}, \"required\": [\"birthdate\", \"current_date\"]}}"}
{"scope": "executable_simple", "query": "I'm working on a combinatorics problem and I've hit a step where I need to calculate the factorial of 7. Can you help me get that result?", "query_for_retrieval": "I'm working on a combinatorics problem and I've hit a step where I need to calculate the factorial of 7. Can you help me get that result?", "answer": "math_factorial", "answer_params": "", "api_description": "def math_factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the factorial of a number.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number to calculate the factorial of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_factorial\", \"description\": \"Calculates the factorial of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number to calculate the factorial of.\"}}, \"required\": [\"n\"]}}"}
{"scope": "relevance", "query": "What is the current bitcoin price?", "query_for_retrieval": "What is the current bitcoin price?", "answer": "database_connect.select", "answer_params": "", "api_description": "def database_connect.select:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve specific records from a given database and table.\n\t\n\tArguments:\n\t---------\n\t- database_name : string = None (required) The name of the database.\n\t- table_name : string = None (required) The name of the table in the database.\n\t- condition : string = none (optional) SQL condition to select specific records.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"database_connect.select\", \"description\": \"Retrieve specific records from a given database and table.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"database_name\": {\"type\": \"string\", \"description\": \"The name of the database.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the table in the database.\"}, \"condition\": {\"type\": \"string\", \"description\": \"SQL condition to select specific records.\", \"default\": \"none\"}}, \"required\": [\"database_name\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What is the Pantone color code for sky blue?", "query_for_retrieval": "What is the Pantone color code for sky blue?", "answer": "calculate_paint_mix", "answer_params": "", "api_description": "def calculate_paint_mix:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the proportions of different paint colors required to obtain a specific color shade.\n\t\n\tArguments:\n\t---------\n\t- target_color : string = None (required) The target color to mix.\n\t- available_colors : array = None (required) No description available.\n\t- shade_level : integer = None (optional) Intensity of the shade on a scale of 1-10. Optional parameter. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_paint_mix\", \"description\": \"Calculate the proportions of different paint colors required to obtain a specific color shade.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"target_color\": {\"type\": \"string\", \"description\": \"The target color to mix.\"}, \"available_colors\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"List of available colors.\"}}, \"shade_level\": {\"type\": \"integer\", \"description\": \"Intensity of the shade on a scale of 1-10. Optional parameter. Default is 5.\"}}, \"required\": [\"target_color\", \"available_colors\"]}}"}
{"scope": "multiple_function", "query": "Find the intersection points of the functions y=3x+2 and y=2x+3.", "query_for_retrieval": "Find the intersection points of the functions y=3x+2 and y=2x+3.", "answer": "functions.zero", "answer_params": "", "api_description": "def functions.zero:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the zero points of a function.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) Function given as a string with x as the variable, e.g. 3x+2\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"functions.zero\", \"description\": \"Find the zero points of a function.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"Function given as a string with x as the variable, e.g. 3x+2\"}}, \"required\": [\"function\"]}}"}
{"scope": "sql", "query": "In a university database, there is a table named \"Students\" that stores all the information about the students. A student named \"Jane Smith\" has recently withdrawn from the university. Can you eliminate all the records from the \"Students\" table where the student's name is \"Jane Smith\"?", "query_for_retrieval": "In a university database, there is a table named \"Students\" that stores all the information about the students. A student named \"Jane Smith\" has recently withdrawn from the university. Can you eliminate all the records from the \"Students\" table where the student's name is \"Jane Smith\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What's timezone is it in London?", "query_for_retrieval": "What's timezone is it in London?", "answer": "get_local_time", "answer_params": "", "api_description": "def get_local_time:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current local time in a specified time zone.\n\t\n\tArguments:\n\t---------\n\t- timezone : string = None (required) The timezone for which local time needs to be calculated.\n\t- date_format : string = None (required) The format in which the date and time should be returned. Default is 'YYYY-MM-DD HH:mm:ss'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_local_time\", \"description\": \"Retrieve the current local time in a specified time zone.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"timezone\": {\"type\": \"string\", \"description\": \"The timezone for which local time needs to be calculated.\"}, \"date_format\": {\"type\": \"string\", \"description\": \"The format in which the date and time should be returned. Default is 'YYYY-MM-DD HH:mm:ss'.\"}}, \"required\": [\"timezone\", \"date_format\"]}}"}
{"scope": "java", "query": "How can I notify the routing nodes observer that a previously unassigned shard `shardA` is now in the initializing state `shardB` in an Elasticsearch cluster?", "query_for_retrieval": "How can I notify the routing nodes observer that a previously unassigned shard `shardA` is now in the initializing state `shardB` in an Elasticsearch cluster?", "answer": "RoutingNodesChangedObserver.shardInitialized", "answer_params": "", "api_description": "def RoutingNodesChangedObserver.shardInitialized:\n\t\"\"\"\n\tDescription:\n\t\n\tNotifies the observer that an unassigned shard has changed to an initializing state.\n\t\n\tArguments:\n\t---------\n\t- unassignedShard : any = None (required) The shard that was previously unassigned.\n\t- initializedShard : any = None (required) The shard that is now in the initializing state.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RoutingNodesChangedObserver.shardInitialized\", \"description\": \"Notifies the observer that an unassigned shard has changed to an initializing state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"unassignedShard\": {\"type\": \"any\", \"description\": \"The shard that was previously unassigned.\"}, \"initializedShard\": {\"type\": \"any\", \"description\": \"The shard that is now in the initializing state.\"}}, \"required\": [\"unassignedShard\", \"initializedShard\"]}}"}
{"scope": "relevance", "query": "What should be the ingredient  for baking chocolate cake?", "query_for_retrieval": "What should be the ingredient  for baking chocolate cake?", "answer": "recipe.getTemperature", "answer_params": "", "api_description": "def recipe.getTemperature:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the cooking temperature for a specific recipe.\n\t\n\tArguments:\n\t---------\n\t- dish_name : string = None (required) The name of the dish.\n\t- oven_type : string = None (required) The type of oven. e.g. Conventional, Convection\n\t- pre_heating : boolean = false (optional) Is pre-heating needed or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe.getTemperature\", \"description\": \"Get the cooking temperature for a specific recipe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dish_name\": {\"type\": \"string\", \"description\": \"The name of the dish.\"}, \"oven_type\": {\"type\": \"string\", \"description\": \"The type of oven. e.g. Conventional, Convection\"}, \"pre_heating\": {\"type\": \"boolean\", \"description\": \"Is pre-heating needed or not.\", \"default\": \"false\"}}, \"required\": [\"dish_name\", \"oven_type\"]}}"}
{"scope": "sql", "query": "Can you change the 'price' column in the 'products' table for the product with the SKU 'P789' to '15.99'?", "query_for_retrieval": "Can you change the 'price' column in the 'products' table for the product with the SKU 'P789' to '15.99'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "rest", "query": "What is the proper requests.get call to fetch the latest USD to EUR exchange rates using my API key `YOUR-EXCHANGERATE-API-KEY`?", "query_for_retrieval": "What is the proper requests.get call to fetch the latest USD to EUR exchange rates using my API key `YOUR-EXCHANGERATE-API-KEY`?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm playing a dice game and want to calculate my chances. I roll the die 20 times, and I'm trying to figure out the probability of landing on a 6 exactly five times, considering each roll has a one in six chance of being a 6. Could you help me with that?", "query_for_retrieval": "I'm playing a dice game and want to calculate my chances. I roll the die 20 times, and I'm trying to figure out the probability of landing on a 6 exactly five times, considering each roll has a one in six chance of being a 6. Could you help me with that?", "answer": "get_weather_data", "answer_params": "", "api_description": "def get_weather_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches weather data from the Open-Meteo API for the given latitude and longitude.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The latitude and longitude of the location.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_weather_data\", \"description\": \"Fetches weather data from the Open-Meteo API for the given latitude and longitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The latitude and longitude of the location.\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "sql", "query": "In a database, there is a table named \"Employees\" which contains information about all the employees in a company. The company has recently fired an employee named \"John Doe\". Can you remove all the records from the \"Employees\" table where the employee's name is \"John Doe\"?", "query_for_retrieval": "In a database, there is a table named \"Employees\" which contains information about all the employees in a company. The company has recently fired an employee named \"John Doe\". Can you remove all the records from the \"Employees\" table where the employee's name is \"John Doe\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Who was the composer of Moonlight Sonata?", "query_for_retrieval": "Who was the composer of Moonlight Sonata?", "answer": "music_theory.get_blues_scale", "answer_params": "", "api_description": "def music_theory.get_blues_scale:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates the blues scale in a given key.\n\t\n\tArguments:\n\t---------\n\t- key : string = None (required) The root note or key of the blues scale.\n\t- show_intervals : boolean = None (optional) Flag to show the intervals of the scale. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"music_theory.get_blues_scale\", \"description\": \"Generates the blues scale in a given key.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"string\", \"description\": \"The root note or key of the blues scale.\"}, \"show_intervals\": {\"type\": \"boolean\", \"description\": \"Flag to show the intervals of the scale. Default is false.\"}}, \"required\": [\"key\"]}}"}
{"scope": "simple", "query": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "query_for_retrieval": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "answer": "law_case_search", "answer_params": "", "api_description": "def law_case_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch and retrieve law cases based on the topic, timeline, and location.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The subject matter of the case.\n\t- year_range : array = None (required) The start and end year for searching cases.\n\t- location : string = None (required) The location where the case is being heard.\n\t- judicial_system : string = all (optional) The specific judicial system in which to search (e.g. 'federal', 'state').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_case_search\", \"description\": \"Search and retrieve law cases based on the topic, timeline, and location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The subject matter of the case.\"}, \"year_range\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The start and end year for searching cases.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the case is being heard.\"}, \"judicial_system\": {\"type\": \"string\", \"description\": \"The specific judicial system in which to search (e.g. 'federal', 'state').\", \"default\": \"all\"}}, \"required\": [\"topic\", \"year_range\", \"location\"]}}"}
{"scope": "simple", "query": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "query_for_retrieval": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "answer": "calculate_discounted_cash_flow", "answer_params": "", "api_description": "def calculate_discounted_cash_flow:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\n\t\n\tArguments:\n\t---------\n\t- coupon_payment : integer = None (required) The annual coupon payment.\n\t- period : integer = None (required) The time frame in years for which coupon payment is made.\n\t- discount_rate : float = None (required) The discount rate.\n\t- face_value : integer = None (optional) The face value of the bond, default is 1000.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_discounted_cash_flow\", \"description\": \"Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coupon_payment\": {\"type\": \"integer\", \"description\": \"The annual coupon payment.\"}, \"period\": {\"type\": \"integer\", \"description\": \"The time frame in years for which coupon payment is made.\"}, \"discount_rate\": {\"type\": \"float\", \"description\": \"The discount rate.\"}, \"face_value\": {\"type\": \"integer\", \"description\": \"The face value of the bond, default is 1000.\"}}, \"required\": [\"coupon_payment\", \"period\", \"discount_rate\"]}}"}
{"scope": "relevance", "query": "What is the common ancestor of lion and zebra?", "query_for_retrieval": "What is the common ancestor of lion and zebra?", "answer": "calculate_fibonacci_sequence", "answer_params": "", "api_description": "def calculate_fibonacci_sequence:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates fibonacci sequence up to a specified limit.\n\t\n\tArguments:\n\t---------\n\t- limit : integer = None (required) The upper limit of the fibonacci sequence to be calculated.\n\t- show_sequence : boolean = None (optional) Optional parameter to decide whether to print the fibonacci sequence or not. Default is False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_fibonacci_sequence\", \"description\": \"Calculates fibonacci sequence up to a specified limit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The upper limit of the fibonacci sequence to be calculated.\"}, \"show_sequence\": {\"type\": \"boolean\", \"description\": \"Optional parameter to decide whether to print the fibonacci sequence or not. Default is False.\"}}, \"required\": [\"limit\"]}}"}
{"scope": "relevance", "query": "What's the rank for player A in the game Halo?", "query_for_retrieval": "What's the rank for player A in the game Halo?", "answer": "get_player_score", "answer_params": "", "api_description": "def get_player_score:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a player's score from a specific game\n\t\n\tArguments:\n\t---------\n\t- player : string = None (required) The name of the player\n\t- game : string = None (required) The game that the player is participating in\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_player_score\", \"description\": \"Retrieve a player's score from a specific game\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player\": {\"type\": \"string\", \"description\": \"The name of the player\"}, \"game\": {\"type\": \"string\", \"description\": \"The game that the player is participating in\"}}, \"required\": [\"player\", \"game\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me how many active players were engaged with the video game 'Call of Duty: Modern Warfare' in the year 2019 on the 'Playstation' platform, and then compare that with the number of active players for the same game in the year 2020 on the 'PC' platform? Also, could you provide the sales figures for 'Call of Duty: Modern Warfare' for the year 2019 on the 'Playstation' platform and then for the year 2020 on the 'PC' platform?\"", "query_for_retrieval": "\"Can you tell me how many active players were engaged with the video game 'Call of Duty: Modern Warfare' in the year 2019 on the 'Playstation' platform, and then compare that with the number of active players for the same game in the year 2020 on the 'PC' platform? Also, could you provide the sales figures for 'Call of Duty: Modern Warfare' for the year 2019 on the 'Playstation' platform and then for the year 2020 on the 'PC' platform?\"", "answer": "video_games.get_player_count", "answer_params": "", "api_description": "def video_games.get_player_count:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the number of active players for a specified video game and year.\n\t\n\tArguments:\n\t---------\n\t- game_title : string = None (required) The title of the video game.\n\t- year : integer = None (required) The year in question.\n\t- platform : string = None (optional) The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"video_games.get_player_count\", \"description\": \"Retrieves the number of active players for a specified video game and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"game_title\": {\"type\": \"string\", \"description\": \"The title of the video game.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in question.\"}, \"platform\": {\"type\": \"string\", \"optional\": true, \"description\": \"The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified.\"}}, \"required\": [\"game_title\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the exact birthdate of Nikola Tesla and what his most famous discovery was?", "query_for_retrieval": "What is the exact birthdate of Nikola Tesla and what his most famous discovery was?", "answer": "scientist_info.get_birthdate", "answer_params": "", "api_description": "def scientist_info.get_birthdate:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the birthdate of a specific scientist.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the scientist.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"scientist_info.get_birthdate\", \"description\": \"Retrieve the birthdate of a specific scientist.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the scientist.\"}}, \"required\": [\"name\"]}}"}
{"scope": "java", "query": "How can I initialize a plain text presentation for a result set controller named 'dataController' within a parent composite UI element 'compositeParent', ensuring that the text area is read-only and supports multi-line input, horizontal and vertical scrolling?", "query_for_retrieval": "How can I initialize a plain text presentation for a result set controller named 'dataController' within a parent composite UI element 'compositeParent', ensuring that the text area is read-only and supports multi-line input, horizontal and vertical scrolling?", "answer": "PlainTextPresentation.createPresentation", "answer_params": "", "api_description": "def PlainTextPresentation.createPresentation:\n\t\"\"\"\n\tDescription:\n\t\n\tInitializes the plain text presentation for a result set controller within a given parent composite UI element, setting up a styled text area with appropriate properties and listeners.\n\t\n\tArguments:\n\t---------\n\t- controller : any = None (required) The IResultSetController instance responsible for managing the result set.\n\t- parent : any = None (required) The Composite UI element that will contain the plain text presentation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"PlainTextPresentation.createPresentation\", \"description\": \"Initializes the plain text presentation for a result set controller within a given parent composite UI element, setting up a styled text area with appropriate properties and listeners.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"controller\": {\"type\": \"any\", \"description\": \"The IResultSetController instance responsible for managing the result set.\"}, \"parent\": {\"type\": \"any\", \"description\": \"The Composite UI element that will contain the plain text presentation.\"}}, \"required\": [\"controller\", \"parent\"]}}"}
{"scope": "relevance", "query": "Who won the Grammy Award for Best Album in 2017?", "query_for_retrieval": "Who won the Grammy Award for Best Album in 2017?", "answer": "get_song_chord_progression", "answer_params": "", "api_description": "def get_song_chord_progression:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the chord progression for a specific song.\n\t\n\tArguments:\n\t---------\n\t- song_name : string = None (required) The name of the song.\n\t- artist_name : string = None (required) The name of the artist/band.\n\t- capo_position : integer = None (optional) The capo position on the guitar, if applicable. Defaults to 0 (no capo).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_song_chord_progression\", \"description\": \"Retrieve the chord progression for a specific song.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"song_name\": {\"type\": \"string\", \"description\": \"The name of the song.\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist/band.\"}, \"capo_position\": {\"type\": \"integer\", \"description\": \"The capo position on the guitar, if applicable. Defaults to 0 (no capo).\"}}, \"required\": [\"song_name\", \"artist_name\"]}}"}
{"scope": "simple", "query": "Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.", "query_for_retrieval": "Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.", "answer": "electromagnetic_force", "answer_params": "", "api_description": "def electromagnetic_force:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electromagnetic force between two charges placed at a certain distance.\n\t\n\tArguments:\n\t---------\n\t- charge1 : integer = None (required) The magnitude of the first charge in coulombs.\n\t- charge2 : integer = None (required) The magnitude of the second charge in coulombs.\n\t- distance : integer = None (required) The distance between the two charges in meters.\n\t- medium_permittivity : float = None (optional) The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"electromagnetic_force\", \"description\": \"Calculate the electromagnetic force between two charges placed at a certain distance.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge1\": {\"type\": \"integer\", \"description\": \"The magnitude of the first charge in coulombs.\"}, \"charge2\": {\"type\": \"integer\", \"description\": \"The magnitude of the second charge in coulombs.\"}, \"distance\": {\"type\": \"integer\", \"description\": \"The distance between the two charges in meters.\"}, \"medium_permittivity\": {\"type\": \"float\", \"description\": \"The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity).\"}}, \"required\": [\"charge1\", \"charge2\", \"distance\"]}}"}
{"scope": "relevance", "query": "How much gas is generated from heating a 2 m\u00b3 closed chamber with air at a temperature of 25\u00b0C to 100\u00b0C?", "query_for_retrieval": "How much gas is generated from heating a 2 m\u00b3 closed chamber with air at a temperature of 25\u00b0C to 100\u00b0C?", "answer": "thermodynamics.calc_gas_pressure", "answer_params": "", "api_description": "def thermodynamics.calc_gas_pressure:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate gas pressure in a closed chamber due to heating\n\t\n\tArguments:\n\t---------\n\t- volume : float = None (required) The volume of the chamber in cubic meters.\n\t- initial_temperature : float = None (required) The initial temperature of the gas in degree Celsius.\n\t- final_temperature : float = None (required) The final temperature of the gas in degree Celsius.\n\t- initial_pressure : float = None (optional) The initial pressure of the gas in Pascal. Default is standard atmospheric pressure.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"thermodynamics.calc_gas_pressure\", \"description\": \"Calculate gas pressure in a closed chamber due to heating\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume\": {\"type\": \"float\", \"description\": \"The volume of the chamber in cubic meters.\"}, \"initial_temperature\": {\"type\": \"float\", \"description\": \"The initial temperature of the gas in degree Celsius.\"}, \"final_temperature\": {\"type\": \"float\", \"description\": \"The final temperature of the gas in degree Celsius.\"}, \"initial_pressure\": {\"type\": \"float\", \"description\": \"The initial pressure of the gas in Pascal. Default is standard atmospheric pressure.\"}}, \"required\": [\"volume\", \"initial_temperature\", \"final_temperature\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently conducting research on the impact of COVID-19 and my focus is on Brazil. I need the latest total death count for the country to analyze the severity of the pandemic there. Could you provide me with this information?", "query_for_retrieval": "I'm currently conducting research on the impact of COVID-19 and my focus is on Brazil. I need the latest total death count for the country to analyze the severity of the pandemic there. Could you provide me with this information?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "sql", "query": "Can you remove all records from the 'EconomicData' table in the database that have 'GDP' in the 'Indicator' column and '2010' in the 'Year' column?", "query_for_retrieval": "Can you remove all records from the 'EconomicData' table in the database that have 'GDP' in the 'Indicator' column and '2010' in the 'Year' column?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "sql", "query": "In our chemistry database, there's a table called \"Compounds\" that stores data about various chemical compounds. The columns of this table are 'CompoundName', 'Formula', 'MolarMass', 'Density', and 'MeltingPoint'. We've recently discovered that the molar mass of the compound \"Water\" has been inaccurately recorded as 18.01 g/mol. The correct molar mass should be 18.01528 g/mol. Could you please correct this error in our database? Make sure to apply this change only to the record where 'CompoundName' is \"Water\".", "query_for_retrieval": "In our chemistry database, there's a table called \"Compounds\" that stores data about various chemical compounds. The columns of this table are 'CompoundName', 'Formula', 'MolarMass', 'Density', and 'MeltingPoint'. We've recently discovered that the molar mass of the compound \"Water\" has been inaccurately recorded as 18.01 g/mol. The correct molar mass should be 18.01528 g/mol. Could you please correct this error in our database? Make sure to apply this change only to the record where 'CompoundName' is \"Water\".", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with some math problems? First, I need to find the roots of a quadratic equation. The equation is 3x^2 + 4x - 7 = 0, where 3 is the coefficient of the second-degree term, 4 is the coefficient of the first-degree term, and -7 is the constant term. \n\nSecond, I have a cubic equation, 2x^3 - 5x^2 + 3x - 1 = 0. Here, 2 is the coefficient of the third-degree term, -5 is the coefficient of the second-degree term, 3 is the coefficient of the first-degree term, and -1 is the constant term. \n\nFinally, I have a polynomial equation of degree 4, which is 6x^4 - 3x^3 + 2x^2 - x + 1 = 0. The array of coefficients of the polynomial equation starting from the highest degree term is [6, -3, 2, -1, 1]. Can you calculate the roots for these equations?\"", "query_for_retrieval": "\"Can you help me with some math problems? First, I need to find the roots of a quadratic equation. The equation is 3x^2 + 4x - 7 = 0, where 3 is the coefficient of the second-degree term, 4 is the coefficient of the first-degree term, and -7 is the constant term. \n\nSecond, I have a cubic equation, 2x^3 - 5x^2 + 3x - 1 = 0. Here, 2 is the coefficient of the third-degree term, -5 is the coefficient of the second-degree term, 3 is the coefficient of the first-degree term, and -1 is the constant term. \n\nFinally, I have a polynomial equation of degree 4, which is 6x^4 - 3x^3 + 2x^2 - x + 1 = 0. The array of coefficients of the polynomial equation starting from the highest degree term is [6, -3, 2, -1, 1]. Can you calculate the roots for these equations?\"", "answer": "math.roots.polynomial", "answer_params": "", "api_description": "def math.roots.polynomial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the roots of a polynomial equation.\n\t\n\tArguments:\n\t---------\n\t- coefficients : array = None (required) Array of coefficients of the polynomial equation starting from highest degree term.\n\t- degree : float = 4 (optional) Degree of the polynomial equation.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.roots.polynomial\", \"description\": \"Calculate the roots of a polynomial equation.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coefficients\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Array of coefficients of the polynomial equation starting from highest degree term.\"}, \"degree\": {\"type\": \"float\", \"description\": \"Degree of the polynomial equation.\", \"default\": 4}}, \"required\": [\"coefficients\"]}}"}
{"scope": "simple", "query": "Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.", "query_for_retrieval": "Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.", "answer": "calculate_binomial_probability", "answer_params": "", "api_description": "def calculate_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n\t\n\tArguments:\n\t---------\n\t- number_of_trials : integer = None (required) The total number of trials.\n\t- number_of_successes : integer = None (required) The desired number of successful outcomes.\n\t- probability_of_success : float = 0.5 (optional) The probability of a successful outcome on any given trial.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_binomial_probability\", \"description\": \"Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number_of_trials\": {\"type\": \"integer\", \"description\": \"The total number of trials.\"}, \"number_of_successes\": {\"type\": \"integer\", \"description\": \"The desired number of successful outcomes.\"}, \"probability_of_success\": {\"type\": \"float\", \"description\": \"The probability of a successful outcome on any given trial.\", \"default\": 0.5}}, \"required\": [\"number_of_trials\", \"number_of_successes\"]}}"}
{"scope": "parallel_function", "query": "What is the molecular weight of the compound C6H12O6 (Glucose) in 'grams/mole' and how does it compare to the molecular weight of the compound C12H22O11 (Sucrose) in the same unit?", "query_for_retrieval": "What is the molecular weight of the compound C6H12O6 (Glucose) in 'grams/mole' and how does it compare to the molecular weight of the compound C12H22O11 (Sucrose) in the same unit?", "answer": "calculate_molecular_weight", "answer_params": "", "api_description": "def calculate_molecular_weight:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the molecular weight of a compound given the compound formula.\n\t\n\tArguments:\n\t---------\n\t- compound : string = None (required) The molecular formula of the compound.\n\t- to_unit : string = None (required) The unit in which to return the result. Default is 'grams/mole'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_molecular_weight\", \"description\": \"Calculate the molecular weight of a compound given the compound formula.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"compound\": {\"type\": \"string\", \"description\": \"The molecular formula of the compound.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit in which to return the result. Default is 'grams/mole'\"}}, \"required\": [\"compound\", \"to_unit\"]}}"}
{"scope": "java", "query": "How can I handle an exception event `ioExceptionEvent` that occurred in the channel context `nettyChannelContext` during a network communication session, and ensure the channel is closed after logging the error with the message 'something goes wrong with channel'?", "query_for_retrieval": "How can I handle an exception event `ioExceptionEvent` that occurred in the channel context `nettyChannelContext` during a network communication session, and ensure the channel is closed after logging the error with the message 'something goes wrong with channel'?", "answer": "SessionHandler.exceptionCaught", "answer_params": "", "api_description": "def SessionHandler.exceptionCaught:\n\t\"\"\"\n\tDescription:\n\t\n\tHandles an exception event by logging the error and closing the channel associated with the provided ChannelHandlerContext.\n\t\n\tArguments:\n\t---------\n\t- ctx : any = None (required) The ChannelHandlerContext associated with the channel where the exception occurred.\n\t- e : any = None (required) The ExceptionEvent that contains the exception details.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SessionHandler.exceptionCaught\", \"description\": \"Handles an exception event by logging the error and closing the channel associated with the provided ChannelHandlerContext.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ctx\": {\"type\": \"any\", \"description\": \"The ChannelHandlerContext associated with the channel where the exception occurred.\"}, \"e\": {\"type\": \"any\", \"description\": \"The ExceptionEvent that contains the exception details.\"}}, \"required\": [\"ctx\", \"e\"]}}"}
{"scope": "relevance", "query": "Who played for Clippers in NBA", "query_for_retrieval": "Who played for Clippers in NBA", "answer": "get_game_results", "answer_params": "", "api_description": "def get_game_results:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve game results between two teams on a specific date.\n\t\n\tArguments:\n\t---------\n\t- team_1 : string = None (required) The first team's name.\n\t- team_2 : string = None (required) The second team's name.\n\t- date : string = None (required) The date of the game in the format YYYY-MM-DD.\n\t- venue : string = basketball (optional) The venue of the match.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_game_results\", \"description\": \"Retrieve game results between two teams on a specific date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_1\": {\"type\": \"string\", \"description\": \"The first team's name.\"}, \"team_2\": {\"type\": \"string\", \"description\": \"The second team's name.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the game in the format YYYY-MM-DD.\"}, \"venue\": {\"type\": \"string\", \"description\": \"The venue of the match.\", \"default\": \"basketball\"}}, \"required\": [\"team_1\", \"team_2\", \"date\"]}}"}
{"scope": "parallel_function", "query": "\"Could you use the 'predict_house_price' function to compare the estimated prices of four different houses? The first house is located in New York, has 3 bedrooms, 2 bathrooms, and an area of 1500 square feet. The second house is in Los Angeles, with 4 bedrooms, 3 bathrooms, and an area of 2000 square feet. The third house is in Chicago, with 2 bedrooms, 1 bathroom, and an area of 1200 square feet. The fourth house is in Miami, with 3 bedrooms, 2 bathrooms, and an area of 1800 square feet.\"", "query_for_retrieval": "\"Could you use the 'predict_house_price' function to compare the estimated prices of four different houses? The first house is located in New York, has 3 bedrooms, 2 bathrooms, and an area of 1500 square feet. The second house is in Los Angeles, with 4 bedrooms, 3 bathrooms, and an area of 2000 square feet. The third house is in Chicago, with 2 bedrooms, 1 bathroom, and an area of 1200 square feet. The fourth house is in Miami, with 3 bedrooms, 2 bathrooms, and an area of 1800 square feet.\"", "answer": "predict_house_price", "answer_params": "", "api_description": "def predict_house_price:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the price of a house in a given area based on number of bedrooms, bathrooms and area.\n\t\n\tArguments:\n\t---------\n\t- bedrooms : integer = None (required) The number of bedrooms in the house.\n\t- bathrooms : integer = None (required) The number of bathrooms in the house.\n\t- area : integer = None (required) The area of the house in square feet.\n\t- location : string = None (required) The location of the house.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"predict_house_price\", \"description\": \"Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"bedrooms\": {\"type\": \"integer\", \"description\": \"The number of bedrooms in the house.\"}, \"bathrooms\": {\"type\": \"integer\", \"description\": \"The number of bathrooms in the house.\"}, \"area\": {\"type\": \"integer\", \"description\": \"The area of the house in square feet.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the house.\"}}, \"required\": [\"bedrooms\", \"bathrooms\", \"area\", \"location\"]}}"}
{"scope": "relevance", "query": "How many kilograms are in a pound?", "query_for_retrieval": "How many kilograms are in a pound?", "answer": "portfolio.returns", "answer_params": "", "api_description": "def portfolio.returns:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the return on investment based on initial investment, ending value and the period\n\t\n\tArguments:\n\t---------\n\t- initial_investment : float = None (required) The initial amount invested or loaned\n\t- ending_value : float = None (required) The final amount after specified number of time periods.\n\t- period : integer = 5 years (optional) Number of time periods\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"portfolio.returns\", \"description\": \"Calculate the return on investment based on initial investment, ending value and the period\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_investment\": {\"type\": \"float\", \"description\": \"The initial amount invested or loaned\"}, \"ending_value\": {\"type\": \"float\", \"description\": \"The final amount after specified number of time periods.\"}, \"period\": {\"type\": \"integer\", \"description\": \"Number of time periods\", \"optional\": \"true\", \"default\": \"5 years\"}}, \"required\": [\"initial_investment\", \"ending_value\"]}}"}
{"scope": "multiple_function", "query": "Find out how fast an object was going if it started from rest and traveled a distance of 20 meters over 4 seconds due to a constant acceleration?", "query_for_retrieval": "Find out how fast an object was going if it started from rest and traveled a distance of 20 meters over 4 seconds due to a constant acceleration?", "answer": "kinematics.calculate_acceleration", "answer_params": "", "api_description": "def kinematics.calculate_acceleration:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the acceleration of an object under given conditions.\n\t\n\tArguments:\n\t---------\n\t- initial_speed : float = None (required) The initial speed of the object.\n\t- final_speed : float = None (required) The final speed of the object.\n\t- time : float = None (required) The time in seconds it took the object to reach the final speed.\n\t- distance : float = 0 (optional) The distance in meters the object has traveled.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"kinematics.calculate_acceleration\", \"description\": \"Calculates the acceleration of an object under given conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_speed\": {\"type\": \"float\", \"description\": \"The initial speed of the object.\"}, \"final_speed\": {\"type\": \"float\", \"description\": \"The final speed of the object.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time in seconds it took the object to reach the final speed.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance in meters the object has traveled.\", \"default\": 0}}, \"required\": [\"initial_speed\", \"final_speed\", \"time\"]}}"}
{"scope": "sql", "query": "Can you provide the names and account balances of customers from the \"Customers\" table who have an account balance greater than $10,000?", "query_for_retrieval": "Can you provide the names and account balances of customers from the \"Customers\" table who have an account balance greater than $10,000?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "query_for_retrieval": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "answer": "discoverer.get", "answer_params": "", "api_description": "def discoverer.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the name of the discoverer of an element based on its name.\n\t\n\tArguments:\n\t---------\n\t- element_name : string = None (required) The name of the element.\n\t- year : integer = None (optional) Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default is 0.\n\t- first : boolean = True (optional) Optional parameter indicating if the first discoverer's name should be retrieved.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"discoverer.get\", \"description\": \"Retrieve the name of the discoverer of an element based on its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"element_name\": {\"type\": \"string\", \"description\": \"The name of the element.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default is 0.\"}, \"first\": {\"type\": \"boolean\", \"default\": true, \"description\": \"Optional parameter indicating if the first discoverer's name should be retrieved.\"}}, \"required\": [\"element_name\"]}}"}
{"scope": "multiple_function", "query": "I have 100 euro. How much is it in USD?", "query_for_retrieval": "I have 100 euro. How much is it in USD?", "answer": "unit_conversion", "answer_params": "", "api_description": "def unit_conversion:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a value from one unit to another.\n\t\n\tArguments:\n\t---------\n\t- value : float = None (required) The value to be converted.\n\t- from_unit : string = None (required) The unit to convert from.\n\t- to_unit : string = None (required) The unit to convert to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"unit_conversion\", \"description\": \"Convert a value from one unit to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"value\": {\"type\": \"float\", \"description\": \"The value to be converted.\"}, \"from_unit\": {\"type\": \"string\", \"description\": \"The unit to convert from.\"}, \"to_unit\": {\"type\": \"string\", \"description\": \"The unit to convert to.\"}}, \"required\": [\"value\", \"from_unit\", \"to_unit\"]}}"}
{"scope": "relevance", "query": "What's the neurological impact of sports on human brain?", "query_for_retrieval": "What's the neurological impact of sports on human brain?", "answer": "caffeine_effect", "answer_params": "", "api_description": "def caffeine_effect:\n\t\"\"\"\n\tDescription:\n\t\n\tProvide potential neurological impact of caffeine, mainly from coffee, on human brain.\n\t\n\tArguments:\n\t---------\n\t- caffeine_content : float = None (required) The amount of caffeine contained in coffee in milligrams.\n\t- drinking_frequency : string = None (required) How often the individual drinks coffee in a day.\n\t- drinking_duration : integer = None (optional) For how long the individual has been drinking coffee. Default: 100\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"caffeine_effect\", \"description\": \"Provide potential neurological impact of caffeine, mainly from coffee, on human brain.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"caffeine_content\": {\"type\": \"float\", \"description\": \"The amount of caffeine contained in coffee in milligrams.\"}, \"drinking_frequency\": {\"type\": \"string\", \"description\": \"How often the individual drinks coffee in a day.\"}, \"drinking_duration\": {\"type\": \"integer\", \"description\": \"For how long the individual has been drinking coffee. Default: 100\"}}, \"required\": [\"caffeine_content\", \"drinking_frequency\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with the following tasks? First, I want to find the closest high-rated grocery stores from my location at '123 Main Street, New York' that have 'milk', 'bread', and 'eggs' in stock. The store should have a minimum rating of 4.5. Second, I am interested in knowing more about the sculpture titled 'The Thinker' made by the artist 'Auguste Rodin'. I specifically want to know about its 'material'. Lastly, I drove my car, which uses 'diesel' as fuel and has a fuel efficiency of 25 miles per gallon, for a total distance of 12000 miles last year. Can you calculate the annual carbon dioxide emissions produced by my vehicle? Also, consider a 2% decrease in fuel efficiency per year.\"", "query_for_retrieval": "\"Can you help me with the following tasks? First, I want to find the closest high-rated grocery stores from my location at '123 Main Street, New York' that have 'milk', 'bread', and 'eggs' in stock. The store should have a minimum rating of 4.5. Second, I am interested in knowing more about the sculpture titled 'The Thinker' made by the artist 'Auguste Rodin'. I specifically want to know about its 'material'. Lastly, I drove my car, which uses 'diesel' as fuel and has a fuel efficiency of 25 miles per gallon, for a total distance of 12000 miles last year. Can you calculate the annual carbon dioxide emissions produced by my vehicle? Also, consider a 2% decrease in fuel efficiency per year.\"", "answer": "grocery_store.find_best", "answer_params": "", "api_description": "def grocery_store.find_best:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the closest high-rated grocery stores based on certain product availability.\n\t\n\tArguments:\n\t---------\n\t- my_location : string = None (required) The current location of the user.\n\t- rating : float = None (optional) The minimum required store rating. Default is 5.0.\n\t- products : array = None (required) Required products in a list.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.find_best\", \"description\": \"Find the closest high-rated grocery stores based on certain product availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"my_location\": {\"type\": \"string\", \"description\": \"The current location of the user.\"}, \"rating\": {\"type\": \"float\", \"description\": \"The minimum required store rating. Default is 5.0.\"}, \"products\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Required products in a list.\"}}, \"required\": [\"my_location\", \"products\"]}}"}
{"scope": "parallel_function", "query": "You are given a dataset with various variables including 'Age', 'Income', 'Education', 'Gender', 'Marital Status', and 'Spending Score'. You want to predict 'Spending Score' based on the other variables. Could you please use the 'run_linear_regression' function to build a linear regression model using 'Age', 'Income', and 'Education' as predictor variables and 'Spending Score' as the target variable without applying standardization on the predictors? Then, could you please run the same function again but this time with standardization applied on the predictors?", "query_for_retrieval": "You are given a dataset with various variables including 'Age', 'Income', 'Education', 'Gender', 'Marital Status', and 'Spending Score'. You want to predict 'Spending Score' based on the other variables. Could you please use the 'run_linear_regression' function to build a linear regression model using 'Age', 'Income', and 'Education' as predictor variables and 'Spending Score' as the target variable without applying standardization on the predictors? Then, could you please run the same function again but this time with standardization applied on the predictors?", "answer": "run_linear_regression", "answer_params": "", "api_description": "def run_linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tBuild a linear regression model using given predictor variables and a target variable.\n\t\n\tArguments:\n\t---------\n\t- predictors : array = None (required) Array containing the names of predictor variables.\n\t- target : string = None (required) The name of target variable.\n\t- standardize : boolean = None (optional) Option to apply standardization on the predictors. Defaults to False.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"run_linear_regression\", \"description\": \"Build a linear regression model using given predictor variables and a target variable.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"predictors\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Array containing the names of predictor variables.\"}, \"target\": {\"type\": \"string\", \"description\": \"The name of target variable.\"}, \"standardize\": {\"type\": \"boolean\", \"description\": \"Option to apply standardization on the predictors. Defaults to False.\"}}, \"required\": [\"predictors\", \"target\"]}}"}
{"scope": "rest", "query": "Can you show me how to make a GET request to the IP-API service for a JSON response with only the query and country fields in Spanish?", "query_for_retrieval": "Can you show me how to make a GET request to the IP-API service for a JSON response with only the query and country fields in Spanish?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "java", "query": "How do I create a VMDeathRequest with a suspend policy of EVENT_THREAD and a property 'testProperty' set to 'deathEvent001' in a Java debugging session?", "query_for_retrieval": "How do I create a VMDeathRequest with a suspend policy of EVENT_THREAD and a property 'testProperty' set to 'deathEvent001' in a Java debugging session?", "answer": "suspendpolicy017.settingVMDeathRequest", "answer_params": "", "api_description": "def suspendpolicy017.settingVMDeathRequest:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates a VMDeathRequest with the specified suspend policy and property. Throws a JDITestRuntimeException if the request cannot be set.\n\t\n\tArguments:\n\t---------\n\t- suspendPolicy : integer = None (required) The suspend policy to be used for the VMDeathRequest.\n\t- property : String = None (required) The property to be associated with the VMDeathRequest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"suspendpolicy017.settingVMDeathRequest\", \"description\": \"Creates a VMDeathRequest with the specified suspend policy and property. Throws a JDITestRuntimeException if the request cannot be set.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"suspendPolicy\": {\"type\": \"integer\", \"description\": \"The suspend policy to be used for the VMDeathRequest.\"}, \"property\": {\"type\": \"String\", \"description\": \"The property to be associated with the VMDeathRequest.\"}}, \"required\": [\"suspendPolicy\", \"property\"]}}"}
{"scope": "relevance", "query": "What is the ranking of a football team?", "query_for_retrieval": "What is the ranking of a football team?", "answer": "sports_ranking.get_MVP", "answer_params": "", "api_description": "def sports_ranking.get_MVP:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the most valuable player of a particular sport season\n\t\n\tArguments:\n\t---------\n\t- season : string = None (required) The season to look for MVP.\n\t- sport_type : string = None (required) The type of sport to look for MVP.\n\t- team : string = None (optional) Specific team to look for MVP, Default is all teams\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_MVP\", \"description\": \"Retrieve the most valuable player of a particular sport season\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"season\": {\"type\": \"string\", \"description\": \"The season to look for MVP.\"}, \"sport_type\": {\"type\": \"string\", \"description\": \"The type of sport to look for MVP.\"}, \"team\": {\"type\": \"string\", \"description\": \"Specific team to look for MVP, Default is all teams\"}}, \"required\": [\"season\", \"sport_type\"]}}"}
{"scope": "parallel_function", "query": "Find details of lawsuits with case numbers '67813', '71249' filed in the New York District court for type 'Civil' and 'Criminal' cases.", "query_for_retrieval": "Find details of lawsuits with case numbers '67813', '71249' filed in the New York District court for type 'Civil' and 'Criminal' cases.", "answer": "court_case.find", "answer_params": "", "api_description": "def court_case.find:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate details of court cases based on specific parameters like case number and case type.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and court where the lawsuit is filed.\n\t- case_number : array = None (required) The unique case numbers of the lawsuits.\n\t- case_type : string = Civil (optional) Type of the court case.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"court_case.find\", \"description\": \"Locate details of court cases based on specific parameters like case number and case type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and court where the lawsuit is filed.\"}, \"case_number\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The unique case numbers of the lawsuits.\"}, \"case_type\": {\"type\": \"string\", \"enum\": [\"Civil\", \"Criminal\"], \"description\": \"Type of the court case.\", \"default\": \"Civil\"}}, \"required\": [\"location\", \"case_number\"]}}"}
{"scope": "simple", "query": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "query_for_retrieval": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "answer": "market_performance.get_data", "answer_params": "", "api_description": "def market_performance.get_data:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the market performance data for specified indexes over a specified time period.\n\t\n\tArguments:\n\t---------\n\t- indexes : array = None (required) Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc.\n\t- days : integer = None (required) Number of days in the past for which the performance data is required.\n\t- detailed : boolean = None (optional) Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"market_performance.get_data\", \"description\": \"Retrieve the market performance data for specified indexes over a specified time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"indexes\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days in the past for which the performance data is required.\"}, \"detailed\": {\"type\": \"boolean\", \"description\": \"Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false.\"}}, \"required\": [\"indexes\", \"days\"]}}"}
{"scope": "rest", "query": "Can you provide me with the full plot details of the movie 'Inception', which was released in 2010, and ensure the data returned is in JSON format? API key is 'YOUR-OMDB-API-KEY'", "query_for_retrieval": "Can you provide me with the full plot details of the movie 'Inception', which was released in 2010, and ensure the data returned is in JSON format? API key is 'YOUR-OMDB-API-KEY'", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_simple", "query": "I've been playing a game where rolling a six is somehow more likely than usual, and the chance of it happening on a single roll is 60%. I'm curious, if I roll the die 20 times, what are the odds that I'll get exactly five sixes?", "query_for_retrieval": "I've been playing a game where rolling a six is somehow more likely than usual, and the chance of it happening on a single roll is 60%. I'm curious, if I roll the die 20 times, what are the odds that I'll get exactly five sixes?", "answer": "calc_binomial_probability", "answer_params": "", "api_description": "def calc_binomial_probability:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of getting k successes in n trials.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number of trials.\n\t- k : integer = None (required) The number of successes.\n\t- p : float = None (required) The probability of success.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calc_binomial_probability\", \"description\": \"Calculates the probability of getting k successes in n trials.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number of trials.\"}, \"k\": {\"type\": \"integer\", \"description\": \"The number of successes.\"}, \"p\": {\"type\": \"float\", \"description\": \"The probability of success.\"}}, \"required\": [\"n\", \"k\", \"p\"]}}"}
{"scope": "simple", "query": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "query_for_retrieval": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "answer": "finance.predict_future_value", "answer_params": "", "api_description": "def finance.predict_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\n\t\n\tArguments:\n\t---------\n\t- present_value : integer = None (required) The present value of the investment.\n\t- annual_interest_rate : float = None (required) The annual interest rate of the investment.\n\t- compounding_periods_per_year : integer = None (optional) The number of times that interest is compounded per year. Default is 1 (annually).\n\t- time_years : integer = None (required) The investment horizon in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"finance.predict_future_value\", \"description\": \"Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"integer\", \"description\": \"The present value of the investment.\"}, \"annual_interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate of the investment.\"}, \"compounding_periods_per_year\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per year. Default is 1 (annually).\"}, \"time_years\": {\"type\": \"integer\", \"description\": \"The investment horizon in years.\"}}, \"required\": [\"present_value\", \"annual_interest_rate\", \"time_years\"]}}"}
{"scope": "simple", "query": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "query_for_retrieval": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "answer": "get_plants_for_slope", "answer_params": "", "api_description": "def get_plants_for_slope:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the list of plants suitable for slope based on erosion control ability.\n\t\n\tArguments:\n\t---------\n\t- slope_type : string = None (required) The type of slope like steep, moderate etc.\n\t- num_results : integer = None (required) The number of top results needed. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_plants_for_slope\", \"description\": \"Retrieve the list of plants suitable for slope based on erosion control ability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"slope_type\": {\"type\": \"string\", \"description\": \"The type of slope like steep, moderate etc.\"}, \"num_results\": {\"type\": \"integer\", \"description\": \"The number of top results needed. Default is 5.\"}}, \"required\": [\"slope_type\", \"num_results\"]}}"}
{"scope": "simple", "query": "Find the score of last game for Los Angeles Lakers including its opponent name.", "query_for_retrieval": "Find the score of last game for Los Angeles Lakers including its opponent name.", "answer": "team_score.get_latest", "answer_params": "", "api_description": "def team_score.get_latest:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the score of the most recent game for a specified sports team.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) Name of the sports team.\n\t- include_opponent : boolean = False (optional) Include the name of the opponent team in the return.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"team_score.get_latest\", \"description\": \"Retrieve the score of the most recent game for a specified sports team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"Name of the sports team.\"}, \"include_opponent\": {\"type\": \"boolean\", \"description\": \"Include the name of the opponent team in the return.\", \"default\": false}}, \"required\": [\"team\"]}}"}
{"scope": "java", "query": "How can I decode a list of alternating key-value objects into a list of map entries for state processing, given the list `['userID', 42, 'username', 'johndoe', 'isActive', true]` and a state object `processingState`?", "query_for_retrieval": "How can I decode a list of alternating key-value objects into a list of map entries for state processing, given the list `['userID', 42, 'username', 'johndoe', 'isActive', true]` and a state object `processingState`?", "answer": "ObjectMapEntryReplayDecoder.decode", "answer_params": "", "api_description": "def ObjectMapEntryReplayDecoder.decode:\n\t\"\"\"\n\tDescription:\n\t\n\tDecodes a list of objects representing alternating keys and values into a list of map entries.\n\t\n\tArguments:\n\t---------\n\t- parts : ArrayList = None (required) A list of objects representing alternating keys and values.\n\t- state : any = None (required) The state object used during the decoding process.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ObjectMapEntryReplayDecoder.decode\", \"description\": \"Decodes a list of objects representing alternating keys and values into a list of map entries.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"parts\": {\"type\": \"ArrayList\", \"description\": \"A list of objects representing alternating keys and values.\", \"items\": {\"type\": \"any\"}}, \"state\": {\"type\": \"any\", \"description\": \"The state object used during the decoding process.\"}}, \"required\": [\"parts\", \"state\"]}}"}
{"scope": "simple", "query": "What's the chess classical rating of Magnus Carlsen?", "query_for_retrieval": "What's the chess classical rating of Magnus Carlsen?", "answer": "chess.rating", "answer_params": "", "api_description": "def chess.rating:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the current chess rating of a given player\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The full name of the chess player.\n\t- variant : string = None (optional) The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"chess.rating\", \"description\": \"Fetches the current chess rating of a given player\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The full name of the chess player.\"}, \"variant\": {\"type\": \"string\", \"description\": \"The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\"}}, \"required\": [\"player_name\"]}}"}
{"scope": "simple", "query": "Get me two tickets for next Eminem concert in New York City.", "query_for_retrieval": "Get me two tickets for next Eminem concert in New York City.", "answer": "concert_booking.book_ticket", "answer_params": "", "api_description": "def concert_booking.book_ticket:\n\t\"\"\"\n\tDescription:\n\t\n\tBook concert tickets for a specific artist in a specified city.\n\t\n\tArguments:\n\t---------\n\t- artist : string = None (required) The artist you want to book tickets for.\n\t- city : string = None (required) The city where the concert is.\n\t- num_tickets : integer = None (optional) Number of tickets required. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_booking.book_ticket\", \"description\": \"Book concert tickets for a specific artist in a specified city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"artist\": {\"type\": \"string\", \"description\": \"The artist you want to book tickets for.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city where the concert is.\"}, \"num_tickets\": {\"type\": \"integer\", \"description\": \"Number of tickets required. Default is 1.\"}}, \"required\": [\"artist\", \"city\"]}}"}
{"scope": "sql", "query": "In a physics experiment, a database table named \"ExperimentData\" is used to store the measurements. Each row in the table represents a single measurement and contains columns for 'ExperimentID', 'MeasurementID', 'Value', 'Unit', and 'Timestamp'. If a measurement with 'MeasurementID' of 'M123' and 'ExperimentID' of 'E456' was found to be incorrect, could you remove this specific measurement from the \"ExperimentData\" table? The condition for this operation would be where 'MeasurementID' equals 'M123' and 'ExperimentID' equals 'E456'.", "query_for_retrieval": "In a physics experiment, a database table named \"ExperimentData\" is used to store the measurements. Each row in the table represents a single measurement and contains columns for 'ExperimentID', 'MeasurementID', 'Value', 'Unit', and 'Timestamp'. If a measurement with 'MeasurementID' of 'M123' and 'ExperimentID' of 'E456' was found to be incorrect, could you remove this specific measurement from the \"ExperimentData\" table? The condition for this operation would be where 'MeasurementID' equals 'M123' and 'ExperimentID' equals 'E456'.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "sql", "query": "Can you eliminate all entries from the 'student_scores' table where the 'score' is less than 50?", "query_for_retrieval": "Can you eliminate all entries from the 'student_scores' table where the 'score' is less than 50?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "How to solve the quadratic equation with coefficients 2, 3 and 4?", "query_for_retrieval": "How to solve the quadratic equation with coefficients 2, 3 and 4?", "answer": "genetic_algorithm.optimize", "answer_params": "", "api_description": "def genetic_algorithm.optimize:\n\t\"\"\"\n\tDescription:\n\t\n\tApply the genetic algorithm to optimize a function with multiple variables.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to be optimized.\n\t- constraints : array = None (required) No description available.\n\t- population_size : integer = None (required) The size of the population for the genetic algorithm.\n\t- mutation_rate : float = 0.01 (optional) The rate of mutation for the genetic algorithm.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"genetic_algorithm.optimize\", \"description\": \"Apply the genetic algorithm to optimize a function with multiple variables.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to be optimized.\"}, \"constraints\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"A list of constraints for the variables in the function.\"}}, \"population_size\": {\"type\": \"integer\", \"description\": \"The size of the population for the genetic algorithm.\"}, \"mutation_rate\": {\"type\": \"float\", \"description\": \"The rate of mutation for the genetic algorithm.\", \"default\": 0.01}}, \"required\": [\"function\", \"constraints\", \"population_size\"]}}"}
{"scope": "multiple_function", "query": "Find a healthy lunch recipe under 500 calories that uses chicken and mushrooms.", "query_for_retrieval": "Find a healthy lunch recipe under 500 calories that uses chicken and mushrooms.", "answer": "restaurant_search", "answer_params": "", "api_description": "def restaurant_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches for restaurants based on a list of preferred ingredients and maximum calorie count.\n\t\n\tArguments:\n\t---------\n\t- ingredients : array = None (required) A list of ingredients you prefer in the restaurant's dishes.\n\t- calories : integer = None (required) The maximum calorie count you prefer for the restaurant's dishes.\n\t- meal : string = None (optional) Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default 'lunch'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_search\", \"description\": \"Searches for restaurants based on a list of preferred ingredients and maximum calorie count.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ingredients\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of ingredients you prefer in the restaurant's dishes.\"}, \"calories\": {\"type\": \"integer\", \"description\": \"The maximum calorie count you prefer for the restaurant's dishes.\"}, \"meal\": {\"type\": \"string\", \"description\": \"Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default 'lunch'\"}}, \"required\": [\"ingredients\", \"calories\"]}}"}
{"scope": "simple", "query": "Calculate the area of a triangle with base 6 and height 10.", "query_for_retrieval": "Calculate the area of a triangle with base 6 and height 10.", "answer": "geometry.area_triangle", "answer_params": "", "api_description": "def geometry.area_triangle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a triangle.\n\t\n\tArguments:\n\t---------\n\t- base : integer = None (required) The length of the base of the triangle.\n\t- height : integer = None (required) The height of the triangle from the base.\n\t- unit : string = None (optional) The measurement unit for the area. Defaults to square meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_triangle\", \"description\": \"Calculate the area of a triangle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base\": {\"type\": \"integer\", \"description\": \"The length of the base of the triangle.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the triangle from the base.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The measurement unit for the area. Defaults to square meters.\"}}, \"required\": [\"base\", \"height\"]}}"}
{"scope": "multiple_function", "query": "What's the root of quadratic equation with coefficients 2, 3 and -4?", "query_for_retrieval": "What's the root of quadratic equation with coefficients 2, 3 and -4?", "answer": "solve.quadratic_equation", "answer_params": "", "api_description": "def solve.quadratic_equation:\n\t\"\"\"\n\tDescription:\n\t\n\tSolve a quadratic equation with given coefficients a, b, and c.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x^2.\n\t- b : integer = None (required) Coefficient of x.\n\t- c : integer = None (required) Constant term.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve.quadratic_equation\", \"description\": \"Solve a quadratic equation with given coefficients a, b, and c.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x^2.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term.\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "rest", "query": "I need to get the latest currency exchange rates using my API key `YOUR-EXCHANGERATE-API-KEY` with Euros as the base currency. Can you construct the appropriate GET request for this action?", "query_for_retrieval": "I need to get the latest currency exchange rates using my API key `YOUR-EXCHANGERATE-API-KEY` with Euros as the base currency. Can you construct the appropriate GET request for this action?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "Can you find me any upcoming rock and jazz concerts for the next month in San Francisco, California and New York, New York?", "query_for_retrieval": "Can you find me any upcoming rock and jazz concerts for the next month in San Francisco, California and New York, New York?", "answer": "concert_finder", "answer_params": "", "api_description": "def concert_finder:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate upcoming concerts based on music genre in specified city and state.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state to find concerts.\n\t- music_genre : string = None (required) Music genre of the concerts.\n\t- time_period : integer = 30 (optional) Number of days to search upcoming concerts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"concert_finder\", \"description\": \"Locate upcoming concerts based on music genre in specified city and state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state to find concerts.\"}, \"music_genre\": {\"type\": \"string\", \"description\": \"Music genre of the concerts.\"}, \"time_period\": {\"type\": \"integer\", \"description\": \"Number of days to search upcoming concerts.\", \"default\": 30}}, \"required\": [\"location\", \"music_genre\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few things? First, I'm studying genetics and I came across a SNP mutation with the ID 'rs123456'. I'm not sure what type of mutation it is. Could you find out for me? The species is 'Homo sapiens'. Second, I'm planning to visit New York, NY next month (Feb) and I'm interested in attending an art exhibition, particularly one that displays sculptures. Could you find the most popular ones for me? I would prefer exhibitions with high user ratings. Lastly, I'm also studying cell biology and I need to know the list of proteins in the 'nucleus' cell compartment. Could you get that for me? And please include a brief description of each protein.\"", "query_for_retrieval": "\"Can you help me with a few things? First, I'm studying genetics and I came across a SNP mutation with the ID 'rs123456'. I'm not sure what type of mutation it is. Could you find out for me? The species is 'Homo sapiens'. Second, I'm planning to visit New York, NY next month (Feb) and I'm interested in attending an art exhibition, particularly one that displays sculptures. Could you find the most popular ones for me? I would prefer exhibitions with high user ratings. Lastly, I'm also studying cell biology and I need to know the list of proteins in the 'nucleus' cell compartment. Could you get that for me? And please include a brief description of each protein.\"", "answer": "cellbio.get_proteins", "answer_params": "", "api_description": "def cellbio.get_proteins:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the list of proteins in a specific cell compartment.\n\t\n\tArguments:\n\t---------\n\t- cell_compartment : string = None (required) The specific cell compartment.\n\t- include_description : boolean = False (optional) Set true if you want a brief description of each protein.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cellbio.get_proteins\", \"description\": \"Get the list of proteins in a specific cell compartment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_compartment\": {\"type\": \"string\", \"description\": \"The specific cell compartment.\"}, \"include_description\": {\"type\": \"boolean\", \"description\": \"Set true if you want a brief description of each protein.\", \"default\": false}}, \"required\": [\"cell_compartment\"]}}"}
{"scope": "simple", "query": "What's the time difference between San Francisco and Sydney?", "query_for_retrieval": "What's the time difference between San Francisco and Sydney?", "answer": "get_time_difference", "answer_params": "", "api_description": "def get_time_difference:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the time difference between two places.\n\t\n\tArguments:\n\t---------\n\t- place1 : string = None (required) The first place for time difference.\n\t- place2 : string = None (required) The second place for time difference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_difference\", \"description\": \"Get the time difference between two places.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"place1\": {\"type\": \"string\", \"description\": \"The first place for time difference.\"}, \"place2\": {\"type\": \"string\", \"description\": \"The second place for time difference.\"}}, \"required\": [\"place1\", \"place2\"]}}"}
{"scope": "sql", "query": "What is the average age of the customers from the 'customers' table who have made purchases above $1000? Average can be found in AVG columns", "query_for_retrieval": "What is the average age of the customers from the 'customers' table who have made purchases above $1000? Average can be found in AVG columns", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_simple", "query": "I'm working on some data analysis and need to perform a matrix multiplication as part of the process. The matrices I have are: the first one is [[1, 2], [3, 4]] and the second is [[5, 6], [7, 8]]. Could you help me with the multiplication of these two matrices?", "query_for_retrieval": "I'm working on some data analysis and need to perform a matrix multiplication as part of the process. The matrices I have are: the first one is [[1, 2], [3, 4]] and the second is [[5, 6], [7, 8]]. Could you help me with the multiplication of these two matrices?", "answer": "mat_mul", "answer_params": "", "api_description": "def mat_mul:\n\t\"\"\"\n\tDescription:\n\t\n\tMultiplies two matrices.\n\t\n\tArguments:\n\t---------\n\t- matA : array = None (required) The first matrix.\n\t- matB : array = None (required) The second matrix.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mat_mul\", \"description\": \"Multiplies two matrices.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"matA\": {\"type\": \"array\", \"description\": \"The first matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}, \"matB\": {\"type\": \"array\", \"description\": \"The second matrix.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}}}, \"required\": [\"matA\", \"matB\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me how many all-time goals Cristiano Ronaldo scored for Manchester United in the Premier League, then compare that with the top scorer of Manchester United in the same competition, and finally, tell me who was the top scorer of the Premier League in the 2019-2020 season?\"", "query_for_retrieval": "\"Can you tell me how many all-time goals Cristiano Ronaldo scored for Manchester United in the Premier League, then compare that with the top scorer of Manchester United in the same competition, and finally, tell me who was the top scorer of the Premier League in the 2019-2020 season?\"", "answer": "team_stats.get_top_scorer", "answer_params": "", "api_description": "def team_stats.get_top_scorer:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the top scorer of a specified football team.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the football team.\n\t- competition : string = None (optional) Competition for which to fetch stats (optional). Default is 'Premier League' if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"team_stats.get_top_scorer\", \"description\": \"Fetch the top scorer of a specified football team.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the football team.\"}, \"competition\": {\"type\": \"string\", \"description\": \"Competition for which to fetch stats (optional). Default is 'Premier League' if not specified.\"}}, \"required\": [\"team_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find me a bronze statue in the Modern Arts Museum in New York and a stone sculpture in the Louvre Museum in Paris. Also, find me a painting made by Picasso in the Metropolitan Museum of Art.", "query_for_retrieval": "Find me a bronze statue in the Modern Arts Museum in New York and a stone sculpture in the Louvre Museum in Paris. Also, find me a painting made by Picasso in the Metropolitan Museum of Art.", "answer": "book.find", "answer_params": "", "api_description": "def book.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a book in a library based on specific criteria like author, genre or publication year.\n\t\n\tArguments:\n\t---------\n\t- library : string = None (required) The name of the library.\n\t- author : string = None (required) Author of the book.\n\t- genre : string = Sci-Fi (optional) Genre of the book.\n\t- year : integer = 2000 (optional) Year of publication.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book.find\", \"description\": \"Find a book in a library based on specific criteria like author, genre or publication year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"library\": {\"type\": \"string\", \"description\": \"The name of the library.\"}, \"author\": {\"type\": \"string\", \"description\": \"Author of the book.\"}, \"genre\": {\"type\": \"string\", \"default\": \"Sci-Fi\", \"description\": \"Genre of the book.\"}, \"year\": {\"type\": \"integer\", \"default\": 2000, \"description\": \"Year of publication.\"}}, \"required\": [\"library\", \"author\"]}}"}
{"scope": "simple", "query": "Calculate the circumference of a circle with radius 3", "query_for_retrieval": "Calculate the circumference of a circle with radius 3", "answer": "geometry.circumference", "answer_params": "", "api_description": "def geometry.circumference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the circumference of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- units : string = None (optional) Units for the output circumference measurement. Default is 'cm'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.circumference\", \"description\": \"Calculate the circumference of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"Units for the output circumference measurement. Default is 'cm'.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "simple", "query": "Find the highest common factor of 36 and 24.", "query_for_retrieval": "Find the highest common factor of 36 and 24.", "answer": "math.hcf", "answer_params": "", "api_description": "def math.hcf:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the highest common factor of two numbers.\n\t\n\tArguments:\n\t---------\n\t- number1 : integer = None (required) First number.\n\t- number2 : integer = None (required) Second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.hcf\", \"description\": \"Calculate the highest common factor of two numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"number1\": {\"type\": \"integer\", \"description\": \"First number.\"}, \"number2\": {\"type\": \"integer\", \"description\": \"Second number.\"}}, \"required\": [\"number1\", \"number2\"]}}"}
{"scope": "multiple_function", "query": "Book a deluxe room for 2 nights at the Marriott hotel in New York and add breakfast as an extra service", "query_for_retrieval": "Book a deluxe room for 2 nights at the Marriott hotel in New York and add breakfast as an extra service", "answer": "car.rental", "answer_params": "", "api_description": "def car.rental:\n\t\"\"\"\n\tDescription:\n\t\n\tRent a car at the specified location for a specific number of days\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) Location of the car rental.\n\t- days : integer = None (required) Number of days for which to rent the car.\n\t- car_type : string = None (required) Type of the car to rent.\n\t- pick_up : string = None (optional) Location of where to pick up the car. Default ''\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"car.rental\", \"description\": \"Rent a car at the specified location for a specific number of days\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location of the car rental.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for which to rent the car.\"}, \"car_type\": {\"type\": \"string\", \"description\": \"Type of the car to rent.\"}, \"pick_up\": {\"type\": \"string\", \"description\": \"Location of where to pick up the car. Default ''\"}}, \"required\": [\"location\", \"days\", \"car_type\"]}}"}
{"scope": "javascript", "query": "How can I process a queue of file watch objects named 'fileWatchQueue' with a polling interval of 500 milliseconds, starting from index 0 and handling 10 files at a time to check for modifications?", "query_for_retrieval": "How can I process a queue of file watch objects named 'fileWatchQueue' with a polling interval of 500 milliseconds, starting from index 0 and handling 10 files at a time to check for modifications?", "answer": "pollQueue", "answer_params": "", "api_description": "def pollQueue:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function processes a queue of file watch objects at specified intervals, checking a chunk of files at a time for any modifications.\n\t\n\tArguments:\n\t---------\n\t- queue : array = None (required) The queue of file watch objects to be processed.\n\t- pollingInterval : float = None (required) The interval in milliseconds at which the queue is polled.\n\t- pollIndex : float = None (required) The starting index in the queue from which polling begins.\n\t- chunkSize : float = None (required) The number of files to be checked in each polling interval.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"pollQueue\", \"description\": \"This function processes a queue of file watch objects at specified intervals, checking a chunk of files at a time for any modifications.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"queue\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The queue of file watch objects to be processed.\"}, \"pollingInterval\": {\"type\": \"float\", \"description\": \"The interval in milliseconds at which the queue is polled.\"}, \"pollIndex\": {\"type\": \"float\", \"description\": \"The starting index in the queue from which polling begins.\"}, \"chunkSize\": {\"type\": \"float\", \"description\": \"The number of files to be checked in each polling interval.\"}}, \"required\": [\"queue\", \"pollingInterval\", \"pollIndex\", \"chunkSize\"]}}"}
{"scope": "simple", "query": "Calculate the area of a circle with a radius of 5 units.", "query_for_retrieval": "Calculate the area of a circle with a radius of 5 units.", "answer": "geometry.calculate_area_circle", "answer_params": "", "api_description": "def geometry.calculate_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given its radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- unit : string = None (optional) The measurement unit of the radius (optional parameter, default is 'units').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.calculate_area_circle\", \"description\": \"Calculate the area of a circle given its radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The measurement unit of the radius (optional parameter, default is 'units').\"}}, \"required\": [\"radius\"]}}"}
{"scope": "rest", "query": "I want to find out the rating for the movie 'Oppenheimer' released in 2023, API key is 'YOUR-OMDB-API-KEY'. I need the full plot details in the response. What's the correct GET request using the requests library?", "query_for_retrieval": "I want to find out the rating for the movie 'Oppenheimer' released in 2023, API key is 'YOUR-OMDB-API-KEY'. I need the full plot details in the response. What's the correct GET request using the requests library?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://www.omdbapi.com/ (required) Fetches the age rating of a movie from the OMDB API.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - i : string = None (optional) A valid IMDb ID (e.g., tt1285016).\n\t  - t : string = None (optional) Movie title to search for.\n\t  - type : string = None (optional) Type of result to return. Valid options are 'movie', 'series', and 'episode'.\n\t  - y : string = None (optional) Year of release.\n\t  - plot : string = None (optional) Return short or full plot. Default is 'short'.\n\t  - r : string = None (optional) The data type to return. Default is 'json'.\n\t  - callback : string = None (optional) JSONP callback name.\n\t  - v : integer = None (optional) API version (reserved for future use). Default is 1.\n\t  - apikey : string = None (optional) API Key provided for this API\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Fetches the age rating of a movie from the OMDB API.\", \"default\": \"http://www.omdbapi.com/\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"i\": {\"type\": \"string\", \"description\": \"A valid IMDb ID (e.g., tt1285016).\"}, \"t\": {\"type\": \"string\", \"description\": \"Movie title to search for.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of result to return. Valid options are 'movie', 'series', and 'episode'.\"}, \"y\": {\"type\": \"string\", \"description\": \"Year of release.\"}, \"plot\": {\"type\": \"string\", \"description\": \"Return short or full plot. Default is 'short'.\"}, \"r\": {\"type\": \"string\", \"description\": \"The data type to return. Default is 'json'.\"}, \"callback\": {\"type\": \"string\", \"description\": \"JSONP callback name.\"}, \"v\": {\"type\": \"integer\", \"description\": \"API version (reserved for future use). Default is 1.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"API Key provided for this API\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "multiple_function", "query": "What are the names of proteins found in the plasma membrane?", "query_for_retrieval": "What are the names of proteins found in the plasma membrane?", "answer": "locate_tallest_mountains", "answer_params": "", "api_description": "def locate_tallest_mountains:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the tallest mountains within a specified radius of a location.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city from which to calculate distance.\n\t- radius : float = None (required) The radius within which to find mountains, measured in kilometers.\n\t- amount : integer = None (required) The number of mountains to find, listed from tallest to smallest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"locate_tallest_mountains\", \"description\": \"Find the tallest mountains within a specified radius of a location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city from which to calculate distance.\"}, \"radius\": {\"type\": \"float\", \"description\": \"The radius within which to find mountains, measured in kilometers.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The number of mountains to find, listed from tallest to smallest.\"}}, \"required\": [\"location\", \"radius\", \"amount\"]}}"}
{"scope": "simple", "query": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "query_for_retrieval": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "answer": "prediction.evolution", "answer_params": "", "api_description": "def prediction.evolution:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict the evolutionary rate for a specific species for a given timeframe.\n\t\n\tArguments:\n\t---------\n\t- species : string = None (required) The species that the evolution rate will be predicted for.\n\t- years : integer = None (required) Number of years for the prediction.\n\t- model : string = None (optional) The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"prediction.evolution\", \"description\": \"Predict the evolutionary rate for a specific species for a given timeframe.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"species\": {\"type\": \"string\", \"description\": \"The species that the evolution rate will be predicted for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years for the prediction.\"}, \"model\": {\"type\": \"string\", \"description\": \"The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\"}}, \"required\": [\"species\", \"years\"]}}"}
{"scope": "java", "query": "How can I ensure that the signs of the BigDecimal elements in the array `durations` are aligned from index 2 to index 5, considering that the elements represent different units of time in a duration object?", "query_for_retrieval": "How can I ensure that the signs of the BigDecimal elements in the array `durations` are aligned from index 2 to index 5, considering that the elements represent different units of time in a duration object?", "answer": "DurationImpl.alignSigns", "answer_params": "", "api_description": "def DurationImpl.alignSigns:\n\t\"\"\"\n\tDescription:\n\t\n\tAligns the signs of BigDecimal elements in a subarray to be consistent with each other, potentially borrowing from adjacent elements to adjust values and maintain the overall magnitude.\n\t\n\tArguments:\n\t---------\n\t- buf : Array = None (required) The array of BigDecimal elements representing different units of time whose signs need to be aligned.\n\t- start : integer = None (required) The starting index of the subarray to align signs.\n\t- end : integer = None (required) The ending index of the subarray to align signs.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"DurationImpl.alignSigns\", \"description\": \"Aligns the signs of BigDecimal elements in a subarray to be consistent with each other, potentially borrowing from adjacent elements to adjust values and maintain the overall magnitude.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"buf\": {\"type\": \"Array\", \"description\": \"The array of BigDecimal elements representing different units of time whose signs need to be aligned.\", \"items\": {\"type\": \"any\"}}, \"start\": {\"type\": \"integer\", \"description\": \"The starting index of the subarray to align signs.\"}, \"end\": {\"type\": \"integer\", \"description\": \"The ending index of the subarray to align signs.\"}}, \"required\": [\"buf\", \"start\", \"end\"]}}"}
{"scope": "multiple_function", "query": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "query_for_retrieval": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "answer": "player_statistic", "answer_params": "", "api_description": "def player_statistic:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves detailed player's statistics for a specific year.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The player's name.\n\t- year : integer = None (required) Year for which the statistics will be displayed.\n\t- team_name : string = None (optional) The name of the team(optional). Default is 'all'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"player_statistic\", \"description\": \"Retrieves detailed player's statistics for a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The player's name.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year for which the statistics will be displayed.\"}, \"team_name\": {\"type\": \"string\", \"description\": \"The name of the team(optional). Default is 'all'\"}}, \"required\": [\"player_name\", \"year\"]}}"}
{"scope": "relevance", "query": "Who is currently the top ranked tennis player?", "query_for_retrieval": "Who is currently the top ranked tennis player?", "answer": "sports_team.standing", "answer_params": "", "api_description": "def sports_team.standing:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current standing/ranking of a sports team in its respective league.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the sports team.\n\t- league : string = None (required) The league in which the team participates.\n\t- season_year : integer = None (optional) The season year for which the standing is needed. If not provided, current year is assumed. Default: 1994\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_team.standing\", \"description\": \"Retrieve the current standing/ranking of a sports team in its respective league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league in which the team participates.\"}, \"season_year\": {\"type\": \"integer\", \"optional\": true, \"description\": \"The season year for which the standing is needed. If not provided, current year is assumed. Default: 1994\"}}, \"required\": [\"team_name\", \"league\"]}}"}
{"scope": "executable_simple", "query": "I'm organizing a small get-together at my place tonight and I'm looking to order some food for the guests. I'd like to get 10 burgers, each costing $5, and also 7 ice creams, with each being $2. Could you place this order for me and let me know what the total price would be?", "query_for_retrieval": "I'm organizing a small get-together at my place tonight and I'm looking to order some food for the guests. I'd like to get 10 burgers, each costing $5, and also 7 ice creams, with each being $2. Could you place this order for me and let me know what the total price would be?", "answer": "order_food", "answer_params": "", "api_description": "def order_food:\n\t\"\"\"\n\tDescription:\n\t\n\tOrders food for a customer.Return the total price.\n\t\n\tArguments:\n\t---------\n\t- item : array = None (required) No description available.\n\t- quantity : array = None (required) No description available.\n\t- price : array = None (required) No description available.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"order_food\", \"description\": \"Orders food for a customer.Return the total price.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak'].\"}}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\", \"description\": \"the number of the product purchased.\"}}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"float\", \"description\": \"the number of the product purchased.\"}}}, \"required\": [\"item\", \"quantity\", \"price\"]}}"}
{"scope": "multiple_function", "query": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "query_for_retrieval": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "answer": "poker_probability.full_house", "answer_params": "", "api_description": "def poker_probability.full_house:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the probability of getting a full house in a poker game.\n\t\n\tArguments:\n\t---------\n\t- deck_size : integer = None (required) The size of the deck. Default is 52.\n\t- hand_size : integer = None (required) The size of the hand. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"poker_probability.full_house\", \"description\": \"Calculate the probability of getting a full house in a poker game.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"deck_size\": {\"type\": \"integer\", \"description\": \"The size of the deck. Default is 52.\"}, \"hand_size\": {\"type\": \"integer\", \"description\": \"The size of the hand. Default is 5.\"}}, \"required\": [\"deck_size\", \"hand_size\"]}}"}
{"scope": "java", "query": "How can I validate that the environment variable map `envVariables` for a process builder contains exactly 5 entries?", "query_for_retrieval": "How can I validate that the environment variable map `envVariables` for a process builder contains exactly 5 entries?", "answer": "Basic.checkSizes", "answer_params": "", "api_description": "def Basic.checkSizes:\n\t\"\"\"\n\tDescription:\n\t\n\tChecks if the sizes of various views of the environment map match the expected size and if the map's empty status is consistent with the expected size.\n\t\n\tArguments:\n\t---------\n\t- environ : HashMap = None (required) The environment variable map to check.\n\t- size : integer = None (required) The expected size of the environment variable map.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"Basic.checkSizes\", \"description\": \"Checks if the sizes of various views of the environment map match the expected size and if the map's empty status is consistent with the expected size.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"environ\": {\"type\": \"HashMap\", \"description\": \"The environment variable map to check.\"}, \"size\": {\"type\": \"integer\", \"description\": \"The expected size of the environment variable map.\"}}, \"required\": [\"environ\", \"size\"]}}"}
{"scope": "java", "query": "How can I perform a garbage collection test using the data from the 'humongous-test-case.json', execute a custom garbage collector, verify the object references using the `referenceChecker` function, and analyze the garbage collector log named 'gc-analysis.log' to ensure it contains 'GC pause' but does not contain 'OutOfMemoryError'?", "query_for_retrieval": "How can I perform a garbage collection test using the data from the 'humongous-test-case.json', execute a custom garbage collector, verify the object references using the `referenceChecker` function, and analyze the garbage collector log named 'gc-analysis.log' to ensure it contains 'GC pause' but does not contain 'OutOfMemoryError'?", "answer": "TestObjectGraphAfterGC.doTesting", "answer_params": "", "api_description": "def TestObjectGraphAfterGC.doTesting:\n\t\"\"\"\n\tDescription:\n\t\n\tExecutes a test that allocates an object graph based on the provided test case data, runs garbage collection, checks the object graph references, and verifies specific entries in the garbage collector log.\n\t\n\tArguments:\n\t---------\n\t- testcaseData : String = None (required) The data for the test case to allocate the object graph.\n\t- doGC : any = None (required) A Runnable that triggers garbage collection.\n\t- checker : any = None (required) A Consumer that checks the object references after garbage collection.\n\t- gcLogName : String = None (required) The name of the garbage collector log file.\n\t- shouldContain : ArrayList = None (required) A list of strings that should be present in the garbage collector log.\n\t- shouldNotContain : ArrayList = None (required) A list of strings that should not be present in the garbage collector log.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"TestObjectGraphAfterGC.doTesting\", \"description\": \"Executes a test that allocates an object graph based on the provided test case data, runs garbage collection, checks the object graph references, and verifies specific entries in the garbage collector log.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"testcaseData\": {\"type\": \"String\", \"description\": \"The data for the test case to allocate the object graph.\"}, \"doGC\": {\"type\": \"any\", \"description\": \"A Runnable that triggers garbage collection.\"}, \"checker\": {\"type\": \"any\", \"description\": \"A Consumer that checks the object references after garbage collection.\"}, \"gcLogName\": {\"type\": \"String\", \"description\": \"The name of the garbage collector log file.\"}, \"shouldContain\": {\"type\": \"ArrayList\", \"description\": \"A list of strings that should be present in the garbage collector log.\", \"items\": {\"type\": \"String\"}}, \"shouldNotContain\": {\"type\": \"ArrayList\", \"description\": \"A list of strings that should not be present in the garbage collector log.\", \"items\": {\"type\": \"String\"}}}, \"required\": [\"testcaseData\", \"doGC\", \"checker\", \"gcLogName\", \"shouldContain\", \"shouldNotContain\"]}}"}
{"scope": "parallel_function", "query": "What was the Treaty of Paris about? Also, what was the importance of Magna Carta in history?", "query_for_retrieval": "What was the Treaty of Paris about? Also, what was the importance of Magna Carta in history?", "answer": "history_fact.fetch", "answer_params": "", "api_description": "def history_fact.fetch:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve facts about historical events or documents\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The historical event or document you want to know about.\n\t- depth : string = detailed (optional) The depth of information required. Choices are 'brief' or 'detailed'.\n\t- year : integer = None (optional) The year of the event/document. default is 0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history_fact.fetch\", \"description\": \"Retrieve facts about historical events or documents\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The historical event or document you want to know about.\"}, \"depth\": {\"type\": \"string\", \"description\": \"The depth of information required. Choices are 'brief' or 'detailed'.\", \"default\": \"detailed\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year of the event/document. default is 0\"}}, \"required\": [\"event\"]}}"}
{"scope": "simple", "query": "Find the distance between New York and Boston, accounting for terrain.", "query_for_retrieval": "Find the distance between New York and Boston, accounting for terrain.", "answer": "distance_calculator.calculate", "answer_params": "", "api_description": "def distance_calculator.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the distance between two locations, considering terrain.\n\t\n\tArguments:\n\t---------\n\t- origin : string = None (required) Starting location of the distance measurement.\n\t- destination : string = None (required) Destination location of the distance measurement.\n\t- consider_terrain : boolean = None (optional) Whether to account for terrain in distance calculation, defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"distance_calculator.calculate\", \"description\": \"Calculate the distance between two locations, considering terrain.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"origin\": {\"type\": \"string\", \"description\": \"Starting location of the distance measurement.\"}, \"destination\": {\"type\": \"string\", \"description\": \"Destination location of the distance measurement.\"}, \"consider_terrain\": {\"type\": \"boolean\", \"description\": \"Whether to account for terrain in distance calculation, defaults to false.\"}}, \"required\": [\"origin\", \"destination\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please provide me with the historical dividend data for Microsoft for the past 5 years on a quarterly basis, then the same data but on an annual basis? After that, could you retrieve the stock market data for Microsoft for the past 60 days and then for the past 120 days?\"", "query_for_retrieval": "\"Could you please provide me with the historical dividend data for Microsoft for the past 5 years on a quarterly basis, then the same data but on an annual basis? After that, could you retrieve the stock market data for Microsoft for the past 60 days and then for the past 120 days?\"", "answer": "corporate_finance.dividend_data", "answer_params": "", "api_description": "def corporate_finance.dividend_data:\n\t\"\"\"\n\tDescription:\n\t\n\tGet historical dividend data of a specific company within a particular duration.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company that you want to get the dividend data for.\n\t- years : integer = None (required) Number of past years for which to retrieve the data.\n\t- frequency : string = annually (optional) The frequency of the dividend payment.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"corporate_finance.dividend_data\", \"description\": \"Get historical dividend data of a specific company within a particular duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company that you want to get the dividend data for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of past years for which to retrieve the data.\"}, \"frequency\": {\"type\": \"string\", \"enum\": [\"quarterly\", \"annually\"], \"description\": \"The frequency of the dividend payment.\", \"default\": \"annually\"}}, \"required\": [\"company\", \"years\"]}}"}
{"scope": "simple", "query": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "query_for_retrieval": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "answer": "recipe_info.get_calories", "answer_params": "", "api_description": "def recipe_info.get_calories:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the amount of calories from a specific recipe in a food website.\n\t\n\tArguments:\n\t---------\n\t- website : string = None (required) The food website that has the recipe.\n\t- recipe : string = None (required) Name of the recipe.\n\t- optional_meal_time : string = None (optional) Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_info.get_calories\", \"description\": \"Retrieve the amount of calories from a specific recipe in a food website.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"website\": {\"type\": \"string\", \"description\": \"The food website that has the recipe.\"}, \"recipe\": {\"type\": \"string\", \"description\": \"Name of the recipe.\"}, \"optional_meal_time\": {\"type\": \"string\", \"description\": \"Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified.\"}}, \"required\": [\"website\", \"recipe\"]}}"}
{"scope": "executable_simple", "query": "I'd like to place an order for some food. Could you get me 101 dumplings priced at $0.1 each, and also 20 rice bowls at $10 per bowl? Please calculate the total for me as well.", "query_for_retrieval": "I'd like to place an order for some food. Could you get me 101 dumplings priced at $0.1 each, and also 20 rice bowls at $10 per bowl? Please calculate the total for me as well.", "answer": "order_food", "answer_params": "", "api_description": "def order_food:\n\t\"\"\"\n\tDescription:\n\t\n\tOrders food for a customer.Return the total price.\n\t\n\tArguments:\n\t---------\n\t- item : array = None (required) No description available.\n\t- quantity : array = None (required) No description available.\n\t- price : array = None (required) No description available.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"order_food\", \"description\": \"Orders food for a customer.Return the total price.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"item\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"description\": \"the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak'].\"}}, \"quantity\": {\"type\": \"array\", \"items\": {\"type\": \"integer\", \"description\": \"the number of the product purchased.\"}}, \"price\": {\"type\": \"array\", \"items\": {\"type\": \"float\", \"description\": \"the number of the product purchased.\"}}}, \"required\": [\"item\", \"quantity\", \"price\"]}}"}
{"scope": "rest", "query": "For a comprehensive analysis on the current state of COVID-19 in Iran that I'm conducting for an upcoming health conference, I require the use of my RapidAPI credentials, which are 'YOUR-RAPID-API-KEY' for the API key and 'covid-193.p.rapidapi.com' for the host. How do I fetch the current COVID-19 statistics, including any parameters that might improve the precision of the data fetched?", "query_for_retrieval": "For a comprehensive analysis on the current state of COVID-19 in Iran that I'm conducting for an upcoming health conference, I require the use of my RapidAPI credentials, which are 'YOUR-RAPID-API-KEY' for the API key and 'covid-193.p.rapidapi.com' for the host. How do I fetch the current COVID-19 statistics, including any parameters that might improve the precision of the data fetched?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me with a few things? First, I'm trying to calculate the area of a triangle that has a base of 12 meters and a height of 15 meters. I would like the result in square meters. Second, I'm curious about the inventor and year of invention of the 'Telephone'. Could you find that for me? Lastly, I'm planning a road trip and need directions from 'New York City' to 'Los Angeles'. I would like to avoid 'tolls' and 'highways'. Can you provide the best route for me?\"", "query_for_retrieval": "\"Can you help me with a few things? First, I'm trying to calculate the area of a triangle that has a base of 12 meters and a height of 15 meters. I would like the result in square meters. Second, I'm curious about the inventor and year of invention of the 'Telephone'. Could you find that for me? Lastly, I'm planning a road trip and need directions from 'New York City' to 'Los Angeles'. I would like to avoid 'tolls' and 'highways'. Can you provide the best route for me?\"", "answer": "map_service.get_directions", "answer_params": "", "api_description": "def map_service.get_directions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve directions from a starting location to an ending location, including options for route preferences.\n\t\n\tArguments:\n\t---------\n\t- start : string = None (required) Starting location for the route.\n\t- end : string = None (required) Ending location for the route.\n\t- avoid : array = None (optional) Route features to avoid. Default is none if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"map_service.get_directions\", \"description\": \"Retrieve directions from a starting location to an ending location, including options for route preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"start\": {\"type\": \"string\", \"description\": \"Starting location for the route.\"}, \"end\": {\"type\": \"string\", \"description\": \"Ending location for the route.\"}, \"avoid\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"tolls\", \"highways\", \"ferries\"]}, \"description\": \"Route features to avoid. Default is none if not specified.\"}}, \"required\": [\"start\", \"end\"]}}"}
{"scope": "java", "query": "How can I obtain an InputSource for the entity with a system identifier 'http://astro.com/stylesheets/toptemplate' when parsing an XML document using a SAX filter factory, with publicid '1234'?", "query_for_retrieval": "How can I obtain an InputSource for the entity with a system identifier 'http://astro.com/stylesheets/toptemplate' when parsing an XML document using a SAX filter factory, with publicid '1234'?", "answer": "SAXFilterFactoryImpl.resolveEntity", "answer_params": "", "api_description": "def SAXFilterFactoryImpl.resolveEntity:\n\t\"\"\"\n\tDescription:\n\t\n\tResolves an entity using its public identifier and system identifier. If the system identifier matches a specific known value, it returns a new InputSource with the system ID converted to a URL; otherwise, it returns null to use the default behavior.\n\t\n\tArguments:\n\t---------\n\t- publicid : String = None (required) The public identifier of the entity to resolve.\n\t- sysId : String = None (required) The system identifier of the entity to resolve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SAXFilterFactoryImpl.resolveEntity\", \"description\": \"Resolves an entity using its public identifier and system identifier. If the system identifier matches a specific known value, it returns a new InputSource with the system ID converted to a URL; otherwise, it returns null to use the default behavior.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"publicid\": {\"type\": \"String\", \"description\": \"The public identifier of the entity to resolve.\"}, \"sysId\": {\"type\": \"String\", \"description\": \"The system identifier of the entity to resolve.\"}}, \"required\": [\"publicid\", \"sysId\"]}}"}
{"scope": "relevance", "query": "What are the latest movie releases?", "query_for_retrieval": "What are the latest movie releases?", "answer": "calculate_velocity", "answer_params": "", "api_description": "def calculate_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final velocity of an object in motion given its initial velocity, acceleration and time.\n\t\n\tArguments:\n\t---------\n\t- initial_velocity : float = None (required) The initial velocity of the object in m/s.\n\t- acceleration : float = None (required) The acceleration of the object in m/s^2.\n\t- time : float = None (required) The time for which the object is in motion in seconds.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_velocity\", \"description\": \"Calculate the final velocity of an object in motion given its initial velocity, acceleration and time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_velocity\": {\"type\": \"float\", \"description\": \"The initial velocity of the object in m/s.\"}, \"acceleration\": {\"type\": \"float\", \"description\": \"The acceleration of the object in m/s^2.\"}, \"time\": {\"type\": \"float\", \"description\": \"The time for which the object is in motion in seconds.\"}}, \"required\": [\"initial_velocity\", \"acceleration\", \"time\"]}}"}
{"scope": "simple", "query": "Find the ranking of LA Lakers in the NBA 2021 regular season.", "query_for_retrieval": "Find the ranking of LA Lakers in the NBA 2021 regular season.", "answer": "get_team_rank", "answer_params": "", "api_description": "def get_team_rank:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the team ranking in a sports league based on season and type.\n\t\n\tArguments:\n\t---------\n\t- team_name : string = None (required) The name of the sports team.\n\t- league : string = None (required) The name of the league in which the team competes.\n\t- season : string = None (required) The season for which the team's ranking is sought.\n\t- type : string = None (required) Type of the season: regular or playoff.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_team_rank\", \"description\": \"Get the team ranking in a sports league based on season and type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team_name\": {\"type\": \"string\", \"description\": \"The name of the sports team.\"}, \"league\": {\"type\": \"string\", \"description\": \"The name of the league in which the team competes.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which the team's ranking is sought.\"}, \"type\": {\"type\": \"string\", \"description\": \"Type of the season: regular or playoff.\", \"enum\": [\"regular\", \"playoff\"]}}, \"required\": [\"team_name\", \"league\", \"season\", \"type\"]}}"}
{"scope": "executable_simple", "query": "While I was delving into some quantum mechanics problems for my physics class, I stumbled upon a particularly challenging equation. It turns out I need to figure out the factorial of the number 12 to proceed with my calculations. Could you help me out by computing the factorial of 12?", "query_for_retrieval": "While I was delving into some quantum mechanics problems for my physics class, I stumbled upon a particularly challenging equation. It turns out I need to figure out the factorial of the number 12 to proceed with my calculations. Could you help me out by computing the factorial of 12?", "answer": "math_factorial", "answer_params": "", "api_description": "def math_factorial:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the factorial of a number.\n\t\n\tArguments:\n\t---------\n\t- n : integer = None (required) The number to calculate the factorial of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_factorial\", \"description\": \"Calculates the factorial of a number.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"n\": {\"type\": \"integer\", \"description\": \"The number to calculate the factorial of.\"}}, \"required\": [\"n\"]}}"}
{"scope": "simple", "query": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "query_for_retrieval": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "answer": "property_records.get", "answer_params": "", "api_description": "def property_records.get:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch property records based on location, parcel number and county.\n\t\n\tArguments:\n\t---------\n\t- address : string = None (required) Address of the property.\n\t- parcel_number : string = None (required) Parcel number of the property.\n\t- county : string = None (required) County where the property is located.\n\t- include_owner : boolean = False (optional) Include owner's name in the property record. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"property_records.get\", \"description\": \"Fetch property records based on location, parcel number and county.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"address\": {\"type\": \"string\", \"description\": \"Address of the property.\"}, \"parcel_number\": {\"type\": \"string\", \"description\": \"Parcel number of the property.\"}, \"county\": {\"type\": \"string\", \"description\": \"County where the property is located.\"}, \"include_owner\": {\"type\": \"boolean\", \"description\": \"Include owner's name in the property record. Default is false.\", \"default\": false}}, \"required\": [\"address\", \"parcel_number\", \"county\"]}}"}
{"scope": "relevance", "query": "Find a pet-friendly train station in Miami", "query_for_retrieval": "Find a pet-friendly train station in Miami", "answer": "find_hotel", "answer_params": "", "api_description": "def find_hotel:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for hotels based on specific criteria like price range and pet policy.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to book the hotel.\n\t- max_price_per_night : float = None (required) The maximum amount you are willing to pay per night.\n\t- pet_friendly : boolean = None (optional) Whether the hotel should allow pets. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_hotel\", \"description\": \"Search for hotels based on specific criteria like price range and pet policy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to book the hotel.\"}, \"max_price_per_night\": {\"type\": \"float\", \"description\": \"The maximum amount you are willing to pay per night.\"}, \"pet_friendly\": {\"type\": \"boolean\", \"description\": \"Whether the hotel should allow pets. Defaults to false.\"}}, \"required\": [\"location\", \"max_price_per_night\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find the sum of all the multiples of 3 and 5 between 1 and 1000. Also find the product of the first five prime numbers.", "query_for_retrieval": "Find the sum of all the multiples of 3 and 5 between 1 and 1000. Also find the product of the first five prime numbers.", "answer": "math_toolkit.sum_of_multiples", "answer_params": "", "api_description": "def math_toolkit.sum_of_multiples:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the sum of all multiples of specified numbers within a specified range.\n\t\n\tArguments:\n\t---------\n\t- lower_limit : integer = None (required) The start of the range (inclusive).\n\t- upper_limit : integer = None (required) The end of the range (inclusive).\n\t- multiples : array = None (required) The numbers to find multiples of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math_toolkit.sum_of_multiples\", \"description\": \"Find the sum of all multiples of specified numbers within a specified range.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"lower_limit\": {\"type\": \"integer\", \"description\": \"The start of the range (inclusive).\"}, \"upper_limit\": {\"type\": \"integer\", \"description\": \"The end of the range (inclusive).\"}, \"multiples\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The numbers to find multiples of.\"}}, \"required\": [\"lower_limit\", \"upper_limit\", \"multiples\"]}}"}
{"scope": "parallel_function", "query": "Check the hotel room availability for 'Queens Hotel' in Berlin, Germany from March 10, 2022 to March 20, 2022 and for 'Royal Hotel' in Paris, France from April 5, 2022 to April 15, 2022.", "query_for_retrieval": "Check the hotel room availability for 'Queens Hotel' in Berlin, Germany from March 10, 2022 to March 20, 2022 and for 'Royal Hotel' in Paris, France from April 5, 2022 to April 15, 2022.", "answer": "hotel_booking.check_availability", "answer_params": "", "api_description": "def hotel_booking.check_availability:\n\t\"\"\"\n\tDescription:\n\t\n\tCheck room availability for a particular hotel for given dates.\n\t\n\tArguments:\n\t---------\n\t- hotel_name : string = None (required) The name of the hotel.\n\t- location : string = None (required) The location of the hotel.\n\t- check_in_date : string = None (required) The check-in date in YYYY-MM-DD format.\n\t- check_out_date : string = None (required) The check-out date in YYYY-MM-DD format.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking.check_availability\", \"description\": \"Check room availability for a particular hotel for given dates.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the hotel.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in YYYY-MM-DD format.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in YYYY-MM-DD format.\"}}, \"required\": [\"hotel_name\", \"location\", \"check_in_date\", \"check_out_date\"]}}"}
{"scope": "relevance", "query": "Who won the presidential election in 2020?", "query_for_retrieval": "Who won the presidential election in 2020?", "answer": "criminal_case_details.get", "answer_params": "", "api_description": "def criminal_case_details.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of a specific criminal case.\n\t\n\tArguments:\n\t---------\n\t- case_number : string = None (required) The official number of the case in the judiciary system.\n\t- court_id : string = None (required) The ID of the court where the case was held.\n\t- include_hearing_details : boolean = None (optional) Flag indicating if hearing details should also be retrieved. Default: False\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"criminal_case_details.get\", \"description\": \"Retrieve the details of a specific criminal case.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"string\", \"description\": \"The official number of the case in the judiciary system.\"}, \"court_id\": {\"type\": \"string\", \"description\": \"The ID of the court where the case was held.\"}, \"include_hearing_details\": {\"type\": \"boolean\", \"description\": \"Flag indicating if hearing details should also be retrieved. Default: False\"}}, \"required\": [\"case_number\", \"court_id\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"In the game 'Animal Crossing' during the 'Summer' season, can you find out what types of 'fish' are collectable? After that, can you tell me the highest score achieved by any player in the game 'Fortnite' on 'Playstation' platform in the 'Asia' region? Then, I would like to know the details of lawsuits involving the company 'Apple Inc.' in the year 2018. Lastly, could you calculate the binomial probability for 10 trials, with 3 successes and a probability of success of 0.7 on an individual trial?\"", "query_for_retrieval": "\"In the game 'Animal Crossing' during the 'Summer' season, can you find out what types of 'fish' are collectable? After that, can you tell me the highest score achieved by any player in the game 'Fortnite' on 'Playstation' platform in the 'Asia' region? Then, I would like to know the details of lawsuits involving the company 'Apple Inc.' in the year 2018. Lastly, could you calculate the binomial probability for 10 trials, with 3 successes and a probability of success of 0.7 on an individual trial?\"", "answer": "lawsuit_details.find", "answer_params": "", "api_description": "def lawsuit_details.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind details of lawsuits involving a specific company from a given year.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) Name of the company.\n\t- year : integer = None (required) Year of the lawsuit.\n\t- case_type : string = None (optional) Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is all if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_details.find\", \"description\": \"Find details of lawsuits involving a specific company from a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"Name of the company.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the lawsuit.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is all if not specified.\"}}, \"required\": [\"company_name\", \"year\"]}}"}
{"scope": "simple", "query": "Calculate the greatest common divisor of two numbers: 40 and 50", "query_for_retrieval": "Calculate the greatest common divisor of two numbers: 40 and 50", "answer": "math.gcd", "answer_params": "", "api_description": "def math.gcd:\n\t\"\"\"\n\tDescription:\n\t\n\tCompute the greatest common divisor of two numbers\n\t\n\tArguments:\n\t---------\n\t- num1 : integer = None (required) The first number.\n\t- num2 : integer = None (required) The second number.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"math.gcd\", \"description\": \"Compute the greatest common divisor of two numbers\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"num1\": {\"type\": \"integer\", \"description\": \"The first number.\"}, \"num2\": {\"type\": \"integer\", \"description\": \"The second number.\"}}, \"required\": [\"num1\", \"num2\"]}}"}
{"scope": "simple", "query": "How much will 20000 Japanese Yen be in United States Dollar?", "query_for_retrieval": "How much will 20000 Japanese Yen be in United States Dollar?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts an amount from a particular currency to another currency.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency in which the original amount is present.\n\t- target_currency : string = None (required) The currency to which you want to convert.\n\t- amount : integer = None (required) The amount you want to convert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts an amount from a particular currency to another currency.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency in which the original amount is present.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to which you want to convert.\"}, \"amount\": {\"type\": \"integer\", \"description\": \"The amount you want to convert.\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "multiple_function", "query": "Find me the closest nature park that allows camping and has scenic views in Boston, MA.", "query_for_retrieval": "Find me the closest nature park that allows camping and has scenic views in Boston, MA.", "answer": "nature_park.find_nearby", "answer_params": "", "api_description": "def nature_park.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby nature parks based on specific criteria like camping availability and scenic views.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Boston, MA.\n\t- features : array = None (required) Preferred features in nature park.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"nature_park.find_nearby\", \"description\": \"Locate nearby nature parks based on specific criteria like camping availability and scenic views.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Boston, MA.\"}, \"features\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Camping\", \"Scenic View\", \"Trails\", \"Picnic Areas\"]}, \"description\": \"Preferred features in nature park.\"}}, \"required\": [\"location\", \"features\"]}}"}
{"scope": "parallel_multiple_function", "query": "Book a flight from Seattle to Boston with American Airlines and book a hotel in Boston for 4 nights. ", "query_for_retrieval": "Book a flight from Seattle to Boston with American Airlines and book a hotel in Boston for 4 nights. ", "answer": "flight_book", "answer_params": "", "api_description": "def flight_book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a flight for a specific route and airlines\n\t\n\tArguments:\n\t---------\n\t- _from : string = None (required) The departure city in full name.\n\t- to : string = None (required) The arrival city in full name.\n\t- airlines : string = None (required) The preferred airline.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight_book\", \"description\": \"Book a flight for a specific route and airlines\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"_from\": {\"type\": \"string\", \"description\": \"The departure city in full name.\"}, \"to\": {\"type\": \"string\", \"description\": \"The arrival city in full name.\"}, \"airlines\": {\"type\": \"string\", \"description\": \"The preferred airline.\"}}, \"required\": [\"_from\", \"to\", \"airlines\"]}}"}
{"scope": "simple", "query": "What is the circumference of a circle with a radius of 4 inches?", "query_for_retrieval": "What is the circumference of a circle with a radius of 4 inches?", "answer": "calculate_circumference", "answer_params": "", "api_description": "def calculate_circumference:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the circumference of a circle with a given radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle in the unit given.\n\t- unit : string = None (optional) The unit of measurement for the radius. Default is 'cm'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_circumference\", \"description\": \"Calculates the circumference of a circle with a given radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle in the unit given.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for the radius. Default is 'cm'.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "parallel_function", "query": "Find a supermarket in New York City that opens 24 hours and another one in San Diego that offers home delivery.", "query_for_retrieval": "Find a supermarket in New York City that opens 24 hours and another one in San Diego that offers home delivery.", "answer": "grocery_store.find_by_criteria", "answer_params": "", "api_description": "def grocery_store.find_by_criteria:\n\t\"\"\"\n\tDescription:\n\t\n\tFind grocery stores based on specific criteria such as location, hours of operation, or availability of services.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to find a grocery store.\n\t- criteria : array = None (required) Specific features or services you're looking for in a grocery store.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"grocery_store.find_by_criteria\", \"description\": \"Find grocery stores based on specific criteria such as location, hours of operation, or availability of services.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to find a grocery store.\"}, \"criteria\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"24 hours\", \"Home Delivery\", \"In-store Pickup\"]}, \"description\": \"Specific features or services you're looking for in a grocery store.\"}}, \"required\": [\"location\", \"criteria\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on an in-depth article covering the current COVID-19 situation in Brazil, and it's crucial to have the latest figures to ensure the information I present is factual and up to date. I need to include the number of active COVID-19 cases in the country. Could you provide me with the most recent active case count for Brazil?", "query_for_retrieval": "I'm working on an in-depth article covering the current COVID-19 situation in Brazil, and it's crucial to have the latest figures to ensure the information I present is factual and up to date. I need to include the number of active COVID-19 cases in the country. Could you provide me with the most recent active case count for Brazil?", "answer": "get_covid_death_by_country", "answer_params": "", "api_description": "def get_covid_death_by_country:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the most up to date total deaths of a country result from COVID.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country to find the total deaths of, in the format of the country's full name.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_covid_death_by_country\", \"description\": \"Finds the most up to date total deaths of a country result from COVID.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country to find the total deaths of, in the format of the country's full name.\"}}, \"required\": [\"country\"]}}"}
{"scope": "executable_simple", "query": "I'm currently working with a client who's looking to purchase their first home and we're trying to map out their budget. They have their eyes set on a lovely suburban house priced at $350,000. To finance this purchase, they're considering a 30-year mortgage with an interest rate of about 3.5%. Could you help us figure out what their monthly payment would be with these details in mind?", "query_for_retrieval": "I'm currently working with a client who's looking to purchase their first home and we're trying to map out their budget. They have their eyes set on a lovely suburban house priced at $350,000. To finance this purchase, they're considering a 30-year mortgage with an interest rate of about 3.5%. Could you help us figure out what their monthly payment would be with these details in mind?", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "relevance", "query": "Which sculture is the most famous in 19th century?", "query_for_retrieval": "Which sculture is the most famous in 19th century?", "answer": "material_tool_lookup.lookup", "answer_params": "", "api_description": "def material_tool_lookup.lookup:\n\t\"\"\"\n\tDescription:\n\t\n\tLookup suitable tools for different kinds of material sculpting\n\t\n\tArguments:\n\t---------\n\t- material : string = None (required) The material you want to sculpt. (i.e. wood, stone, ice etc.)\n\t- sculpting_technique : string = None (required) The sculpting technique (i.e. carving, casting, modelling etc.)\n\t- brand_preference : string = None (optional) Your preferred brand for the tool.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"material_tool_lookup.lookup\", \"description\": \"Lookup suitable tools for different kinds of material sculpting\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"material\": {\"type\": \"string\", \"description\": \"The material you want to sculpt. (i.e. wood, stone, ice etc.)\"}, \"sculpting_technique\": {\"type\": \"string\", \"description\": \"The sculpting technique (i.e. carving, casting, modelling etc.)\"}, \"brand_preference\": {\"type\": \"string\", \"description\": \"Your preferred brand for the tool.\"}}, \"required\": [\"material\", \"sculpting_technique\"], \"default\": \"material\"}}"}
{"scope": "simple", "query": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "query_for_retrieval": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "answer": "restaurant_search", "answer_params": "", "api_description": "def restaurant_search:\n\t\"\"\"\n\tDescription:\n\t\n\tLocates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York City, NY\n\t- cuisine : string = None (required) Preferred type of cuisine e.g., Italian, Indian, American, etc.\n\t- rating : integer = None (required) Minimum average customer rating out of 5\n\t- accepts_credit_cards : boolean = None (required) If the restaurant should accept credit cards.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_search\", \"description\": \"Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York City, NY\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Preferred type of cuisine e.g., Italian, Indian, American, etc.\"}, \"rating\": {\"type\": \"integer\", \"description\": \"Minimum average customer rating out of 5\"}, \"accepts_credit_cards\": {\"type\": \"boolean\", \"description\": \"If the restaurant should accept credit cards.\"}}, \"required\": [\"location\", \"cuisine\", \"rating\", \"accepts_credit_cards\"]}}"}
{"scope": "sql", "query": "In the field of astrophysics, a database table named \"StarObservations\" is used to record the observations of various celestial bodies. The table includes columns for 'ObservationID', 'StarName', 'Magnitude', 'Coordinates', and 'ObservationTime'. If an observation with 'ObservationID' of 'O789' and 'StarName' of 'Betelgeuse' was identified as erroneous due to a faulty telescope, could you eliminate this particular observation from the \"StarObservations\" table? The criteria for this operation would be where 'ObservationID' equals 'O789' and 'StarName' equals 'Betelgeuse'.", "query_for_retrieval": "In the field of astrophysics, a database table named \"StarObservations\" is used to record the observations of various celestial bodies. The table includes columns for 'ObservationID', 'StarName', 'Magnitude', 'Coordinates', and 'ObservationTime'. If an observation with 'ObservationID' of 'O789' and 'StarName' of 'Betelgeuse' was identified as erroneous due to a faulty telescope, could you eliminate this particular observation from the \"StarObservations\" table? The criteria for this operation would be where 'ObservationID' equals 'O789' and 'StarName' equals 'Betelgeuse'.", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "Mix yellow and blue colors and adjust the lightness level to 60 percent.", "query_for_retrieval": "Mix yellow and blue colors and adjust the lightness level to 60 percent.", "answer": "mix_paint_color", "answer_params": "", "api_description": "def mix_paint_color:\n\t\"\"\"\n\tDescription:\n\t\n\tCombine two primary paint colors and adjust the resulting color's lightness level.\n\t\n\tArguments:\n\t---------\n\t- color1 : string = None (required) The first primary color to be mixed.\n\t- color2 : string = None (required) The second primary color to be mixed.\n\t- lightness : integer = None (optional) The desired lightness level of the resulting color in percentage. The default level is set to 50.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mix_paint_color\", \"description\": \"Combine two primary paint colors and adjust the resulting color's lightness level.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color1\": {\"type\": \"string\", \"description\": \"The first primary color to be mixed.\"}, \"color2\": {\"type\": \"string\", \"description\": \"The second primary color to be mixed.\"}, \"lightness\": {\"type\": \"integer\", \"description\": \"The desired lightness level of the resulting color in percentage. The default level is set to 50.\"}}, \"required\": [\"color1\", \"color2\"]}}"}
{"scope": "javascript", "query": "How can I determine if a synthetic rest parameter should be added to a function declaration that already contains a variadic type in its last parameter, given the declaration object 'funcDeclaration' and its parameters array 'funcParameters'?", "query_for_retrieval": "How can I determine if a synthetic rest parameter should be added to a function declaration that already contains a variadic type in its last parameter, given the declaration object 'funcDeclaration' and its parameters array 'funcParameters'?", "answer": "maybeAddJsSyntheticRestParameter", "answer_params": "", "api_description": "def maybeAddJsSyntheticRestParameter:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function checks a given function declaration to see if it should add a synthetic rest parameter based on the presence of a variadic type in the last parameter or in the JSDoc tags. It modifies the parameters array directly if necessary.\n\t\n\tArguments:\n\t---------\n\t- declaration : any = None (required) The function declaration object to check.\n\t- parameters : array = None (required) The array of parameters for the function declaration.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"maybeAddJsSyntheticRestParameter\", \"description\": \"This function checks a given function declaration to see if it should add a synthetic rest parameter based on the presence of a variadic type in the last parameter or in the JSDoc tags. It modifies the parameters array directly if necessary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"declaration\": {\"type\": \"any\", \"description\": \"The function declaration object to check.\"}, \"parameters\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"The array of parameters for the function declaration.\"}}, \"required\": [\"declaration\", \"parameters\"]}}"}
{"scope": "rest", "query": "I'm working on a location-based app and need to convert the address '450 Jane Stanford Way Stanford, CA 94305\u20132004' into latitude and longitude coordinates using the Geocoding API. I have an API key 'YOUR-GEOCODE-API-KEY'. Could you show me how to make the GET request for this in JSON format?", "query_for_retrieval": "I'm working on a location-based app and need to convert the address '450 Jane Stanford Way Stanford, CA 94305\u20132004' into latitude and longitude coordinates using the Geocoding API. I have an API key 'YOUR-GEOCODE-API-KEY'. Could you show me how to make the GET request for this in JSON format?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://geocode.maps.co/search (required) Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - q : string = None (required) user query string to a particular address\n\t  - api_key : string = None (required) Your API key for authentication.\n\t  - format : string = None (optional) The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates\", \"default\": \"https://geocode.maps.co/search\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"q\": {\"type\": \"string\", \"description\": \"user query string to a particular address\"}, \"api_key\": {\"type\": \"string\", \"description\": \"Your API key for authentication.\"}, \"format\": {\"type\": \"string\", \"description\": \"The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'.\"}}, \"type\": \"dict\", \"required\": [\"q\", \"api_key\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "sql", "query": "What is the name of the student in the 'students' table with the ID 1234, if we consider the columns 'id' and 'name' and the condition 'id = 1234'?", "query_for_retrieval": "What is the name of the student in the 'students' table with the ID 1234, if we consider the columns 'id' and 'name' and the condition 'id = 1234'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "Find the year of a Picasso's painting.", "query_for_retrieval": "Find the year of a Picasso's painting.", "answer": "sculpture.get_dimensions", "answer_params": "", "api_description": "def sculpture.get_dimensions:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dimensions of a specific sculpture.\n\t\n\tArguments:\n\t---------\n\t- sculpture_name : string = None (required) The name of the sculpture.\n\t- material : string = wood (optional) The material of the sculpture.\n\t- artist_name : string = None (required) The name of the artist who created the sculpture.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculpture.get_dimensions\", \"description\": \"Retrieve the dimensions of a specific sculpture.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sculpture_name\": {\"type\": \"string\", \"description\": \"The name of the sculpture.\"}, \"material\": {\"type\": \"string\", \"description\": \"The material of the sculpture.\", \"default\": \"wood\"}, \"artist_name\": {\"type\": \"string\", \"description\": \"The name of the artist who created the sculpture.\"}}, \"required\": [\"sculpture_name\", \"artist_name\"]}}"}
{"scope": "simple", "query": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "query_for_retrieval": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "answer": "calculate_velocity", "answer_params": "", "api_description": "def calculate_velocity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the velocity for a certain distance travelled within a specific duration.\n\t\n\tArguments:\n\t---------\n\t- distance : integer = None (required) The distance travelled by the object, typically in kilometers.\n\t- duration : integer = None (required) The duration of the journey, typically in hours.\n\t- unit : string = None (optional) Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_velocity\", \"description\": \"Calculate the velocity for a certain distance travelled within a specific duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"distance\": {\"type\": \"integer\", \"description\": \"The distance travelled by the object, typically in kilometers.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The duration of the journey, typically in hours.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\"}}, \"required\": [\"distance\", \"duration\"]}}"}
{"scope": "multiple_function", "query": "Find out the historical dividend payments of Apple Inc for last five years.", "query_for_retrieval": "Find out the historical dividend payments of Apple Inc for last five years.", "answer": "corporate_finance.dividend_data", "answer_params": "", "api_description": "def corporate_finance.dividend_data:\n\t\"\"\"\n\tDescription:\n\t\n\tGet historical dividend data of a specific company within a particular duration.\n\t\n\tArguments:\n\t---------\n\t- company : string = None (required) The company that you want to get the dividend data for.\n\t- years : integer = None (required) Number of past years for which to retrieve the data.\n\t- frequency : string = None (optional) The frequency of the dividend payment. Default annually\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"corporate_finance.dividend_data\", \"description\": \"Get historical dividend data of a specific company within a particular duration.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company\": {\"type\": \"string\", \"description\": \"The company that you want to get the dividend data for.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of past years for which to retrieve the data.\"}, \"frequency\": {\"type\": \"string\", \"enum\": [\"quarterly\", \"annually\"], \"description\": \"The frequency of the dividend payment. Default annually\"}}, \"required\": [\"company\", \"years\"]}}"}
{"scope": "parallel_function", "query": "Can you use the function 'employee.fetch_data' to fetch the 'Personal Info', 'Job History', 'Payroll', and 'Attendance' data fields for an employee with the unique ID of 12345 from the company named 'Tech Solutions'? And then, can you repeat the same process for another employee with the unique ID of 67890 from the same company?", "query_for_retrieval": "Can you use the function 'employee.fetch_data' to fetch the 'Personal Info', 'Job History', 'Payroll', and 'Attendance' data fields for an employee with the unique ID of 12345 from the company named 'Tech Solutions'? And then, can you repeat the same process for another employee with the unique ID of 67890 from the same company?", "answer": "employee.fetch_data", "answer_params": "", "api_description": "def employee.fetch_data:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the detailed data for a specific employee in a given company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The name of the company.\n\t- employee_id : integer = None (required) The unique ID of the employee.\n\t- data_field : array = ['Personal Info'] (optional) Fields of data to be fetched for the employee (Optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"employee.fetch_data\", \"description\": \"Fetches the detailed data for a specific employee in a given company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The name of the company.\"}, \"employee_id\": {\"type\": \"integer\", \"description\": \"The unique ID of the employee.\"}, \"data_field\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Personal Info\", \"Job History\", \"Payroll\", \"Attendance\"]}, \"description\": \"Fields of data to be fetched for the employee (Optional).\", \"default\": [\"Personal Info\"]}}, \"required\": [\"company_name\", \"employee_id\"]}}"}
{"scope": "relevance", "query": "Give me a selection of horror movies to watch on a Friday night.", "query_for_retrieval": "Give me a selection of horror movies to watch on a Friday night.", "answer": "convert_celsius_to_fahrenheit", "answer_params": "", "api_description": "def convert_celsius_to_fahrenheit:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a temperature from Celsius to Fahrenheit.\n\t\n\tArguments:\n\t---------\n\t- celsius : float = None (required) The temperature in Celsius to be converted.\n\t- precision : integer = 2 (optional) The decimal precision for the conversion result.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_celsius_to_fahrenheit\", \"description\": \"Convert a temperature from Celsius to Fahrenheit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"celsius\": {\"type\": \"float\", \"description\": \"The temperature in Celsius to be converted.\"}, \"precision\": {\"type\": \"integer\", \"description\": \"The decimal precision for the conversion result.\", \"default\": 2}}, \"required\": [\"celsius\"]}}"}
{"scope": "parallel_multiple_function", "query": "What is the Electric field at 3m from a point charge with a value of 4C? Also, calculate the magnetic field for an electric current of 0.5A flowing through a solenoid having 25 turns per meter and a length of 2m.", "query_for_retrieval": "What is the Electric field at 3m from a point charge with a value of 4C? Also, calculate the magnetic field for an electric current of 0.5A flowing through a solenoid having 25 turns per meter and a length of 2m.", "answer": "physics.magnetic_field", "answer_params": "", "api_description": "def physics.magnetic_field:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate magnetic field for given current flowing through solenoid.\n\t\n\tArguments:\n\t---------\n\t- current : float = None (required) Electric current in Amperes.\n\t- turnsPerMeter : float = None (required) Number of turns of solenoid per meter.\n\t- length : float = None (required) Length of the solenoid in meters.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"physics.magnetic_field\", \"description\": \"Calculate magnetic field for given current flowing through solenoid.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current\": {\"type\": \"float\", \"description\": \"Electric current in Amperes.\"}, \"turnsPerMeter\": {\"type\": \"float\", \"description\": \"Number of turns of solenoid per meter.\"}, \"length\": {\"type\": \"float\", \"description\": \"Length of the solenoid in meters.\"}}, \"required\": [\"current\", \"turnsPerMeter\", \"length\"]}}"}
{"scope": "simple", "query": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "query_for_retrieval": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "answer": "train_random_forest_classifier", "answer_params": "", "api_description": "def train_random_forest_classifier:\n\t\"\"\"\n\tDescription:\n\t\n\tTrain a Random Forest classifier with the specified parameters.\n\t\n\tArguments:\n\t---------\n\t- dataset : string = None (required) The dataset to train the classifier on.\n\t- max_depth : integer = None (required) The maximum depth of the trees in the forest.\n\t- n_estimators : integer = None (required) The number of trees in the forest.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"train_random_forest_classifier\", \"description\": \"Train a Random Forest classifier with the specified parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset\": {\"type\": \"string\", \"description\": \"The dataset to train the classifier on.\"}, \"max_depth\": {\"type\": \"integer\", \"description\": \"The maximum depth of the trees in the forest.\"}, \"n_estimators\": {\"type\": \"integer\", \"description\": \"The number of trees in the forest.\"}}, \"required\": [\"dataset\", \"max_depth\", \"n_estimators\"]}}"}
{"scope": "javascript", "query": "Given the manageReactState function, which encapsulates state management logic for React applications including shared state handling and performance optimization, write a line of code to initialize this function. Assume you have an initial state object `initialStateObject`, a map of reducer functions `reducersMap`, a logger middleware `loggerMiddleware`, and an application of middleware as enhancers. Also, assume the existence of custom hooks `useStateSelectorHook` and `useDispatchActionHook` for state access and updates within React components. Use applyMiddleware('myMiddleWare') as enhancers.", "query_for_retrieval": "Given the manageReactState function, which encapsulates state management logic for React applications including shared state handling and performance optimization, write a line of code to initialize this function. Assume you have an initial state object `initialStateObject`, a map of reducer functions `reducersMap`, a logger middleware `loggerMiddleware`, and an application of middleware as enhancers. Also, assume the existence of custom hooks `useStateSelectorHook` and `useDispatchActionHook` for state access and updates within React components. Use applyMiddleware('myMiddleWare') as enhancers.", "answer": "manageReactState", "answer_params": "", "api_description": "def manageReactState:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function encapsulates the logic for state management in a React application, offering solutions for shared state handling and performance optimization.\n\t\n\tArguments:\n\t---------\n\t- store : dict = None (required) Configuration object for the application's central store.\n\t  - initialState : dict = None (optional) The initial state object of the React application.\n\t  - reducers : dict = None (optional) A collection of reducer functions to handle state changes.\n\t  - middlewares : array = None (optional) An array of middleware functions for intercepting and potentially altering actions or state changes.\n\t  - enhancers : array = None (optional) An array of store enhancers for extending store capabilities.\n\t- context : any = None (required) The React context object for providing and consuming the store in the component tree.\n\t- hooks : dict = None (required) Custom hooks for accessing and updating the state within React components.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"manageReactState\", \"description\": \"This function encapsulates the logic for state management in a React application, offering solutions for shared state handling and performance optimization.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"store\": {\"type\": \"dict\", \"properties\": {\"initialState\": {\"type\": \"dict\", \"description\": \"The initial state object of the React application.\"}, \"reducers\": {\"type\": \"dict\", \"description\": \"A collection of reducer functions to handle state changes.\"}, \"middlewares\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"An array of middleware functions for intercepting and potentially altering actions or state changes.\"}, \"enhancers\": {\"type\": \"array\", \"items\": {\"type\": \"String\"}, \"description\": \"An array of store enhancers for extending store capabilities.\"}}, \"description\": \"Configuration object for the application's central store.\"}, \"context\": {\"type\": \"any\", \"description\": \"The React context object for providing and consuming the store in the component tree.\"}, \"hooks\": {\"type\": \"dict\", \"description\": \"Custom hooks for accessing and updating the state within React components.\"}}, \"required\": [\"store\", \"context\", \"hooks\"]}}"}
{"scope": "simple", "query": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "query_for_retrieval": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "answer": "calculate_neuronal_activity", "answer_params": "", "api_description": "def calculate_neuronal_activity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.\n\t\n\tArguments:\n\t---------\n\t- input_synaptic_rate : integer = None (required) The synaptic input rate, usually represented as number of inputs per second.\n\t- weight : float = None (optional) The weight of the input, denoting its influence on the neuron's state. Default is 1.0.\n\t- decay_rate : float = None (required) The rate at which the neuron's potential decays in the absence of inputs.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_neuronal_activity\", \"description\": \"Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"input_synaptic_rate\": {\"type\": \"integer\", \"description\": \"The synaptic input rate, usually represented as number of inputs per second.\"}, \"weight\": {\"type\": \"float\", \"description\": \"The weight of the input, denoting its influence on the neuron's state. Default is 1.0.\"}, \"decay_rate\": {\"type\": \"float\", \"description\": \"The rate at which the neuron's potential decays in the absence of inputs.\"}}, \"required\": [\"input_synaptic_rate\", \"decay_rate\"]}}"}
{"scope": "simple", "query": "Find me detailed information about the structure of human cell", "query_for_retrieval": "Find me detailed information about the structure of human cell", "answer": "biology.get_cell_info", "answer_params": "", "api_description": "def biology.get_cell_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about the structure and functioning of a specified type of cell\n\t\n\tArguments:\n\t---------\n\t- cell_type : string = None (required) Type of cell you want information about\n\t- detailed : boolean = false (optional) Indicate if you want a detailed description of the cell\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"biology.get_cell_info\", \"description\": \"Retrieve information about the structure and functioning of a specified type of cell\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cell_type\": {\"type\": \"string\", \"description\": \"Type of cell you want information about\"}, \"detailed\": {\"type\": \"boolean\", \"description\": \"Indicate if you want a detailed description of the cell\", \"default\": \"false\"}}, \"required\": [\"cell_type\"]}}"}
{"scope": "java", "query": "How can I switch the execution from coroutine with ID 5 to coroutine with ID 10, passing an argument 'resultData' to the target coroutine, ensuring that coroutine 10 is available, in a Java XML processing context?", "query_for_retrieval": "How can I switch the execution from coroutine with ID 5 to coroutine with ID 10, passing an argument 'resultData' to the target coroutine, ensuring that coroutine 10 is available, in a Java XML processing context?", "answer": "CoroutineManager.co_exit_to", "answer_params": "", "api_description": "def CoroutineManager.co_exit_to:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function switches the execution from one coroutine to another within the CoroutineManager, passing an argument object to the target coroutine. It also checks if the target coroutine is available and throws an exception if not.\n\t\n\tArguments:\n\t---------\n\t- arg_object : any = None (required) The argument object to pass to the target coroutine.\n\t- thisCoroutine : integer = None (required) The ID of the currently active coroutine.\n\t- toCoroutine : integer = None (required) The ID of the coroutine to switch to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CoroutineManager.co_exit_to\", \"description\": \"This function switches the execution from one coroutine to another within the CoroutineManager, passing an argument object to the target coroutine. It also checks if the target coroutine is available and throws an exception if not.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"arg_object\": {\"type\": \"any\", \"description\": \"The argument object to pass to the target coroutine.\"}, \"thisCoroutine\": {\"type\": \"integer\", \"description\": \"The ID of the currently active coroutine.\"}, \"toCoroutine\": {\"type\": \"integer\", \"description\": \"The ID of the coroutine to switch to.\"}}, \"required\": [\"arg_object\", \"thisCoroutine\", \"toCoroutine\"]}}"}
{"scope": "executable_simple", "query": "I've been tracking the performance of Apple's stock and I'm interested in taking a deeper dive into its history. I want to see the monthly trends and also check if there have been any splits or dividends issued recently. Can you pull up the history of AAPL for me with a monthly interval and include the stock splits and dividends information?", "query_for_retrieval": "I've been tracking the performance of Apple's stock and I'm interested in taking a deeper dive into its history. I want to see the monthly trends and also check if there have been any splits or dividends issued recently. Can you pull up the history of AAPL for me with a monthly interval and include the stock splits and dividends information?", "answer": "get_stock_history", "answer_params": "", "api_description": "def get_stock_history:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t- interval : string = None (required) The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\n\t- diffandsplits : string = None (optional) The diff and splits of the stock history. Allows one of following : true|false. Default as false\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_history\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}, \"interval\": {\"type\": \"string\", \"description\": \"The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo\"}, \"diffandsplits\": {\"type\": \"string\", \"description\": \"The diff and splits of the stock history. Allows one of following : true|false. Default as false\"}}, \"required\": [\"stock_name\", \"interval\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a scientist working in a lab. You have a substance with a mass of 10 kilograms and a volume of 2 cubic meters. You want to calculate the density of this substance in kg/m\u00b3. After your experiment, you want to relax by doing some painting. You decide to mix two primary colors, red and blue. However, you want the resulting color to have a lightness level of 70%. Later, you have another substance with a mass of 5 kilograms and a volume of 1 cubic meter. You want to calculate the density of this substance as well, but this time in g/cm\u00b3. Finally, you decide to mix another set of primary colors, yellow and blue, but you want the resulting color to have a lightness level of 30%. Can you calculate the densities and mix the paint colors accordingly?\"", "query_for_retrieval": "\"Imagine you are a scientist working in a lab. You have a substance with a mass of 10 kilograms and a volume of 2 cubic meters. You want to calculate the density of this substance in kg/m\u00b3. After your experiment, you want to relax by doing some painting. You decide to mix two primary colors, red and blue. However, you want the resulting color to have a lightness level of 70%. Later, you have another substance with a mass of 5 kilograms and a volume of 1 cubic meter. You want to calculate the density of this substance as well, but this time in g/cm\u00b3. Finally, you decide to mix another set of primary colors, yellow and blue, but you want the resulting color to have a lightness level of 30%. Can you calculate the densities and mix the paint colors accordingly?\"", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the density of a substance based on its mass and volume.\n\t\n\tArguments:\n\t---------\n\t- mass : integer = None (required) The mass of the substance in kilograms.\n\t- volume : integer = None (required) The volume of the substance in cubic meters.\n\t- unit : string = None (optional) The unit of density. Default is kg/m\u00b3\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the density of a substance based on its mass and volume.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"mass\": {\"type\": \"integer\", \"description\": \"The mass of the substance in kilograms.\"}, \"volume\": {\"type\": \"integer\", \"description\": \"The volume of the substance in cubic meters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of density. Default is kg/m\\u00b3\"}}, \"required\": [\"mass\", \"volume\"]}}"}
{"scope": "simple", "query": "What's the area of a circle with a radius of 10?", "query_for_retrieval": "What's the area of a circle with a radius of 10?", "answer": "geometry.area_circle", "answer_params": "", "api_description": "def geometry.area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given the radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- units : string = None (optional) The units in which the radius is measured (defaults to 'meters').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.area_circle\", \"description\": \"Calculate the area of a circle given the radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"units\": {\"type\": \"string\", \"description\": \"The units in which the radius is measured (defaults to 'meters').\"}}, \"required\": [\"radius\"]}}"}
{"scope": "executable_simple", "query": "I need to check the current price of Microsoft Corporation's stock. Could you get me the latest stock price for Microsoft?", "query_for_retrieval": "I need to check the current price of Microsoft Corporation's stock. Could you get me the latest stock price for Microsoft?", "answer": "get_stock_price_by_stock_name", "answer_params": "", "api_description": "def get_stock_price_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price_by_stock_name\", \"description\": \"Finds the price of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "executable_simple", "query": "I've been plotting some data and it looks like there's a linear trend. I've got these x-coordinates [1, 2, 3] and corresponding y-values [4, 5, 6]. I need to predict the y-value for when x is 10. Can you apply a linear regression to this and give me that predicted value?", "query_for_retrieval": "I've been plotting some data and it looks like there's a linear trend. I've got these x-coordinates [1, 2, 3] and corresponding y-values [4, 5, 6]. I need to predict the y-value for when x is 10. Can you apply a linear regression to this and give me that predicted value?", "answer": "linear_regression", "answer_params": "", "api_description": "def linear_regression:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the linear regression of a set of points and evaluates it at a given point.\n\t\n\tArguments:\n\t---------\n\t- x : array = None (required) The x coordinates of the points.\n\t- y : array = None (required) The y coordinates of the points.\n\t- point : integer = None (required) The point to calculate the linear regression at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression\", \"description\": \"Finds the linear regression of a set of points and evaluates it at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"x\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The x coordinates of the points.\"}, \"y\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The y coordinates of the points.\"}, \"point\": {\"type\": \"integer\", \"description\": \"The point to calculate the linear regression at.\"}}, \"required\": [\"x\", \"y\", \"point\"]}}"}
{"scope": "simple", "query": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "query_for_retrieval": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "answer": "flight.book", "answer_params": "", "api_description": "def flight.book:\n\t\"\"\"\n\tDescription:\n\t\n\tBook a direct flight for a specific date and time from departure location to destination location.\n\t\n\tArguments:\n\t---------\n\t- departure_location : string = None (required) The location you are departing from.\n\t- destination_location : string = None (required) The location you are flying to.\n\t- date : string = None (required) The date of the flight. Accepts standard date format e.g., 2022-04-28.\n\t- time : string = None (optional) Preferred time of flight. Default is 'morning'.\n\t- direct_flight : boolean = None (optional) If set to true, only direct flights will be searched. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"flight.book\", \"description\": \"Book a direct flight for a specific date and time from departure location to destination location.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"departure_location\": {\"type\": \"string\", \"description\": \"The location you are departing from.\"}, \"destination_location\": {\"type\": \"string\", \"description\": \"The location you are flying to.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date of the flight. Accepts standard date format e.g., 2022-04-28.\"}, \"time\": {\"type\": \"string\", \"description\": \"Preferred time of flight. Default is 'morning'.\"}, \"direct_flight\": {\"type\": \"boolean\", \"description\": \"If set to true, only direct flights will be searched. Default is false.\"}}, \"required\": [\"departure_location\", \"destination_location\", \"date\"]}}"}
{"scope": "simple", "query": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "query_for_retrieval": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "answer": "calculate_NPV", "answer_params": "", "api_description": "def calculate_NPV:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.\n\t\n\tArguments:\n\t---------\n\t- cash_flows : array = None (required) Series of future cash flows.\n\t- discount_rate : float = None (required) The discount rate to use.\n\t- initial_investment : integer = None (optional) The initial investment. Default is 0 if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_NPV\", \"description\": \"Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"cash_flows\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Series of future cash flows.\"}, \"discount_rate\": {\"type\": \"float\", \"description\": \"The discount rate to use.\"}, \"initial_investment\": {\"type\": \"integer\", \"description\": \"The initial investment. Default is 0 if not specified.\"}}, \"required\": [\"cash_flows\", \"discount_rate\"]}}"}
{"scope": "executable_simple", "query": "I have a client preparing for a vacation in the United Kingdom, and they've set aside a budget of 3000 US Dollars for the trip. They've asked me to get a clear idea of how much they will have in British Pounds so they can plan their expenses accordingly. Could you convert $3000 from USD to GBP for me?", "query_for_retrieval": "I have a client preparing for a vacation in the United Kingdom, and they've set aside a budget of 3000 US Dollars for the trip. They've asked me to get a clear idea of how much they will have in British Pounds so they can plan their expenses accordingly. Could you convert $3000 from USD to GBP for me?", "answer": "convert_currency", "answer_params": "", "api_description": "def convert_currency:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a given amount from one currency to another using the ExchangeRate-API.\n\t\n\tArguments:\n\t---------\n\t- amount : float = None (required) The amount of money to convert, in the base currency.\n\t- from_currency : string = None (required) The ISO currency code for the base currency.\n\t- to_currency : string = None (required) The ISO currency code for the target currency.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_currency\", \"description\": \"Converts a given amount from one currency to another using the ExchangeRate-API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"amount\": {\"type\": \"float\", \"description\": \"The amount of money to convert, in the base currency.\"}, \"from_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the base currency.\"}, \"to_currency\": {\"type\": \"string\", \"description\": \"The ISO currency code for the target currency.\"}}, \"required\": [\"amount\", \"from_currency\", \"to_currency\"]}}"}
{"scope": "executable_simple", "query": "I'm working on some land survey data and need to calculate the area of a particular triangular plot. I've got the coordinates of the vertices of the triangle, which are (1,2), (3,4), and (1,3). Can you help me figure out the area of this triangle using these points?", "query_for_retrieval": "I'm working on some land survey data and need to calculate the area of a particular triangular plot. I've got the coordinates of the vertices of the triangle, which are (1,2), (3,4), and (1,3). Can you help me figure out the area of this triangle using these points?", "answer": "polygon_area", "answer_params": "", "api_description": "def polygon_area:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a polygon given its vertices using the shoelace formula.\n\t\n\tArguments:\n\t---------\n\t- vertices : array = None (required) The vertices of the polygon, where each vertex is a 2 element list [x, y].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"polygon_area\", \"description\": \"Calculate the area of a polygon given its vertices using the shoelace formula.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vertices\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"A single vertex represented by a 2 element list [x, y].\"}, \"description\": \"The vertices of the polygon, where each vertex is a 2 element list [x, y].\"}}, \"required\": [\"vertices\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with a few calculations and searches? First, I'd like to calculate the area of a triangle with a base of 15 meters and a height of 20 meters, and I'd like the result in square meters. Then, I have two datasets that I'd like to compare statistically. The first dataset consists of the numbers 12, 15, 18, 20, 22, and 25, and the second dataset consists of the numbers 14, 16, 19, 21, 23, and 26. I'd like to perform a t-test with a significance level of 0.05. After that, I'm interested in finding upcoming rock concerts in Los Angeles, CA for the next 14 days. Lastly, I'd like to calculate the area of another triangle, this time with a base of 10 meters and a height of 30 meters, and again, I'd like the result in square meters.\"", "query_for_retrieval": "\"Could you help me with a few calculations and searches? First, I'd like to calculate the area of a triangle with a base of 15 meters and a height of 20 meters, and I'd like the result in square meters. Then, I have two datasets that I'd like to compare statistically. The first dataset consists of the numbers 12, 15, 18, 20, 22, and 25, and the second dataset consists of the numbers 14, 16, 19, 21, 23, and 26. I'd like to perform a t-test with a significance level of 0.05. After that, I'm interested in finding upcoming rock concerts in Los Angeles, CA for the next 14 days. Lastly, I'd like to calculate the area of another triangle, this time with a base of 10 meters and a height of 30 meters, and again, I'd like the result in square meters.\"", "answer": "t_test", "answer_params": "", "api_description": "def t_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform a statistical t-test to check if the means of two independent datasets are statistically different.\n\t\n\tArguments:\n\t---------\n\t- dataset_A : array = None (required) Dataset A for comparison.\n\t- dataset_B : array = None (required) Dataset B for comparison.\n\t- alpha : float = None (optional) Significance level for the test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"t_test\", \"description\": \"Perform a statistical t-test to check if the means of two independent datasets are statistically different.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset_A\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset A for comparison.\"}, \"dataset_B\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Dataset B for comparison.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the test. Default is 0.05.\"}}, \"required\": [\"dataset_A\", \"dataset_B\"]}}"}
{"scope": "relevance", "query": "Can you list some horror movies I can watch?", "query_for_retrieval": "Can you list some horror movies I can watch?", "answer": "calculate_investment_value", "answer_params": "", "api_description": "def calculate_investment_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the future value of an investment given the principal, interest rate and term.\n\t\n\tArguments:\n\t---------\n\t- principal : float = None (required) The initial amount of the investment.\n\t- interest_rate : float = None (required) The annual interest rate in percentage. Enter as a decimal (for 5%, enter 0.05).\n\t- term : integer = None (required) The term of the investment in years.\n\t- compounding : integer = None (optional) The number of times that interest is compounded per year. Default is 1 (annually).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_investment_value\", \"description\": \"Calculate the future value of an investment given the principal, interest rate and term.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"float\", \"description\": \"The initial amount of the investment.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The annual interest rate in percentage. Enter as a decimal (for 5%, enter 0.05).\"}, \"term\": {\"type\": \"integer\", \"description\": \"The term of the investment in years.\"}, \"compounding\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per year. Default is 1 (annually).\"}}, \"required\": [\"principal\", \"interest_rate\", \"term\"]}}"}
{"scope": "relevance", "query": "Who won the NBA final 2023?", "query_for_retrieval": "Who won the NBA final 2023?", "answer": "get_battle_details", "answer_params": "", "api_description": "def get_battle_details:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the details of a historical battle, including the participants and the winner.\n\t\n\tArguments:\n\t---------\n\t- battle_name : string = None (required) The name of the battle.\n\t- year : integer = None (required) The year the battle took place.\n\t- location : string = NY (optional) The location where the battle took place. This is an optional parameter.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_battle_details\", \"description\": \"Retrieve the details of a historical battle, including the participants and the winner.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"battle_name\": {\"type\": \"string\", \"description\": \"The name of the battle.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year the battle took place.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location where the battle took place. This is an optional parameter.\", \"default\": \"NY\"}}, \"required\": [\"battle_name\", \"year\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me with the following tasks? First, I want to know the future value of my investment in the stock with the ticker symbol 'AAPL'. I have invested $5000 in it and I am expecting an annual return of 7% (0.07). I plan to hold this investment for 10 years. Second, I am interested in getting detailed information about the company 'Microsoft'. I want this information from the 'NASDAQ' stock market. Lastly, I have a quadratic equation with coefficients a=5, b=-20, and c=15. Could you solve this equation for me and provide the roots?\"", "query_for_retrieval": "\"Could you help me with the following tasks? First, I want to know the future value of my investment in the stock with the ticker symbol 'AAPL'. I have invested $5000 in it and I am expecting an annual return of 7% (0.07). I plan to hold this investment for 10 years. Second, I am interested in getting detailed information about the company 'Microsoft'. I want this information from the 'NASDAQ' stock market. Lastly, I have a quadratic equation with coefficients a=5, b=-20, and c=15. Could you solve this equation for me and provide the roots?\"", "answer": "solve_quadratic_equation", "answer_params": "", "api_description": "def solve_quadratic_equation:\n\t\"\"\"\n\tDescription:\n\t\n\tFunction solves the quadratic equation and returns its roots.\n\t\n\tArguments:\n\t---------\n\t- a : integer = None (required) Coefficient of x squared\n\t- b : integer = None (required) Coefficient of x\n\t- c : integer = None (required) Constant term in the quadratic equation\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"solve_quadratic_equation\", \"description\": \"Function solves the quadratic equation and returns its roots.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"Coefficient of x squared\"}, \"b\": {\"type\": \"integer\", \"description\": \"Coefficient of x\"}, \"c\": {\"type\": \"integer\", \"description\": \"Constant term in the quadratic equation\"}}, \"required\": [\"a\", \"b\", \"c\"]}}"}
{"scope": "relevance", "query": "What's the penalty for burglary in California?", "query_for_retrieval": "What's the penalty for burglary in California?", "answer": "law_info.get_penalty", "answer_params": "", "api_description": "def law_info.get_penalty:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves penalty information based on the criminal act and state.\n\t\n\tArguments:\n\t---------\n\t- crime : string = None (required) The criminal act that was committed.\n\t- state : string = None (required) The state where the criminal act was committed.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_info.get_penalty\", \"description\": \"Retrieves penalty information based on the criminal act and state.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"crime\": {\"type\": \"string\", \"description\": \"The criminal act that was committed.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state where the criminal act was committed.\"}}, \"required\": [\"crime\", \"state\"]}}"}
{"scope": "rest", "query": "Can you provide me with the timezone information for the GPS coordinates of the Eiffel Tower (having latitude of 48.8584 and longitude of 2.2945), ensuring the response data is in a compact format, using my API key 'YOUR-RAPID-API-KEY' and the host 'timezone-by-location.p.rapidapi.com'?", "query_for_retrieval": "Can you provide me with the timezone information for the GPS coordinates of the Eiffel Tower (having latitude of 48.8584 and longitude of 2.2945), ensuring the response data is in a compact format, using my API key 'YOUR-RAPID-API-KEY' and the host 'timezone-by-location.p.rapidapi.com'?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://timezone-by-location.p.rapidapi.com/timezone (required) Convert any GPS Lat/Lon location into its timezone\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - lat : float = None (required) Latitude of the position for which the timezone is being requested.\n\t  - lon : float = None (required) Longitude of the position for which the timezone is being requested.\n\t  - c : integer = None (optional) Optional. Return compact JSON. Useful for reducing the size of the response data.\n\t  - s : integer = None (optional) Optional. Additional parameter, specifics not provided.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Convert any GPS Lat/Lon location into its timezone\", \"default\": \"https://timezone-by-location.p.rapidapi.com/timezone\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"lat\": {\"type\": \"float\", \"description\": \"Latitude of the position for which the timezone is being requested.\"}, \"lon\": {\"type\": \"float\", \"description\": \"Longitude of the position for which the timezone is being requested.\"}, \"c\": {\"type\": \"integer\", \"description\": \"Optional. Return compact JSON. Useful for reducing the size of the response data.\"}, \"s\": {\"type\": \"integer\", \"description\": \"Optional. Additional parameter, specifics not provided.\"}}, \"type\": \"dict\", \"required\": [\"lat\", \"lon\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Who was the president of the United States during the American Civil War?", "query_for_retrieval": "Who was the president of the United States during the American Civil War?", "answer": "us_history.get_president", "answer_params": "", "api_description": "def us_history.get_president:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the U.S. president during a specific event in American history.\n\t\n\tArguments:\n\t---------\n\t- event : string = None (required) The event in U.S. history.\n\t- year : integer = None (required) The specific year of the event.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.get_president\", \"description\": \"Retrieve the U.S. president during a specific event in American history.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"string\", \"description\": \"The event in U.S. history.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The specific year of the event.\"}}, \"required\": [\"event\", \"year\"]}}"}
{"scope": "simple", "query": "What is the percentage of population preferring digital reading over physical books?", "query_for_retrieval": "What is the percentage of population preferring digital reading over physical books?", "answer": "psych_research.get_preference", "answer_params": "", "api_description": "def psych_research.get_preference:\n\t\"\"\"\n\tDescription:\n\t\n\tGathers research data on public preference between two options, based on societal category.\n\t\n\tArguments:\n\t---------\n\t- category : string = None (required) The societal category the preference data is about. E.g. reading, transportation, food\n\t- option_one : string = None (required) The first option people could prefer.\n\t- option_two : string = None (required) The second option people could prefer.\n\t- demographic : string = all (optional) Specific demographic of society to narrow down the research.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"psych_research.get_preference\", \"description\": \"Gathers research data on public preference between two options, based on societal category.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"category\": {\"type\": \"string\", \"description\": \"The societal category the preference data is about. E.g. reading, transportation, food\"}, \"option_one\": {\"type\": \"string\", \"description\": \"The first option people could prefer.\"}, \"option_two\": {\"type\": \"string\", \"description\": \"The second option people could prefer.\"}, \"demographic\": {\"type\": \"string\", \"description\": \"Specific demographic of society to narrow down the research.\", \"default\": \"all\"}}, \"required\": [\"category\", \"option_one\", \"option_two\"]}}"}
{"scope": "simple", "query": "Who is ranked as the top player in woman tennis?", "query_for_retrieval": "Who is ranked as the top player in woman tennis?", "answer": "sports_ranking.get_top_player", "answer_params": "", "api_description": "def sports_ranking.get_top_player:\n\t\"\"\"\n\tDescription:\n\t\n\tGet the top player in a specific sport.\n\t\n\tArguments:\n\t---------\n\t- sport : string = None (required) The type of sport.\n\t- gender : string = men (optional) The gender of the sport category. Optional.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_top_player\", \"description\": \"Get the top player in a specific sport.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sport\": {\"type\": \"string\", \"description\": \"The type of sport.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the sport category. Optional.\", \"default\": \"men\"}}, \"required\": [\"sport\"]}}"}
{"scope": "simple", "query": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.", "query_for_retrieval": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.", "answer": "calculate_compound_interest", "answer_params": "", "api_description": "def calculate_compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate compound interest for an initial principal amount.\n\t\n\tArguments:\n\t---------\n\t- principal : integer = None (required) The principal amount that the interest is applied to.\n\t- rate : float = None (required) The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\n\t- time : integer = None (required) The time the money is invested for in years.\n\t- n : integer = None (optional) The number of times that interest is compounded per time period. Default is 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_compound_interest\", \"description\": \"Calculate compound interest for an initial principal amount.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principal\": {\"type\": \"integer\", \"description\": \"The principal amount that the interest is applied to.\"}, \"rate\": {\"type\": \"float\", \"description\": \"The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\"}, \"time\": {\"type\": \"integer\", \"description\": \"The time the money is invested for in years.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The number of times that interest is compounded per time period. Default is 1.\"}}, \"required\": [\"principal\", \"rate\", \"time\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm having a Tarantino movie marathon tonight and want to make sure I've got my facts straight for the trivia session with my friends. Can you fetch me the directors for these movies: \"Pulp Fiction,\" \"Reservoir Dogs,\" \"Kill Bill,\" and \"Django Unchained\"? I'll need this info to impress the gang.", "query_for_retrieval": "I'm having a Tarantino movie marathon tonight and want to make sure I've got my facts straight for the trivia session with my friends. Can you fetch me the directors for these movies: \"Pulp Fiction,\" \"Reservoir Dogs,\" \"Kill Bill,\" and \"Django Unchained\"? I'll need this info to impress the gang.", "answer": "get_movie_director", "answer_params": "", "api_description": "def get_movie_director:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the director of a movie from the OMDB API.\n\t\n\tArguments:\n\t---------\n\t- movie_name : string = None (required) The name of the movie.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_movie_director\", \"description\": \"Fetches the director of a movie from the OMDB API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_name\": {\"type\": \"string\", \"description\": \"The name of the movie.\"}}, \"required\": [\"movie_name\"]}}"}
{"scope": "simple", "query": "Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?", "query_for_retrieval": "Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index based on given weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) The weight of a person in kilograms.\n\t- height : integer = None (required) The height of a person in centimeters.\n\t- unit : string = None (optional) Optional. The measurement system to be used for the result. The default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index based on given weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"The weight of a person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of a person in centimeters.\"}, \"unit\": {\"type\": \"string\", \"description\": \"Optional. The measurement system to be used for the result. The default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "relevance", "query": "Who won the NBA Most Valuable Player in 2020?", "query_for_retrieval": "Who won the NBA Most Valuable Player in 2020?", "answer": "sports_stats.get_player_stats", "answer_params": "", "api_description": "def sports_stats.get_player_stats:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve statistics of a specific player for a given season and league.\n\t\n\tArguments:\n\t---------\n\t- player_name : string = None (required) The name of the player.\n\t- season : string = None (required) The season of the statistics, e.g. '2020-2021'.\n\t- league : string = NBA (optional) The league of the player's sport, e.g. 'NBA'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_stats.get_player_stats\", \"description\": \"Retrieve statistics of a specific player for a given season and league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"player_name\": {\"type\": \"string\", \"description\": \"The name of the player.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season of the statistics, e.g. '2020-2021'.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league of the player's sport, e.g. 'NBA'.\", \"default\": \"NBA\"}}, \"required\": [\"player_name\", \"season\"]}}"}
{"scope": "sql", "query": "Can you eliminate the data from the \"Proteins\" table where the \"ProteinName\" is \"Hemoglobin\"?", "query_for_retrieval": "Can you eliminate the data from the \"Proteins\" table where the \"ProteinName\" is \"Hemoglobin\"?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "query_for_retrieval": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current stock price of the specified companies\n\t\n\tArguments:\n\t---------\n\t- company_names : array = None (required) The list of companies for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieves the current stock price of the specified companies\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_names\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of companies for which to retrieve the stock price.\"}}, \"required\": [\"company_names\"]}}"}
{"scope": "relevance", "query": "What is the rate of return for a business with $15000 total revenue and $22000 total cost.", "query_for_retrieval": "What is the rate of return for a business with $15000 total revenue and $22000 total cost.", "answer": "investment_analysis.calculate_profit", "answer_params": "", "api_description": "def investment_analysis.calculate_profit:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the net profit given the total revenue and total cost\n\t\n\tArguments:\n\t---------\n\t- total_revenue : float = None (required) The total revenue for the business.\n\t- total_cost : float = None (required) The total cost for the business.\n\t- tax_rate : float = None (optional) The tax rate for the business, default is 0.2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment_analysis.calculate_profit\", \"description\": \"Calculates the net profit given the total revenue and total cost\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"total_revenue\": {\"type\": \"float\", \"description\": \"The total revenue for the business.\"}, \"total_cost\": {\"type\": \"float\", \"description\": \"The total cost for the business.\"}, \"tax_rate\": {\"type\": \"float\", \"description\": \"The tax rate for the business, default is 0.2.\"}}, \"required\": [\"total_revenue\", \"total_cost\"]}}"}
{"scope": "simple", "query": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "query_for_retrieval": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "answer": "calculate_clock_angle", "answer_params": "", "api_description": "def calculate_clock_angle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the angle between the hour and minute hands of a clock at a given time.\n\t\n\tArguments:\n\t---------\n\t- hours : integer = None (required) The hour on the clock face.\n\t- minutes : integer = None (required) The minutes on the clock face.\n\t- round_to : integer = None (optional) The number of decimal places to round the result to, default is 2.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_clock_angle\", \"description\": \"Calculate the angle between the hour and minute hands of a clock at a given time.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"hours\": {\"type\": \"integer\", \"description\": \"The hour on the clock face.\"}, \"minutes\": {\"type\": \"integer\", \"description\": \"The minutes on the clock face.\"}, \"round_to\": {\"type\": \"integer\", \"description\": \"The number of decimal places to round the result to, default is 2.\"}}, \"required\": [\"hours\", \"minutes\"]}}"}
{"scope": "simple", "query": "Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.", "query_for_retrieval": "Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.", "answer": "calculate_bmi", "answer_params": "", "api_description": "def calculate_bmi:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Body Mass Index (BMI) for a person based on their weight and height.\n\t\n\tArguments:\n\t---------\n\t- weight : integer = None (required) The weight of the person in kilograms.\n\t- height : integer = None (required) The height of the person in centimeters.\n\t- system : string = None (optional) The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_bmi\", \"description\": \"Calculate the Body Mass Index (BMI) for a person based on their weight and height.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"integer\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the person in centimeters.\"}, \"system\": {\"type\": \"string\", \"description\": \"The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\"}}, \"required\": [\"weight\", \"height\"]}}"}
{"scope": "rest", "query": "I'm looking to invest and need to do some research on Tesla's stock ticker. Could you help me find it using RapidAPI with my credentials 'YOUR-RAPID-API-KEY' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "query_for_retrieval": "I'm looking to invest and need to do some research on Tesla's stock ticker. Could you help me find it using RapidAPI with my credentials 'YOUR-RAPID-API-KEY' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search (required) Get tickers for any stock company, ETF, mutual fund, crypto and more\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - search : string = None (optional) Search query for stock name\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get tickers for any stock company, ETF, mutual fund, crypto and more\", \"default\": \"https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"search\": {\"type\": \"string\", \"description\": \"Search query for stock name\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently working on a geography project that involves mapping out time zones for different locations around the globe. As part of this project, I need to know the time zone for a specific coordinate. Could you provide me with the time zone for the location at longitude 123.45 and latitude -67.89?", "query_for_retrieval": "I'm currently working on a geography project that involves mapping out time zones for different locations around the globe. As part of this project, I need to know the time zone for a specific coordinate. Could you provide me with the time zone for the location at longitude 123.45 and latitude -67.89?", "answer": "get_time_zone_by_coord", "answer_params": "", "api_description": "def get_time_zone_by_coord:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the timezone of a coordinate.\n\t\n\tArguments:\n\t---------\n\t- long : string = None (required) The longitude of the coordinate.\n\t- lat : string = None (required) The latitude of the coordinate.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_time_zone_by_coord\", \"description\": \"Finds the timezone of a coordinate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"long\": {\"type\": \"string\", \"description\": \"The longitude of the coordinate.\"}, \"lat\": {\"type\": \"string\", \"description\": \"The latitude of the coordinate.\"}}, \"required\": [\"long\", \"lat\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm currently analyzing different investment options and I've taken a particular interest in Apple Inc. I want to review the company's stock performance over the past month. Additionally, it's important for me to know if there have been any stock splits or dividends in that time. Could you pull up the monthly history for Apple's stock and ensure that the information includes any splits or dividends?", "query_for_retrieval": "I'm currently analyzing different investment options and I've taken a particular interest in Apple Inc. I want to review the company's stock performance over the past month. Additionally, it's important for me to know if there have been any stock splits or dividends in that time. Could you pull up the monthly history for Apple's stock and ensure that the information includes any splits or dividends?", "answer": "estimate_derivative", "answer_params": "", "api_description": "def estimate_derivative:\n\t\"\"\"\n\tDescription:\n\t\n\tEstimate the derivative of a function at a given point.\n\t\n\tArguments:\n\t---------\n\t- function : string = None (required) The function to calculate the derivative of.\n\t- x : integer = None (required) The point to calculate the derivative at.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"estimate_derivative\", \"description\": \"Estimate the derivative of a function at a given point.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"function\": {\"type\": \"string\", \"description\": \"The function to calculate the derivative of.\"}, \"x\": {\"type\": \"integer\", \"description\": \"The point to calculate the derivative at.\"}}, \"required\": [\"function\", \"x\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you first find me a vegan, main course recipe that can be prepared within 30 minutes? After that, could you please retrieve the details of the scientific discovery of Gravity using the most accepted method? Once done, I would also like to know about the discovery of the Higgs Boson particle using the same method. Lastly, could you find me a gluten-free dessert recipe that can be prepared within 45 minutes?\"", "query_for_retrieval": "\"Can you first find me a vegan, main course recipe that can be prepared within 30 minutes? After that, could you please retrieve the details of the scientific discovery of Gravity using the most accepted method? Once done, I would also like to know about the discovery of the Higgs Boson particle using the same method. Lastly, could you find me a gluten-free dessert recipe that can be prepared within 45 minutes?\"", "answer": "find_recipe", "answer_params": "", "api_description": "def find_recipe:\n\t\"\"\"\n\tDescription:\n\t\n\tFind a recipe based on the dietary restrictions, recipe type, and time constraints.\n\t\n\tArguments:\n\t---------\n\t- dietary_restrictions : string = None (required) Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n\t- recipe_type : string = None (required) Type of the recipe. E.g. dessert, main course, breakfast.\n\t- time : integer = None (required) Time limit in minutes to prep the meal.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_recipe\", \"description\": \"Find a recipe based on the dietary restrictions, recipe type, and time constraints.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dietary_restrictions\": {\"type\": \"string\", \"description\": \"Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\"}, \"recipe_type\": {\"type\": \"string\", \"description\": \"Type of the recipe. E.g. dessert, main course, breakfast.\"}, \"time\": {\"type\": \"integer\", \"description\": \"Time limit in minutes to prep the meal.\"}}, \"required\": [\"dietary_restrictions\", \"recipe_type\", \"time\"]}}"}
{"scope": "rest", "query": "I'm planning a hiking trip next week and I need to prepare for the weather conditions. Can you fetch me a 7-day weather forecast for the coordinates 47.8095,13.0550, including daily temperature highs and lows, wind speed, and sum of precipitation? I prefer the temperature in Fahrenheit and wind speed in mph. Also, could you ensure that the timestamps are in local time for the 'Europe/Vienna' timezone?", "query_for_retrieval": "I'm planning a hiking trip next week and I need to prepare for the weather conditions. Can you fetch me a 7-day weather forecast for the coordinates 47.8095,13.0550, including daily temperature highs and lows, wind speed, and sum of precipitation? I prefer the temperature in Fahrenheit and wind speed in mph. Also, could you ensure that the timestamps are in local time for the 'Europe/Vienna' timezone?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://api.open-meteo.com/v1/forecast (required) The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - latitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\n\t  - longitude : string = None (required) Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\n\t  - elevation : string = None (optional) The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\n\t  - hourly : array = None (optional) A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\n\t  - daily : array = None (optional) A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\n\t  - temperature_unit : string = celsius (optional) If fahrenheit is set, all temperature values are converted to Fahrenheit.\n\t  - wind_speed_unit : string = kmh (optional) Other wind speed units: ms, mph, and kn.\n\t  - precipitation_unit : string = mm (optional) Other precipitation amount units: inch.\n\t  - timeformat : string = iso8601 (optional) If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\n\t  - timezone : string = GMT (optional) If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\n\t  - past_days : integer = 0 (optional) If past_days is set, yesterday or the day before yesterday data are also returned.\n\t  - forecast_days : integer = 7 (optional) Per default, only 7 days are returned. Up to 16 days of forecast are possible.\n\t  - forecast_hours : integer = None (optional) Similar to forecast_days, the number of timesteps of hourly data can be controlled.\n\t  - forecast_minutely_15 : integer = None (optional) The number of timesteps of 15-minutely data can be controlled.\n\t  - past_hours : integer = None (optional) the number of timesteps of hourly data controlled\n\t  - past_minutely_15 : integer = None (optional) the number of timesteps of 15 minute data controlled\n\t  - start_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_date : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_hour : string = None (optional) The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\n\t  - end_hour : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - start_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - end_minutely_15 : string = None (optional) The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\n\t  - models : array = None (optional) A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\n\t  - cell_selection : string = None (optional) Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\n\t  - apikey : string = None (optional) Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"latitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.\"}, \"elevation\": {\"type\": \"string\", \"description\": \"The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.\"}, \"hourly\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm\"}, \"daily\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max\"}, \"temperature_unit\": {\"type\": \"string\", \"description\": \"If fahrenheit is set, all temperature values are converted to Fahrenheit.\", \"default\": \"celsius\"}, \"wind_speed_unit\": {\"type\": \"string\", \"description\": \"Other wind speed units: ms, mph, and kn.\", \"default\": \"kmh\"}, \"precipitation_unit\": {\"type\": \"string\", \"description\": \"Other precipitation amount units: inch.\", \"default\": \"mm\"}, \"timeformat\": {\"type\": \"string\", \"description\": \"If format unixtime is selaected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\", \"default\": \"iso8601\"}, \"timezone\": {\"type\": \"string\", \"description\": \"If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.\", \"default\": \"GMT\"}, \"past_days\": {\"type\": \"integer\", \"description\": \"If past_days is set, yesterday or the day before yesterday data are also returned.\", \"default\": 0}, \"forecast_days\": {\"type\": \"integer\", \"description\": \"Per default, only 7 days are returned. Up to 16 days of forecast are possible.\", \"default\": 7}, \"forecast_hours\": {\"type\": \"integer\", \"description\": \"Similar to forecast_days, the number of timesteps of hourly data can be controlled.\"}, \"forecast_minutely_15\": {\"type\": \"integer\", \"description\": \"The number of timesteps of 15-minutely data can be controlled.\"}, \"past_hours\": {\"type\": \"integer\", \"description\": \"the number of timesteps of hourly data controlled\"}, \"past_minutely_15\": {\"type\": \"integer\", \"description\": \"the number of timesteps of 15 minute data controlled\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_date\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00).\"}, \"end_hour\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"start_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"end_minutely_15\": {\"type\": \"string\", \"description\": \"The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\"}, \"models\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined.\"}, \"cell_selection\": {\"type\": \"string\", \"description\": \"Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.\"}, \"apikey\": {\"type\": \"string\", \"description\": \"Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.\"}}, \"type\": \"dict\", \"required\": [\"latitude\", \"longitude\"]}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.", "query_for_retrieval": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.", "answer": "recipe_search", "answer_params": "", "api_description": "def recipe_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a cooking recipe based on specific dietary needs and time constraint.\n\t\n\tArguments:\n\t---------\n\t- diet : array = None (required) Specific dietary need.\n\t- time_limit : integer = None (optional) The maximum time to prepare the recipe in minutes. Default is 60 minutes.\n\t- dish : string = None (required) The name of the dish to search for. Default is not use if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"recipe_search\", \"description\": \"Search for a cooking recipe based on specific dietary needs and time constraint.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"diet\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Gluten Free\", \"Dairy Free\", \"Vegan\", \"Vegetarian\"]}, \"description\": \"Specific dietary need.\"}, \"time_limit\": {\"type\": \"integer\", \"description\": \"The maximum time to prepare the recipe in minutes. Default is 60 minutes.\"}, \"dish\": {\"type\": \"string\", \"description\": \"The name of the dish to search for. Default is not use if not specified.\"}}, \"required\": [\"dish\", \"diet\"]}}"}
{"scope": "relevance", "query": "Which colors should I mix to get a specific color shade?", "query_for_retrieval": "Which colors should I mix to get a specific color shade?", "answer": "color_converter.RGB_to_Pantone", "answer_params": "", "api_description": "def color_converter.RGB_to_Pantone:\n\t\"\"\"\n\tDescription:\n\t\n\tConvert a color from RGB (Red, Green, Blue) format to Pantone.\n\t\n\tArguments:\n\t---------\n\t- red : integer = None (required) The red component of the RGB color, ranging from 0 to 255.\n\t- green : integer = None (required) The green component of the RGB color, ranging from 0 to 255.\n\t- blue : integer = None (required) The blue component of the RGB color, ranging from 0 to 255.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"color_converter.RGB_to_Pantone\", \"description\": \"Convert a color from RGB (Red, Green, Blue) format to Pantone.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"red\": {\"type\": \"integer\", \"description\": \"The red component of the RGB color, ranging from 0 to 255.\"}, \"green\": {\"type\": \"integer\", \"description\": \"The green component of the RGB color, ranging from 0 to 255.\"}, \"blue\": {\"type\": \"integer\", \"description\": \"The blue component of the RGB color, ranging from 0 to 255.\"}}, \"required\": [\"red\", \"green\", \"blue\"]}}"}
{"scope": "parallel_function", "query": "What will be the capital gains tax for a short term capital gains of $15000, long term gains of $25000 in the state of California and $20000 short term, $50000 long term in Florida?", "query_for_retrieval": "What will be the capital gains tax for a short term capital gains of $15000, long term gains of $25000 in the state of California and $20000 short term, $50000 long term in Florida?", "answer": "calculate_capital_gains_tax", "answer_params": "", "api_description": "def calculate_capital_gains_tax:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the capital gains tax for a given gains type and amount\n\t\n\tArguments:\n\t---------\n\t- short_term_gain : integer = None (required) The short term capital gain amount.\n\t- long_term_gain : integer = None (required) The long term capital gain amount.\n\t- state : string = federal (optional) The state where the income is generated.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_capital_gains_tax\", \"description\": \"Calculate the capital gains tax for a given gains type and amount\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"short_term_gain\": {\"type\": \"integer\", \"description\": \"The short term capital gain amount.\"}, \"long_term_gain\": {\"type\": \"integer\", \"description\": \"The long term capital gain amount.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state where the income is generated.\", \"default\": \"federal\"}}, \"required\": [\"short_term_gain\", \"long_term_gain\"]}}"}
{"scope": "simple", "query": "What time is it currently in London, UK in 24 hour format?", "query_for_retrieval": "What time is it currently in London, UK in 24 hour format?", "answer": "time_zone_converter", "answer_params": "", "api_description": "def time_zone_converter:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current time of a specific city.\n\t\n\tArguments:\n\t---------\n\t- city : string = None (required) The city you want to know the current time for.\n\t- country : string = None (required) The country where the city is located.\n\t- display_format : string = None (optional) The time display format: '12h' or '24h'. Default is '24h'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"time_zone_converter\", \"description\": \"Retrieve the current time of a specific city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city\": {\"type\": \"string\", \"description\": \"The city you want to know the current time for.\"}, \"country\": {\"type\": \"string\", \"description\": \"The country where the city is located.\"}, \"display_format\": {\"type\": \"string\", \"description\": \"The time display format: '12h' or '24h'. Default is '24h'.\"}}, \"required\": [\"city\", \"country\"]}}"}
{"scope": "simple", "query": "Find important Wars in European history during the 19th century.", "query_for_retrieval": "Find important Wars in European history during the 19th century.", "answer": "history_eu.fetch_events", "answer_params": "", "api_description": "def history_eu.fetch_events:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches significant historical events within a specific time period in European history.\n\t\n\tArguments:\n\t---------\n\t- century : integer = None (required) The century you are interested in.\n\t- region : string = None (required) The region of Europe you are interested in.\n\t- category : string = None (optional) Category of the historical events. Default is 'Culture'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"history_eu.fetch_events\", \"description\": \"Fetches significant historical events within a specific time period in European history.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"century\": {\"type\": \"integer\", \"description\": \"The century you are interested in.\"}, \"region\": {\"type\": \"string\", \"description\": \"The region of Europe you are interested in.\", \"enum\": [\"Northern\", \"Southern\", \"Eastern\", \"Western\"]}, \"category\": {\"type\": \"string\", \"description\": \"Category of the historical events. Default is 'Culture'.\", \"enum\": [\"Wars\", \"Culture\", \"Politics\", \"Scientific\", \"Others\"]}}, \"required\": [\"century\", \"region\"]}}"}
{"scope": "simple", "query": "Find the nearest park with a tennis court in London.", "query_for_retrieval": "Find the nearest park with a tennis court in London.", "answer": "parks.find_nearby", "answer_params": "", "api_description": "def parks.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby parks based on specific criteria like tennis court availability.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. London, UK\n\t- amenities : array = None (optional) Preferred amenities in park. Default is ['Running Track']\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"parks.find_nearby\", \"description\": \"Locate nearby parks based on specific criteria like tennis court availability.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. London, UK\"}, \"amenities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Tennis Court\", \"Picnic Area\", \"Playground\", \"Running Track\"]}, \"description\": \"Preferred amenities in park. Default is ['Running Track']\"}}, \"required\": [\"location\"]}}"}
{"scope": "relevance", "query": "Identify the type of blood cells responsible for clotting.", "query_for_retrieval": "Identify the type of blood cells responsible for clotting.", "answer": "cellBiology.getCellType", "answer_params": "", "api_description": "def cellBiology.getCellType:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function will return the type of the cell based on it's characteristics.\n\t\n\tArguments:\n\t---------\n\t- nucleus_count : integer = None (required) The number of nucleus in the cell.\n\t- organism_type : string = None (required) The type of organism the cell belongs to.\n\t- membrane_type : string = Phospholipid bi-layer (optional) Type of membrane in the cell, default value is 'Phospholipid bi-layer'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"cellBiology.getCellType\", \"description\": \"This function will return the type of the cell based on it's characteristics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"nucleus_count\": {\"type\": \"integer\", \"description\": \"The number of nucleus in the cell.\"}, \"organism_type\": {\"type\": \"string\", \"description\": \"The type of organism the cell belongs to.\"}, \"membrane_type\": {\"type\": \"string\", \"description\": \"Type of membrane in the cell, default value is 'Phospholipid bi-layer'\", \"default\": \"Phospholipid bi-layer\"}}, \"required\": [\"nucleus_count\", \"organism_type\"]}}"}
{"scope": "java", "query": "How can I append the node ID to the StringBuilder `logBuilder` from a LogEvent `logEvent` in Elasticsearch, assuming the node ID is available?", "query_for_retrieval": "How can I append the node ID to the StringBuilder `logBuilder` from a LogEvent `logEvent` in Elasticsearch, assuming the node ID is available?", "answer": "NodeIdConverter.format", "answer_params": "", "api_description": "def NodeIdConverter.format:\n\t\"\"\"\n\tDescription:\n\t\n\tAppends the node ID to the provided StringBuilder if the node ID is available from the NodeAndClusterIdStateListener.\n\t\n\tArguments:\n\t---------\n\t- event : any = None (required) The LogEvent that contains the logging information.\n\t- toAppendTo : any = None (required) The StringBuilder to which the node ID will be appended.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"NodeIdConverter.format\", \"description\": \"Appends the node ID to the provided StringBuilder if the node ID is available from the NodeAndClusterIdStateListener.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"event\": {\"type\": \"any\", \"description\": \"The LogEvent that contains the logging information.\"}, \"toAppendTo\": {\"type\": \"any\", \"description\": \"The StringBuilder to which the node ID will be appended.\"}}, \"required\": [\"event\", \"toAppendTo\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm planning a road trip across the United States, and I'm starting with a map outlining all the major stops along the way. Could you give me the coordinates for New York? Once you've done that, I also need the latitude and longitude for Los Angeles, followed by the coordinates for Chicago and Houston, in that order. This data will help me estimate travel times and distances.", "query_for_retrieval": "I'm planning a road trip across the United States, and I'm starting with a map outlining all the major stops along the way. Could you give me the coordinates for New York? Once you've done that, I also need the latitude and longitude for Los Angeles, followed by the coordinates for Chicago and Houston, in that order. This data will help me estimate travel times and distances.", "answer": "get_coordinates_from_city", "answer_params": "", "api_description": "def get_coordinates_from_city:\n\t\"\"\"\n\tDescription:\n\t\n\tFetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\n\t\n\tArguments:\n\t---------\n\t- city_name : string = None (required) The name of the city, such as 'Rome'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_coordinates_from_city\", \"description\": \"Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"city_name\": {\"type\": \"string\", \"description\": \"The name of the city, such as 'Rome'.\"}}, \"required\": [\"city_name\"]}}"}
{"scope": "simple", "query": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "query_for_retrieval": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "answer": "paint_requirement.calculate", "answer_params": "", "api_description": "def paint_requirement.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).\n\t\n\tArguments:\n\t---------\n\t- area : dict = None (required) The area to be painted.\n\t  - width : integer = None (optional) The width of the area to be painted in feet.\n\t  - height : integer = None (optional) The height of the area to be painted in feet.\n\t- paint_coverage : integer = 350 (required) Coverage area per gallon of the paint in square feet.\n\t- exclusion : dict = None (optional) Area not to be painted. Default to not use any exclusion if not specified.\n\t  - type : string = None (optional) The type of the exclusion e.g window, door etc.\n\t  - area : integer = None (optional) The area of the exclusion in square feet.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"paint_requirement.calculate\", \"description\": \"Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"area\": {\"type\": \"dict\", \"properties\": {\"width\": {\"type\": \"integer\", \"description\": \"The width of the area to be painted in feet.\"}, \"height\": {\"type\": \"integer\", \"description\": \"The height of the area to be painted in feet.\"}}, \"description\": \"The area to be painted.\"}, \"paint_coverage\": {\"type\": \"integer\", \"description\": \"Coverage area per gallon of the paint in square feet.\", \"default\": 350}, \"exclusion\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of the exclusion e.g window, door etc.\"}, \"area\": {\"type\": \"integer\", \"description\": \"The area of the exclusion in square feet.\"}}, \"description\": \"Area not to be painted. Default to not use any exclusion if not specified.\"}}, \"required\": [\"area\", \"paint_coverage\"]}}"}
{"scope": "parallel_function", "query": "Can you help me find restaurants in New York, NY that cater to my dietary preferences which include Vegan, Gluten-free and Dairy-free options, and then do the same for Los Angeles, CA and Chicago, IL?", "query_for_retrieval": "Can you help me find restaurants in New York, NY that cater to my dietary preferences which include Vegan, Gluten-free and Dairy-free options, and then do the same for Los Angeles, CA and Chicago, IL?", "answer": "restaurant.find_nearby", "answer_params": "", "api_description": "def restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on specific dietary preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Los Angeles, CA\n\t- dietary_preference : array = ['Vegan'] (optional) Dietary preference.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_nearby\", \"description\": \"Locate nearby restaurants based on specific dietary preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Los Angeles, CA\"}, \"dietary_preference\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Vegan\", \"Vegetarian\", \"Gluten-free\", \"Dairy-free\", \"Nut-free\"]}, \"description\": \"Dietary preference.\", \"default\": [\"Vegan\"]}}, \"required\": [\"location\"]}}"}
{"scope": "multiple_function", "query": "What will be the air quality index of New York for the next week?", "query_for_retrieval": "What will be the air quality index of New York for the next week?", "answer": "air_quality_forecast", "answer_params": "", "api_description": "def air_quality_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve an air quality forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the air quality forecast for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"air_quality_forecast\", \"description\": \"Retrieve an air quality forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the air quality forecast for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "parallel_function", "query": "\"Can you calculate the area of two circles, one with a radius of 5 meters and the other with a radius of 10 meters, and then compare the two areas to determine which circle is larger and by how much?\"", "query_for_retrieval": "\"Can you calculate the area of two circles, one with a radius of 5 meters and the other with a radius of 10 meters, and then compare the two areas to determine which circle is larger and by how much?\"", "answer": "geometry.calculate_area_circle", "answer_params": "", "api_description": "def geometry.calculate_area_circle:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the area of a circle given its radius.\n\t\n\tArguments:\n\t---------\n\t- radius : integer = None (required) The radius of the circle.\n\t- unit : string = None (optional) The measurement unit of the radius (optional parameter, default is 'cm').\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"geometry.calculate_area_circle\", \"description\": \"Calculate the area of a circle given its radius.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"integer\", \"description\": \"The radius of the circle.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The measurement unit of the radius (optional parameter, default is 'cm').\"}}, \"required\": [\"radius\"]}}"}
{"scope": "simple", "query": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.", "query_for_retrieval": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.", "answer": "public_library.find_nearby", "answer_params": "", "api_description": "def public_library.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Boston, MA\n\t- facilities : array = None (required) Facilities and sections in public library.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"public_library.find_nearby\", \"description\": \"Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Boston, MA\"}, \"facilities\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Wi-Fi\", \"Reading Room\", \"Fiction\", \"Children Section\", \"Cafe\"]}, \"description\": \"Facilities and sections in public library.\"}}, \"required\": [\"location\", \"facilities\"]}}"}
{"scope": "java", "query": "How can I generate SQL completion proposals for a table named 'Customers' in a database, considering that I prefer using short names and the additional parameters include a limit of '50' and a schema filter set to 'public'?", "query_for_retrieval": "How can I generate SQL completion proposals for a table named 'Customers' in a database, considering that I prefer using short names and the additional parameters include a limit of '50' and a schema filter set to 'public'?", "answer": "SQLCompletionAnalyzer.makeProposalsFromObject", "answer_params": "", "api_description": "def SQLCompletionAnalyzer.makeProposalsFromObject:\n\t\"\"\"\n\tDescription:\n\t\n\tGenerates SQL completion proposals based on the given database object, name preference, and additional parameters.\n\t\n\tArguments:\n\t---------\n\t- object : any = None (required) The database object for which to generate proposals.\n\t- useShortName : boolean = None (required) Indicates whether to use short names for the proposals.\n\t- params : HashMap = None (required) A map of additional parameters to customize the proposals.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"SQLCompletionAnalyzer.makeProposalsFromObject\", \"description\": \"Generates SQL completion proposals based on the given database object, name preference, and additional parameters.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"object\": {\"type\": \"any\", \"description\": \"The database object for which to generate proposals.\"}, \"useShortName\": {\"type\": \"boolean\", \"description\": \"Indicates whether to use short names for the proposals.\"}, \"params\": {\"type\": \"HashMap\", \"description\": \"A map of additional parameters to customize the proposals.\"}}, \"required\": [\"object\", \"useShortName\", \"params\"]}}"}
{"scope": "sql", "query": "Can you establish a new database table called 'FiscalPolicy' with the fields 'Year', 'GovernmentSpending', 'TaxRevenue', 'BudgetDeficit', and 'PublicDebt'?", "query_for_retrieval": "Can you establish a new database table called 'FiscalPolicy' with the fields 'Year', 'GovernmentSpending', 'TaxRevenue', 'BudgetDeficit', and 'PublicDebt'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "What is the earliest reference of Jesus Christ in history from historical record?", "query_for_retrieval": "What is the earliest reference of Jesus Christ in history from historical record?", "answer": "sports_ranking.get_current", "answer_params": "", "api_description": "def sports_ranking.get_current:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current ranking of a specific team in a particular league.\n\t\n\tArguments:\n\t---------\n\t- team : string = None (required) The name of the team whose ranking is sought.\n\t- league : string = None (required) The league in which the team participates.\n\t- season : string = None (optional) The season for which the ranking is sought. Defaults to the current season if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports_ranking.get_current\", \"description\": \"Retrieve the current ranking of a specific team in a particular league.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team\": {\"type\": \"string\", \"description\": \"The name of the team whose ranking is sought.\"}, \"league\": {\"type\": \"string\", \"description\": \"The league in which the team participates.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season for which the ranking is sought. Defaults to the current season if not provided.\"}}, \"required\": [\"team\", \"league\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you tell me what the stock price prediction for Apple Inc. is for the next 30 days using the ARIMA model, and then provide the stock forecast for Microsoft Corporation for the next 45 days using the LSTM model? After that, could you provide the weather forecast for New York City for the next 7 days, and then give the weather forecast for Los Angeles for the next 14 days?\"", "query_for_retrieval": "\"Can you tell me what the stock price prediction for Apple Inc. is for the next 30 days using the ARIMA model, and then provide the stock forecast for Microsoft Corporation for the next 45 days using the LSTM model? After that, could you provide the weather forecast for New York City for the next 7 days, and then give the weather forecast for Los Angeles for the next 14 days?\"", "answer": "weather_forecast", "answer_params": "", "api_description": "def weather_forecast:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve a weather forecast for a specific location and time frame.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city that you want to get the weather for.\n\t- days : integer = None (required) Number of days for the forecast.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"weather_forecast\", \"description\": \"Retrieve a weather forecast for a specific location and time frame.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city that you want to get the weather for.\"}, \"days\": {\"type\": \"integer\", \"description\": \"Number of days for the forecast.\"}}, \"required\": [\"location\", \"days\"]}}"}
{"scope": "multiple_function", "query": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "query_for_retrieval": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "answer": "calculate_genotype_frequency", "answer_params": "", "api_description": "def calculate_genotype_frequency:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n\t\n\tArguments:\n\t---------\n\t- allele_frequency : float = None (required) The frequency of the dominant allele in the population.\n\t- genotype : string = None (required) The genotype which frequency is needed, default is homozygous dominant. \n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_genotype_frequency\", \"description\": \"Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"allele_frequency\": {\"type\": \"float\", \"description\": \"The frequency of the dominant allele in the population.\"}, \"genotype\": {\"type\": \"string\", \"description\": \"The genotype which frequency is needed, default is homozygous dominant. \", \"enum\": [\"AA\", \"Aa\", \"aa\"]}}, \"required\": [\"allele_frequency\", \"genotype\"]}}"}
{"scope": "parallel_function", "query": "Can you give me 95% confidence interval for a sample mean with standard deviation of 10, sample size of 50 and sample mean of 25? And can you do the same but for a sample size of 150 instead?", "query_for_retrieval": "Can you give me 95% confidence interval for a sample mean with standard deviation of 10, sample size of 50 and sample mean of 25? And can you do the same but for a sample size of 150 instead?", "answer": "confidence_interval.calculate", "answer_params": "", "api_description": "def confidence_interval.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the confidence interval for a mean.\n\t\n\tArguments:\n\t---------\n\t- sample_std_dev : integer = None (required) The standard deviation of the sample.\n\t- sample_size : integer = None (required) The size of the sample.\n\t- sample_mean : integer = None (required) The mean of the sample.\n\t- confidence_level : float = None (optional) The level of confidence. Default is 0.9.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"confidence_interval.calculate\", \"description\": \"Calculate the confidence interval for a mean.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sample_std_dev\": {\"type\": \"integer\", \"description\": \"The standard deviation of the sample.\"}, \"sample_size\": {\"type\": \"integer\", \"description\": \"The size of the sample.\"}, \"sample_mean\": {\"type\": \"integer\", \"description\": \"The mean of the sample.\"}, \"confidence_level\": {\"type\": \"float\", \"description\": \"The level of confidence. Default is 0.9.\"}}, \"required\": [\"sample_std_dev\", \"sample_size\", \"sample_mean\"]}}"}
{"scope": "parallel_multiple_function", "query": "Give me the population size of tigers in Bangladesh and India for the last 5 years. Also provide the projected population size of tigers in Nepal and Malaysia for the next 10 years.", "query_for_retrieval": "Give me the population size of tigers in Bangladesh and India for the last 5 years. Also provide the projected population size of tigers in Nepal and Malaysia for the next 10 years.", "answer": "crop_yield.get_history", "answer_params": "", "api_description": "def crop_yield.get_history:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical crop yield data of a specific crop in a given country.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country of interest.\n\t- crop : string = None (required) Type of crop.\n\t- years : integer = None (required) Number of years of history to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"crop_yield.get_history\", \"description\": \"Retrieve historical crop yield data of a specific crop in a given country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country of interest.\"}, \"crop\": {\"type\": \"string\", \"description\": \"Type of crop.\"}, \"years\": {\"type\": \"integer\", \"description\": \"Number of years of history to retrieve.\"}}, \"required\": [\"country\", \"crop\", \"years\"]}}"}
{"scope": "executable_parallel_multiple_function", "query": "I've got a package that was shipped from the zipcode 08540. To track its journey, I need to calculate how far it has traveled. The package started with a speed of 20 meters per second and accelerated at 2 meters per second squared for a total of 10 seconds. Also, can you tell me which city the package was sent from?", "query_for_retrieval": "I've got a package that was shipped from the zipcode 08540. To track its journey, I need to calculate how far it has traveled. The package started with a speed of 20 meters per second and accelerated at 2 meters per second squared for a total of 10 seconds. Also, can you tell me which city the package was sent from?", "answer": "get_zipcode_by_ip_address", "answer_params": "", "api_description": "def get_zipcode_by_ip_address:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the zipcode of an IP address.\n\t\n\tArguments:\n\t---------\n\t- ip_address : string = None (required) The IP address to find the location of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_zipcode_by_ip_address\", \"description\": \"Finds the zipcode of an IP address.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ip_address\": {\"type\": \"string\", \"description\": \"The IP address to find the location of.\"}}, \"required\": [\"ip_address\"]}}"}
{"scope": "simple", "query": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05.", "query_for_retrieval": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05.", "answer": "hypothesis_testing.two_sample_t_test", "answer_params": "", "api_description": "def hypothesis_testing.two_sample_t_test:\n\t\"\"\"\n\tDescription:\n\t\n\tPerform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.\n\t\n\tArguments:\n\t---------\n\t- group1 : array = None (required) Sample observations from group 1.\n\t- group2 : array = None (required) Sample observations from group 2.\n\t- alpha : float = None (optional) Significance level for the t-test. Default is 0.05.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hypothesis_testing.two_sample_t_test\", \"description\": \"Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"group1\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Sample observations from group 1.\"}, \"group2\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"Sample observations from group 2.\"}, \"alpha\": {\"type\": \"float\", \"description\": \"Significance level for the t-test. Default is 0.05.\"}}, \"required\": [\"group1\", \"group2\"]}}"}
{"scope": "sql", "query": "In a database table named \"Students\", can you change the \"Grade\" column to 'A' for all students whose \"Age\" is greater than 18?", "query_for_retrieval": "In a database table named \"Students\", can you change the \"Grade\" column to 'A' for all students whose \"Age\" is greater than 18?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "javascript", "query": "How can I create a task queue with a concurrency of 5, where tasks are functions that log a message to the console, and ensure that when the queue becomes saturated, it logs 'Queue is saturated', and when it becomes unsaturated, it logs 'Queue is unsaturated'?", "query_for_retrieval": "How can I create a task queue with a concurrency of 5, where tasks are functions that log a message to the console, and ensure that when the queue becomes saturated, it logs 'Queue is saturated', and when it becomes unsaturated, it logs 'Queue is unsaturated'?", "answer": "B", "answer_params": "", "api_description": "def B:\n\t\"\"\"\n\tDescription:\n\t\n\tThis complex function initializes a task queue with customizable concurrency, task addition, and event handling capabilities. It allows for synchronous and asynchronous task execution, pausing and resuming the queue, and handling various queue events.\n\t\n\tArguments:\n\t---------\n\t- e : any = None (optional) The initial task or an array of tasks to be added to the queue. Default null\n\t- t : float = None (required) The concurrency level of the task queue.\n\t- n : float = None (optional) The payload size for each task worker. Optional parameter. Default 0.0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"B\", \"description\": \"This complex function initializes a task queue with customizable concurrency, task addition, and event handling capabilities. It allows for synchronous and asynchronous task execution, pausing and resuming the queue, and handling various queue events.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"e\": {\"type\": \"any\", \"description\": \"The initial task or an array of tasks to be added to the queue. Default null\"}, \"t\": {\"type\": \"float\", \"description\": \"The concurrency level of the task queue.\"}, \"n\": {\"type\": \"float\", \"description\": \"The payload size for each task worker. Optional parameter. Default 0.0\"}}, \"required\": [\"t\"]}}"}
{"scope": "simple", "query": "Can you help me identify the basic RGB value of Sea Green color?", "query_for_retrieval": "Can you help me identify the basic RGB value of Sea Green color?", "answer": "identify_color_rgb", "answer_params": "", "api_description": "def identify_color_rgb:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function identifies the RGB values of a named color.\n\t\n\tArguments:\n\t---------\n\t- color_name : string = None (required) Name of the color.\n\t- standard : string = None (optional) The color standard (e.g. basic, pantone). Default is 'basic'\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"identify_color_rgb\", \"description\": \"This function identifies the RGB values of a named color.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"color_name\": {\"type\": \"string\", \"description\": \"Name of the color.\"}, \"standard\": {\"type\": \"string\", \"description\": \"The color standard (e.g. basic, pantone). Default is 'basic'\"}}, \"required\": [\"color_name\"]}}"}
{"scope": "simple", "query": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "query_for_retrieval": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "answer": "calculate_mutual_fund_balance", "answer_params": "", "api_description": "def calculate_mutual_fund_balance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\n\t\n\tArguments:\n\t---------\n\t- investment_amount : integer = None (required) The initial total amount invested in the fund.\n\t- annual_yield : float = None (required) The annual yield rate of the fund.\n\t- years : integer = None (required) The period of time for the fund to mature.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_mutual_fund_balance\", \"description\": \"Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_amount\": {\"type\": \"integer\", \"description\": \"The initial total amount invested in the fund.\"}, \"annual_yield\": {\"type\": \"float\", \"description\": \"The annual yield rate of the fund.\"}, \"years\": {\"type\": \"integer\", \"description\": \"The period of time for the fund to mature.\"}}, \"required\": [\"investment_amount\", \"annual_yield\", \"years\"]}}"}
{"scope": "parallel_function", "query": "What is the population density of China in 2000 and 2010, given that the population was 1.267 billion in 2000 and 1.341 billion in 2010, and the land area remained constant at 9.597 million square kilometers?", "query_for_retrieval": "What is the population density of China in 2000 and 2010, given that the population was 1.267 billion in 2000 and 1.341 billion in 2010, and the land area remained constant at 9.597 million square kilometers?", "answer": "calculate_density", "answer_params": "", "api_description": "def calculate_density:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population density of a specific country in a specific year.\n\t\n\tArguments:\n\t---------\n\t- country : string = None (required) The country for which the density needs to be calculated.\n\t- year : string = None (required) The year in which the density is to be calculated.\n\t- population : float = None (required) The population of the country.\n\t- land_area : float = None (required) The land area of the country in square kilometers.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_density\", \"description\": \"Calculate the population density of a specific country in a specific year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"country\": {\"type\": \"string\", \"description\": \"The country for which the density needs to be calculated.\"}, \"year\": {\"type\": \"string\", \"description\": \"The year in which the density is to be calculated.\"}, \"population\": {\"type\": \"float\", \"description\": \"The population of the country.\"}, \"land_area\": {\"type\": \"float\", \"description\": \"The land area of the country in square kilometers.\"}}, \"required\": [\"country\", \"year\", \"population\", \"land_area\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you help me find a book in the library? I am looking for a book named 'To Kill a Mockingbird' in the city of New York. I would like to know if it's available. Also, I am interested in the genre of 'Fiction'. Once you find it, can you reserve it for me? The book id is '123ABC' and the branch id is 'XYZ789'. I plan to return it by '2022-12-31'.\"", "query_for_retrieval": "\"Could you help me find a book in the library? I am looking for a book named 'To Kill a Mockingbird' in the city of New York. I would like to know if it's available. Also, I am interested in the genre of 'Fiction'. Once you find it, can you reserve it for me? The book id is '123ABC' and the branch id is 'XYZ789'. I plan to return it by '2022-12-31'.\"", "answer": "library.search_book", "answer_params": "", "api_description": "def library.search_book:\n\t\"\"\"\n\tDescription:\n\t\n\tSearches for a book in the library within the specified city.\n\t\n\tArguments:\n\t---------\n\t- book_name : string = None (required) The name of the book to search for.\n\t- city : string = None (required) The city to search within.\n\t- availability : boolean = None (optional) If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default false\n\t- genre : string =  (optional) The genre of the book to filter search (optional).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"library.search_book\", \"description\": \"Searches for a book in the library within the specified city.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"book_name\": {\"type\": \"string\", \"description\": \"The name of the book to search for.\"}, \"city\": {\"type\": \"string\", \"description\": \"The city to search within.\"}, \"availability\": {\"type\": \"boolean\", \"description\": \"If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default false\"}, \"genre\": {\"type\": \"string\", \"description\": \"The genre of the book to filter search (optional).\", \"default\": \"\"}}, \"required\": [\"book_name\", \"city\"]}}"}
{"scope": "relevance", "query": "How to increase the population of deer in a forest?", "query_for_retrieval": "How to increase the population of deer in a forest?", "answer": "calculate_population_growth", "answer_params": "", "api_description": "def calculate_population_growth:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the population growth of an animal based on the current population, birth rate and death rate.\n\t\n\tArguments:\n\t---------\n\t- current_population : integer = None (required) The current population of the animal.\n\t- birth_rate : float = None (required) The birth rate of the animal.\n\t- death_rate : float = None (required) The death rate of the animal.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_population_growth\", \"description\": \"Calculate the population growth of an animal based on the current population, birth rate and death rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"current_population\": {\"type\": \"integer\", \"description\": \"The current population of the animal.\"}, \"birth_rate\": {\"type\": \"float\", \"description\": \"The birth rate of the animal.\"}, \"death_rate\": {\"type\": \"float\", \"description\": \"The death rate of the animal.\"}}, \"required\": [\"current_population\", \"birth_rate\", \"death_rate\"]}}"}
{"scope": "rest", "query": "In a project aimed at providing near real-time dashboards for COVID-19 statistics across European countries, starting with China, I need to ensure the data retrieval process is optimized for speed to maintain data freshness. Using 'YOUR-RAPID-API-KEY' as my RapidAPI key and 'covid-193.p.rapidapi.com' as the host, how do I configure the request to not exceed 5 seconds, and what other request optimization techniques can be applied to ensure the fastest possible data retrieval?", "query_for_retrieval": "In a project aimed at providing near real-time dashboards for COVID-19 statistics across European countries, starting with China, I need to ensure the data retrieval process is optimized for speed to maintain data freshness. Using 'YOUR-RAPID-API-KEY' as my RapidAPI key and 'covid-193.p.rapidapi.com' as the host, how do I configure the request to not exceed 5 seconds, and what other request optimization techniques can be applied to ensure the fastest possible data retrieval?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://covid-193.p.rapidapi.com/statistics (required) Get statistics for all countries about COVID-19\n\t- headers : dict = None (optional) No description available.\n\t  - X-RapidAPI-Key : string = None (required) The API key for authenticating requests to RapidAPI.\n\t  - X-RapidAPI-Host : string = None (required) The host domain for the RapidAPI service being accessed.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - country : string = None (optional) Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"Get statistics for all countries about COVID-19\", \"default\": \"https://covid-193.p.rapidapi.com/statistics\"}, \"headers\": {\"properties\": {\"X-RapidAPI-Key\": {\"type\": \"string\", \"description\": \"The API key for authenticating requests to RapidAPI.\"}, \"X-RapidAPI-Host\": {\"type\": \"string\", \"description\": \"The host domain for the RapidAPI service being accessed.\"}}, \"type\": \"dict\", \"required\": [\"X-RapidAPI-Key\", \"X-RapidAPI-Host\"]}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"country\": {\"type\": \"string\", \"description\": \"Name of the country to retrieve data for. Use '[All]' to indicate a global history request.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm looking to reserve a deluxe room for a client whose ID is 123. They'll be staying from August 11th to August 15th, 2024. The room's nightly rate is $1000. Can you handle the booking for me?", "query_for_retrieval": "I'm looking to reserve a deluxe room for a client whose ID is 123. They'll be staying from August 11th to August 15th, 2024. The room's nightly rate is $1000. Can you handle the booking for me?", "answer": "book_room", "answer_params": "", "api_description": "def book_room:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a room for a customer.\n\t\n\tArguments:\n\t---------\n\t- room_type : dict = None (required) The room type to book.\n\t- check_in_date : string = None (required) The check-in date in format of MM-DD-YYYY.\n\t- check_out_date : string = None (required) The check-out date in format of MM-DD-YYYY.\n\t- customer_id : string = None (required) The customer ID.\n\t- discount_code : string = None (optional) The discount code (if any).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"book_room\", \"description\": \"Books a room for a customer.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"room_type\": {\"type\": \"dict\", \"description\": \"The room type to book.\"}, \"check_in_date\": {\"type\": \"string\", \"description\": \"The check-in date in format of MM-DD-YYYY.\"}, \"check_out_date\": {\"type\": \"string\", \"description\": \"The check-out date in format of MM-DD-YYYY.\"}, \"customer_id\": {\"type\": \"string\", \"description\": \"The customer ID.\"}, \"discount_code\": {\"type\": \"string\", \"description\": \"The discount code (if any).\", \"default\": null}}, \"required\": [\"room_type\", \"check_in_date\", \"check_out_date\", \"customer_id\"]}}"}
{"scope": "simple", "query": "Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.", "query_for_retrieval": "Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.", "answer": "predict_house_price", "answer_params": "", "api_description": "def predict_house_price:\n\t\"\"\"\n\tDescription:\n\t\n\tPredict house price based on area, number of rooms and year of construction.\n\t\n\tArguments:\n\t---------\n\t- area : integer = None (required) Area of the house in square feet.\n\t- rooms : integer = None (required) Number of rooms in the house.\n\t- year : integer = None (required) Year when the house was constructed.\n\t- location : string = None (required) The location or city of the house.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"predict_house_price\", \"description\": \"Predict house price based on area, number of rooms and year of construction.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"area\": {\"type\": \"integer\", \"description\": \"Area of the house in square feet.\"}, \"rooms\": {\"type\": \"integer\", \"description\": \"Number of rooms in the house.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year when the house was constructed.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location or city of the house.\"}}, \"required\": [\"area\", \"rooms\", \"year\", \"location\"]}}"}
{"scope": "multiple_function", "query": "What are the three great Schism in Christianity history?", "query_for_retrieval": "What are the three great Schism in Christianity history?", "answer": "religion_history.get_councils", "answer_params": "", "api_description": "def religion_history.get_councils:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves a list of major councils in a specified religion.\n\t\n\tArguments:\n\t---------\n\t- religion : string = None (required) Name of the religion for which to retrieve the councils.\n\t- count : integer = 3 (required) Number of top councils to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"religion_history.get_councils\", \"description\": \"Retrieves a list of major councils in a specified religion.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"religion\": {\"type\": \"string\", \"description\": \"Name of the religion for which to retrieve the councils.\"}, \"count\": {\"type\": \"integer\", \"description\": \"Number of top councils to retrieve.\", \"default\": 3}}, \"required\": [\"religion\", \"count\"]}}"}
{"scope": "multiple_function", "query": "What was the population of California in 1970?", "query_for_retrieval": "What was the population of California in 1970?", "answer": "us_history.population_by_state_year", "answer_params": "", "api_description": "def us_history.population_by_state_year:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve historical population data for a specific U.S. state and year.\n\t\n\tArguments:\n\t---------\n\t- state : string = None (required) The U.S. state for which to retrieve the population.\n\t- year : integer = None (required) The year for which to retrieve the population.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"us_history.population_by_state_year\", \"description\": \"Retrieve historical population data for a specific U.S. state and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"The U.S. state for which to retrieve the population.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year for which to retrieve the population.\"}}, \"required\": [\"state\", \"year\"]}}"}
{"scope": "multiple_function", "query": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "query_for_retrieval": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "answer": "park_information", "answer_params": "", "api_description": "def park_information:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the basic information such as elevation and area of a national park.\n\t\n\tArguments:\n\t---------\n\t- park_name : string = None (required) The name of the national park.\n\t- information : array = None (required) The type of information you want about the park.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"park_information\", \"description\": \"Retrieve the basic information such as elevation and area of a national park.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"park_name\": {\"type\": \"string\", \"description\": \"The name of the national park.\"}, \"information\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Elevation\", \"Area\", \"Location\", \"Established Year\"]}, \"description\": \"The type of information you want about the park.\"}}, \"required\": [\"park_name\", \"information\"]}}"}
{"scope": "executable_multiple_function", "query": "I've got a dataset here that needs to be ordered from highest to lowest value. The numbers I'm working with are 34, 2, 56, 7, 9, and 12. Could you help me sort these in descending order?", "query_for_retrieval": "I've got a dataset here that needs to be ordered from highest to lowest value. The numbers I'm working with are 34, 2, 56, 7, 9, and 12. Could you help me sort these in descending order?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "multiple_function", "query": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "query_for_retrieval": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "answer": "restaurant.find_nearby", "answer_params": "", "api_description": "def restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby restaurants based on specific criteria like cuisine type.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. Seattle, WA\n\t- cuisine : string = None (required) Preferred type of cuisine in restaurant.\n\t- max_distance : integer = None (optional) Maximum distance (in miles) within which to search for restaurants. Default is 5.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant.find_nearby\", \"description\": \"Locate nearby restaurants based on specific criteria like cuisine type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. Seattle, WA\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Preferred type of cuisine in restaurant.\"}, \"max_distance\": {\"type\": \"integer\", \"description\": \"Maximum distance (in miles) within which to search for restaurants. Default is 5.\"}}, \"required\": [\"location\", \"cuisine\"]}}"}
{"scope": "executable_simple", "query": "I've got $8000 that I'm planning to drop into a savings account with a sweet annual interest rate of 4%. I'm not touching it for 15 years. I'm curious about the future value of this investment after that time. Can you crunch the numbers for me?", "query_for_retrieval": "I've got $8000 that I'm planning to drop into a savings account with a sweet annual interest rate of 4%. I'm not touching it for 15 years. I'm curious about the future value of this investment after that time. Can you crunch the numbers for me?", "answer": "calculate_future_value", "answer_params": "", "api_description": "def calculate_future_value:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the future value of an investment.\n\t\n\tArguments:\n\t---------\n\t- present_value : float = None (required) The present value of the investment, in dollars.\n\t- interest_rate : float = None (required) The interest rate of the investment, ranging from 0 to 1.\n\t- periods : integer = None (required) The number of periods, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_future_value\", \"description\": \"Calculates the future value of an investment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"present_value\": {\"type\": \"float\", \"description\": \"The present value of the investment, in dollars.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the investment, ranging from 0 to 1.\"}, \"periods\": {\"type\": \"integer\", \"description\": \"The number of periods, in years.\"}}, \"required\": [\"present_value\", \"interest_rate\", \"periods\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Imagine you are a geometry teacher preparing for your next class. You have two shapes, a triangle and a circle, that you want to discuss in detail. For the triangle, the lengths of the sides are 5 units, 7 units, and 9 units respectively. You want to calculate the area, perimeter, and internal angles of this triangle. For the circle, the radius is 3 units. You want to calculate the area and circumference of this circle. Can you provide these details?\"", "query_for_retrieval": "\"Imagine you are a geometry teacher preparing for your next class. You have two shapes, a triangle and a circle, that you want to discuss in detail. For the triangle, the lengths of the sides are 5 units, 7 units, and 9 units respectively. You want to calculate the area, perimeter, and internal angles of this triangle. For the circle, the radius is 3 units. You want to calculate the area and circumference of this circle. Can you provide these details?\"", "answer": "circle_properties.get", "answer_params": "", "api_description": "def circle_properties.get:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the dimensions, such as area and circumference, of a circle if radius is given.\n\t\n\tArguments:\n\t---------\n\t- radius : float = None (required) The length of radius of the circle.\n\t- get_area : boolean = None (optional) A flag to determine whether to calculate the area of circle. Default is true.\n\t- get_circumference : boolean = None (optional) A flag to determine whether to calculate the circumference of circle. Default is true.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"circle_properties.get\", \"description\": \"Retrieve the dimensions, such as area and circumference, of a circle if radius is given.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"radius\": {\"type\": \"float\", \"description\": \"The length of radius of the circle.\"}, \"get_area\": {\"type\": \"boolean\", \"description\": \"A flag to determine whether to calculate the area of circle. Default is true.\"}, \"get_circumference\": {\"type\": \"boolean\", \"description\": \"A flag to determine whether to calculate the circumference of circle. Default is true.\"}}, \"required\": [\"radius\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me plan a trip? I want to start by finding a vegan restaurant in San Francisco, CA that operates until at least 22:00. Then, I want to book a hotel in the same city. I prefer a deluxe room for 3 nights starting from July 1st, and I would like the hotel to be pet-friendly and have a gym. After that, I want to find the schedule of the Golden State Warriors for the next 5 games in the NBA. Lastly, I have a deck of cards and I want to find the Queen of Hearts in it.\"", "query_for_retrieval": "\"Can you help me plan a trip? I want to start by finding a vegan restaurant in San Francisco, CA that operates until at least 22:00. Then, I want to book a hotel in the same city. I prefer a deluxe room for 3 nights starting from July 1st, and I would like the hotel to be pet-friendly and have a gym. After that, I want to find the schedule of the Golden State Warriors for the next 5 games in the NBA. Lastly, I have a deck of cards and I want to find the Queen of Hearts in it.\"", "answer": "hotel_booking", "answer_params": "", "api_description": "def hotel_booking:\n\t\"\"\"\n\tDescription:\n\t\n\tBooks a hotel room given the location, room type, stay duration and any additional preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city where you want to book the hotel.\n\t- room_type : string = None (required) Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n\t- duration : integer = None (required) The number of nights you want to book the hotel for.\n\t- start_date : string = None (required) The date when your stay begins.\n\t- preferences : array = None (optional) Optional preferences of stay at the hotel. Default is none if not provided.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"hotel_booking\", \"description\": \"Books a hotel room given the location, room type, stay duration and any additional preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city where you want to book the hotel.\"}, \"room_type\": {\"type\": \"string\", \"description\": \"Type of the room required. Options: 'single', 'double', 'deluxe', etc.\"}, \"duration\": {\"type\": \"integer\", \"description\": \"The number of nights you want to book the hotel for.\"}, \"start_date\": {\"type\": \"string\", \"description\": \"The date when your stay begins.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"pet_friendly\", \"gym\", \"swimming_pool\", \"free_breakfast\", \"parking\"]}, \"description\": \"Optional preferences of stay at the hotel. Default is none if not provided.\"}}, \"required\": [\"location\", \"room_type\", \"duration\", \"start_date\"]}}"}
{"scope": "parallel_function", "query": "You are a teacher preparing a probability lesson for your students. You have a deck of 52 playing cards and you want to explain the probability of drawing certain cards. \n\n1. What is the probability of drawing an Ace (4 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n2. Then, what is the probability of drawing a heart (13 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n3. Finally, what is the probability of drawing a red card (26 successful outcomes) from the deck (52 total outcomes)? But this time, please provide the answer as a ratio.", "query_for_retrieval": "You are a teacher preparing a probability lesson for your students. You have a deck of 52 playing cards and you want to explain the probability of drawing certain cards. \n\n1. What is the probability of drawing an Ace (4 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n2. Then, what is the probability of drawing a heart (13 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n3. Finally, what is the probability of drawing a red card (26 successful outcomes) from the deck (52 total outcomes)? But this time, please provide the answer as a ratio.", "answer": "probability_of_event", "answer_params": "", "api_description": "def probability_of_event:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the probability of an event.\n\t\n\tArguments:\n\t---------\n\t- success_outcomes : integer = None (required) The number of successful outcomes.\n\t- total_outcomes : integer = None (required) The total number of possible outcomes.\n\t- format_as_ratio : boolean = None (optional) When true, formats the output as a ratio instead of a decimal. Default is false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"probability_of_event\", \"description\": \"Calculates the probability of an event.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"success_outcomes\": {\"type\": \"integer\", \"description\": \"The number of successful outcomes.\"}, \"total_outcomes\": {\"type\": \"integer\", \"description\": \"The total number of possible outcomes.\"}, \"format_as_ratio\": {\"type\": \"boolean\", \"description\": \"When true, formats the output as a ratio instead of a decimal. Default is false.\"}}, \"required\": [\"success_outcomes\", \"total_outcomes\"]}}"}
{"scope": "sql", "query": "In a physics experiment, we have collected data for the time taken by a ball to fall from different heights. The data is to be stored in a database table named 'FreeFallExperiment'. The columns in the table are 'Height', 'Time' and 'TrialNumber'. For the first trial, the ball was dropped from a height of 10m and it took 1.43 seconds to hit the ground. For the second trial, the ball was dropped from a height of 20m and it took 2.01 seconds to hit the ground. Can you store this data in the database?", "query_for_retrieval": "In a physics experiment, we have collected data for the time taken by a ball to fall from different heights. The data is to be stored in a database table named 'FreeFallExperiment'. The columns in the table are 'Height', 'Time' and 'TrialNumber'. For the first trial, the ball was dropped from a height of 10m and it took 1.43 seconds to hit the ground. For the second trial, the ball was dropped from a height of 20m and it took 2.01 seconds to hit the ground. Can you store this data in the database?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Give me the top 10 goal scorers in the UEFA Champions League from Barcelona team.", "query_for_retrieval": "Give me the top 10 goal scorers in the UEFA Champions League from Barcelona team.", "answer": "getTopGoalScorers", "answer_params": "", "api_description": "def getTopGoalScorers:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the top goal scorers for a specific competition and team\n\t\n\tArguments:\n\t---------\n\t- competition : string = None (required) The name of the competition (for example, 'UEFA Champions League').\n\t- team : string = None (required) The name of the team (for example, 'Barcelona').\n\t- number : integer = None (required) The number of top goal scorers to retrieve.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"getTopGoalScorers\", \"description\": \"Returns the top goal scorers for a specific competition and team\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"competition\": {\"type\": \"string\", \"description\": \"The name of the competition (for example, 'UEFA Champions League').\"}, \"team\": {\"type\": \"string\", \"description\": \"The name of the team (for example, 'Barcelona').\"}, \"number\": {\"type\": \"integer\", \"description\": \"The number of top goal scorers to retrieve.\"}}, \"required\": [\"competition\", \"team\", \"number\"]}}"}
{"scope": "sql", "query": "Can you eliminate all entries from the 'orders' table where the 'order_status' column is marked as 'cancelled'?", "query_for_retrieval": "Can you eliminate all entries from the 'orders' table where the 'order_status' column is marked as 'cancelled'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm refining the data points in my machine learning model and need to compare the similarity of several vector pairs to fine-tune the system. Could you calculate the cosine similarities for the following pairs? The first pair is [0.5, 0.7, 0.2, 0.9, 0.1] and [0.3, 0.6, 0.2, 0.8, 0.1]. The second pair is [0.2, 0.4, 0.6, 0.8, 1.0] and [1.0, 0.8, 0.6, 0.4, 0.2]. Lastly, I've got [0.1, 0.2, 0.3, 0.4, 0.5] and [0.5, 0.4, 0.3, 0.2, 0.1] to compare.", "query_for_retrieval": "I'm refining the data points in my machine learning model and need to compare the similarity of several vector pairs to fine-tune the system. Could you calculate the cosine similarities for the following pairs? The first pair is [0.5, 0.7, 0.2, 0.9, 0.1] and [0.3, 0.6, 0.2, 0.8, 0.1]. The second pair is [0.2, 0.4, 0.6, 0.8, 1.0] and [1.0, 0.8, 0.6, 0.4, 0.2]. Lastly, I've got [0.1, 0.2, 0.3, 0.4, 0.5] and [0.5, 0.4, 0.3, 0.2, 0.1] to compare.", "answer": "calculate_cosine_similarity", "answer_params": "", "api_description": "def calculate_cosine_similarity:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the cosine similarity of two vectors.\n\t\n\tArguments:\n\t---------\n\t- vectorA : array = None (required) The first vector.\n\t- vectorB : array = None (required) The second vector.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cosine_similarity\", \"description\": \"Calculates the cosine similarity of two vectors.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"vectorA\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The first vector.\"}, \"vectorB\": {\"type\": \"array\", \"items\": {\"type\": \"float\"}, \"description\": \"The second vector.\"}}, \"required\": [\"vectorA\", \"vectorB\"]}}"}
{"scope": "rest", "query": "I need to fetch the latest currency exchange rates for Euros (EUR) as my base currency from my favorite exchange rate service. I've already got an API key which is `YOUR-EXCHANGERATE-API-KEY`. How should I structure my GET request to obtain this information?", "query_for_retrieval": "I need to fetch the latest currency exchange rates for Euros (EUR) as my base currency from my favorite exchange rate service. I've already got an API key which is `YOUR-EXCHANGERATE-API-KEY`. How should I structure my GET request to obtain this information?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "relevance", "query": "Find the duration of flight between Los Angeles and Miami.", "query_for_retrieval": "Find the duration of flight between Los Angeles and Miami.", "answer": "currency_converter", "answer_params": "", "api_description": "def currency_converter:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a value from one currency to another.\n\t\n\tArguments:\n\t---------\n\t- base_currency : string = None (required) The base currency you want to convert from.\n\t- target_currency : string = None (required) The target currency you want to convert to.\n\t- amount : float = None (required) The amount of money you want to convert.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_converter\", \"description\": \"Converts a value from one currency to another.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_currency\": {\"type\": \"string\", \"description\": \"The base currency you want to convert from.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The target currency you want to convert to.\"}, \"amount\": {\"type\": \"float\", \"description\": \"The amount of money you want to convert.\"}}, \"required\": [\"base_currency\", \"target_currency\", \"amount\"]}}"}
{"scope": "multiple_function", "query": "Give me the UV index for Tokyo for tomorrow.", "query_for_retrieval": "Give me the UV index for Tokyo for tomorrow.", "answer": "uv_index.get_future", "answer_params": "", "api_description": "def uv_index.get_future:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve UV index data for a specified location and date.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location to retrieve the UV index for.\n\t- date : string = Tomorrow (optional) The date for the UV index.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"uv_index.get_future\", \"description\": \"Retrieve UV index data for a specified location and date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location to retrieve the UV index for.\"}, \"date\": {\"type\": \"string\", \"description\": \"The date for the UV index.\", \"default\": \"Tomorrow\"}}, \"required\": [\"location\"]}}"}
{"scope": "relevance", "query": "What is the best movie in 2020?", "query_for_retrieval": "What is the best movie in 2020?", "answer": "currency_exchange.calculate", "answer_params": "", "api_description": "def currency_exchange.calculate:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the exchanged amount of money based on the exchange rate.\n\t\n\tArguments:\n\t---------\n\t- base_amount : float = None (required) The amount of money to be exchanged.\n\t- base_currency : string = None (required) The current currency of the money.\n\t- target_currency : string = None (required) The currency to be converted to.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"currency_exchange.calculate\", \"description\": \"Calculate the exchanged amount of money based on the exchange rate.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"base_amount\": {\"type\": \"float\", \"description\": \"The amount of money to be exchanged.\"}, \"base_currency\": {\"type\": \"string\", \"description\": \"The current currency of the money.\"}, \"target_currency\": {\"type\": \"string\", \"description\": \"The currency to be converted to.\"}}, \"required\": [\"base_amount\", \"base_currency\", \"target_currency\"]}}"}
{"scope": "sql", "query": "Can you add a new record to the 'EconomicData' table in the database, where the columns are 'Country', 'GDP', 'Unemployment_Rate', and 'Inflation_Rate', and the corresponding values to be inserted are 'USA', '21.43 trillion', '3.5%', and '1.8%' respectively?", "query_for_retrieval": "Can you add a new record to the 'EconomicData' table in the database, where the columns are 'Country', 'GDP', 'Unemployment_Rate', and 'Inflation_Rate', and the corresponding values to be inserted are 'USA', '21.43 trillion', '3.5%', and '1.8%' respectively?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "java", "query": "How can I create an exponential decay scoring function for an Elasticsearch query, targeting the 'timestamp' field, with an origin point of 'now', a scale of '10d', an offset of '2d', and a decay factor of 0.5?", "query_for_retrieval": "How can I create an exponential decay scoring function for an Elasticsearch query, targeting the 'timestamp' field, with an origin point of 'now', a scale of '10d', an offset of '2d', and a decay factor of 0.5?", "answer": "ScoreFunctionBuilders.exponentialDecayFunction", "answer_params": "", "api_description": "def ScoreFunctionBuilders.exponentialDecayFunction:\n\t\"\"\"\n\tDescription:\n\t\n\tCreates an ExponentialDecayFunctionBuilder which is used to score documents with a function that decays exponentially from a certain origin.\n\t\n\tArguments:\n\t---------\n\t- fieldName : String = None (required) The name of the field on which to apply the function.\n\t- origin : any = None (required) The point of origin from which decay starts.\n\t- scale : any = None (required) Defines how quickly the function decays.\n\t- offset : any = None (optional) The offset from the origin before decay starts. Default null\n\t- decay : double = None (required) The decay factor, must be between 0 and 1.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"ScoreFunctionBuilders.exponentialDecayFunction\", \"description\": \"Creates an ExponentialDecayFunctionBuilder which is used to score documents with a function that decays exponentially from a certain origin.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"fieldName\": {\"type\": \"String\", \"description\": \"The name of the field on which to apply the function.\"}, \"origin\": {\"type\": \"any\", \"description\": \"The point of origin from which decay starts.\"}, \"scale\": {\"type\": \"any\", \"description\": \"Defines how quickly the function decays.\"}, \"offset\": {\"type\": \"any\", \"description\": \"The offset from the origin before decay starts. Default null\"}, \"decay\": {\"type\": \"double\", \"description\": \"The decay factor, must be between 0 and 1.\"}}, \"required\": [\"fieldName\", \"origin\", \"scale\", \"decay\"]}}"}
{"scope": "simple", "query": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?", "query_for_retrieval": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?", "answer": "linear_regression.get_r_squared", "answer_params": "", "api_description": "def linear_regression.get_r_squared:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the coefficient of determination of a regression model.\n\t\n\tArguments:\n\t---------\n\t- dataset_path : string = None (required) Path to the CSV dataset file.\n\t- independent_variables : array = None (required) The independent variables to use in the regression model.\n\t- dependent_variable : string = None (required) The dependent variable to predict in the regression model.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"linear_regression.get_r_squared\", \"description\": \"Calculate the coefficient of determination of a regression model.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"dataset_path\": {\"type\": \"string\", \"description\": \"Path to the CSV dataset file.\"}, \"independent_variables\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The independent variables to use in the regression model.\"}, \"dependent_variable\": {\"type\": \"string\", \"description\": \"The dependent variable to predict in the regression model.\"}}, \"required\": [\"dataset_path\", \"independent_variables\", \"dependent_variable\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Can you help me find a book? I'm not sure of the title, but I know it's a mystery novel. I'd like to search in the library in New York City first, then I'd like to check Google Books and Open Library. Can you assist with these searches?\"", "query_for_retrieval": "\"Can you help me find a book? I'm not sure of the title, but I know it's a mystery novel. I'd like to search in the library in New York City first, then I'd like to check Google Books and Open Library. Can you assist with these searches?\"", "answer": "google.books_search", "answer_params": "", "api_description": "def google.books_search:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a book in the Google Books library with optional parameters\n\t\n\tArguments:\n\t---------\n\t- genre : string = None (required) Genre of the book\n\t- title : string = None (optional) Title of the book. Default is not use it if not specified.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"google.books_search\", \"description\": \"Search for a book in the Google Books library with optional parameters\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"genre\": {\"type\": \"string\", \"description\": \"Genre of the book\"}, \"title\": {\"type\": \"string\", \"description\": \"Title of the book. Default is not use it if not specified.\"}}, \"required\": [\"genre\"]}}"}
{"scope": "multiple_function", "query": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "query_for_retrieval": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "answer": "calculate_electrostatic_potential", "answer_params": "", "api_description": "def calculate_electrostatic_potential:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.\n\t\n\tArguments:\n\t---------\n\t- charge1 : float = None (required) The quantity of charge on the first body.\n\t- charge2 : float = None (required) The quantity of charge on the second body.\n\t- distance : float = None (required) The distance between the two bodies.\n\t- constant : float = None (optional) The value of the electrostatic constant. Default is 898755178.73\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential\", \"description\": \"Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge1\": {\"type\": \"float\", \"description\": \"The quantity of charge on the first body.\"}, \"charge2\": {\"type\": \"float\", \"description\": \"The quantity of charge on the second body.\"}, \"distance\": {\"type\": \"float\", \"description\": \"The distance between the two bodies.\"}, \"constant\": {\"type\": \"float\", \"description\": \"The value of the electrostatic constant. Default is 898755178.73\"}}, \"required\": [\"charge1\", \"charge2\", \"distance\"]}}"}
{"scope": "relevance", "query": "How many calories does an apple have?", "query_for_retrieval": "How many calories does an apple have?", "answer": "calculate_litigation_cost", "answer_params": "", "api_description": "def calculate_litigation_cost:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the potential cost of a lawsuit based on its length and complexity.\n\t\n\tArguments:\n\t---------\n\t- length_in_days : integer = None (required) The expected length of the trial in days.\n\t- complexity : string = None (required) The complexity of the lawsuit.\n\t- extra_expenses : boolean = False (optional) Does this lawsuit involve extra expenses such as private investigators, travel, etc.?\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_litigation_cost\", \"description\": \"Calculate the potential cost of a lawsuit based on its length and complexity.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"length_in_days\": {\"type\": \"integer\", \"description\": \"The expected length of the trial in days.\"}, \"complexity\": {\"type\": \"string\", \"enum\": [\"low\", \"medium\", \"high\"], \"description\": \"The complexity of the lawsuit.\"}, \"extra_expenses\": {\"type\": \"boolean\", \"description\": \"Does this lawsuit involve extra expenses such as private investigators, travel, etc.?\", \"default\": false}}, \"required\": [\"length_in_days\", \"complexity\"]}}"}
{"scope": "simple", "query": "Who won the last match between Chicago Bulls and Los Angeles Lakers?", "query_for_retrieval": "Who won the last match between Chicago Bulls and Los Angeles Lakers?", "answer": "sports.match_results", "answer_params": "", "api_description": "def sports.match_results:\n\t\"\"\"\n\tDescription:\n\t\n\tReturns the results of a given match between two teams.\n\t\n\tArguments:\n\t---------\n\t- team1 : string = None (required) The name of the first team.\n\t- team2 : string = None (required) The name of the second team.\n\t- season : string = None (optional) The season when the match happened. Default is the current season.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sports.match_results\", \"description\": \"Returns the results of a given match between two teams.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"team1\": {\"type\": \"string\", \"description\": \"The name of the first team.\"}, \"team2\": {\"type\": \"string\", \"description\": \"The name of the second team.\"}, \"season\": {\"type\": \"string\", \"description\": \"The season when the match happened. Default is the current season.\"}}, \"required\": [\"team1\", \"team2\"]}}"}
{"scope": "executable_multiple_function", "query": "For my next algebra class, I'm planning to cover the topic of quadratic equations. I want to provide a practical example to help my students understand the concept of finding roots. So, I've chosen the equation 3x^2 + 7x - 10 = 0 to work through with the class. Could you calculate the roots for this specific equation?", "query_for_retrieval": "For my next algebra class, I'm planning to cover the topic of quadratic equations. I want to provide a practical example to help my students understand the concept of finding roots. So, I've chosen the equation 3x^2 + 7x - 10 = 0 to work through with the class. Could you calculate the roots for this specific equation?", "answer": "get_distance", "answer_params": "", "api_description": "def get_distance:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the distance between two 2D points.\n\t\n\tArguments:\n\t---------\n\t- pointA : tuple = None (required) The first point.\n\t- pointB : tuple = None (required) The second point.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_distance\", \"description\": \"Calculates the distance between two 2D points.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"pointA\": {\"type\": \"tuple\", \"description\": \"The first point.\", \"items\": {\"type\": \"float\"}}, \"pointB\": {\"type\": \"tuple\", \"description\": \"The second point.\", \"items\": {\"type\": \"float\"}}}, \"required\": [\"pointA\", \"pointB\"]}}"}
{"scope": "java", "query": "What is the compiled pattern for a failure message in a graph constraint system when checking for forbidden nodes in the 'failOn' category for rule number 42?", "query_for_retrieval": "What is the compiled pattern for a failure message in a graph constraint system when checking for forbidden nodes in the 'failOn' category for rule number 42?", "answer": "RegexConstraint.initIRPattern", "answer_params": "", "api_description": "def RegexConstraint.initIRPattern:\n\t\"\"\"\n\tDescription:\n\t\n\tInitializes and compiles a regex Pattern based on the category of the constraint and the index of the rule.\n\t\n\tArguments:\n\t---------\n\t- category : String = None (required) The category of the constraint, which determines the pattern to be compiled.\n\t- ruleIdx : integer = None (required) The index of the rule for which the pattern is being compiled.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"RegexConstraint.initIRPattern\", \"description\": \"Initializes and compiles a regex Pattern based on the category of the constraint and the index of the rule.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"category\": {\"type\": \"String\", \"description\": \"The category of the constraint, which determines the pattern to be compiled.\"}, \"ruleIdx\": {\"type\": \"integer\", \"description\": \"The index of the rule for which the pattern is being compiled.\"}}, \"required\": [\"category\", \"ruleIdx\"]}}"}
{"scope": "sql", "query": "Can you create a new table named 'Employee' in the database with columns 'ID', 'Name', 'Position', 'Salary' and 'Department'?", "query_for_retrieval": "Can you create a new table named 'Employee' in the database with columns 'ID', 'Name', 'Position', 'Salary' and 'Department'?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "multiple_function", "query": "Can you please calculate the compound interest for a principle of $1000, annual rate of 5% over 10 years with 4 compound per year.", "query_for_retrieval": "Can you please calculate the compound interest for a principle of $1000, annual rate of 5% over 10 years with 4 compound per year.", "answer": "financial.compound_interest", "answer_params": "", "api_description": "def financial.compound_interest:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates compound interest.\n\t\n\tArguments:\n\t---------\n\t- principle : integer = None (required) The initial amount of money that is being compounded.\n\t- rate : float = None (required) The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\n\t- time : integer = None (required) The amount of time, in years, that the money is to be compounded for.\n\t- n : integer = None (required) The number of times interest applied per time period.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"financial.compound_interest\", \"description\": \"Calculates compound interest.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"principle\": {\"type\": \"integer\", \"description\": \"The initial amount of money that is being compounded.\"}, \"rate\": {\"type\": \"float\", \"description\": \"The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\"}, \"time\": {\"type\": \"integer\", \"description\": \"The amount of time, in years, that the money is to be compounded for.\"}, \"n\": {\"type\": \"integer\", \"description\": \"The number of times interest applied per time period.\"}}, \"required\": [\"principle\", \"rate\", \"time\", \"n\"]}}"}
{"scope": "executable_multiple_function", "query": "I have a set of vertices: [[1,2],[3,4],[1,4],[3,7]], and I'm curious about the area that these points, when connected in order, would enclose to form a polygon. Could you calculate the area of this polygon for me?", "query_for_retrieval": "I have a set of vertices: [[1,2],[3,4],[1,4],[3,7]], and I'm curious about the area that these points, when connected in order, would enclose to form a polygon. Could you calculate the area of this polygon for me?", "answer": "convert_coordinates", "answer_params": "", "api_description": "def convert_coordinates:\n\t\"\"\"\n\tDescription:\n\t\n\tConverts a list of tuples into a list of lists.\n\t\n\tArguments:\n\t---------\n\t- coordinates : array = None (required) The coordinates to be converted, where each coordinate is a tuple (x, y).\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convert_coordinates\", \"description\": \"Converts a list of tuples into a list of lists.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"coordinates\": {\"type\": \"array\", \"items\": {\"type\": \"tuple\", \"items\": {\"type\": \"float\"}, \"description\": \"A single coordinate represented by a tuple (x, y).\"}, \"description\": \"The coordinates to be converted, where each coordinate is a tuple (x, y).\"}}, \"required\": [\"coordinates\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find how many cases and the judge handling a specific lawsuit for Pacific Gas and Electric and Tesla Inc.", "query_for_retrieval": "Find how many cases and the judge handling a specific lawsuit for Pacific Gas and Electric and Tesla Inc.", "answer": "lawsuit.fetch_details", "answer_params": "", "api_description": "def lawsuit.fetch_details:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch the details of a lawsuit for a specific company.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) The company involved in the lawsuit.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit.fetch_details\", \"description\": \"Fetch the details of a lawsuit for a specific company.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"The company involved in the lawsuit.\"}}, \"required\": [\"company_name\"]}}"}
{"scope": "multiple_function", "query": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "query_for_retrieval": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "answer": "social_media_analytics.most_followed", "answer_params": "", "api_description": "def social_media_analytics.most_followed:\n\t\"\"\"\n\tDescription:\n\t\n\tFind the most followed Twitter user related to certain topics.\n\t\n\tArguments:\n\t---------\n\t- topic : string = None (required) The main topic of interest.\n\t- sub_topics : array = None (optional) Sub-topics related to main topic, Optional. Default is an empty list.\n\t- region : string = None (optional) Region of interest for twitter search, Optional. Default is 'global'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"social_media_analytics.most_followed\", \"description\": \"Find the most followed Twitter user related to certain topics.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"topic\": {\"type\": \"string\", \"description\": \"The main topic of interest.\"}, \"sub_topics\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"Sub-topics related to main topic, Optional. Default is an empty list.\"}, \"region\": {\"type\": \"string\", \"description\": \"Region of interest for twitter search, Optional. Default is 'global'.\"}}, \"required\": [\"topic\"]}}"}
{"scope": "sql", "query": "What changes should be made to the \"AnimalClassification\" table in the database to update the \"Lifespan\" column for the animal \"Elephant\" to 70 years, based on the condition that the current lifespan is less than 70 years?", "query_for_retrieval": "What changes should be made to the \"AnimalClassification\" table in the database to update the \"Lifespan\" column for the animal \"Elephant\" to 70 years, based on the condition that the current lifespan is less than 70 years?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "relevance", "query": "What's the cost of renting an apartment in New York?", "query_for_retrieval": "What's the cost of renting an apartment in New York?", "answer": "calculate_construction_cost", "answer_params": "", "api_description": "def calculate_construction_cost:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the estimated cost of construction for a particular building project.\n\t\n\tArguments:\n\t---------\n\t- building_type : string = None (required) The type of the building. E.g. skyscraper, house, warehouse\n\t- location : string = None (required) The location of the building.\n\t- materials : array = None (required) The list of materials to be used in the construction.\n\t- labor_cost : float = 0 (optional) The cost of labor per day.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_construction_cost\", \"description\": \"Calculate the estimated cost of construction for a particular building project.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_type\": {\"type\": \"string\", \"description\": \"The type of the building. E.g. skyscraper, house, warehouse\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the building.\"}, \"materials\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of materials to be used in the construction.\"}, \"labor_cost\": {\"type\": \"float\", \"default\": 0, \"description\": \"The cost of labor per day.\"}}, \"required\": [\"building_type\", \"location\", \"materials\"]}}"}
{"scope": "javascript", "query": "How can I apply a function named 'processType' to each type in a union type object named 'unionTypeObj' to analyze its properties?", "query_for_retrieval": "How can I apply a function named 'processType' to each type in a union type object named 'unionTypeObj' to analyze its properties?", "answer": "forEachType", "answer_params": "", "api_description": "def forEachType:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function iterates over each type in a given type object, applying a specified function to it. If the type object represents a union of types, the function is applied to each type in the union; otherwise, it is applied directly to the single type.\n\t\n\tArguments:\n\t---------\n\t- type : any = None (required) The type object, potentially representing a union of types.\n\t- f : any = None (required) The function to apply to each type in the type object.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"forEachType\", \"description\": \"This function iterates over each type in a given type object, applying a specified function to it. If the type object represents a union of types, the function is applied to each type in the union; otherwise, it is applied directly to the single type.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"any\", \"description\": \"The type object, potentially representing a union of types.\"}, \"f\": {\"type\": \"any\", \"description\": \"The function to apply to each type in the type object.\"}}, \"required\": [\"type\", \"f\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm assisting a client who's in the process of buying a house. They're looking at a mortgage for the amount of $350,000. The interest rate they've been offered is 3.5%, and they plan to pay it off over 30 years. I need to provide them with an estimate of what their monthly payment would be. Can you work that out for me?", "query_for_retrieval": "I'm assisting a client who's in the process of buying a house. They're looking at a mortgage for the amount of $350,000. The interest rate they've been offered is 3.5%, and they plan to pay it off over 30 years. I need to provide them with an estimate of what their monthly payment would be. Can you work that out for me?", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "rest", "query": "Can you show me how to fetch the latest exchange rates for Euros against all other currencies using my API key `YOUR-EXCHANGERATE-API-KEY`?", "query_for_retrieval": "Can you show me how to fetch the latest exchange rates for Euros against all other currencies using my API key `YOUR-EXCHANGERATE-API-KEY`?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency} (required) To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API\", \"default\": \"https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "simple", "query": "Find a historical law case about fraud from 2010 to 2015.", "query_for_retrieval": "Find a historical law case about fraud from 2010 to 2015.", "answer": "law_case_search.find_historical", "answer_params": "", "api_description": "def law_case_search.find_historical:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for a historical law case based on specific criteria like the subject and year.\n\t\n\tArguments:\n\t---------\n\t- subject : string = None (required) The subject matter of the case, e.g., 'fraud'\n\t- from_year : integer = None (required) The start year for the range of the case. The case should happen after this year.\n\t- to_year : integer = None (required) The end year for the range of the case. The case should happen before this year.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"law_case_search.find_historical\", \"description\": \"Search for a historical law case based on specific criteria like the subject and year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"subject\": {\"type\": \"string\", \"description\": \"The subject matter of the case, e.g., 'fraud'\"}, \"from_year\": {\"type\": \"integer\", \"description\": \"The start year for the range of the case. The case should happen after this year.\"}, \"to_year\": {\"type\": \"integer\", \"description\": \"The end year for the range of the case. The case should happen before this year.\"}}, \"required\": [\"subject\", \"from_year\", \"to_year\"]}}"}
{"scope": "rest", "query": "Can you show me how to get a response from the IP-API service only in Spanish and include the city, country, and ISP information?", "query_for_retrieval": "Can you show me how to get a response from the IP-API service only in Spanish and include the city, country, and ISP information?", "answer": "requests.get", "answer_params": "", "api_description": "def requests.get:\n\t\"\"\"\n\tDescription:\n\t\n\tSends a GET request to the specified URL.\n\t\n\tArguments:\n\t---------\n\t- url : string = http://ip-api.com/json (required) This schema defines the parameters for querying the IP-API service.\n\t- headers : dict = None (optional) No description available.\n\t- timeout : integer = None (optional) How many seconds to wait for the server to send data before giving up.\n\t- params : dict = None (optional) No description available.\n\t  - fields : string = None (optional) Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \n\t  - lang : string = None (optional) Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\n\t  - callback : string = None (optional) The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\n\t- allow_redirects : boolean = True (optional) A Boolean to enable/disable redirection.\n\t- auth : tuple = None (optional) A tuple to enable a certain HTTP authentication.\n\t- cert : string = None (optional) A String or Tuple specifying a cert file or key.\n\t- cookies : dict = None (optional) Dictionary of cookies to send with the request.\n\t- proxies : dict = None (optional) Dictionary of the protocol to the proxy url.\n\t- stream : boolean = False (optional) A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\n\t- verify : string = True (optional) A Boolean or a String indication to verify the servers TLS certificate or not.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"requests.get\", \"description\": \"Sends a GET request to the specified URL.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"This schema defines the parameters for querying the IP-API service.\", \"default\": \"http://ip-api.com/json\"}, \"headers\": {\"properties\": {}, \"type\": \"dict\", \"required\": []}, \"timeout\": {\"type\": \"integer\", \"description\": \"How many seconds to wait for the server to send data before giving up.\"}, \"params\": {\"properties\": {\"fields\": {\"type\": \"string\", \"description\": \"Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. \"}, \"lang\": {\"type\": \"string\", \"description\": \"Specify the language for the response. The API will default to English ('en') if this parameter is not provided.\"}, \"callback\": {\"type\": \"string\", \"description\": \"The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response.\"}}, \"type\": \"dict\", \"required\": []}, \"allow_redirects\": {\"type\": \"boolean\", \"description\": \"A Boolean to enable/disable redirection.\", \"default\": true}, \"auth\": {\"type\": \"tuple\", \"description\": \"A tuple to enable a certain HTTP authentication.\", \"default\": \"None\", \"items\": {\"type\": \"string\"}}, \"cert\": {\"type\": \"string\", \"description\": \"A String or Tuple specifying a cert file or key.\", \"default\": \"None\"}, \"cookies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of cookies to send with the request.\"}, \"proxies\": {\"type\": \"dict\", \"additionalProperties\": {\"type\": \"string\"}, \"description\": \"Dictionary of the protocol to the proxy url.\"}, \"stream\": {\"type\": \"boolean\", \"description\": \"A Boolean indication if the response should be immediately downloaded (False) or streamed (True).\", \"default\": false}, \"verify\": {\"type\": \"string\", \"description\": \"A Boolean or a String indication to verify the servers TLS certificate or not.\", \"default\": true}}, \"required\": [\"url\"]}}"}
{"scope": "parallel_function", "query": "You have four sets of numbers: the first set is [23, 45, 67, 89], the second set is [12, 34, 56, 78], the third set is [98, 76, 54, 32], and the fourth set is [87, 65, 43, 21]. Can you calculate the average of each set of numbers?", "query_for_retrieval": "You have four sets of numbers: the first set is [23, 45, 67, 89], the second set is [12, 34, 56, 78], the third set is [98, 76, 54, 32], and the fourth set is [87, 65, 43, 21]. Can you calculate the average of each set of numbers?", "answer": "calculate_average", "answer_params": "", "api_description": "def calculate_average:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the average of a list of numbers.\n\t\n\tArguments:\n\t---------\n\t- numbers : array = None (required) The list of numbers to calculate the average of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_average\", \"description\": \"Calculates the average of a list of numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"numbers\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"The list of numbers to calculate the average of.\"}}, \"required\": [\"numbers\"]}}"}
{"scope": "javascript", "query": "How can I determine the appropriate boolean string representation for the 'contenteditable' attribute when the value provided is 'plaintext-only', ensuring it's a valid value for contenteditable?", "query_for_retrieval": "How can I determine the appropriate boolean string representation for the 'contenteditable' attribute when the value provided is 'plaintext-only', ensuring it's a valid value for contenteditable?", "answer": "convertEnumeratedValue", "answer_params": "", "api_description": "def convertEnumeratedValue:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function converts a given key-value pair to a 'true' or 'false' string based on specific conditions. It specifically handles falsy values, the string 'false', and validates the 'contenteditable' attribute's value.\n\t\n\tArguments:\n\t---------\n\t- key : String = None (required) The attribute key to be evaluated.\n\t- value : String = None (required) The value associated with the key.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"convertEnumeratedValue\", \"description\": \"This function converts a given key-value pair to a 'true' or 'false' string based on specific conditions. It specifically handles falsy values, the string 'false', and validates the 'contenteditable' attribute's value.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"key\": {\"type\": \"String\", \"description\": \"The attribute key to be evaluated.\"}, \"value\": {\"type\": \"String\", \"description\": \"The value associated with the key.\"}}, \"required\": [\"key\", \"value\"]}}"}
{"scope": "simple", "query": "Get current Gold price per ounce.", "query_for_retrieval": "Get current Gold price per ounce.", "answer": "get_metal_price", "answer_params": "", "api_description": "def get_metal_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the current price for a specified metal and measure.\n\t\n\tArguments:\n\t---------\n\t- metal : string = None (required) The metal whose price needs to be fetched.\n\t- measure : string = None (required) The measure unit for price, like 'ounce' or 'kg'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_metal_price\", \"description\": \"Retrieve the current price for a specified metal and measure.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"metal\": {\"type\": \"string\", \"description\": \"The metal whose price needs to be fetched.\"}, \"measure\": {\"type\": \"string\", \"description\": \"The measure unit for price, like 'ounce' or 'kg'.\"}}, \"required\": [\"metal\", \"measure\"]}}"}
{"scope": "parallel_function", "query": "Find an Italian restaurant near me in New York that provides vegetarian food options and a Japanese sushi restaurant in Los Angeles that offers delivery service.", "query_for_retrieval": "Find an Italian restaurant near me in New York that provides vegetarian food options and a Japanese sushi restaurant in Los Angeles that offers delivery service.", "answer": "restaurant_finder", "answer_params": "", "api_description": "def restaurant_finder:\n\t\"\"\"\n\tDescription:\n\t\n\tSearch for restaurants based on location, cuisine type and other preferences.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) City and state, e.g. New York, NY.\n\t- cuisine : string = None (required) Type of cuisine the user is interested in, e.g. Italian, Japanese etc.\n\t- preferences : array = None (optional) Extra features in the restaurant. default is ['Delivery'].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"restaurant_finder\", \"description\": \"Search for restaurants based on location, cuisine type and other preferences.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"City and state, e.g. New York, NY.\"}, \"cuisine\": {\"type\": \"string\", \"description\": \"Type of cuisine the user is interested in, e.g. Italian, Japanese etc.\"}, \"preferences\": {\"type\": \"array\", \"items\": {\"type\": \"string\", \"enum\": [\"Vegetarian\", \"Delivery\", \"Vegan\", \"Takeout\"]}, \"description\": \"Extra features in the restaurant. default is ['Delivery'].\"}}, \"required\": [\"location\", \"cuisine\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm currently analyzing some stocks and need to match them with their corresponding companies. Can you provide me with the company names for the stocks with the symbols 'AAPL', 'GOOGL', 'AMZN', and 'MSFT'? I need to look into each one for my financial report.", "query_for_retrieval": "I'm currently analyzing some stocks and need to match them with their corresponding companies. Can you provide me with the company names for the stocks with the symbols 'AAPL', 'GOOGL', 'AMZN', and 'MSFT'? I need to look into each one for my financial report.", "answer": "get_company_name_by_stock_name", "answer_params": "", "api_description": "def get_company_name_by_stock_name:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the company name of a stock by its stock name.\n\t\n\tArguments:\n\t---------\n\t- stock_name : string = None (required) The stock name of the product, in the format of the stock symbol.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_company_name_by_stock_name\", \"description\": \"Finds the company name of a stock by its stock name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"stock_name\": {\"type\": \"string\", \"description\": \"The stock name of the product, in the format of the stock symbol.\"}}, \"required\": [\"stock_name\"]}}"}
{"scope": "simple", "query": "Find information about the opening hours of the Metropolitan Museum of Art.", "query_for_retrieval": "Find information about the opening hours of the Metropolitan Museum of Art.", "answer": "museum_info", "answer_params": "", "api_description": "def museum_info:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve information about the opening hours of a museum based on its name.\n\t\n\tArguments:\n\t---------\n\t- museum_name : string = None (required) The name of the museum.\n\t- info_type : string = opening_hours (optional) The type of information needed about the museum.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"museum_info\", \"description\": \"Retrieve information about the opening hours of a museum based on its name.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"museum_name\": {\"type\": \"string\", \"description\": \"The name of the museum.\"}, \"info_type\": {\"type\": \"string\", \"description\": \"The type of information needed about the museum.\", \"default\": \"opening_hours\"}}, \"required\": [\"museum_name\"]}}"}
{"scope": "javascript", "query": "How can I create a queue with a myWorkerFunction that processes tasks, setting the concurrency level to 5 and without specifying a payload size?", "query_for_retrieval": "How can I create a queue with a myWorkerFunction that processes tasks, setting the concurrency level to 5 and without specifying a payload size?", "answer": "queue_1", "answer_params": "", "api_description": "def queue_1:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function creates a queue object with a specified worker function and concurrency level. It allows for tasks to be added to the queue and processed according to the concurrency level. Optional payload size can be specified to limit the number of tasks processed per worker call.\n\t\n\tArguments:\n\t---------\n\t- worker : any = None (required) The worker function that processes each task.\n\t- concurrency : float = None (required) The maximum number of tasks to be processed concurrently.\n\t- payload : float = None (optional) Optional. The number of tasks each worker function call should process at most. Default 0.0\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"queue_1\", \"description\": \"This function creates a queue object with a specified worker function and concurrency level. It allows for tasks to be added to the queue and processed according to the concurrency level. Optional payload size can be specified to limit the number of tasks processed per worker call.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"worker\": {\"type\": \"any\", \"description\": \"The worker function that processes each task.\"}, \"concurrency\": {\"type\": \"float\", \"description\": \"The maximum number of tasks to be processed concurrently.\"}, \"payload\": {\"type\": \"float\", \"description\": \"Optional. The number of tasks each worker function call should process at most. Default 0.0\"}}, \"required\": [\"worker\", \"concurrency\"]}}"}
{"scope": "simple", "query": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "query_for_retrieval": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "answer": "lawsuit_details.find", "answer_params": "", "api_description": "def lawsuit_details.find:\n\t\"\"\"\n\tDescription:\n\t\n\tFind details of lawsuits involving a specific company from a given year.\n\t\n\tArguments:\n\t---------\n\t- company_name : string = None (required) Name of the company.\n\t- year : integer = None (required) Year of the lawsuit.\n\t- case_type : string = None (optional) Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"lawsuit_details.find\", \"description\": \"Find details of lawsuits involving a specific company from a given year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_name\": {\"type\": \"string\", \"description\": \"Name of the company.\"}, \"year\": {\"type\": \"integer\", \"description\": \"Year of the lawsuit.\"}, \"case_type\": {\"type\": \"string\", \"description\": \"Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'.\"}}, \"required\": [\"company_name\", \"year\"]}}"}
{"scope": "executable_simple", "query": "I have an 80-year-old female client who is 170 cm tall, weighs 59 kg, and is quite active with an activity level of 4. She's looking to reduce her weight. Could you calculate her daily nutritional needs based on these details?", "query_for_retrieval": "I have an 80-year-old female client who is 170 cm tall, weighs 59 kg, and is quite active with an activity level of 4. She's looking to reduce her weight. Could you calculate her daily nutritional needs based on these details?", "answer": "calculate_nutritional_needs", "answer_params": "", "api_description": "def calculate_nutritional_needs:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\n\t\n\tArguments:\n\t---------\n\t- weight : float = None (required) The weight of the person in kilograms.\n\t- height : float = None (required) The height of the person in centimeters.\n\t- age : float = None (required) The age of the person in years.\n\t- gender : string = None (required) The gender of the person. Possible options [male, female, other].\n\t- activity_level : integer = None (required) The activity level of the person. Possible options [1,2,3,4,5].\n\t- goal : string = None (required) The goal of the person. Possible options [lose, gain, maintain].\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_nutritional_needs\", \"description\": \"Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"weight\": {\"type\": \"float\", \"description\": \"The weight of the person in kilograms.\"}, \"height\": {\"type\": \"float\", \"description\": \"The height of the person in centimeters.\"}, \"age\": {\"type\": \"float\", \"description\": \"The age of the person in years.\"}, \"gender\": {\"type\": \"string\", \"description\": \"The gender of the person. Possible options [male, female, other].\"}, \"activity_level\": {\"type\": \"integer\", \"description\": \"The activity level of the person. Possible options [1,2,3,4,5].\"}, \"goal\": {\"type\": \"string\", \"description\": \"The goal of the person. Possible options [lose, gain, maintain].\"}}, \"required\": [\"weight\", \"height\", \"age\", \"gender\", \"activity_level\", \"goal\"]}}"}
{"scope": "simple", "query": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California.", "query_for_retrieval": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California.", "answer": "criminal_history.check_felonies", "answer_params": "", "api_description": "def criminal_history.check_felonies:\n\t\"\"\"\n\tDescription:\n\t\n\tThis function checks if an individual has any prior felony convictions based on their full name and birth date.\n\t\n\tArguments:\n\t---------\n\t- full_name : string = None (required) The full name of the individual.\n\t- birth_date : string = None (required) The birth date of the individual. Must be in MM-DD-YYYY format.\n\t- state : string = None (optional) The state to search the criminal record in. Default to 'None', which the function will search across all states.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"criminal_history.check_felonies\", \"description\": \"This function checks if an individual has any prior felony convictions based on their full name and birth date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"full_name\": {\"type\": \"string\", \"description\": \"The full name of the individual.\"}, \"birth_date\": {\"type\": \"string\", \"description\": \"The birth date of the individual. Must be in MM-DD-YYYY format.\"}, \"state\": {\"type\": \"string\", \"description\": \"The state to search the criminal record in. Default to 'None', which the function will search across all states.\"}}, \"required\": [\"full_name\", \"birth_date\"]}}"}
{"scope": "executable_multiple_function", "query": "I'm working on a product review article and I need some information about an item sold on Amazon. The only detail I have is the ASIN: 'B08BHXG144'. I need to find out the product's name associated with this ASIN to include in my write-up. Can you help me retrieve the name of this product?", "query_for_retrieval": "I'm working on a product review article and I need some information about an item sold on Amazon. The only detail I have is the ASIN: 'B08BHXG144'. I need to find out the product's name associated with this ASIN to include in my write-up. Can you help me retrieve the name of this product?", "answer": "get_product_name_by_amazon_ASIN", "answer_params": "", "api_description": "def get_product_name_by_amazon_ASIN:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the price of a product by its Amazon ASIN.\n\t\n\tArguments:\n\t---------\n\t- ASIN : string = None (required) The Amazon ASIN of the product.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_product_name_by_amazon_ASIN\", \"description\": \"Finds the price of a product by its Amazon ASIN.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ASIN\": {\"type\": \"string\", \"description\": \"The Amazon ASIN of the product.\"}}, \"required\": [\"ASIN\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm engaged in a study on electrostatic interactions and I'm currently analyzing how different charged objects behave under various voltages. For my experiment, I have a proton with a charge of 1.6 x 10^-19 Coulombs in a 500 Volt field, an electron with a charge of -1.6 x 10^-19 Coulombs in a 1000 Volt field, and a neutron, which essentially has no charge, in a 2000 Volt field. I need to calculate the electrostatic potential energy for each of these scenarios. Can we run these calculations?", "query_for_retrieval": "I'm engaged in a study on electrostatic interactions and I'm currently analyzing how different charged objects behave under various voltages. For my experiment, I have a proton with a charge of 1.6 x 10^-19 Coulombs in a 500 Volt field, an electron with a charge of -1.6 x 10^-19 Coulombs in a 1000 Volt field, and a neutron, which essentially has no charge, in a 2000 Volt field. I need to calculate the electrostatic potential energy for each of these scenarios. Can we run these calculations?", "answer": "calculate_electrostatic_potential_energy", "answer_params": "", "api_description": "def calculate_electrostatic_potential_energy:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the electrostatic potential energy.\n\t\n\tArguments:\n\t---------\n\t- charge : float = None (required) The charge of the object, in coulombs.\n\t- voltage : float = None (required) The voltage of the object, in volts.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_electrostatic_potential_energy\", \"description\": \"Calculates the electrostatic potential energy.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"charge\": {\"type\": \"float\", \"description\": \"The charge of the object, in coulombs.\"}, \"voltage\": {\"type\": \"float\", \"description\": \"The voltage of the object, in volts.\"}}, \"required\": [\"charge\", \"voltage\"]}}"}
{"scope": "executable_simple", "query": "I've been expanding my slang vocabulary, and I keep hearing the word \"lit\" pop up in conversations. It's not a term I'm familiar with, and I'm curious about its meaning. Can you find out what \"lit\" means on Urban Dictionary for me?", "query_for_retrieval": "I've been expanding my slang vocabulary, and I keep hearing the word \"lit\" pop up in conversations. It's not a term I'm familiar with, and I'm curious about its meaning. Can you find out what \"lit\" means on Urban Dictionary for me?", "answer": "find_term_on_urban_dictionary", "answer_params": "", "api_description": "def find_term_on_urban_dictionary:\n\t\"\"\"\n\tDescription:\n\t\n\tFinds the definition of a term on Urban Dictionary.\n\t\n\tArguments:\n\t---------\n\t- term : string = None (required) The term to find the definition of.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"find_term_on_urban_dictionary\", \"description\": \"Finds the definition of a term on Urban Dictionary.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"term\": {\"type\": \"string\", \"description\": \"The term to find the definition of.\"}}, \"required\": [\"term\"]}}"}
{"scope": "relevance", "query": "How do I get the latests news in sports.", "query_for_retrieval": "How do I get the latests news in sports.", "answer": "investment_trend_analysis", "answer_params": "", "api_description": "def investment_trend_analysis:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyze the trend of a user's investment portfolio based on its history data.\n\t\n\tArguments:\n\t---------\n\t- investment_data : string = None (required) The historical data of the user's investment portfolio.\n\t- time_interval : string = None (required) The time interval of trend analysis, e.g. daily, monthly, yearly.\n\t- display_graph : boolean = None (optional) If true, generate a graphical representation of the analysis. Defaults to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"investment_trend_analysis\", \"description\": \"Analyze the trend of a user's investment portfolio based on its history data.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"investment_data\": {\"type\": \"string\", \"description\": \"The historical data of the user's investment portfolio.\"}, \"time_interval\": {\"type\": \"string\", \"description\": \"The time interval of trend analysis, e.g. daily, monthly, yearly.\"}, \"display_graph\": {\"type\": \"boolean\", \"description\": \"If true, generate a graphical representation of the analysis. Defaults to false.\"}}, \"required\": [\"investment_data\", \"time_interval\"]}}"}
{"scope": "parallel_multiple_function", "query": "Find the conviction status of a criminal with name John Doe in New York, also find the nature of the criminal offenses he committed.", "query_for_retrieval": "Find the conviction status of a criminal with name John Doe in New York, also find the nature of the criminal offenses he committed.", "answer": "criminal_record.get_offense_nature", "answer_params": "", "api_description": "def criminal_record.get_offense_nature:\n\t\"\"\"\n\tDescription:\n\t\n\tGet details about the nature of offenses committed by a criminal.\n\t\n\tArguments:\n\t---------\n\t- criminal_name : string = None (required) Name of the criminal.\n\t- optional_param : boolean = None (optional) Optionally retrieve additional details, by default this is set to false.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"criminal_record.get_offense_nature\", \"description\": \"Get details about the nature of offenses committed by a criminal.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"criminal_name\": {\"type\": \"string\", \"description\": \"Name of the criminal.\"}, \"optional_param\": {\"type\": \"boolean\", \"description\": \"Optionally retrieve additional details, by default this is set to false.\"}}, \"required\": [\"criminal_name\"]}}"}
{"scope": "parallel_multiple_function", "query": "\"Could you please help me with the following tasks? First, I would like to know the top 5 defence ranking NBA teams from the 2018 season. Second, I have a list of numbers [23, 45, 12, 89, 34, 67, 29] that I need to be sorted in descending order. Lastly, I am curious about the Compound Annual Growth Rate (CAGR) of an investment I made. The initial investment value was $5000, the final investment value turned out to be $15000, and the period of the investment was 7 years. Could you calculate this for me?\"", "query_for_retrieval": "\"Could you please help me with the following tasks? First, I would like to know the top 5 defence ranking NBA teams from the 2018 season. Second, I have a list of numbers [23, 45, 12, 89, 34, 67, 29] that I need to be sorted in descending order. Lastly, I am curious about the Compound Annual Growth Rate (CAGR) of an investment I made. The initial investment value was $5000, the final investment value turned out to be $15000, and the period of the investment was 7 years. Could you calculate this for me?\"", "answer": "calculate_cagr", "answer_params": "", "api_description": "def calculate_cagr:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n\t\n\tArguments:\n\t---------\n\t- initial_value : integer = None (required) The initial investment value.\n\t- final_value : integer = None (required) The final investment value.\n\t- period_in_years : integer = None (required) The period of the investment in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"calculate_cagr\", \"description\": \"Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"initial_value\": {\"type\": \"integer\", \"description\": \"The initial investment value.\"}, \"final_value\": {\"type\": \"integer\", \"description\": \"The final investment value.\"}, \"period_in_years\": {\"type\": \"integer\", \"description\": \"The period of the investment in years.\"}}, \"required\": [\"initial_value\", \"final_value\", \"period_in_years\"]}}"}
{"scope": "java", "query": "How can I create a child runtime field for a composite field named 'compositeField1' in Elasticsearch, using the parser context 'mappingParserContext', with the parent script factory 'compositeScriptFactory' and handling script errors with 'onScriptError.IGNORE'?", "query_for_retrieval": "How can I create a child runtime field for a composite field named 'compositeField1' in Elasticsearch, using the parser context 'mappingParserContext', with the parent script factory 'compositeScriptFactory' and handling script errors with 'onScriptError.IGNORE'?", "answer": "CompositeRuntimeField.createChildRuntimeField", "answer_params": "", "api_description": "def CompositeRuntimeField.createChildRuntimeField:\n\t\"\"\"\n\tDescription:\n\t\n\tAttempts to create a child runtime field for a composite field, but since composite fields cannot have children, it throws an IllegalArgumentException.\n\t\n\tArguments:\n\t---------\n\t- parserContext : any = None (required) The context used for parsing the mapping.\n\t- parent : String = None (required) The name of the parent field.\n\t- parentScriptFactory : any = None (required) A factory function to create a script for the parent composite field.\n\t- onScriptError : any = None (required) The strategy for handling script errors.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"CompositeRuntimeField.createChildRuntimeField\", \"description\": \"Attempts to create a child runtime field for a composite field, but since composite fields cannot have children, it throws an IllegalArgumentException.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"parserContext\": {\"type\": \"any\", \"description\": \"The context used for parsing the mapping.\"}, \"parent\": {\"type\": \"String\", \"description\": \"The name of the parent field.\"}, \"parentScriptFactory\": {\"type\": \"any\", \"description\": \"A factory function to create a script for the parent composite field.\"}, \"onScriptError\": {\"type\": \"any\", \"description\": \"The strategy for handling script errors.\"}}, \"required\": [\"parserContext\", \"parent\", \"parentScriptFactory\", \"onScriptError\"]}}"}
{"scope": "multiple_function", "query": "What is the price to commission a sculpture made of marble with a size of 3 feet?", "query_for_retrieval": "What is the price to commission a sculpture made of marble with a size of 3 feet?", "answer": "sculptor_info.get", "answer_params": "", "api_description": "def sculptor_info.get:\n\t\"\"\"\n\tDescription:\n\t\n\tGet information about a specific sculptor.\n\t\n\tArguments:\n\t---------\n\t- name : string = None (required) The name of the sculptor.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sculptor_info.get\", \"description\": \"Get information about a specific sculptor.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"name\": {\"type\": \"string\", \"description\": \"The name of the sculptor.\"}}, \"required\": [\"name\"]}}"}
{"scope": "simple", "query": "What's the current stock price of Apple and Microsoft?", "query_for_retrieval": "What's the current stock price of Apple and Microsoft?", "answer": "get_stock_price", "answer_params": "", "api_description": "def get_stock_price:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieves the current stock price of the specified companies\n\t\n\tArguments:\n\t---------\n\t- company_names : array = None (required) The list of companies for which to retrieve the stock price.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"get_stock_price\", \"description\": \"Retrieves the current stock price of the specified companies\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_names\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The list of companies for which to retrieve the stock price.\"}}, \"required\": [\"company_names\"]}}"}
{"scope": "parallel_function", "query": "Can you help me find vegan restaurants in Los Angeles, CA that are open until at least 22:00, and then do the same for San Francisco, CA and Seattle, WA?", "query_for_retrieval": "Can you help me find vegan restaurants in Los Angeles, CA that are open until at least 22:00, and then do the same for San Francisco, CA and Seattle, WA?", "answer": "vegan_restaurant.find_nearby", "answer_params": "", "api_description": "def vegan_restaurant.find_nearby:\n\t\"\"\"\n\tDescription:\n\t\n\tLocate nearby vegan restaurants based on specific criteria like operating hours.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The city and state, e.g. New York, NY\n\t- operating_hours : integer = 21 (optional) Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"vegan_restaurant.find_nearby\", \"description\": \"Locate nearby vegan restaurants based on specific criteria like operating hours.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The city and state, e.g. New York, NY\"}, \"operating_hours\": {\"type\": \"integer\", \"description\": \"Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format.\", \"default\": 21}}, \"required\": [\"location\"]}}"}
{"scope": "executable_parallel_function", "query": "I'm evaluating several mortgage options and need to calculate the monthly payments for different loan scenarios. Here's what I need:\n\nFirst, for a $350,000 loan with a 3.5% interest rate spread over 30 years.\nNext, a $500,000 loan with a 4% interest rate, but this time over 20 years.\nThen, for a $750,000 loan at a 2.5% interest rate with a term of 15 years.\nAnd lastly, I'm looking at a $1,000,000 loan at a 3% interest rate to be paid off in 10 years.\n\nCould you provide me the monthly payment amounts for each of these loans?", "query_for_retrieval": "I'm evaluating several mortgage options and need to calculate the monthly payments for different loan scenarios. Here's what I need:\n\nFirst, for a $350,000 loan with a 3.5% interest rate spread over 30 years.\nNext, a $500,000 loan with a 4% interest rate, but this time over 20 years.\nThen, for a $750,000 loan at a 2.5% interest rate with a term of 15 years.\nAnd lastly, I'm looking at a $1,000,000 loan at a 3% interest rate to be paid off in 10 years.\n\nCould you provide me the monthly payment amounts for each of these loans?", "answer": "mortgage_calculator", "answer_params": "", "api_description": "def mortgage_calculator:\n\t\"\"\"\n\tDescription:\n\t\n\tCalculates the monthly mortgage payment.\n\t\n\tArguments:\n\t---------\n\t- loan_amount : float = None (required) The amount of the loan.\n\t- interest_rate : float = None (required) The interest rate of the loan, ranging from 0 to 1.\n\t- loan_period : integer = None (required) The period of the loan, in years.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"mortgage_calculator\", \"description\": \"Calculates the monthly mortgage payment.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"loan_amount\": {\"type\": \"float\", \"description\": \"The amount of the loan.\"}, \"interest_rate\": {\"type\": \"float\", \"description\": \"The interest rate of the loan, ranging from 0 to 1.\"}, \"loan_period\": {\"type\": \"integer\", \"description\": \"The period of the loan, in years.\"}}, \"required\": [\"loan_amount\", \"interest_rate\", \"loan_period\"]}}"}
{"scope": "simple", "query": "Fetch details of a law case with number 43403 in New York court for year 2018.", "query_for_retrieval": "Fetch details of a law case with number 43403 in New York court for year 2018.", "answer": "fetch_law_case_details", "answer_params": "", "api_description": "def fetch_law_case_details:\n\t\"\"\"\n\tDescription:\n\t\n\tFetch details of a specific law case based on case number, year and court.\n\t\n\tArguments:\n\t---------\n\t- case_number : integer = None (required) The specific number of the law case.\n\t- court : string = None (required) The city name where the court takes place\n\t- year : integer = None (required) The year in which the law case took place.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"fetch_law_case_details\", \"description\": \"Fetch details of a specific law case based on case number, year and court.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"case_number\": {\"type\": \"integer\", \"description\": \"The specific number of the law case.\"}, \"court\": {\"type\": \"string\", \"description\": \"The city name where the court takes place\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year in which the law case took place.\"}}, \"required\": [\"case_number\", \"court\", \"year\"]}}"}
{"scope": "simple", "query": "What was the full name king of England in 1800?", "query_for_retrieval": "What was the full name king of England in 1800?", "answer": "monarch.getMonarchOfYear", "answer_params": "", "api_description": "def monarch.getMonarchOfYear:\n\t\"\"\"\n\tDescription:\n\t\n\tRetrieve the monarch of a specific location during a specified year.\n\t\n\tArguments:\n\t---------\n\t- location : string = None (required) The location (e.g., country) whose monarch needs to be found.\n\t- year : integer = None (required) The year to search the monarch.\n\t- fullName : boolean = False (optional) If true, returns the full name and title of the monarch.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"monarch.getMonarchOfYear\", \"description\": \"Retrieve the monarch of a specific location during a specified year.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location (e.g., country) whose monarch needs to be found.\"}, \"year\": {\"type\": \"integer\", \"description\": \"The year to search the monarch.\"}, \"fullName\": {\"type\": \"boolean\", \"default\": false, \"description\": \"If true, returns the full name and title of the monarch.\"}}, \"required\": [\"location\", \"year\"]}}"}
{"scope": "sql", "query": "Can you create a database table named \"PhysicsExperiments\" with columns \"ExperimentID\", \"ExperimentName\", \"Researcher\", \"DateConducted\", \"Result\" to store the details of physics experiments conducted in our lab?", "query_for_retrieval": "Can you create a database table named \"PhysicsExperiments\" with columns \"ExperimentID\", \"ExperimentName\", \"Researcher\", \"DateConducted\", \"Result\" to store the details of physics experiments conducted in our lab?", "answer": "sql.execute", "answer_params": "", "api_description": "def sql.execute:\n\t\"\"\"\n\tDescription:\n\t\n\tExecute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\n\t\n\tArguments:\n\t---------\n\t- sql_keyword : string = None (required) The SQL keyword to define the type of operation.\n\t- table_name : string = None (required) The name of the database table to operate on.\n\t- columns : array = None (optional) The column names involved in the SQL operation. If not specified use '*' to represent all columns.\n\t- insert_values : array = None (optional) Values of an INSERT statement.\n\t- update_values : array = None (optional) Values of an UPDATE statement corresponding to columns to set.\n\t- conditions : array = None (optional) Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"sql.execute\", \"description\": \"Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"sql_keyword\": {\"type\": \"string\", \"enum\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE\"], \"description\": \"The SQL keyword to define the type of operation.\"}, \"table_name\": {\"type\": \"string\", \"description\": \"The name of the database table to operate on.\"}, \"columns\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"The column names involved in the SQL operation. If not specified use '*' to represent all columns.\"}, \"insert_values\": {\"type\": \"array\", \"description\": \"Values of an INSERT statement.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"update_values\": {\"type\": \"array\", \"description\": \"Values of an UPDATE statement corresponding to columns to set.\", \"items\": {\"type\": \"string\"}}, \"conditions\": {\"type\": \"array\", \"description\": \"Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of ['cond1 > val1', 'cond2 = val2', 'cond3<val3'] and etc.\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}, \"required\": [\"sql_keyword\", \"table_name\"]}}"}
{"scope": "simple", "query": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "query_for_retrieval": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "answer": "analyze_structure", "answer_params": "", "api_description": "def analyze_structure:\n\t\"\"\"\n\tDescription:\n\t\n\tAnalyze a structure of a building based on its Id and floor numbers.\n\t\n\tArguments:\n\t---------\n\t- building_id : string = None (required) The unique identification number of the building.\n\t- floors : array = None (required) Floor numbers to be analyzed.\n\t- mode : string = None (optional) Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\n\t\n\t\n\t\"\"\"", "api_params": "{\"name\": \"analyze_structure\", \"description\": \"Analyze a structure of a building based on its Id and floor numbers.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"building_id\": {\"type\": \"string\", \"description\": \"The unique identification number of the building.\"}, \"floors\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}, \"description\": \"Floor numbers to be analyzed.\"}, \"mode\": {\"type\": \"string\", \"description\": \"Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\"}}, \"required\": [\"building_id\", \"floors\"]}}"}
